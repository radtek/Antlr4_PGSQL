
// Generated from MySqlParser.g4 by ANTLR 4.7


#include "MySqlParserListener.h"

#include "MySqlParser.h"


using namespace antlrcpp;
using namespace antlr4;

MySqlParser::MySqlParser(TokenStream *input) : Parser(input) {
  _interpreter = new atn::ParserATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

MySqlParser::~MySqlParser() {
  delete _interpreter;
}

std::string MySqlParser::getGrammarFileName() const {
  return "MySqlParser.g4";
}

const std::vector<std::string>& MySqlParser::getRuleNames() const {
  return _ruleNames;
}

dfa::Vocabulary& MySqlParser::getVocabulary() const {
  return _vocabulary;
}


//----------------- RootContext ------------------------------------------------------------------

MySqlParser::RootContext::RootContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::RootContext::EOF() {
  return getToken(MySqlParser::EOF, 0);
}

MySqlParser::Sql_statementsContext* MySqlParser::RootContext::sql_statements() {
  return getRuleContext<MySqlParser::Sql_statementsContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::RootContext::MINUS() {
  return getTokens(MySqlParser::MINUS);
}

tree::TerminalNode* MySqlParser::RootContext::MINUS(size_t i) {
  return getToken(MySqlParser::MINUS, i);
}


size_t MySqlParser::RootContext::getRuleIndex() const {
  return MySqlParser::RuleRoot;
}

void MySqlParser::RootContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoot(this);
}

void MySqlParser::RootContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoot(this);
}
///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
MySqlParser::RootContext* MySqlParser::root() {
  RootContext *_localctx = _tracker.createInstance<RootContext>(_ctx, getState());
  enterRule(_localctx, 0, MySqlParser::RuleRoot);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(575);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySqlParser::ALTER)
      | (1ULL << MySqlParser::ANALYZE)
      | (1ULL << MySqlParser::CALL)
      | (1ULL << MySqlParser::CHANGE)
      | (1ULL << MySqlParser::CHECK)
      | (1ULL << MySqlParser::CREATE)
      | (1ULL << MySqlParser::DELETE)
      | (1ULL << MySqlParser::DESC)
      | (1ULL << MySqlParser::DESCRIBE)
      | (1ULL << MySqlParser::DROP)
      | (1ULL << MySqlParser::EXPLAIN)
      | (1ULL << MySqlParser::GRANT))) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::INSERT - 71))
      | (1ULL << (MySqlParser::KILL - 71))
      | (1ULL << (MySqlParser::LOAD - 71))
      | (1ULL << (MySqlParser::LOCK - 71))
      | (1ULL << (MySqlParser::OPTIMIZE - 71))
      | (1ULL << (MySqlParser::PURGE - 71))
      | (1ULL << (MySqlParser::RELEASE - 71))
      | (1ULL << (MySqlParser::RENAME - 71))
      | (1ULL << (MySqlParser::REPLACE - 71))
      | (1ULL << (MySqlParser::REVOKE - 71))
      | (1ULL << (MySqlParser::SELECT - 71))
      | (1ULL << (MySqlParser::SET - 71))
      | (1ULL << (MySqlParser::SHOW - 71)))) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & ((1ULL << (MySqlParser::UNLOCK - 156))
      | (1ULL << (MySqlParser::UPDATE - 156))
      | (1ULL << (MySqlParser::USE - 156)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 257)) & ((1ULL << (MySqlParser::BEGIN - 257))
      | (1ULL << (MySqlParser::BINLOG - 257))
      | (1ULL << (MySqlParser::CACHE - 257))
      | (1ULL << (MySqlParser::CHECKSUM - 257))
      | (1ULL << (MySqlParser::COMMIT - 257))
      | (1ULL << (MySqlParser::DEALLOCATE - 257))
      | (1ULL << (MySqlParser::DO - 257)))) != 0) || ((((_la - 330) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 330)) & ((1ULL << (MySqlParser::FLUSH - 330))
      | (1ULL << (MySqlParser::HANDLER - 330))
      | (1ULL << (MySqlParser::HELP - 330))
      | (1ULL << (MySqlParser::INSTALL - 330)))) != 0) || ((((_la - 438) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 438)) & ((1ULL << (MySqlParser::PREPARE - 438))
      | (1ULL << (MySqlParser::REPAIR - 438))
      | (1ULL << (MySqlParser::RESET - 438))
      | (1ULL << (MySqlParser::ROLLBACK - 438))
      | (1ULL << (MySqlParser::SAVEPOINT - 438))
      | (1ULL << (MySqlParser::START - 438)))) != 0) || ((((_la - 505) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 505)) & ((1ULL << (MySqlParser::STOP - 505))
      | (1ULL << (MySqlParser::TRUNCATE - 505))
      | (1ULL << (MySqlParser::UNINSTALL - 505))
      | (1ULL << (MySqlParser::XA - 505))
      | (1ULL << (MySqlParser::EXECUTE - 505))
      | (1ULL << (MySqlParser::SHUTDOWN - 505)))) != 0) || _la == MySqlParser::LR_BRACKET

    || _la == MySqlParser::SEMI) {
      setState(574);
      sql_statements();
    }
    setState(579);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::MINUS) {
      setState(577);
      match(MySqlParser::MINUS);
      setState(578);
      match(MySqlParser::MINUS);
    }
    setState(581);
    match(MySqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sql_statementsContext ------------------------------------------------------------------

MySqlParser::Sql_statementsContext::Sql_statementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Sql_statementContext *> MySqlParser::Sql_statementsContext::sql_statement() {
  return getRuleContexts<MySqlParser::Sql_statementContext>();
}

MySqlParser::Sql_statementContext* MySqlParser::Sql_statementsContext::sql_statement(size_t i) {
  return getRuleContext<MySqlParser::Sql_statementContext>(i);
}

std::vector<MySqlParser::Empty_statementContext *> MySqlParser::Sql_statementsContext::empty_statement() {
  return getRuleContexts<MySqlParser::Empty_statementContext>();
}

MySqlParser::Empty_statementContext* MySqlParser::Sql_statementsContext::empty_statement(size_t i) {
  return getRuleContext<MySqlParser::Empty_statementContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::Sql_statementsContext::SEMI() {
  return getTokens(MySqlParser::SEMI);
}

tree::TerminalNode* MySqlParser::Sql_statementsContext::SEMI(size_t i) {
  return getToken(MySqlParser::SEMI, i);
}

std::vector<tree::TerminalNode *> MySqlParser::Sql_statementsContext::MINUS() {
  return getTokens(MySqlParser::MINUS);
}

tree::TerminalNode* MySqlParser::Sql_statementsContext::MINUS(size_t i) {
  return getToken(MySqlParser::MINUS, i);
}


size_t MySqlParser::Sql_statementsContext::getRuleIndex() const {
  return MySqlParser::RuleSql_statements;
}

void MySqlParser::Sql_statementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSql_statements(this);
}

void MySqlParser::Sql_statementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSql_statements(this);
}

MySqlParser::Sql_statementsContext* MySqlParser::sql_statements() {
  Sql_statementsContext *_localctx = _tracker.createInstance<Sql_statementsContext>(_ctx, getState());
  enterRule(_localctx, 2, MySqlParser::RuleSql_statements);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(593);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(591);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::ALTER:
          case MySqlParser::ANALYZE:
          case MySqlParser::CALL:
          case MySqlParser::CHANGE:
          case MySqlParser::CHECK:
          case MySqlParser::CREATE:
          case MySqlParser::DELETE:
          case MySqlParser::DESC:
          case MySqlParser::DESCRIBE:
          case MySqlParser::DROP:
          case MySqlParser::EXPLAIN:
          case MySqlParser::GRANT:
          case MySqlParser::INSERT:
          case MySqlParser::KILL:
          case MySqlParser::LOAD:
          case MySqlParser::LOCK:
          case MySqlParser::OPTIMIZE:
          case MySqlParser::PURGE:
          case MySqlParser::RELEASE:
          case MySqlParser::RENAME:
          case MySqlParser::REPLACE:
          case MySqlParser::REVOKE:
          case MySqlParser::SELECT:
          case MySqlParser::SET:
          case MySqlParser::SHOW:
          case MySqlParser::UNLOCK:
          case MySqlParser::UPDATE:
          case MySqlParser::USE:
          case MySqlParser::BEGIN:
          case MySqlParser::BINLOG:
          case MySqlParser::CACHE:
          case MySqlParser::CHECKSUM:
          case MySqlParser::COMMIT:
          case MySqlParser::DEALLOCATE:
          case MySqlParser::DO:
          case MySqlParser::FLUSH:
          case MySqlParser::HANDLER:
          case MySqlParser::HELP:
          case MySqlParser::INSTALL:
          case MySqlParser::PREPARE:
          case MySqlParser::REPAIR:
          case MySqlParser::RESET:
          case MySqlParser::ROLLBACK:
          case MySqlParser::SAVEPOINT:
          case MySqlParser::START:
          case MySqlParser::STOP:
          case MySqlParser::TRUNCATE:
          case MySqlParser::UNINSTALL:
          case MySqlParser::XA:
          case MySqlParser::EXECUTE:
          case MySqlParser::SHUTDOWN:
          case MySqlParser::LR_BRACKET: {
            setState(583);
            sql_statement();
            setState(586);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySqlParser::MINUS) {
              setState(584);
              match(MySqlParser::MINUS);
              setState(585);
              match(MySqlParser::MINUS);
            }
            setState(588);
            match(MySqlParser::SEMI);
            break;
          }

          case MySqlParser::SEMI: {
            setState(590);
            empty_statement();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(595);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    }
    setState(605);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ALTER:
      case MySqlParser::ANALYZE:
      case MySqlParser::CALL:
      case MySqlParser::CHANGE:
      case MySqlParser::CHECK:
      case MySqlParser::CREATE:
      case MySqlParser::DELETE:
      case MySqlParser::DESC:
      case MySqlParser::DESCRIBE:
      case MySqlParser::DROP:
      case MySqlParser::EXPLAIN:
      case MySqlParser::GRANT:
      case MySqlParser::INSERT:
      case MySqlParser::KILL:
      case MySqlParser::LOAD:
      case MySqlParser::LOCK:
      case MySqlParser::OPTIMIZE:
      case MySqlParser::PURGE:
      case MySqlParser::RELEASE:
      case MySqlParser::RENAME:
      case MySqlParser::REPLACE:
      case MySqlParser::REVOKE:
      case MySqlParser::SELECT:
      case MySqlParser::SET:
      case MySqlParser::SHOW:
      case MySqlParser::UNLOCK:
      case MySqlParser::UPDATE:
      case MySqlParser::USE:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::CACHE:
      case MySqlParser::CHECKSUM:
      case MySqlParser::COMMIT:
      case MySqlParser::DEALLOCATE:
      case MySqlParser::DO:
      case MySqlParser::FLUSH:
      case MySqlParser::HANDLER:
      case MySqlParser::HELP:
      case MySqlParser::INSTALL:
      case MySqlParser::PREPARE:
      case MySqlParser::REPAIR:
      case MySqlParser::RESET:
      case MySqlParser::ROLLBACK:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::START:
      case MySqlParser::STOP:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNINSTALL:
      case MySqlParser::XA:
      case MySqlParser::EXECUTE:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::LR_BRACKET: {
        setState(596);
        sql_statement();
        setState(602);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
        case 1: {
          setState(599);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::MINUS) {
            setState(597);
            match(MySqlParser::MINUS);
            setState(598);
            match(MySqlParser::MINUS);
          }
          setState(601);
          match(MySqlParser::SEMI);
          break;
        }

        }
        break;
      }

      case MySqlParser::SEMI: {
        setState(604);
        empty_statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sql_statementContext ------------------------------------------------------------------

MySqlParser::Sql_statementContext::Sql_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Ddl_statementContext* MySqlParser::Sql_statementContext::ddl_statement() {
  return getRuleContext<MySqlParser::Ddl_statementContext>(0);
}

MySqlParser::Dml_statementContext* MySqlParser::Sql_statementContext::dml_statement() {
  return getRuleContext<MySqlParser::Dml_statementContext>(0);
}

MySqlParser::Transaction_statementContext* MySqlParser::Sql_statementContext::transaction_statement() {
  return getRuleContext<MySqlParser::Transaction_statementContext>(0);
}

MySqlParser::Replication_statementContext* MySqlParser::Sql_statementContext::replication_statement() {
  return getRuleContext<MySqlParser::Replication_statementContext>(0);
}

MySqlParser::Prepared_statementContext* MySqlParser::Sql_statementContext::prepared_statement() {
  return getRuleContext<MySqlParser::Prepared_statementContext>(0);
}

MySqlParser::Administration_statementContext* MySqlParser::Sql_statementContext::administration_statement() {
  return getRuleContext<MySqlParser::Administration_statementContext>(0);
}

MySqlParser::Utility_statementContext* MySqlParser::Sql_statementContext::utility_statement() {
  return getRuleContext<MySqlParser::Utility_statementContext>(0);
}


size_t MySqlParser::Sql_statementContext::getRuleIndex() const {
  return MySqlParser::RuleSql_statement;
}

void MySqlParser::Sql_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSql_statement(this);
}

void MySqlParser::Sql_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSql_statement(this);
}

MySqlParser::Sql_statementContext* MySqlParser::sql_statement() {
  Sql_statementContext *_localctx = _tracker.createInstance<Sql_statementContext>(_ctx, getState());
  enterRule(_localctx, 4, MySqlParser::RuleSql_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(614);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(607);
      ddl_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(608);
      dml_statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(609);
      transaction_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(610);
      replication_statement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(611);
      prepared_statement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(612);
      administration_statement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(613);
      utility_statement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Empty_statementContext ------------------------------------------------------------------

MySqlParser::Empty_statementContext::Empty_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Empty_statementContext::SEMI() {
  return getToken(MySqlParser::SEMI, 0);
}


size_t MySqlParser::Empty_statementContext::getRuleIndex() const {
  return MySqlParser::RuleEmpty_statement;
}

void MySqlParser::Empty_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmpty_statement(this);
}

void MySqlParser::Empty_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmpty_statement(this);
}

MySqlParser::Empty_statementContext* MySqlParser::empty_statement() {
  Empty_statementContext *_localctx = _tracker.createInstance<Empty_statementContext>(_ctx, getState());
  enterRule(_localctx, 6, MySqlParser::RuleEmpty_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(616);
    match(MySqlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ddl_statementContext ------------------------------------------------------------------

MySqlParser::Ddl_statementContext::Ddl_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Create_databaseContext* MySqlParser::Ddl_statementContext::create_database() {
  return getRuleContext<MySqlParser::Create_databaseContext>(0);
}

MySqlParser::Create_eventContext* MySqlParser::Ddl_statementContext::create_event() {
  return getRuleContext<MySqlParser::Create_eventContext>(0);
}

MySqlParser::Create_indexContext* MySqlParser::Ddl_statementContext::create_index() {
  return getRuleContext<MySqlParser::Create_indexContext>(0);
}

MySqlParser::Create_logfile_groupContext* MySqlParser::Ddl_statementContext::create_logfile_group() {
  return getRuleContext<MySqlParser::Create_logfile_groupContext>(0);
}

MySqlParser::Create_procedureContext* MySqlParser::Ddl_statementContext::create_procedure() {
  return getRuleContext<MySqlParser::Create_procedureContext>(0);
}

MySqlParser::Create_functionContext* MySqlParser::Ddl_statementContext::create_function() {
  return getRuleContext<MySqlParser::Create_functionContext>(0);
}

MySqlParser::Create_serverContext* MySqlParser::Ddl_statementContext::create_server() {
  return getRuleContext<MySqlParser::Create_serverContext>(0);
}

MySqlParser::Create_tableContext* MySqlParser::Ddl_statementContext::create_table() {
  return getRuleContext<MySqlParser::Create_tableContext>(0);
}

MySqlParser::Create_tablespace_innodbContext* MySqlParser::Ddl_statementContext::create_tablespace_innodb() {
  return getRuleContext<MySqlParser::Create_tablespace_innodbContext>(0);
}

MySqlParser::Create_tablespace_ndbContext* MySqlParser::Ddl_statementContext::create_tablespace_ndb() {
  return getRuleContext<MySqlParser::Create_tablespace_ndbContext>(0);
}

MySqlParser::Create_triggerContext* MySqlParser::Ddl_statementContext::create_trigger() {
  return getRuleContext<MySqlParser::Create_triggerContext>(0);
}

MySqlParser::Create_viewContext* MySqlParser::Ddl_statementContext::create_view() {
  return getRuleContext<MySqlParser::Create_viewContext>(0);
}

MySqlParser::Alter_databaseContext* MySqlParser::Ddl_statementContext::alter_database() {
  return getRuleContext<MySqlParser::Alter_databaseContext>(0);
}

MySqlParser::Alter_eventContext* MySqlParser::Ddl_statementContext::alter_event() {
  return getRuleContext<MySqlParser::Alter_eventContext>(0);
}

MySqlParser::Alter_functionContext* MySqlParser::Ddl_statementContext::alter_function() {
  return getRuleContext<MySqlParser::Alter_functionContext>(0);
}

MySqlParser::Alter_instanceContext* MySqlParser::Ddl_statementContext::alter_instance() {
  return getRuleContext<MySqlParser::Alter_instanceContext>(0);
}

MySqlParser::Alter_logfile_groupContext* MySqlParser::Ddl_statementContext::alter_logfile_group() {
  return getRuleContext<MySqlParser::Alter_logfile_groupContext>(0);
}

MySqlParser::Alter_procedureContext* MySqlParser::Ddl_statementContext::alter_procedure() {
  return getRuleContext<MySqlParser::Alter_procedureContext>(0);
}

MySqlParser::Alter_serverContext* MySqlParser::Ddl_statementContext::alter_server() {
  return getRuleContext<MySqlParser::Alter_serverContext>(0);
}

MySqlParser::Alter_tableContext* MySqlParser::Ddl_statementContext::alter_table() {
  return getRuleContext<MySqlParser::Alter_tableContext>(0);
}

MySqlParser::Alter_tablespaceContext* MySqlParser::Ddl_statementContext::alter_tablespace() {
  return getRuleContext<MySqlParser::Alter_tablespaceContext>(0);
}

MySqlParser::Alter_viewContext* MySqlParser::Ddl_statementContext::alter_view() {
  return getRuleContext<MySqlParser::Alter_viewContext>(0);
}

MySqlParser::Drop_databaseContext* MySqlParser::Ddl_statementContext::drop_database() {
  return getRuleContext<MySqlParser::Drop_databaseContext>(0);
}

MySqlParser::Drop_eventContext* MySqlParser::Ddl_statementContext::drop_event() {
  return getRuleContext<MySqlParser::Drop_eventContext>(0);
}

MySqlParser::Drop_indexContext* MySqlParser::Ddl_statementContext::drop_index() {
  return getRuleContext<MySqlParser::Drop_indexContext>(0);
}

MySqlParser::Drop_logfile_groupContext* MySqlParser::Ddl_statementContext::drop_logfile_group() {
  return getRuleContext<MySqlParser::Drop_logfile_groupContext>(0);
}

MySqlParser::Drop_procedureContext* MySqlParser::Ddl_statementContext::drop_procedure() {
  return getRuleContext<MySqlParser::Drop_procedureContext>(0);
}

MySqlParser::Drop_functionContext* MySqlParser::Ddl_statementContext::drop_function() {
  return getRuleContext<MySqlParser::Drop_functionContext>(0);
}

MySqlParser::Drop_serverContext* MySqlParser::Ddl_statementContext::drop_server() {
  return getRuleContext<MySqlParser::Drop_serverContext>(0);
}

MySqlParser::Drop_tableContext* MySqlParser::Ddl_statementContext::drop_table() {
  return getRuleContext<MySqlParser::Drop_tableContext>(0);
}

MySqlParser::Drop_tablespaceContext* MySqlParser::Ddl_statementContext::drop_tablespace() {
  return getRuleContext<MySqlParser::Drop_tablespaceContext>(0);
}

MySqlParser::Drop_triggerContext* MySqlParser::Ddl_statementContext::drop_trigger() {
  return getRuleContext<MySqlParser::Drop_triggerContext>(0);
}

MySqlParser::Drop_viewContext* MySqlParser::Ddl_statementContext::drop_view() {
  return getRuleContext<MySqlParser::Drop_viewContext>(0);
}

MySqlParser::Rename_tableContext* MySqlParser::Ddl_statementContext::rename_table() {
  return getRuleContext<MySqlParser::Rename_tableContext>(0);
}

MySqlParser::Truncate_tableContext* MySqlParser::Ddl_statementContext::truncate_table() {
  return getRuleContext<MySqlParser::Truncate_tableContext>(0);
}


size_t MySqlParser::Ddl_statementContext::getRuleIndex() const {
  return MySqlParser::RuleDdl_statement;
}

void MySqlParser::Ddl_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDdl_statement(this);
}

void MySqlParser::Ddl_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDdl_statement(this);
}

MySqlParser::Ddl_statementContext* MySqlParser::ddl_statement() {
  Ddl_statementContext *_localctx = _tracker.createInstance<Ddl_statementContext>(_ctx, getState());
  enterRule(_localctx, 8, MySqlParser::RuleDdl_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(653);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(618);
      create_database();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(619);
      create_event();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(620);
      create_index();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(621);
      create_logfile_group();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(622);
      create_procedure();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(623);
      create_function();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(624);
      create_server();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(625);
      create_table();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(626);
      create_tablespace_innodb();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(627);
      create_tablespace_ndb();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(628);
      create_trigger();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(629);
      create_view();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(630);
      alter_database();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(631);
      alter_event();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(632);
      alter_function();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(633);
      alter_instance();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(634);
      alter_logfile_group();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(635);
      alter_procedure();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(636);
      alter_server();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(637);
      alter_table();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(638);
      alter_tablespace();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(639);
      alter_view();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(640);
      drop_database();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(641);
      drop_event();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(642);
      drop_index();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(643);
      drop_logfile_group();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(644);
      drop_procedure();
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(645);
      drop_function();
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(646);
      drop_server();
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(647);
      drop_table();
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(648);
      drop_tablespace();
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(649);
      drop_trigger();
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(650);
      drop_view();
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(651);
      rename_table();
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(652);
      truncate_table();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dml_statementContext ------------------------------------------------------------------

MySqlParser::Dml_statementContext::Dml_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Select_statementContext* MySqlParser::Dml_statementContext::select_statement() {
  return getRuleContext<MySqlParser::Select_statementContext>(0);
}

MySqlParser::Insert_statementContext* MySqlParser::Dml_statementContext::insert_statement() {
  return getRuleContext<MySqlParser::Insert_statementContext>(0);
}

MySqlParser::Update_statementContext* MySqlParser::Dml_statementContext::update_statement() {
  return getRuleContext<MySqlParser::Update_statementContext>(0);
}

MySqlParser::Delete_statementContext* MySqlParser::Dml_statementContext::delete_statement() {
  return getRuleContext<MySqlParser::Delete_statementContext>(0);
}

MySqlParser::Replace_statementContext* MySqlParser::Dml_statementContext::replace_statement() {
  return getRuleContext<MySqlParser::Replace_statementContext>(0);
}

MySqlParser::Call_statementContext* MySqlParser::Dml_statementContext::call_statement() {
  return getRuleContext<MySqlParser::Call_statementContext>(0);
}

MySqlParser::Load_data_statementContext* MySqlParser::Dml_statementContext::load_data_statement() {
  return getRuleContext<MySqlParser::Load_data_statementContext>(0);
}

MySqlParser::Load_xml_statementContext* MySqlParser::Dml_statementContext::load_xml_statement() {
  return getRuleContext<MySqlParser::Load_xml_statementContext>(0);
}

MySqlParser::Do_statementContext* MySqlParser::Dml_statementContext::do_statement() {
  return getRuleContext<MySqlParser::Do_statementContext>(0);
}

MySqlParser::Handler_statementContext* MySqlParser::Dml_statementContext::handler_statement() {
  return getRuleContext<MySqlParser::Handler_statementContext>(0);
}


size_t MySqlParser::Dml_statementContext::getRuleIndex() const {
  return MySqlParser::RuleDml_statement;
}

void MySqlParser::Dml_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDml_statement(this);
}

void MySqlParser::Dml_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDml_statement(this);
}

MySqlParser::Dml_statementContext* MySqlParser::dml_statement() {
  Dml_statementContext *_localctx = _tracker.createInstance<Dml_statementContext>(_ctx, getState());
  enterRule(_localctx, 10, MySqlParser::RuleDml_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(665);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(655);
      select_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(656);
      insert_statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(657);
      update_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(658);
      delete_statement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(659);
      replace_statement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(660);
      call_statement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(661);
      load_data_statement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(662);
      load_xml_statement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(663);
      do_statement();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(664);
      handler_statement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transaction_statementContext ------------------------------------------------------------------

MySqlParser::Transaction_statementContext::Transaction_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Start_transactionContext* MySqlParser::Transaction_statementContext::start_transaction() {
  return getRuleContext<MySqlParser::Start_transactionContext>(0);
}

MySqlParser::Begin_workContext* MySqlParser::Transaction_statementContext::begin_work() {
  return getRuleContext<MySqlParser::Begin_workContext>(0);
}

MySqlParser::Commit_workContext* MySqlParser::Transaction_statementContext::commit_work() {
  return getRuleContext<MySqlParser::Commit_workContext>(0);
}

MySqlParser::Rollback_workContext* MySqlParser::Transaction_statementContext::rollback_work() {
  return getRuleContext<MySqlParser::Rollback_workContext>(0);
}

MySqlParser::Savepoint_statementContext* MySqlParser::Transaction_statementContext::savepoint_statement() {
  return getRuleContext<MySqlParser::Savepoint_statementContext>(0);
}

MySqlParser::Rollback_statementContext* MySqlParser::Transaction_statementContext::rollback_statement() {
  return getRuleContext<MySqlParser::Rollback_statementContext>(0);
}

MySqlParser::Release_statementContext* MySqlParser::Transaction_statementContext::release_statement() {
  return getRuleContext<MySqlParser::Release_statementContext>(0);
}

MySqlParser::Lock_tablesContext* MySqlParser::Transaction_statementContext::lock_tables() {
  return getRuleContext<MySqlParser::Lock_tablesContext>(0);
}

MySqlParser::Unlock_tablesContext* MySqlParser::Transaction_statementContext::unlock_tables() {
  return getRuleContext<MySqlParser::Unlock_tablesContext>(0);
}


size_t MySqlParser::Transaction_statementContext::getRuleIndex() const {
  return MySqlParser::RuleTransaction_statement;
}

void MySqlParser::Transaction_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransaction_statement(this);
}

void MySqlParser::Transaction_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransaction_statement(this);
}

MySqlParser::Transaction_statementContext* MySqlParser::transaction_statement() {
  Transaction_statementContext *_localctx = _tracker.createInstance<Transaction_statementContext>(_ctx, getState());
  enterRule(_localctx, 12, MySqlParser::RuleTransaction_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(676);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(667);
      start_transaction();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(668);
      begin_work();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(669);
      commit_work();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(670);
      rollback_work();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(671);
      savepoint_statement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(672);
      rollback_statement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(673);
      release_statement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(674);
      lock_tables();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(675);
      unlock_tables();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Replication_statementContext ------------------------------------------------------------------

MySqlParser::Replication_statementContext::Replication_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Change_masterContext* MySqlParser::Replication_statementContext::change_master() {
  return getRuleContext<MySqlParser::Change_masterContext>(0);
}

MySqlParser::Change_repl_filterContext* MySqlParser::Replication_statementContext::change_repl_filter() {
  return getRuleContext<MySqlParser::Change_repl_filterContext>(0);
}

MySqlParser::Purge_binary_logsContext* MySqlParser::Replication_statementContext::purge_binary_logs() {
  return getRuleContext<MySqlParser::Purge_binary_logsContext>(0);
}

MySqlParser::Reset_masterContext* MySqlParser::Replication_statementContext::reset_master() {
  return getRuleContext<MySqlParser::Reset_masterContext>(0);
}

MySqlParser::Reset_slaveContext* MySqlParser::Replication_statementContext::reset_slave() {
  return getRuleContext<MySqlParser::Reset_slaveContext>(0);
}

MySqlParser::Start_slaveContext* MySqlParser::Replication_statementContext::start_slave() {
  return getRuleContext<MySqlParser::Start_slaveContext>(0);
}

MySqlParser::Stop_slaveContext* MySqlParser::Replication_statementContext::stop_slave() {
  return getRuleContext<MySqlParser::Stop_slaveContext>(0);
}

MySqlParser::Start_group_replContext* MySqlParser::Replication_statementContext::start_group_repl() {
  return getRuleContext<MySqlParser::Start_group_replContext>(0);
}

MySqlParser::Stop_group_replContext* MySqlParser::Replication_statementContext::stop_group_repl() {
  return getRuleContext<MySqlParser::Stop_group_replContext>(0);
}

MySqlParser::Xa_start_transactionContext* MySqlParser::Replication_statementContext::xa_start_transaction() {
  return getRuleContext<MySqlParser::Xa_start_transactionContext>(0);
}

MySqlParser::Xa_end_transactionContext* MySqlParser::Replication_statementContext::xa_end_transaction() {
  return getRuleContext<MySqlParser::Xa_end_transactionContext>(0);
}

MySqlParser::Xa_prepareContext* MySqlParser::Replication_statementContext::xa_prepare() {
  return getRuleContext<MySqlParser::Xa_prepareContext>(0);
}

MySqlParser::Xa_commit_workContext* MySqlParser::Replication_statementContext::xa_commit_work() {
  return getRuleContext<MySqlParser::Xa_commit_workContext>(0);
}

MySqlParser::Xa_rollback_workContext* MySqlParser::Replication_statementContext::xa_rollback_work() {
  return getRuleContext<MySqlParser::Xa_rollback_workContext>(0);
}

MySqlParser::Xa_recover_workContext* MySqlParser::Replication_statementContext::xa_recover_work() {
  return getRuleContext<MySqlParser::Xa_recover_workContext>(0);
}


size_t MySqlParser::Replication_statementContext::getRuleIndex() const {
  return MySqlParser::RuleReplication_statement;
}

void MySqlParser::Replication_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReplication_statement(this);
}

void MySqlParser::Replication_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReplication_statement(this);
}

MySqlParser::Replication_statementContext* MySqlParser::replication_statement() {
  Replication_statementContext *_localctx = _tracker.createInstance<Replication_statementContext>(_ctx, getState());
  enterRule(_localctx, 14, MySqlParser::RuleReplication_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(693);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(678);
      change_master();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(679);
      change_repl_filter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(680);
      purge_binary_logs();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(681);
      reset_master();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(682);
      reset_slave();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(683);
      start_slave();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(684);
      stop_slave();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(685);
      start_group_repl();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(686);
      stop_group_repl();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(687);
      xa_start_transaction();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(688);
      xa_end_transaction();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(689);
      xa_prepare();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(690);
      xa_commit_work();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(691);
      xa_rollback_work();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(692);
      xa_recover_work();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prepared_statementContext ------------------------------------------------------------------

MySqlParser::Prepared_statementContext::Prepared_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Prepare_statementContext* MySqlParser::Prepared_statementContext::prepare_statement() {
  return getRuleContext<MySqlParser::Prepare_statementContext>(0);
}

MySqlParser::Execute_statementContext* MySqlParser::Prepared_statementContext::execute_statement() {
  return getRuleContext<MySqlParser::Execute_statementContext>(0);
}

MySqlParser::Deallocate_prepareContext* MySqlParser::Prepared_statementContext::deallocate_prepare() {
  return getRuleContext<MySqlParser::Deallocate_prepareContext>(0);
}


size_t MySqlParser::Prepared_statementContext::getRuleIndex() const {
  return MySqlParser::RulePrepared_statement;
}

void MySqlParser::Prepared_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrepared_statement(this);
}

void MySqlParser::Prepared_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrepared_statement(this);
}

MySqlParser::Prepared_statementContext* MySqlParser::prepared_statement() {
  Prepared_statementContext *_localctx = _tracker.createInstance<Prepared_statementContext>(_ctx, getState());
  enterRule(_localctx, 16, MySqlParser::RulePrepared_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(698);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::PREPARE: {
        enterOuterAlt(_localctx, 1);
        setState(695);
        prepare_statement();
        break;
      }

      case MySqlParser::EXECUTE: {
        enterOuterAlt(_localctx, 2);
        setState(696);
        execute_statement();
        break;
      }

      case MySqlParser::DROP:
      case MySqlParser::DEALLOCATE: {
        enterOuterAlt(_localctx, 3);
        setState(697);
        deallocate_prepare();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compound_statementContext ------------------------------------------------------------------

MySqlParser::Compound_statementContext::Compound_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Block_statementContext* MySqlParser::Compound_statementContext::block_statement() {
  return getRuleContext<MySqlParser::Block_statementContext>(0);
}

MySqlParser::Case_statementContext* MySqlParser::Compound_statementContext::case_statement() {
  return getRuleContext<MySqlParser::Case_statementContext>(0);
}

MySqlParser::If_statementContext* MySqlParser::Compound_statementContext::if_statement() {
  return getRuleContext<MySqlParser::If_statementContext>(0);
}

MySqlParser::Leave_statementContext* MySqlParser::Compound_statementContext::leave_statement() {
  return getRuleContext<MySqlParser::Leave_statementContext>(0);
}

MySqlParser::Loop_statementContext* MySqlParser::Compound_statementContext::loop_statement() {
  return getRuleContext<MySqlParser::Loop_statementContext>(0);
}

MySqlParser::Repeat_statementContext* MySqlParser::Compound_statementContext::repeat_statement() {
  return getRuleContext<MySqlParser::Repeat_statementContext>(0);
}

MySqlParser::While_statementContext* MySqlParser::Compound_statementContext::while_statement() {
  return getRuleContext<MySqlParser::While_statementContext>(0);
}

MySqlParser::Iterate_statementContext* MySqlParser::Compound_statementContext::iterate_statement() {
  return getRuleContext<MySqlParser::Iterate_statementContext>(0);
}

MySqlParser::Return_statementContext* MySqlParser::Compound_statementContext::return_statement() {
  return getRuleContext<MySqlParser::Return_statementContext>(0);
}

MySqlParser::Cursor_statementContext* MySqlParser::Compound_statementContext::cursor_statement() {
  return getRuleContext<MySqlParser::Cursor_statementContext>(0);
}


size_t MySqlParser::Compound_statementContext::getRuleIndex() const {
  return MySqlParser::RuleCompound_statement;
}

void MySqlParser::Compound_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompound_statement(this);
}

void MySqlParser::Compound_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompound_statement(this);
}

MySqlParser::Compound_statementContext* MySqlParser::compound_statement() {
  Compound_statementContext *_localctx = _tracker.createInstance<Compound_statementContext>(_ctx, getState());
  enterRule(_localctx, 18, MySqlParser::RuleCompound_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(710);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(700);
      block_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(701);
      case_statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(702);
      if_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(703);
      leave_statement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(704);
      loop_statement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(705);
      repeat_statement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(706);
      while_statement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(707);
      iterate_statement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(708);
      return_statement();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(709);
      cursor_statement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Administration_statementContext ------------------------------------------------------------------

MySqlParser::Administration_statementContext::Administration_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Alter_userContext* MySqlParser::Administration_statementContext::alter_user() {
  return getRuleContext<MySqlParser::Alter_userContext>(0);
}

MySqlParser::Create_userContext* MySqlParser::Administration_statementContext::create_user() {
  return getRuleContext<MySqlParser::Create_userContext>(0);
}

MySqlParser::Drop_userContext* MySqlParser::Administration_statementContext::drop_user() {
  return getRuleContext<MySqlParser::Drop_userContext>(0);
}

MySqlParser::Grant_statementContext* MySqlParser::Administration_statementContext::grant_statement() {
  return getRuleContext<MySqlParser::Grant_statementContext>(0);
}

MySqlParser::Grant_proxyContext* MySqlParser::Administration_statementContext::grant_proxy() {
  return getRuleContext<MySqlParser::Grant_proxyContext>(0);
}

MySqlParser::Rename_userContext* MySqlParser::Administration_statementContext::rename_user() {
  return getRuleContext<MySqlParser::Rename_userContext>(0);
}

MySqlParser::Revoke_statementContext* MySqlParser::Administration_statementContext::revoke_statement() {
  return getRuleContext<MySqlParser::Revoke_statementContext>(0);
}

MySqlParser::Revoke_proxyContext* MySqlParser::Administration_statementContext::revoke_proxy() {
  return getRuleContext<MySqlParser::Revoke_proxyContext>(0);
}

MySqlParser::Analyze_tableContext* MySqlParser::Administration_statementContext::analyze_table() {
  return getRuleContext<MySqlParser::Analyze_tableContext>(0);
}

MySqlParser::Check_tableContext* MySqlParser::Administration_statementContext::check_table() {
  return getRuleContext<MySqlParser::Check_tableContext>(0);
}

MySqlParser::Checksum_tableContext* MySqlParser::Administration_statementContext::checksum_table() {
  return getRuleContext<MySqlParser::Checksum_tableContext>(0);
}

MySqlParser::Optimize_tableContext* MySqlParser::Administration_statementContext::optimize_table() {
  return getRuleContext<MySqlParser::Optimize_tableContext>(0);
}

MySqlParser::Repair_tableContext* MySqlParser::Administration_statementContext::repair_table() {
  return getRuleContext<MySqlParser::Repair_tableContext>(0);
}

MySqlParser::Create_udfunctionContext* MySqlParser::Administration_statementContext::create_udfunction() {
  return getRuleContext<MySqlParser::Create_udfunctionContext>(0);
}

MySqlParser::Install_pluginContext* MySqlParser::Administration_statementContext::install_plugin() {
  return getRuleContext<MySqlParser::Install_pluginContext>(0);
}

MySqlParser::Uninstall_pluginContext* MySqlParser::Administration_statementContext::uninstall_plugin() {
  return getRuleContext<MySqlParser::Uninstall_pluginContext>(0);
}

MySqlParser::Set_statementContext* MySqlParser::Administration_statementContext::set_statement() {
  return getRuleContext<MySqlParser::Set_statementContext>(0);
}

MySqlParser::Show_statementContext* MySqlParser::Administration_statementContext::show_statement() {
  return getRuleContext<MySqlParser::Show_statementContext>(0);
}

MySqlParser::Binlog_statementContext* MySqlParser::Administration_statementContext::binlog_statement() {
  return getRuleContext<MySqlParser::Binlog_statementContext>(0);
}

MySqlParser::Cache_index_statementContext* MySqlParser::Administration_statementContext::cache_index_statement() {
  return getRuleContext<MySqlParser::Cache_index_statementContext>(0);
}

MySqlParser::Flush_statementContext* MySqlParser::Administration_statementContext::flush_statement() {
  return getRuleContext<MySqlParser::Flush_statementContext>(0);
}

MySqlParser::Kill_statementContext* MySqlParser::Administration_statementContext::kill_statement() {
  return getRuleContext<MySqlParser::Kill_statementContext>(0);
}

MySqlParser::Load_index_into_cacheContext* MySqlParser::Administration_statementContext::load_index_into_cache() {
  return getRuleContext<MySqlParser::Load_index_into_cacheContext>(0);
}

MySqlParser::Reset_statementContext* MySqlParser::Administration_statementContext::reset_statement() {
  return getRuleContext<MySqlParser::Reset_statementContext>(0);
}

MySqlParser::Shutdown_statementContext* MySqlParser::Administration_statementContext::shutdown_statement() {
  return getRuleContext<MySqlParser::Shutdown_statementContext>(0);
}


size_t MySqlParser::Administration_statementContext::getRuleIndex() const {
  return MySqlParser::RuleAdministration_statement;
}

void MySqlParser::Administration_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdministration_statement(this);
}

void MySqlParser::Administration_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdministration_statement(this);
}

MySqlParser::Administration_statementContext* MySqlParser::administration_statement() {
  Administration_statementContext *_localctx = _tracker.createInstance<Administration_statementContext>(_ctx, getState());
  enterRule(_localctx, 20, MySqlParser::RuleAdministration_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(737);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(712);
      alter_user();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(713);
      create_user();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(714);
      drop_user();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(715);
      grant_statement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(716);
      grant_proxy();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(717);
      rename_user();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(718);
      revoke_statement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(719);
      revoke_proxy();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(720);
      analyze_table();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(721);
      check_table();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(722);
      checksum_table();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(723);
      optimize_table();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(724);
      repair_table();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(725);
      create_udfunction();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(726);
      install_plugin();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(727);
      uninstall_plugin();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(728);
      set_statement();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(729);
      show_statement();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(730);
      binlog_statement();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(731);
      cache_index_statement();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(732);
      flush_statement();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(733);
      kill_statement();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(734);
      load_index_into_cache();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(735);
      reset_statement();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(736);
      shutdown_statement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Utility_statementContext ------------------------------------------------------------------

MySqlParser::Utility_statementContext::Utility_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Simple_describe_statementContext* MySqlParser::Utility_statementContext::simple_describe_statement() {
  return getRuleContext<MySqlParser::Simple_describe_statementContext>(0);
}

MySqlParser::Full_describe_statementContext* MySqlParser::Utility_statementContext::full_describe_statement() {
  return getRuleContext<MySqlParser::Full_describe_statementContext>(0);
}

MySqlParser::Help_statementContext* MySqlParser::Utility_statementContext::help_statement() {
  return getRuleContext<MySqlParser::Help_statementContext>(0);
}

MySqlParser::Use_statementContext* MySqlParser::Utility_statementContext::use_statement() {
  return getRuleContext<MySqlParser::Use_statementContext>(0);
}


size_t MySqlParser::Utility_statementContext::getRuleIndex() const {
  return MySqlParser::RuleUtility_statement;
}

void MySqlParser::Utility_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUtility_statement(this);
}

void MySqlParser::Utility_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUtility_statement(this);
}

MySqlParser::Utility_statementContext* MySqlParser::utility_statement() {
  Utility_statementContext *_localctx = _tracker.createInstance<Utility_statementContext>(_ctx, getState());
  enterRule(_localctx, 22, MySqlParser::RuleUtility_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(743);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(739);
      simple_describe_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(740);
      full_describe_statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(741);
      help_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(742);
      use_statement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_databaseContext ------------------------------------------------------------------

MySqlParser::Create_databaseContext::Create_databaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_databaseContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

MySqlParser::Id_Context* MySqlParser::Create_databaseContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Create_databaseContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::Create_databaseContext::SCHEMA() {
  return getToken(MySqlParser::SCHEMA, 0);
}

MySqlParser::If_not_existsContext* MySqlParser::Create_databaseContext::if_not_exists() {
  return getRuleContext<MySqlParser::If_not_existsContext>(0);
}

std::vector<MySqlParser::Create_database_optionContext *> MySqlParser::Create_databaseContext::create_database_option() {
  return getRuleContexts<MySqlParser::Create_database_optionContext>();
}

MySqlParser::Create_database_optionContext* MySqlParser::Create_databaseContext::create_database_option(size_t i) {
  return getRuleContext<MySqlParser::Create_database_optionContext>(i);
}


size_t MySqlParser::Create_databaseContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_database;
}

void MySqlParser::Create_databaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_database(this);
}

void MySqlParser::Create_databaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_database(this);
}

MySqlParser::Create_databaseContext* MySqlParser::create_database() {
  Create_databaseContext *_localctx = _tracker.createInstance<Create_databaseContext>(_ctx, getState());
  enterRule(_localctx, 24, MySqlParser::RuleCreate_database);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(745);
    match(MySqlParser::CREATE);
    setState(746);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::DATABASE || _la == MySqlParser::SCHEMA)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(748);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(747);
      if_not_exists();
    }
    setState(750);
    id_();
    setState(754);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySqlParser::CHARACTER)
      | (1ULL << MySqlParser::COLLATE)
      | (1ULL << MySqlParser::DEFAULT))) != 0)) {
      setState(751);
      create_database_option();
      setState(756);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_eventContext ------------------------------------------------------------------

MySqlParser::Create_eventContext::Create_eventContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_eventContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::Create_eventContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

MySqlParser::Full_idContext* MySqlParser::Create_eventContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::Create_eventContext::ON() {
  return getTokens(MySqlParser::ON);
}

tree::TerminalNode* MySqlParser::Create_eventContext::ON(size_t i) {
  return getToken(MySqlParser::ON, i);
}

tree::TerminalNode* MySqlParser::Create_eventContext::SCHEDULE() {
  return getToken(MySqlParser::SCHEDULE, 0);
}

MySqlParser::Schedule_expressionContext* MySqlParser::Create_eventContext::schedule_expression() {
  return getRuleContext<MySqlParser::Schedule_expressionContext>(0);
}

tree::TerminalNode* MySqlParser::Create_eventContext::DO() {
  return getToken(MySqlParser::DO, 0);
}

MySqlParser::Routine_bodyContext* MySqlParser::Create_eventContext::routine_body() {
  return getRuleContext<MySqlParser::Routine_bodyContext>(0);
}

MySqlParser::Owner_statementContext* MySqlParser::Create_eventContext::owner_statement() {
  return getRuleContext<MySqlParser::Owner_statementContext>(0);
}

MySqlParser::If_not_existsContext* MySqlParser::Create_eventContext::if_not_exists() {
  return getRuleContext<MySqlParser::If_not_existsContext>(0);
}

tree::TerminalNode* MySqlParser::Create_eventContext::COMPLETION() {
  return getToken(MySqlParser::COMPLETION, 0);
}

tree::TerminalNode* MySqlParser::Create_eventContext::PRESERVE() {
  return getToken(MySqlParser::PRESERVE, 0);
}

tree::TerminalNode* MySqlParser::Create_eventContext::ENABLE() {
  return getToken(MySqlParser::ENABLE, 0);
}

tree::TerminalNode* MySqlParser::Create_eventContext::DISABLE() {
  return getToken(MySqlParser::DISABLE, 0);
}

tree::TerminalNode* MySqlParser::Create_eventContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::Create_eventContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::Create_eventContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Create_eventContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}


size_t MySqlParser::Create_eventContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_event;
}

void MySqlParser::Create_eventContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_event(this);
}

void MySqlParser::Create_eventContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_event(this);
}

MySqlParser::Create_eventContext* MySqlParser::create_event() {
  Create_eventContext *_localctx = _tracker.createInstance<Create_eventContext>(_ctx, getState());
  enterRule(_localctx, 26, MySqlParser::RuleCreate_event);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(757);
    match(MySqlParser::CREATE);
    setState(759);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(758);
      owner_statement();
    }
    setState(761);
    match(MySqlParser::EVENT);
    setState(763);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(762);
      if_not_exists();
    }
    setState(765);
    full_id();
    setState(766);
    match(MySqlParser::ON);
    setState(767);
    match(MySqlParser::SCHEDULE);
    setState(768);
    schedule_expression();
    setState(775);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ON) {
      setState(769);
      match(MySqlParser::ON);
      setState(770);
      match(MySqlParser::COMPLETION);
      setState(772);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NOT) {
        setState(771);
        match(MySqlParser::NOT);
      }
      setState(774);
      match(MySqlParser::PRESERVE);
    }
    setState(782);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(777);
      match(MySqlParser::ENABLE);
      break;
    }

    case 2: {
      setState(778);
      match(MySqlParser::DISABLE);
      break;
    }

    case 3: {
      setState(779);
      match(MySqlParser::DISABLE);
      setState(780);
      match(MySqlParser::ON);
      setState(781);
      match(MySqlParser::SLAVE);
      break;
    }

    }
    setState(786);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMENT) {
      setState(784);
      match(MySqlParser::COMMENT);
      setState(785);
      match(MySqlParser::STRING_LITERAL);
    }
    setState(788);
    match(MySqlParser::DO);
    setState(789);
    routine_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_indexContext ------------------------------------------------------------------

MySqlParser::Create_indexContext::Create_indexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_indexContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

MySqlParser::Id_Context* MySqlParser::Create_indexContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Create_indexContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

MySqlParser::Index_colname_listContext* MySqlParser::Create_indexContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

MySqlParser::Index_typeContext* MySqlParser::Create_indexContext::index_type() {
  return getRuleContext<MySqlParser::Index_typeContext>(0);
}

std::vector<MySqlParser::Index_optionContext *> MySqlParser::Create_indexContext::index_option() {
  return getRuleContexts<MySqlParser::Index_optionContext>();
}

MySqlParser::Index_optionContext* MySqlParser::Create_indexContext::index_option(size_t i) {
  return getRuleContext<MySqlParser::Index_optionContext>(i);
}

tree::TerminalNode* MySqlParser::Create_indexContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::ONLINE() {
  return getToken(MySqlParser::ONLINE, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::OFFLINE() {
  return getToken(MySqlParser::OFFLINE, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::UNIQUE() {
  return getToken(MySqlParser::UNIQUE, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::FULLTEXT() {
  return getToken(MySqlParser::FULLTEXT, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::SPATIAL() {
  return getToken(MySqlParser::SPATIAL, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::INPLACE() {
  return getToken(MySqlParser::INPLACE, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::COPY() {
  return getToken(MySqlParser::COPY, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::SHARED() {
  return getToken(MySqlParser::SHARED, 0);
}

tree::TerminalNode* MySqlParser::Create_indexContext::EXCLUSIVE() {
  return getToken(MySqlParser::EXCLUSIVE, 0);
}


size_t MySqlParser::Create_indexContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_index;
}

void MySqlParser::Create_indexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_index(this);
}

void MySqlParser::Create_indexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_index(this);
}

MySqlParser::Create_indexContext* MySqlParser::create_index() {
  Create_indexContext *_localctx = _tracker.createInstance<Create_indexContext>(_ctx, getState());
  enterRule(_localctx, 28, MySqlParser::RuleCreate_index);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(791);
    match(MySqlParser::CREATE);
    setState(793);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::OFFLINE

    || _la == MySqlParser::ONLINE) {
      setState(792);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::OFFLINE

      || _la == MySqlParser::ONLINE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(796);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FULLTEXT || _la == MySqlParser::SPATIAL

    || _la == MySqlParser::UNIQUE) {
      setState(795);
      dynamic_cast<Create_indexContext *>(_localctx)->index_category = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FULLTEXT || _la == MySqlParser::SPATIAL

      || _la == MySqlParser::UNIQUE)) {
        dynamic_cast<Create_indexContext *>(_localctx)->index_category = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(798);
    match(MySqlParser::INDEX);
    setState(799);
    id_();
    setState(801);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::USING) {
      setState(800);
      index_type();
    }
    setState(803);
    match(MySqlParser::ON);
    setState(804);
    table_name();
    setState(805);
    index_colname_list();
    setState(809);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::USING

    || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::KEY_BLOCK_SIZE) {
      setState(806);
      index_option();
      setState(811);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(822);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ALGORITHM: {
        setState(812);
        match(MySqlParser::ALGORITHM);
        setState(814);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(813);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(816);
        dynamic_cast<Create_indexContext *>(_localctx)->alg_type = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::COPY

        || _la == MySqlParser::INPLACE)) {
          dynamic_cast<Create_indexContext *>(_localctx)->alg_type = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::LOCK: {
        setState(817);
        match(MySqlParser::LOCK);
        setState(819);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(818);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(821);
        dynamic_cast<Create_indexContext *>(_localctx)->lock_type = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::EXCLUSIVE || _la == MySqlParser::NONE || _la == MySqlParser::SHARED)) {
          dynamic_cast<Create_indexContext *>(_localctx)->lock_type = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::EOF:
      case MySqlParser::MINUS:
      case MySqlParser::SEMI: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_logfile_groupContext ------------------------------------------------------------------

MySqlParser::Create_logfile_groupContext::Create_logfile_groupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::LOGFILE() {
  return getToken(MySqlParser::LOGFILE, 0);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::Create_logfile_groupContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::Create_logfile_groupContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::UNDOFILE() {
  return getToken(MySqlParser::UNDOFILE, 0);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::Engine_nameContext* MySqlParser::Create_logfile_groupContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::Create_logfile_groupContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::INITIAL_SIZE() {
  return getToken(MySqlParser::INITIAL_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::UNDO_BUFFER_SIZE() {
  return getToken(MySqlParser::UNDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::REDO_BUFFER_SIZE() {
  return getToken(MySqlParser::REDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::NODEGROUP() {
  return getToken(MySqlParser::NODEGROUP, 0);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::WAIT() {
  return getToken(MySqlParser::WAIT, 0);
}

tree::TerminalNode* MySqlParser::Create_logfile_groupContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

std::vector<MySqlParser::Filesize_literalContext *> MySqlParser::Create_logfile_groupContext::filesize_literal() {
  return getRuleContexts<MySqlParser::Filesize_literalContext>();
}

MySqlParser::Filesize_literalContext* MySqlParser::Create_logfile_groupContext::filesize_literal(size_t i) {
  return getRuleContext<MySqlParser::Filesize_literalContext>(i);
}


size_t MySqlParser::Create_logfile_groupContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_logfile_group;
}

void MySqlParser::Create_logfile_groupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_logfile_group(this);
}

void MySqlParser::Create_logfile_groupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_logfile_group(this);
}

MySqlParser::Create_logfile_groupContext* MySqlParser::create_logfile_group() {
  Create_logfile_groupContext *_localctx = _tracker.createInstance<Create_logfile_groupContext>(_ctx, getState());
  enterRule(_localctx, 30, MySqlParser::RuleCreate_logfile_group);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(824);
    match(MySqlParser::CREATE);
    setState(825);
    match(MySqlParser::LOGFILE);
    setState(826);
    match(MySqlParser::GROUP);
    setState(827);
    id_();
    setState(828);
    match(MySqlParser::ADD);
    setState(829);
    match(MySqlParser::UNDOFILE);
    setState(830);
    dynamic_cast<Create_logfile_groupContext *>(_localctx)->undo_file = match(MySqlParser::STRING_LITERAL);
    setState(836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INITIAL_SIZE) {
      setState(831);
      match(MySqlParser::INITIAL_SIZE);
      setState(833);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(832);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(835);
      dynamic_cast<Create_logfile_groupContext *>(_localctx)->init_size = filesize_literal();
    }
    setState(843);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::UNDO_BUFFER_SIZE) {
      setState(838);
      match(MySqlParser::UNDO_BUFFER_SIZE);
      setState(840);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(839);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(842);
      dynamic_cast<Create_logfile_groupContext *>(_localctx)->undo_size = filesize_literal();
    }
    setState(850);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::REDO_BUFFER_SIZE) {
      setState(845);
      match(MySqlParser::REDO_BUFFER_SIZE);
      setState(847);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(846);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(849);
      dynamic_cast<Create_logfile_groupContext *>(_localctx)->redo_size = filesize_literal();
    }
    setState(857);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NODEGROUP) {
      setState(852);
      match(MySqlParser::NODEGROUP);
      setState(854);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(853);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(856);
      id_();
    }
    setState(860);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WAIT) {
      setState(859);
      match(MySqlParser::WAIT);
    }
    setState(867);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMENT) {
      setState(862);
      match(MySqlParser::COMMENT);
      setState(864);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(863);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(866);
      dynamic_cast<Create_logfile_groupContext *>(_localctx)->comment = match(MySqlParser::STRING_LITERAL);
    }
    setState(869);
    match(MySqlParser::ENGINE);
    setState(871);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EQUAL_SYMBOL) {
      setState(870);
      match(MySqlParser::EQUAL_SYMBOL);
    }
    setState(873);
    engine_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_procedureContext ------------------------------------------------------------------

MySqlParser::Create_procedureContext::Create_procedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_procedureContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::Create_procedureContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

MySqlParser::Full_idContext* MySqlParser::Create_procedureContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

MySqlParser::Routine_bodyContext* MySqlParser::Create_procedureContext::routine_body() {
  return getRuleContext<MySqlParser::Routine_bodyContext>(0);
}

MySqlParser::Owner_statementContext* MySqlParser::Create_procedureContext::owner_statement() {
  return getRuleContext<MySqlParser::Owner_statementContext>(0);
}

std::vector<MySqlParser::Proc_paramContext *> MySqlParser::Create_procedureContext::proc_param() {
  return getRuleContexts<MySqlParser::Proc_paramContext>();
}

MySqlParser::Proc_paramContext* MySqlParser::Create_procedureContext::proc_param(size_t i) {
  return getRuleContext<MySqlParser::Proc_paramContext>(i);
}

std::vector<MySqlParser::Routine_characteristicContext *> MySqlParser::Create_procedureContext::routine_characteristic() {
  return getRuleContexts<MySqlParser::Routine_characteristicContext>();
}

MySqlParser::Routine_characteristicContext* MySqlParser::Create_procedureContext::routine_characteristic(size_t i) {
  return getRuleContext<MySqlParser::Routine_characteristicContext>(i);
}


size_t MySqlParser::Create_procedureContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_procedure;
}

void MySqlParser::Create_procedureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_procedure(this);
}

void MySqlParser::Create_procedureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_procedure(this);
}

MySqlParser::Create_procedureContext* MySqlParser::create_procedure() {
  Create_procedureContext *_localctx = _tracker.createInstance<Create_procedureContext>(_ctx, getState());
  enterRule(_localctx, 32, MySqlParser::RuleCreate_procedure);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(875);
    match(MySqlParser::CREATE);
    setState(877);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(876);
      owner_statement();
    }
    setState(879);
    match(MySqlParser::PROCEDURE);
    setState(880);
    full_id();
    setState(881);
    match(MySqlParser::LR_BRACKET);
    setState(883);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & ((1ULL << (MySqlParser::IN - 66))
      | (1ULL << (MySqlParser::INOUT - 66))
      | (1ULL << (MySqlParser::OUT - 66)))) != 0)) {
      setState(882);
      proc_param();
    }
    setState(889);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(885);
      match(MySqlParser::COMMA);
      setState(886);
      proc_param();
      setState(891);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(892);
    match(MySqlParser::RR_BRACKET);
    setState(896);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(893);
        routine_characteristic(); 
      }
      setState(898);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
    }
    setState(899);
    routine_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_functionContext ------------------------------------------------------------------

MySqlParser::Create_functionContext::Create_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_functionContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::Create_functionContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

MySqlParser::Full_idContext* MySqlParser::Create_functionContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

tree::TerminalNode* MySqlParser::Create_functionContext::RETURNS() {
  return getToken(MySqlParser::RETURNS, 0);
}

MySqlParser::Data_typeContext* MySqlParser::Create_functionContext::data_type() {
  return getRuleContext<MySqlParser::Data_typeContext>(0);
}

MySqlParser::Routine_bodyContext* MySqlParser::Create_functionContext::routine_body() {
  return getRuleContext<MySqlParser::Routine_bodyContext>(0);
}

MySqlParser::Owner_statementContext* MySqlParser::Create_functionContext::owner_statement() {
  return getRuleContext<MySqlParser::Owner_statementContext>(0);
}

std::vector<MySqlParser::Func_paramContext *> MySqlParser::Create_functionContext::func_param() {
  return getRuleContexts<MySqlParser::Func_paramContext>();
}

MySqlParser::Func_paramContext* MySqlParser::Create_functionContext::func_param(size_t i) {
  return getRuleContext<MySqlParser::Func_paramContext>(i);
}

std::vector<MySqlParser::Routine_characteristicContext *> MySqlParser::Create_functionContext::routine_characteristic() {
  return getRuleContexts<MySqlParser::Routine_characteristicContext>();
}

MySqlParser::Routine_characteristicContext* MySqlParser::Create_functionContext::routine_characteristic(size_t i) {
  return getRuleContext<MySqlParser::Routine_characteristicContext>(i);
}


size_t MySqlParser::Create_functionContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_function;
}

void MySqlParser::Create_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_function(this);
}

void MySqlParser::Create_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_function(this);
}

MySqlParser::Create_functionContext* MySqlParser::create_function() {
  Create_functionContext *_localctx = _tracker.createInstance<Create_functionContext>(_ctx, getState());
  enterRule(_localctx, 34, MySqlParser::RuleCreate_function);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(901);
    match(MySqlParser::CREATE);
    setState(903);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(902);
      owner_statement();
    }
    setState(905);
    match(MySqlParser::FUNCTION);
    setState(906);
    full_id();
    setState(907);
    match(MySqlParser::LR_BRACKET);
    setState(909);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519))
      | (1ULL << (MySqlParser::QUARTER - 519))
      | (1ULL << (MySqlParser::MONTH - 519))
      | (1ULL << (MySqlParser::DAY - 519))
      | (1ULL << (MySqlParser::HOUR - 519))
      | (1ULL << (MySqlParser::MINUTE - 519))
      | (1ULL << (MySqlParser::WEEK - 519))
      | (1ULL << (MySqlParser::SECOND - 519))
      | (1ULL << (MySqlParser::MICROSECOND - 519))
      | (1ULL << (MySqlParser::TABLES - 519))
      | (1ULL << (MySqlParser::ROUTINE - 519))
      | (1ULL << (MySqlParser::EXECUTE - 519))
      | (1ULL << (MySqlParser::FILE - 519))
      | (1ULL << (MySqlParser::PROCESS - 519))
      | (1ULL << (MySqlParser::RELOAD - 519))
      | (1ULL << (MySqlParser::SHUTDOWN - 519))
      | (1ULL << (MySqlParser::SUPER - 519))
      | (1ULL << (MySqlParser::PRIVILEGES - 519))
      | (1ULL << (MySqlParser::ARMSCII8 - 519))
      | (1ULL << (MySqlParser::ASCII - 519))
      | (1ULL << (MySqlParser::BIG5 - 519))
      | (1ULL << (MySqlParser::CP1250 - 519))
      | (1ULL << (MySqlParser::CP1251 - 519))
      | (1ULL << (MySqlParser::CP1256 - 519))
      | (1ULL << (MySqlParser::CP1257 - 519))
      | (1ULL << (MySqlParser::CP850 - 519))
      | (1ULL << (MySqlParser::CP852 - 519))
      | (1ULL << (MySqlParser::CP866 - 519))
      | (1ULL << (MySqlParser::CP932 - 519))
      | (1ULL << (MySqlParser::DEC8 - 519))
      | (1ULL << (MySqlParser::EUCJPMS - 519))
      | (1ULL << (MySqlParser::EUCKR - 519))
      | (1ULL << (MySqlParser::GB2312 - 519))
      | (1ULL << (MySqlParser::GBK - 519))
      | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
      | (1ULL << (MySqlParser::HEBREW - 583))
      | (1ULL << (MySqlParser::HP8 - 583))
      | (1ULL << (MySqlParser::KEYBCS2 - 583))
      | (1ULL << (MySqlParser::KOI8R - 583))
      | (1ULL << (MySqlParser::KOI8U - 583))
      | (1ULL << (MySqlParser::LATIN1 - 583))
      | (1ULL << (MySqlParser::LATIN2 - 583))
      | (1ULL << (MySqlParser::LATIN5 - 583))
      | (1ULL << (MySqlParser::LATIN7 - 583))
      | (1ULL << (MySqlParser::MACCE - 583))
      | (1ULL << (MySqlParser::MACROMAN - 583))
      | (1ULL << (MySqlParser::SJIS - 583))
      | (1ULL << (MySqlParser::SWE7 - 583))
      | (1ULL << (MySqlParser::TIS620 - 583))
      | (1ULL << (MySqlParser::UCS2 - 583))
      | (1ULL << (MySqlParser::UJIS - 583))
      | (1ULL << (MySqlParser::UTF16 - 583))
      | (1ULL << (MySqlParser::UTF16LE - 583))
      | (1ULL << (MySqlParser::UTF32 - 583))
      | (1ULL << (MySqlParser::UTF8 - 583))
      | (1ULL << (MySqlParser::UTF8MB3 - 583))
      | (1ULL << (MySqlParser::UTF8MB4 - 583))
      | (1ULL << (MySqlParser::ARCHIVE - 583))
      | (1ULL << (MySqlParser::BLACKHOLE - 583))
      | (1ULL << (MySqlParser::CSV - 583))
      | (1ULL << (MySqlParser::FEDERATED - 583))
      | (1ULL << (MySqlParser::INNODB - 583))
      | (1ULL << (MySqlParser::MEMORY - 583))
      | (1ULL << (MySqlParser::MRG_MYISAM - 583))
      | (1ULL << (MySqlParser::MYISAM - 583))
      | (1ULL << (MySqlParser::NDB - 583))
      | (1ULL << (MySqlParser::NDBCLUSTER - 583))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
      | (1ULL << (MySqlParser::REPEATABLE - 583))
      | (1ULL << (MySqlParser::COMMITTED - 583))
      | (1ULL << (MySqlParser::UNCOMMITTED - 583))
      | (1ULL << (MySqlParser::SERIALIZABLE - 583))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
      | (1ULL << (MySqlParser::LINESTRING - 583))
      | (1ULL << (MySqlParser::MULTILINESTRING - 583))
      | (1ULL << (MySqlParser::MULTIPOINT - 583))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
      | (1ULL << (MySqlParser::POINT - 583))
      | (1ULL << (MySqlParser::POLYGON - 583))
      | (1ULL << (MySqlParser::ABS - 583))
      | (1ULL << (MySqlParser::ACOS - 583))
      | (1ULL << (MySqlParser::ADDDATE - 583))
      | (1ULL << (MySqlParser::ADDTIME - 583))
      | (1ULL << (MySqlParser::AES_DECRYPT - 583))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
      | (1ULL << (MySqlParser::AREA - 583))
      | (1ULL << (MySqlParser::ASBINARY - 583))
      | (1ULL << (MySqlParser::ASIN - 583))
      | (1ULL << (MySqlParser::ASTEXT - 583))
      | (1ULL << (MySqlParser::ASWKB - 583))
      | (1ULL << (MySqlParser::ASWKT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
      | (1ULL << (MySqlParser::ATAN - 583))
      | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
      | (1ULL << (MySqlParser::BIN - 647))
      | (1ULL << (MySqlParser::BIT_COUNT - 647))
      | (1ULL << (MySqlParser::BIT_LENGTH - 647))
      | (1ULL << (MySqlParser::BUFFER - 647))
      | (1ULL << (MySqlParser::CEIL - 647))
      | (1ULL << (MySqlParser::CEILING - 647))
      | (1ULL << (MySqlParser::CENTROID - 647))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
      | (1ULL << (MySqlParser::CHARSET - 647))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
      | (1ULL << (MySqlParser::COERCIBILITY - 647))
      | (1ULL << (MySqlParser::COLLATION - 647))
      | (1ULL << (MySqlParser::COMPRESS - 647))
      | (1ULL << (MySqlParser::CONCAT - 647))
      | (1ULL << (MySqlParser::CONCAT_WS - 647))
      | (1ULL << (MySqlParser::CONNECTION_ID - 647))
      | (1ULL << (MySqlParser::CONV - 647))
      | (1ULL << (MySqlParser::CONVERT_TZ - 647))
      | (1ULL << (MySqlParser::COS - 647))
      | (1ULL << (MySqlParser::COT - 647))
      | (1ULL << (MySqlParser::CRC32 - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
      | (1ULL << (MySqlParser::CROSSES - 647))
      | (1ULL << (MySqlParser::DATEDIFF - 647))
      | (1ULL << (MySqlParser::DATE_FORMAT - 647))
      | (1ULL << (MySqlParser::DAYNAME - 647))
      | (1ULL << (MySqlParser::DAYOFMONTH - 647))
      | (1ULL << (MySqlParser::DAYOFWEEK - 647))
      | (1ULL << (MySqlParser::DAYOFYEAR - 647))
      | (1ULL << (MySqlParser::DECODE - 647))
      | (1ULL << (MySqlParser::DEGREES - 647))
      | (1ULL << (MySqlParser::DES_DECRYPT - 647))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
      | (1ULL << (MySqlParser::DIMENSION - 647))
      | (1ULL << (MySqlParser::DISJOINT - 647))
      | (1ULL << (MySqlParser::ELT - 647))
      | (1ULL << (MySqlParser::ENCODE - 647))
      | (1ULL << (MySqlParser::ENCRYPT - 647))
      | (1ULL << (MySqlParser::ENDPOINT - 647))
      | (1ULL << (MySqlParser::ENVELOPE - 647))
      | (1ULL << (MySqlParser::EQUALS - 647))
      | (1ULL << (MySqlParser::EXP - 647))
      | (1ULL << (MySqlParser::EXPORT_SET - 647))
      | (1ULL << (MySqlParser::EXTERIORRING - 647))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
      | (1ULL << (MySqlParser::FIELD - 647))
      | (1ULL << (MySqlParser::FIND_IN_SET - 647))
      | (1ULL << (MySqlParser::FLOOR - 647))
      | (1ULL << (MySqlParser::FORMAT - 647))
      | (1ULL << (MySqlParser::FOUND_ROWS - 647))
      | (1ULL << (MySqlParser::FROM_BASE64 - 647))
      | (1ULL << (MySqlParser::FROM_DAYS - 647))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
      | (1ULL << (MySqlParser::GET_FORMAT - 711))
      | (1ULL << (MySqlParser::GET_LOCK - 711))
      | (1ULL << (MySqlParser::GLENGTH - 711))
      | (1ULL << (MySqlParser::GREATEST - 711))
      | (1ULL << (MySqlParser::GTID_SUBSET - 711))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
      | (1ULL << (MySqlParser::HEX - 711))
      | (1ULL << (MySqlParser::IFNULL - 711))
      | (1ULL << (MySqlParser::INET6_ATON - 711))
      | (1ULL << (MySqlParser::INET6_NTOA - 711))
      | (1ULL << (MySqlParser::INET_ATON - 711))
      | (1ULL << (MySqlParser::INET_NTOA - 711))
      | (1ULL << (MySqlParser::INSTR - 711))
      | (1ULL << (MySqlParser::INTERIORRINGN - 711))
      | (1ULL << (MySqlParser::INTERSECTS - 711))
      | (1ULL << (MySqlParser::ISCLOSED - 711))
      | (1ULL << (MySqlParser::ISEMPTY - 711))
      | (1ULL << (MySqlParser::ISNULL - 711))
      | (1ULL << (MySqlParser::ISSIMPLE - 711))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
      | (1ULL << (MySqlParser::IS_IPV4 - 711))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
      | (1ULL << (MySqlParser::IS_IPV6 - 711))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
      | (1ULL << (MySqlParser::LCASE - 711))
      | (1ULL << (MySqlParser::LEAST - 711))
      | (1ULL << (MySqlParser::LENGTH - 711))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINEFROMWKB - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
      | (1ULL << (MySqlParser::LN - 711))
      | (1ULL << (MySqlParser::LOAD_FILE - 711))
      | (1ULL << (MySqlParser::LOCATE - 711))
      | (1ULL << (MySqlParser::LOG - 711))
      | (1ULL << (MySqlParser::LOG10 - 711))
      | (1ULL << (MySqlParser::LOG2 - 711))
      | (1ULL << (MySqlParser::LOWER - 711))
      | (1ULL << (MySqlParser::LPAD - 711))
      | (1ULL << (MySqlParser::LTRIM - 711))
      | (1ULL << (MySqlParser::MAKEDATE - 711))
      | (1ULL << (MySqlParser::MAKETIME - 711))
      | (1ULL << (MySqlParser::MAKE_SET - 711))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
      | (1ULL << (MySqlParser::MBRCONTAINS - 711))
      | (1ULL << (MySqlParser::MBRDISJOINT - 711))
      | (1ULL << (MySqlParser::MBREQUAL - 711))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
      | (1ULL << (MySqlParser::MBROVERLAPS - 711))
      | (1ULL << (MySqlParser::MBRTOUCHES - 711))
      | (1ULL << (MySqlParser::MBRWITHIN - 711))
      | (1ULL << (MySqlParser::MD5 - 711))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
      | (1ULL << (MySqlParser::MONTHNAME - 711))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::NAME_CONST - 775))
      | (1ULL << (MySqlParser::NULLIF - 775))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
      | (1ULL << (MySqlParser::NUMPOINTS - 775))
      | (1ULL << (MySqlParser::OCT - 775))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
      | (1ULL << (MySqlParser::ORD - 775))
      | (1ULL << (MySqlParser::OVERLAPS - 775))
      | (1ULL << (MySqlParser::PERIOD_ADD - 775))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
      | (1ULL << (MySqlParser::PI - 775))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::POINTFROMWKB - 775))
      | (1ULL << (MySqlParser::POINTN - 775))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYFROMWKB - 775))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::POW - 775))
      | (1ULL << (MySqlParser::POWER - 775))
      | (1ULL << (MySqlParser::QUOTE - 775))
      | (1ULL << (MySqlParser::RADIANS - 775))
      | (1ULL << (MySqlParser::RAND - 775))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
      | (1ULL << (MySqlParser::REVERSE - 775))
      | (1ULL << (MySqlParser::ROUND - 775))
      | (1ULL << (MySqlParser::ROW_COUNT - 775))
      | (1ULL << (MySqlParser::RPAD - 775))
      | (1ULL << (MySqlParser::RTRIM - 775))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
      | (1ULL << (MySqlParser::SESSION_USER - 775))
      | (1ULL << (MySqlParser::SHA - 775))
      | (1ULL << (MySqlParser::SHA1 - 775))
      | (1ULL << (MySqlParser::SHA2 - 775))
      | (1ULL << (MySqlParser::SIGN - 775))
      | (1ULL << (MySqlParser::SIN - 775))
      | (1ULL << (MySqlParser::SLEEP - 775))
      | (1ULL << (MySqlParser::SOUNDEX - 775))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
      | (1ULL << (MySqlParser::SQRT - 775))
      | (1ULL << (MySqlParser::SRID - 775))
      | (1ULL << (MySqlParser::STARTPOINT - 775))
      | (1ULL << (MySqlParser::STRCMP - 775))
      | (1ULL << (MySqlParser::STR_TO_DATE - 775))
      | (1ULL << (MySqlParser::ST_AREA - 775))
      | (1ULL << (MySqlParser::ST_ASBINARY - 775))
      | (1ULL << (MySqlParser::ST_ASTEXT - 775))
      | (1ULL << (MySqlParser::ST_ASWKB - 775))
      | (1ULL << (MySqlParser::ST_ASWKT - 775))
      | (1ULL << (MySqlParser::ST_BUFFER - 775))
      | (1ULL << (MySqlParser::ST_CENTROID - 775))
      | (1ULL << (MySqlParser::ST_CONTAINS - 775))
      | (1ULL << (MySqlParser::ST_CROSSES - 775))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
      | (1ULL << (MySqlParser::ST_DIMENSION - 775))
      | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
      | (1ULL << (MySqlParser::ST_EQUALS - 839))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POINTN - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_SRID - 839))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
      | (1ULL << (MySqlParser::ST_TOUCHES - 839))
      | (1ULL << (MySqlParser::ST_UNION - 839))
      | (1ULL << (MySqlParser::ST_WITHIN - 839))
      | (1ULL << (MySqlParser::ST_X - 839))
      | (1ULL << (MySqlParser::ST_Y - 839))
      | (1ULL << (MySqlParser::SUBDATE - 839))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
      | (1ULL << (MySqlParser::SUBTIME - 839))
      | (1ULL << (MySqlParser::SYSTEM_USER - 839))
      | (1ULL << (MySqlParser::TAN - 839))
      | (1ULL << (MySqlParser::TIMEDIFF - 839))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
      | (1ULL << (MySqlParser::TIME_FORMAT - 839))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
      | (1ULL << (MySqlParser::TOUCHES - 839))
      | (1ULL << (MySqlParser::TO_BASE64 - 839))
      | (1ULL << (MySqlParser::TO_DAYS - 839))
      | (1ULL << (MySqlParser::TO_SECONDS - 839))
      | (1ULL << (MySqlParser::UCASE - 839))
      | (1ULL << (MySqlParser::UNCOMPRESS - 839))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
      | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
      | (1ULL << (MySqlParser::UPDATEXML - 903))
      | (1ULL << (MySqlParser::UPPER - 903))
      | (1ULL << (MySqlParser::UUID - 903))
      | (1ULL << (MySqlParser::UUID_SHORT - 903))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
      | (1ULL << (MySqlParser::VERSION - 903))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
      | (1ULL << (MySqlParser::WEEKDAY - 903))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
      | (1ULL << (MySqlParser::WITHIN - 903))
      | (1ULL << (MySqlParser::YEARWEEK - 903))
      | (1ULL << (MySqlParser::Y_FUNCTION - 903))
      | (1ULL << (MySqlParser::X_FUNCTION - 903))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
      | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
      setState(908);
      func_param();
    }
    setState(915);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(911);
      match(MySqlParser::COMMA);
      setState(912);
      func_param();
      setState(917);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(918);
    match(MySqlParser::RR_BRACKET);
    setState(919);
    match(MySqlParser::RETURNS);
    setState(920);
    data_type();
    setState(924);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(921);
        routine_characteristic(); 
      }
      setState(926);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    }
    setState(927);
    routine_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_serverContext ------------------------------------------------------------------

MySqlParser::Create_serverContext::Create_serverContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_serverContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::Create_serverContext::SERVER() {
  return getToken(MySqlParser::SERVER, 0);
}

MySqlParser::Id_Context* MySqlParser::Create_serverContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Create_serverContext::FOREIGN() {
  return getToken(MySqlParser::FOREIGN, 0);
}

tree::TerminalNode* MySqlParser::Create_serverContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::Create_serverContext::WRAPPER() {
  return getToken(MySqlParser::WRAPPER, 0);
}

tree::TerminalNode* MySqlParser::Create_serverContext::OPTIONS() {
  return getToken(MySqlParser::OPTIONS, 0);
}

std::vector<MySqlParser::Server_optionContext *> MySqlParser::Create_serverContext::server_option() {
  return getRuleContexts<MySqlParser::Server_optionContext>();
}

MySqlParser::Server_optionContext* MySqlParser::Create_serverContext::server_option(size_t i) {
  return getRuleContext<MySqlParser::Server_optionContext>(i);
}

tree::TerminalNode* MySqlParser::Create_serverContext::MYSQL() {
  return getToken(MySqlParser::MYSQL, 0);
}

tree::TerminalNode* MySqlParser::Create_serverContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::Create_serverContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_server;
}

void MySqlParser::Create_serverContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_server(this);
}

void MySqlParser::Create_serverContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_server(this);
}

MySqlParser::Create_serverContext* MySqlParser::create_server() {
  Create_serverContext *_localctx = _tracker.createInstance<Create_serverContext>(_ctx, getState());
  enterRule(_localctx, 36, MySqlParser::RuleCreate_server);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(929);
    match(MySqlParser::CREATE);
    setState(930);
    match(MySqlParser::SERVER);
    setState(931);
    id_();
    setState(932);
    match(MySqlParser::FOREIGN);
    setState(933);
    match(MySqlParser::DATA);
    setState(934);
    match(MySqlParser::WRAPPER);
    setState(935);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::MYSQL || _la == MySqlParser::STRING_LITERAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(936);
    match(MySqlParser::OPTIONS);
    setState(937);
    match(MySqlParser::LR_BRACKET);
    setState(938);
    server_option();
    setState(943);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(939);
      match(MySqlParser::COMMA);
      setState(940);
      server_option();
      setState(945);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(946);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_tableContext ------------------------------------------------------------------

MySqlParser::Create_tableContext::Create_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Create_tableContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_table;
}

void MySqlParser::Create_tableContext::copyFrom(Create_tableContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColCreateTableContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ColCreateTableContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::ColCreateTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_nameContext* MySqlParser::ColCreateTableContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

MySqlParser::Column_def_table_constraintsContext* MySqlParser::ColCreateTableContext::column_def_table_constraints() {
  return getRuleContext<MySqlParser::Column_def_table_constraintsContext>(0);
}

tree::TerminalNode* MySqlParser::ColCreateTableContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

MySqlParser::If_not_existsContext* MySqlParser::ColCreateTableContext::if_not_exists() {
  return getRuleContext<MySqlParser::If_not_existsContext>(0);
}

std::vector<MySqlParser::Table_optionContext *> MySqlParser::ColCreateTableContext::table_option() {
  return getRuleContexts<MySqlParser::Table_optionContext>();
}

MySqlParser::Table_optionContext* MySqlParser::ColCreateTableContext::table_option(size_t i) {
  return getRuleContext<MySqlParser::Table_optionContext>(i);
}

MySqlParser::Partition_optionsContext* MySqlParser::ColCreateTableContext::partition_options() {
  return getRuleContext<MySqlParser::Partition_optionsContext>(0);
}

MySqlParser::ColCreateTableContext::ColCreateTableContext(Create_tableContext *ctx) { copyFrom(ctx); }

void MySqlParser::ColCreateTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColCreateTable(this);
}
void MySqlParser::ColCreateTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColCreateTable(this);
}
//----------------- CopyCreateTableContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CopyCreateTableContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CopyCreateTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

std::vector<MySqlParser::Table_nameContext *> MySqlParser::CopyCreateTableContext::table_name() {
  return getRuleContexts<MySqlParser::Table_nameContext>();
}

MySqlParser::Table_nameContext* MySqlParser::CopyCreateTableContext::table_name(size_t i) {
  return getRuleContext<MySqlParser::Table_nameContext>(i);
}

tree::TerminalNode* MySqlParser::CopyCreateTableContext::LIKE() {
  return getToken(MySqlParser::LIKE, 0);
}

tree::TerminalNode* MySqlParser::CopyCreateTableContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

MySqlParser::If_not_existsContext* MySqlParser::CopyCreateTableContext::if_not_exists() {
  return getRuleContext<MySqlParser::If_not_existsContext>(0);
}

MySqlParser::CopyCreateTableContext::CopyCreateTableContext(Create_tableContext *ctx) { copyFrom(ctx); }

void MySqlParser::CopyCreateTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCopyCreateTable(this);
}
void MySqlParser::CopyCreateTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCopyCreateTable(this);
}
//----------------- QueryCreateTableContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::QueryCreateTableContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::QueryCreateTableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_nameContext* MySqlParser::QueryCreateTableContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

MySqlParser::Select_statementContext* MySqlParser::QueryCreateTableContext::select_statement() {
  return getRuleContext<MySqlParser::Select_statementContext>(0);
}

tree::TerminalNode* MySqlParser::QueryCreateTableContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

MySqlParser::If_not_existsContext* MySqlParser::QueryCreateTableContext::if_not_exists() {
  return getRuleContext<MySqlParser::If_not_existsContext>(0);
}

MySqlParser::Column_def_table_constraintsContext* MySqlParser::QueryCreateTableContext::column_def_table_constraints() {
  return getRuleContext<MySqlParser::Column_def_table_constraintsContext>(0);
}

std::vector<MySqlParser::Table_optionContext *> MySqlParser::QueryCreateTableContext::table_option() {
  return getRuleContexts<MySqlParser::Table_optionContext>();
}

MySqlParser::Table_optionContext* MySqlParser::QueryCreateTableContext::table_option(size_t i) {
  return getRuleContext<MySqlParser::Table_optionContext>(i);
}

MySqlParser::Partition_optionsContext* MySqlParser::QueryCreateTableContext::partition_options() {
  return getRuleContext<MySqlParser::Partition_optionsContext>(0);
}

tree::TerminalNode* MySqlParser::QueryCreateTableContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

tree::TerminalNode* MySqlParser::QueryCreateTableContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::QueryCreateTableContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

MySqlParser::QueryCreateTableContext::QueryCreateTableContext(Create_tableContext *ctx) { copyFrom(ctx); }

void MySqlParser::QueryCreateTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQueryCreateTable(this);
}
void MySqlParser::QueryCreateTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQueryCreateTable(this);
}
MySqlParser::Create_tableContext* MySqlParser::create_table() {
  Create_tableContext *_localctx = _tracker.createInstance<Create_tableContext>(_ctx, getState());
  enterRule(_localctx, 38, MySqlParser::RuleCreate_table);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1026);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Create_tableContext *>(_tracker.createInstance<MySqlParser::CopyCreateTableContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(948);
      match(MySqlParser::CREATE);
      setState(950);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::TEMPORARY) {
        setState(949);
        match(MySqlParser::TEMPORARY);
      }
      setState(952);
      match(MySqlParser::TABLE);
      setState(954);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(953);
        if_not_exists();
      }
      setState(956);
      table_name();
      setState(964);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LIKE: {
          setState(957);
          match(MySqlParser::LIKE);
          setState(958);
          table_name();
          break;
        }

        case MySqlParser::LR_BRACKET: {
          setState(959);
          match(MySqlParser::LR_BRACKET);
          setState(960);
          match(MySqlParser::LIKE);
          setState(961);
          table_name();
          setState(962);
          match(MySqlParser::RR_BRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Create_tableContext *>(_tracker.createInstance<MySqlParser::QueryCreateTableContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(966);
      match(MySqlParser::CREATE);
      setState(968);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::TEMPORARY) {
        setState(967);
        match(MySqlParser::TEMPORARY);
      }
      setState(970);
      match(MySqlParser::TABLE);
      setState(972);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(971);
        if_not_exists();
      }
      setState(974);
      table_name();
      setState(976);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
      case 1: {
        setState(975);
        column_def_table_constraints();
        break;
      }

      }
      setState(988);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 21) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 21)) & ((1ULL << (MySqlParser::CHARACTER - 21))
        | (1ULL << (MySqlParser::COLLATE - 21))
        | (1ULL << (MySqlParser::DEFAULT - 21))
        | (1ULL << (MySqlParser::INDEX - 21)))) != 0) || _la == MySqlParser::UNION || ((((_la - 255) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 255)) & ((1ULL << (MySqlParser::AUTO_INCREMENT - 255))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 255))
        | (1ULL << (MySqlParser::CHECKSUM - 255))
        | (1ULL << (MySqlParser::COMMENT - 255))
        | (1ULL << (MySqlParser::COMPRESSION - 255))
        | (1ULL << (MySqlParser::CONNECTION - 255))
        | (1ULL << (MySqlParser::DATA - 255))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 255))
        | (1ULL << (MySqlParser::ENCRYPTION - 255))
        | (1ULL << (MySqlParser::ENGINE - 255)))) != 0) || ((((_la - 350) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 350)) & ((1ULL << (MySqlParser::INSERT_METHOD - 350))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 350))
        | (1ULL << (MySqlParser::MAX_ROWS - 350))
        | (1ULL << (MySqlParser::MIN_ROWS - 350)))) != 0) || ((((_la - 425) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 425)) & ((1ULL << (MySqlParser::PACK_KEYS - 425))
        | (1ULL << (MySqlParser::PASSWORD - 425))
        | (1ULL << (MySqlParser::ROW_FORMAT - 425)))) != 0) || ((((_la - 501) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 501)) & ((1ULL << (MySqlParser::STATS_AUTO_RECALC - 501))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 501))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 501))
        | (1ULL << (MySqlParser::TABLESPACE - 501)))) != 0) || _la == MySqlParser::CHARSET) {
        setState(978);
        table_option();
        setState(985);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 21) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 21)) & ((1ULL << (MySqlParser::CHARACTER - 21))
          | (1ULL << (MySqlParser::COLLATE - 21))
          | (1ULL << (MySqlParser::DEFAULT - 21))
          | (1ULL << (MySqlParser::INDEX - 21)))) != 0) || _la == MySqlParser::UNION || ((((_la - 255) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 255)) & ((1ULL << (MySqlParser::AUTO_INCREMENT - 255))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 255))
          | (1ULL << (MySqlParser::CHECKSUM - 255))
          | (1ULL << (MySqlParser::COMMENT - 255))
          | (1ULL << (MySqlParser::COMPRESSION - 255))
          | (1ULL << (MySqlParser::CONNECTION - 255))
          | (1ULL << (MySqlParser::DATA - 255))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 255))
          | (1ULL << (MySqlParser::ENCRYPTION - 255))
          | (1ULL << (MySqlParser::ENGINE - 255)))) != 0) || ((((_la - 350) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 350)) & ((1ULL << (MySqlParser::INSERT_METHOD - 350))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 350))
          | (1ULL << (MySqlParser::MAX_ROWS - 350))
          | (1ULL << (MySqlParser::MIN_ROWS - 350)))) != 0) || ((((_la - 425) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 425)) & ((1ULL << (MySqlParser::PACK_KEYS - 425))
          | (1ULL << (MySqlParser::PASSWORD - 425))
          | (1ULL << (MySqlParser::ROW_FORMAT - 425)))) != 0) || ((((_la - 501) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 501)) & ((1ULL << (MySqlParser::STATS_AUTO_RECALC - 501))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 501))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 501))
          | (1ULL << (MySqlParser::TABLESPACE - 501)))) != 0) || _la == MySqlParser::CHARSET || _la == MySqlParser::COMMA) {
          setState(980);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::COMMA) {
            setState(979);
            match(MySqlParser::COMMA);
          }
          setState(982);
          table_option();
          setState(987);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(991);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::PARTITION) {
        setState(990);
        partition_options();
      }
      setState(994);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IGNORE

      || _la == MySqlParser::REPLACE) {
        setState(993);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::IGNORE

        || _la == MySqlParser::REPLACE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(997);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(996);
        match(MySqlParser::AS);
      }
      setState(999);
      select_statement();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Create_tableContext *>(_tracker.createInstance<MySqlParser::ColCreateTableContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1001);
      match(MySqlParser::CREATE);
      setState(1003);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::TEMPORARY) {
        setState(1002);
        match(MySqlParser::TEMPORARY);
      }
      setState(1005);
      match(MySqlParser::TABLE);
      setState(1007);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(1006);
        if_not_exists();
      }
      setState(1009);
      table_name();
      setState(1010);
      column_def_table_constraints();
      setState(1021);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 21) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 21)) & ((1ULL << (MySqlParser::CHARACTER - 21))
        | (1ULL << (MySqlParser::COLLATE - 21))
        | (1ULL << (MySqlParser::DEFAULT - 21))
        | (1ULL << (MySqlParser::INDEX - 21)))) != 0) || _la == MySqlParser::UNION || ((((_la - 255) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 255)) & ((1ULL << (MySqlParser::AUTO_INCREMENT - 255))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 255))
        | (1ULL << (MySqlParser::CHECKSUM - 255))
        | (1ULL << (MySqlParser::COMMENT - 255))
        | (1ULL << (MySqlParser::COMPRESSION - 255))
        | (1ULL << (MySqlParser::CONNECTION - 255))
        | (1ULL << (MySqlParser::DATA - 255))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 255))
        | (1ULL << (MySqlParser::ENCRYPTION - 255))
        | (1ULL << (MySqlParser::ENGINE - 255)))) != 0) || ((((_la - 350) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 350)) & ((1ULL << (MySqlParser::INSERT_METHOD - 350))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 350))
        | (1ULL << (MySqlParser::MAX_ROWS - 350))
        | (1ULL << (MySqlParser::MIN_ROWS - 350)))) != 0) || ((((_la - 425) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 425)) & ((1ULL << (MySqlParser::PACK_KEYS - 425))
        | (1ULL << (MySqlParser::PASSWORD - 425))
        | (1ULL << (MySqlParser::ROW_FORMAT - 425)))) != 0) || ((((_la - 501) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 501)) & ((1ULL << (MySqlParser::STATS_AUTO_RECALC - 501))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 501))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 501))
        | (1ULL << (MySqlParser::TABLESPACE - 501)))) != 0) || _la == MySqlParser::CHARSET) {
        setState(1011);
        table_option();
        setState(1018);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 21) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 21)) & ((1ULL << (MySqlParser::CHARACTER - 21))
          | (1ULL << (MySqlParser::COLLATE - 21))
          | (1ULL << (MySqlParser::DEFAULT - 21))
          | (1ULL << (MySqlParser::INDEX - 21)))) != 0) || _la == MySqlParser::UNION || ((((_la - 255) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 255)) & ((1ULL << (MySqlParser::AUTO_INCREMENT - 255))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 255))
          | (1ULL << (MySqlParser::CHECKSUM - 255))
          | (1ULL << (MySqlParser::COMMENT - 255))
          | (1ULL << (MySqlParser::COMPRESSION - 255))
          | (1ULL << (MySqlParser::CONNECTION - 255))
          | (1ULL << (MySqlParser::DATA - 255))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 255))
          | (1ULL << (MySqlParser::ENCRYPTION - 255))
          | (1ULL << (MySqlParser::ENGINE - 255)))) != 0) || ((((_la - 350) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 350)) & ((1ULL << (MySqlParser::INSERT_METHOD - 350))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 350))
          | (1ULL << (MySqlParser::MAX_ROWS - 350))
          | (1ULL << (MySqlParser::MIN_ROWS - 350)))) != 0) || ((((_la - 425) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 425)) & ((1ULL << (MySqlParser::PACK_KEYS - 425))
          | (1ULL << (MySqlParser::PASSWORD - 425))
          | (1ULL << (MySqlParser::ROW_FORMAT - 425)))) != 0) || ((((_la - 501) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 501)) & ((1ULL << (MySqlParser::STATS_AUTO_RECALC - 501))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 501))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 501))
          | (1ULL << (MySqlParser::TABLESPACE - 501)))) != 0) || _la == MySqlParser::CHARSET || _la == MySqlParser::COMMA) {
          setState(1013);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::COMMA) {
            setState(1012);
            match(MySqlParser::COMMA);
          }
          setState(1015);
          table_option();
          setState(1020);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(1024);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::PARTITION) {
        setState(1023);
        partition_options();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_tablespace_innodbContext ------------------------------------------------------------------

MySqlParser::Create_tablespace_innodbContext::Create_tablespace_innodbContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_tablespace_innodbContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_innodbContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::Id_Context* MySqlParser::Create_tablespace_innodbContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_innodbContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_innodbContext::DATAFILE() {
  return getToken(MySqlParser::DATAFILE, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_innodbContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_innodbContext::FILE_BLOCK_SIZE() {
  return getToken(MySqlParser::FILE_BLOCK_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_innodbContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::Engine_nameContext* MySqlParser::Create_tablespace_innodbContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}

MySqlParser::Filesize_literalContext* MySqlParser::Create_tablespace_innodbContext::filesize_literal() {
  return getRuleContext<MySqlParser::Filesize_literalContext>(0);
}


size_t MySqlParser::Create_tablespace_innodbContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_tablespace_innodb;
}

void MySqlParser::Create_tablespace_innodbContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_tablespace_innodb(this);
}

void MySqlParser::Create_tablespace_innodbContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_tablespace_innodb(this);
}

MySqlParser::Create_tablespace_innodbContext* MySqlParser::create_tablespace_innodb() {
  Create_tablespace_innodbContext *_localctx = _tracker.createInstance<Create_tablespace_innodbContext>(_ctx, getState());
  enterRule(_localctx, 40, MySqlParser::RuleCreate_tablespace_innodb);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1028);
    match(MySqlParser::CREATE);
    setState(1029);
    match(MySqlParser::TABLESPACE);
    setState(1030);
    id_();
    setState(1031);
    match(MySqlParser::ADD);
    setState(1032);
    match(MySqlParser::DATAFILE);
    setState(1033);
    dynamic_cast<Create_tablespace_innodbContext *>(_localctx)->datafile = match(MySqlParser::STRING_LITERAL);
    setState(1037);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FILE_BLOCK_SIZE) {
      setState(1034);
      match(MySqlParser::FILE_BLOCK_SIZE);
      setState(1035);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(1036);
      dynamic_cast<Create_tablespace_innodbContext *>(_localctx)->fb_size = filesize_literal();
    }
    setState(1044);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ENGINE) {
      setState(1039);
      match(MySqlParser::ENGINE);
      setState(1041);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1040);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1043);
      engine_name();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_tablespace_ndbContext ------------------------------------------------------------------

MySqlParser::Create_tablespace_ndbContext::Create_tablespace_ndbContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::Create_tablespace_ndbContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::Create_tablespace_ndbContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::DATAFILE() {
  return getToken(MySqlParser::DATAFILE, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::USE() {
  return getToken(MySqlParser::USE, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::LOGFILE() {
  return getToken(MySqlParser::LOGFILE, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::Engine_nameContext* MySqlParser::Create_tablespace_ndbContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::Create_tablespace_ndbContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::EXTENT_SIZE() {
  return getToken(MySqlParser::EXTENT_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::INITIAL_SIZE() {
  return getToken(MySqlParser::INITIAL_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::AUTOEXTEND_SIZE() {
  return getToken(MySqlParser::AUTOEXTEND_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::MAX_SIZE() {
  return getToken(MySqlParser::MAX_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::NODEGROUP() {
  return getToken(MySqlParser::NODEGROUP, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::WAIT() {
  return getToken(MySqlParser::WAIT, 0);
}

tree::TerminalNode* MySqlParser::Create_tablespace_ndbContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

std::vector<MySqlParser::Filesize_literalContext *> MySqlParser::Create_tablespace_ndbContext::filesize_literal() {
  return getRuleContexts<MySqlParser::Filesize_literalContext>();
}

MySqlParser::Filesize_literalContext* MySqlParser::Create_tablespace_ndbContext::filesize_literal(size_t i) {
  return getRuleContext<MySqlParser::Filesize_literalContext>(i);
}


size_t MySqlParser::Create_tablespace_ndbContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_tablespace_ndb;
}

void MySqlParser::Create_tablespace_ndbContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_tablespace_ndb(this);
}

void MySqlParser::Create_tablespace_ndbContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_tablespace_ndb(this);
}

MySqlParser::Create_tablespace_ndbContext* MySqlParser::create_tablespace_ndb() {
  Create_tablespace_ndbContext *_localctx = _tracker.createInstance<Create_tablespace_ndbContext>(_ctx, getState());
  enterRule(_localctx, 42, MySqlParser::RuleCreate_tablespace_ndb);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1046);
    match(MySqlParser::CREATE);
    setState(1047);
    match(MySqlParser::TABLESPACE);
    setState(1048);
    id_();
    setState(1049);
    match(MySqlParser::ADD);
    setState(1050);
    match(MySqlParser::DATAFILE);
    setState(1051);
    dynamic_cast<Create_tablespace_ndbContext *>(_localctx)->datafile = match(MySqlParser::STRING_LITERAL);
    setState(1052);
    match(MySqlParser::USE);
    setState(1053);
    match(MySqlParser::LOGFILE);
    setState(1054);
    match(MySqlParser::GROUP);
    setState(1055);
    id_();
    setState(1061);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EXTENT_SIZE) {
      setState(1056);
      match(MySqlParser::EXTENT_SIZE);
      setState(1058);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1057);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1060);
      dynamic_cast<Create_tablespace_ndbContext *>(_localctx)->extent_size = filesize_literal();
    }
    setState(1068);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INITIAL_SIZE) {
      setState(1063);
      match(MySqlParser::INITIAL_SIZE);
      setState(1065);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1064);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1067);
      dynamic_cast<Create_tablespace_ndbContext *>(_localctx)->initial_size = filesize_literal();
    }
    setState(1075);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::AUTOEXTEND_SIZE) {
      setState(1070);
      match(MySqlParser::AUTOEXTEND_SIZE);
      setState(1072);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1071);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1074);
      dynamic_cast<Create_tablespace_ndbContext *>(_localctx)->autoextend_size = filesize_literal();
    }
    setState(1082);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::MAX_SIZE) {
      setState(1077);
      match(MySqlParser::MAX_SIZE);
      setState(1079);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1078);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1081);
      dynamic_cast<Create_tablespace_ndbContext *>(_localctx)->max_size = filesize_literal();
    }
    setState(1089);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NODEGROUP) {
      setState(1084);
      match(MySqlParser::NODEGROUP);
      setState(1086);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1085);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1088);
      id_();
    }
    setState(1092);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WAIT) {
      setState(1091);
      match(MySqlParser::WAIT);
    }
    setState(1099);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMENT) {
      setState(1094);
      match(MySqlParser::COMMENT);
      setState(1096);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1095);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1098);
      dynamic_cast<Create_tablespace_ndbContext *>(_localctx)->comment = match(MySqlParser::STRING_LITERAL);
    }
    setState(1101);
    match(MySqlParser::ENGINE);
    setState(1103);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EQUAL_SYMBOL) {
      setState(1102);
      match(MySqlParser::EQUAL_SYMBOL);
    }
    setState(1105);
    engine_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_triggerContext ------------------------------------------------------------------

MySqlParser::Create_triggerContext::Create_triggerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_triggerContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::TRIGGER() {
  return getToken(MySqlParser::TRIGGER, 0);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Create_triggerContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::EACH() {
  return getToken(MySqlParser::EACH, 0);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::ROW() {
  return getToken(MySqlParser::ROW, 0);
}

MySqlParser::Routine_bodyContext* MySqlParser::Create_triggerContext::routine_body() {
  return getRuleContext<MySqlParser::Routine_bodyContext>(0);
}

std::vector<MySqlParser::Full_idContext *> MySqlParser::Create_triggerContext::full_id() {
  return getRuleContexts<MySqlParser::Full_idContext>();
}

MySqlParser::Full_idContext* MySqlParser::Create_triggerContext::full_id(size_t i) {
  return getRuleContext<MySqlParser::Full_idContext>(i);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::BEFORE() {
  return getToken(MySqlParser::BEFORE, 0);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::AFTER() {
  return getToken(MySqlParser::AFTER, 0);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::INSERT() {
  return getToken(MySqlParser::INSERT, 0);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::DELETE() {
  return getToken(MySqlParser::DELETE, 0);
}

MySqlParser::Owner_statementContext* MySqlParser::Create_triggerContext::owner_statement() {
  return getRuleContext<MySqlParser::Owner_statementContext>(0);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::FOLLOWS() {
  return getToken(MySqlParser::FOLLOWS, 0);
}

tree::TerminalNode* MySqlParser::Create_triggerContext::PRECEDES() {
  return getToken(MySqlParser::PRECEDES, 0);
}


size_t MySqlParser::Create_triggerContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_trigger;
}

void MySqlParser::Create_triggerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_trigger(this);
}

void MySqlParser::Create_triggerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_trigger(this);
}

MySqlParser::Create_triggerContext* MySqlParser::create_trigger() {
  Create_triggerContext *_localctx = _tracker.createInstance<Create_triggerContext>(_ctx, getState());
  enterRule(_localctx, 44, MySqlParser::RuleCreate_trigger);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1107);
    match(MySqlParser::CREATE);
    setState(1109);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(1108);
      owner_statement();
    }
    setState(1111);
    match(MySqlParser::TRIGGER);
    setState(1112);
    dynamic_cast<Create_triggerContext *>(_localctx)->this_trigger = full_id();
    setState(1113);
    dynamic_cast<Create_triggerContext *>(_localctx)->trigger_time = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::BEFORE || _la == MySqlParser::AFTER)) {
      dynamic_cast<Create_triggerContext *>(_localctx)->trigger_time = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1114);
    dynamic_cast<Create_triggerContext *>(_localctx)->trigger_event = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::DELETE

    || _la == MySqlParser::INSERT || _la == MySqlParser::UPDATE)) {
      dynamic_cast<Create_triggerContext *>(_localctx)->trigger_event = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1115);
    match(MySqlParser::ON);
    setState(1116);
    table_name();
    setState(1117);
    match(MySqlParser::FOR);
    setState(1118);
    match(MySqlParser::EACH);
    setState(1119);
    match(MySqlParser::ROW);
    setState(1122);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FOLLOWS || _la == MySqlParser::PRECEDES) {
      setState(1120);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FOLLOWS || _la == MySqlParser::PRECEDES)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1121);
      dynamic_cast<Create_triggerContext *>(_localctx)->other_trigger = full_id();
    }
    setState(1124);
    routine_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_viewContext ------------------------------------------------------------------

MySqlParser::Create_viewContext::Create_viewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_viewContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

MySqlParser::Full_idContext* MySqlParser::Create_viewContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::Select_statementContext* MySqlParser::Create_viewContext::select_statement() {
  return getRuleContext<MySqlParser::Select_statementContext>(0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::OR() {
  return getToken(MySqlParser::OR, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

MySqlParser::Owner_statementContext* MySqlParser::Create_viewContext::owner_statement() {
  return getRuleContext<MySqlParser::Owner_statementContext>(0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::SQL() {
  return getToken(MySqlParser::SQL, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::SECURITY() {
  return getToken(MySqlParser::SECURITY, 0);
}

MySqlParser::Id_listContext* MySqlParser::Create_viewContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::OPTION() {
  return getToken(MySqlParser::OPTION, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::UNDEFINED() {
  return getToken(MySqlParser::UNDEFINED, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::MERGE() {
  return getToken(MySqlParser::MERGE, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::TEMPTABLE() {
  return getToken(MySqlParser::TEMPTABLE, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::DEFINER() {
  return getToken(MySqlParser::DEFINER, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::INVOKER() {
  return getToken(MySqlParser::INVOKER, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::CASCADED() {
  return getToken(MySqlParser::CASCADED, 0);
}

tree::TerminalNode* MySqlParser::Create_viewContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::Create_viewContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_view;
}

void MySqlParser::Create_viewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_view(this);
}

void MySqlParser::Create_viewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_view(this);
}

MySqlParser::Create_viewContext* MySqlParser::create_view() {
  Create_viewContext *_localctx = _tracker.createInstance<Create_viewContext>(_ctx, getState());
  enterRule(_localctx, 46, MySqlParser::RuleCreate_view);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1126);
    match(MySqlParser::CREATE);
    setState(1129);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::OR) {
      setState(1127);
      match(MySqlParser::OR);
      setState(1128);
      match(MySqlParser::REPLACE);
    }
    setState(1134);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ALGORITHM) {
      setState(1131);
      match(MySqlParser::ALGORITHM);
      setState(1132);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(1133);
      dynamic_cast<Create_viewContext *>(_localctx)->alg_type = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::MERGE || _la == MySqlParser::TEMPTABLE

      || _la == MySqlParser::UNDEFINED)) {
        dynamic_cast<Create_viewContext *>(_localctx)->alg_type = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1137);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(1136);
      owner_statement();
    }
    setState(1142);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::SQL) {
      setState(1139);
      match(MySqlParser::SQL);
      setState(1140);
      match(MySqlParser::SECURITY);
      setState(1141);
      dynamic_cast<Create_viewContext *>(_localctx)->sec_context = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFINER

      || _la == MySqlParser::INVOKER)) {
        dynamic_cast<Create_viewContext *>(_localctx)->sec_context = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1144);
    match(MySqlParser::VIEW);
    setState(1145);
    full_id();
    setState(1150);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LR_BRACKET) {
      setState(1146);
      match(MySqlParser::LR_BRACKET);
      setState(1147);
      id_list();
      setState(1148);
      match(MySqlParser::RR_BRACKET);
    }
    setState(1152);
    match(MySqlParser::AS);
    setState(1153);
    select_statement();
    setState(1160);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WITH) {
      setState(1154);
      match(MySqlParser::WITH);
      setState(1156);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CASCADED || _la == MySqlParser::LOCAL) {
        setState(1155);
        dynamic_cast<Create_viewContext *>(_localctx)->check_option = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::CASCADED || _la == MySqlParser::LOCAL)) {
          dynamic_cast<Create_viewContext *>(_localctx)->check_option = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1158);
      match(MySqlParser::CHECK);
      setState(1159);
      match(MySqlParser::OPTION);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_database_optionContext ------------------------------------------------------------------

MySqlParser::Create_database_optionContext::Create_database_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_database_optionContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::Create_database_optionContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

MySqlParser::Charset_nameContext* MySqlParser::Create_database_optionContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Create_database_optionContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::Create_database_optionContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::Collation_nameContext* MySqlParser::Create_database_optionContext::collation_name() {
  return getRuleContext<MySqlParser::Collation_nameContext>(0);
}


size_t MySqlParser::Create_database_optionContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_database_option;
}

void MySqlParser::Create_database_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_database_option(this);
}

void MySqlParser::Create_database_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_database_option(this);
}

MySqlParser::Create_database_optionContext* MySqlParser::create_database_option() {
  Create_database_optionContext *_localctx = _tracker.createInstance<Create_database_optionContext>(_ctx, getState());
  enterRule(_localctx, 48, MySqlParser::RuleCreate_database_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1179);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1163);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DEFAULT) {
        setState(1162);
        match(MySqlParser::DEFAULT);
      }
      setState(1165);
      match(MySqlParser::CHARACTER);
      setState(1166);
      match(MySqlParser::SET);
      setState(1168);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1167);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1170);
      charset_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1172);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DEFAULT) {
        setState(1171);
        match(MySqlParser::DEFAULT);
      }
      setState(1174);
      match(MySqlParser::COLLATE);
      setState(1176);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1175);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1178);
      collation_name();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owner_statementContext ------------------------------------------------------------------

MySqlParser::Owner_statementContext::Owner_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Owner_statementContext::DEFINER() {
  return getToken(MySqlParser::DEFINER, 0);
}

MySqlParser::User_nameContext* MySqlParser::Owner_statementContext::user_name() {
  return getRuleContext<MySqlParser::User_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Owner_statementContext::CURRENT_USER() {
  return getToken(MySqlParser::CURRENT_USER, 0);
}


size_t MySqlParser::Owner_statementContext::getRuleIndex() const {
  return MySqlParser::RuleOwner_statement;
}

void MySqlParser::Owner_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwner_statement(this);
}

void MySqlParser::Owner_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwner_statement(this);
}

MySqlParser::Owner_statementContext* MySqlParser::owner_statement() {
  Owner_statementContext *_localctx = _tracker.createInstance<Owner_statementContext>(_ctx, getState());
  enterRule(_localctx, 50, MySqlParser::RuleOwner_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1181);
    match(MySqlParser::DEFINER);
    setState(1182);
    match(MySqlParser::EQUAL_SYMBOL);
    setState(1189);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::STRING_USER_NAME: {
        setState(1183);
        user_name();
        break;
      }

      case MySqlParser::CURRENT_USER: {
        setState(1184);
        match(MySqlParser::CURRENT_USER);
        setState(1187);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LR_BRACKET) {
          setState(1185);
          match(MySqlParser::LR_BRACKET);
          setState(1186);
          match(MySqlParser::RR_BRACKET);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Schedule_expressionContext ------------------------------------------------------------------

MySqlParser::Schedule_expressionContext::Schedule_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Schedule_expressionContext::getRuleIndex() const {
  return MySqlParser::RuleSchedule_expression;
}

void MySqlParser::Schedule_expressionContext::copyFrom(Schedule_expressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PreciseScheduleContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PreciseScheduleContext::AT() {
  return getToken(MySqlParser::AT, 0);
}

MySqlParser::Timestamp_valueContext* MySqlParser::PreciseScheduleContext::timestamp_value() {
  return getRuleContext<MySqlParser::Timestamp_valueContext>(0);
}

std::vector<MySqlParser::Interval_exprContext *> MySqlParser::PreciseScheduleContext::interval_expr() {
  return getRuleContexts<MySqlParser::Interval_exprContext>();
}

MySqlParser::Interval_exprContext* MySqlParser::PreciseScheduleContext::interval_expr(size_t i) {
  return getRuleContext<MySqlParser::Interval_exprContext>(i);
}

MySqlParser::PreciseScheduleContext::PreciseScheduleContext(Schedule_expressionContext *ctx) { copyFrom(ctx); }

void MySqlParser::PreciseScheduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreciseSchedule(this);
}
void MySqlParser::PreciseScheduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreciseSchedule(this);
}
//----------------- IntervalScheduleContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::IntervalScheduleContext::EVERY() {
  return getToken(MySqlParser::EVERY, 0);
}

MySqlParser::Interval_typeContext* MySqlParser::IntervalScheduleContext::interval_type() {
  return getRuleContext<MySqlParser::Interval_typeContext>(0);
}

MySqlParser::Decimal_literalContext* MySqlParser::IntervalScheduleContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::IntervalScheduleContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::IntervalScheduleContext::STARTS() {
  return getToken(MySqlParser::STARTS, 0);
}

tree::TerminalNode* MySqlParser::IntervalScheduleContext::ENDS() {
  return getToken(MySqlParser::ENDS, 0);
}

std::vector<MySqlParser::Timestamp_valueContext *> MySqlParser::IntervalScheduleContext::timestamp_value() {
  return getRuleContexts<MySqlParser::Timestamp_valueContext>();
}

MySqlParser::Timestamp_valueContext* MySqlParser::IntervalScheduleContext::timestamp_value(size_t i) {
  return getRuleContext<MySqlParser::Timestamp_valueContext>(i);
}

std::vector<MySqlParser::Interval_exprContext *> MySqlParser::IntervalScheduleContext::interval_expr() {
  return getRuleContexts<MySqlParser::Interval_exprContext>();
}

MySqlParser::Interval_exprContext* MySqlParser::IntervalScheduleContext::interval_expr(size_t i) {
  return getRuleContext<MySqlParser::Interval_exprContext>(i);
}

MySqlParser::IntervalScheduleContext::IntervalScheduleContext(Schedule_expressionContext *ctx) { copyFrom(ctx); }

void MySqlParser::IntervalScheduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntervalSchedule(this);
}
void MySqlParser::IntervalScheduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntervalSchedule(this);
}
MySqlParser::Schedule_expressionContext* MySqlParser::schedule_expression() {
  Schedule_expressionContext *_localctx = _tracker.createInstance<Schedule_expressionContext>(_ctx, getState());
  enterRule(_localctx, 52, MySqlParser::RuleSchedule_expression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1225);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::AT: {
        _localctx = dynamic_cast<Schedule_expressionContext *>(_tracker.createInstance<MySqlParser::PreciseScheduleContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1191);
        match(MySqlParser::AT);
        setState(1192);
        timestamp_value();
        setState(1196);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::PLUS) {
          setState(1193);
          interval_expr();
          setState(1198);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case MySqlParser::EVERY: {
        _localctx = dynamic_cast<Schedule_expressionContext *>(_tracker.createInstance<MySqlParser::IntervalScheduleContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1199);
        match(MySqlParser::EVERY);
        setState(1202);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
        case 1: {
          setState(1200);
          decimal_literal();
          break;
        }

        case 2: {
          setState(1201);
          expression(0);
          break;
        }

        }
        setState(1204);
        interval_type();
        setState(1213);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::STARTS) {
          setState(1205);
          match(MySqlParser::STARTS);
          setState(1206);
          dynamic_cast<IntervalScheduleContext *>(_localctx)->startts = timestamp_value();
          setState(1210);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySqlParser::PLUS) {
            setState(1207);
            dynamic_cast<IntervalScheduleContext *>(_localctx)->interval_exprContext = interval_expr();
            dynamic_cast<IntervalScheduleContext *>(_localctx)->start_intervals.push_back(dynamic_cast<IntervalScheduleContext *>(_localctx)->interval_exprContext);
            setState(1212);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(1223);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ENDS) {
          setState(1215);
          match(MySqlParser::ENDS);
          setState(1216);
          dynamic_cast<IntervalScheduleContext *>(_localctx)->endts = timestamp_value();
          setState(1220);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySqlParser::PLUS) {
            setState(1217);
            dynamic_cast<IntervalScheduleContext *>(_localctx)->interval_exprContext = interval_expr();
            dynamic_cast<IntervalScheduleContext *>(_localctx)->end_intervals.push_back(dynamic_cast<IntervalScheduleContext *>(_localctx)->interval_exprContext);
            setState(1222);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Timestamp_valueContext ------------------------------------------------------------------

MySqlParser::Timestamp_valueContext::Timestamp_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Timestamp_valueContext::CURRENT_TIMESTAMP() {
  return getToken(MySqlParser::CURRENT_TIMESTAMP, 0);
}

MySqlParser::String_literalContext* MySqlParser::Timestamp_valueContext::string_literal() {
  return getRuleContext<MySqlParser::String_literalContext>(0);
}

MySqlParser::Decimal_literalContext* MySqlParser::Timestamp_valueContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::Timestamp_valueContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::Timestamp_valueContext::getRuleIndex() const {
  return MySqlParser::RuleTimestamp_value;
}

void MySqlParser::Timestamp_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimestamp_value(this);
}

void MySqlParser::Timestamp_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimestamp_value(this);
}

MySqlParser::Timestamp_valueContext* MySqlParser::timestamp_value() {
  Timestamp_valueContext *_localctx = _tracker.createInstance<Timestamp_valueContext>(_ctx, getState());
  enterRule(_localctx, 54, MySqlParser::RuleTimestamp_value);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1231);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1227);
      match(MySqlParser::CURRENT_TIMESTAMP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1228);
      string_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1229);
      decimal_literal();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1230);
      expression(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interval_exprContext ------------------------------------------------------------------

MySqlParser::Interval_exprContext::Interval_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Interval_exprContext::INTERVAL() {
  return getToken(MySqlParser::INTERVAL, 0);
}

MySqlParser::Interval_typeContext* MySqlParser::Interval_exprContext::interval_type() {
  return getRuleContext<MySqlParser::Interval_typeContext>(0);
}

MySqlParser::Decimal_literalContext* MySqlParser::Interval_exprContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::Interval_exprContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::Interval_exprContext::getRuleIndex() const {
  return MySqlParser::RuleInterval_expr;
}

void MySqlParser::Interval_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterval_expr(this);
}

void MySqlParser::Interval_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterval_expr(this);
}

MySqlParser::Interval_exprContext* MySqlParser::interval_expr() {
  Interval_exprContext *_localctx = _tracker.createInstance<Interval_exprContext>(_ctx, getState());
  enterRule(_localctx, 56, MySqlParser::RuleInterval_expr);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1233);
    match(MySqlParser::PLUS);
    setState(1234);
    match(MySqlParser::INTERVAL);
    setState(1237);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
    case 1: {
      setState(1235);
      decimal_literal();
      break;
    }

    case 2: {
      setState(1236);
      expression(0);
      break;
    }

    }
    setState(1239);
    interval_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interval_typeContext ------------------------------------------------------------------

MySqlParser::Interval_typeContext::Interval_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Interval_type_baseContext* MySqlParser::Interval_typeContext::interval_type_base() {
  return getRuleContext<MySqlParser::Interval_type_baseContext>(0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::YEAR() {
  return getToken(MySqlParser::YEAR, 0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::YEAR_MONTH() {
  return getToken(MySqlParser::YEAR_MONTH, 0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::DAY_HOUR() {
  return getToken(MySqlParser::DAY_HOUR, 0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::DAY_MINUTE() {
  return getToken(MySqlParser::DAY_MINUTE, 0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::DAY_SECOND() {
  return getToken(MySqlParser::DAY_SECOND, 0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::HOUR_MINUTE() {
  return getToken(MySqlParser::HOUR_MINUTE, 0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::HOUR_SECOND() {
  return getToken(MySqlParser::HOUR_SECOND, 0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::MINUTE_SECOND() {
  return getToken(MySqlParser::MINUTE_SECOND, 0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::SECOND_MICROSECOND() {
  return getToken(MySqlParser::SECOND_MICROSECOND, 0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::MINUTE_MICROSECOND() {
  return getToken(MySqlParser::MINUTE_MICROSECOND, 0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::HOUR_MICROSECOND() {
  return getToken(MySqlParser::HOUR_MICROSECOND, 0);
}

tree::TerminalNode* MySqlParser::Interval_typeContext::DAY_MICROSECOND() {
  return getToken(MySqlParser::DAY_MICROSECOND, 0);
}


size_t MySqlParser::Interval_typeContext::getRuleIndex() const {
  return MySqlParser::RuleInterval_type;
}

void MySqlParser::Interval_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterval_type(this);
}

void MySqlParser::Interval_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterval_type(this);
}

MySqlParser::Interval_typeContext* MySqlParser::interval_type() {
  Interval_typeContext *_localctx = _tracker.createInstance<Interval_typeContext>(_ctx, getState());
  enterRule(_localctx, 58, MySqlParser::RuleInterval_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1254);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND: {
        enterOuterAlt(_localctx, 1);
        setState(1241);
        interval_type_base();
        break;
      }

      case MySqlParser::YEAR: {
        enterOuterAlt(_localctx, 2);
        setState(1242);
        match(MySqlParser::YEAR);
        break;
      }

      case MySqlParser::YEAR_MONTH: {
        enterOuterAlt(_localctx, 3);
        setState(1243);
        match(MySqlParser::YEAR_MONTH);
        break;
      }

      case MySqlParser::DAY_HOUR: {
        enterOuterAlt(_localctx, 4);
        setState(1244);
        match(MySqlParser::DAY_HOUR);
        break;
      }

      case MySqlParser::DAY_MINUTE: {
        enterOuterAlt(_localctx, 5);
        setState(1245);
        match(MySqlParser::DAY_MINUTE);
        break;
      }

      case MySqlParser::DAY_SECOND: {
        enterOuterAlt(_localctx, 6);
        setState(1246);
        match(MySqlParser::DAY_SECOND);
        break;
      }

      case MySqlParser::HOUR_MINUTE: {
        enterOuterAlt(_localctx, 7);
        setState(1247);
        match(MySqlParser::HOUR_MINUTE);
        break;
      }

      case MySqlParser::HOUR_SECOND: {
        enterOuterAlt(_localctx, 8);
        setState(1248);
        match(MySqlParser::HOUR_SECOND);
        break;
      }

      case MySqlParser::MINUTE_SECOND: {
        enterOuterAlt(_localctx, 9);
        setState(1249);
        match(MySqlParser::MINUTE_SECOND);
        break;
      }

      case MySqlParser::SECOND_MICROSECOND: {
        enterOuterAlt(_localctx, 10);
        setState(1250);
        match(MySqlParser::SECOND_MICROSECOND);
        break;
      }

      case MySqlParser::MINUTE_MICROSECOND: {
        enterOuterAlt(_localctx, 11);
        setState(1251);
        match(MySqlParser::MINUTE_MICROSECOND);
        break;
      }

      case MySqlParser::HOUR_MICROSECOND: {
        enterOuterAlt(_localctx, 12);
        setState(1252);
        match(MySqlParser::HOUR_MICROSECOND);
        break;
      }

      case MySqlParser::DAY_MICROSECOND: {
        enterOuterAlt(_localctx, 13);
        setState(1253);
        match(MySqlParser::DAY_MICROSECOND);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_typeContext ------------------------------------------------------------------

MySqlParser::Index_typeContext::Index_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Index_typeContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

tree::TerminalNode* MySqlParser::Index_typeContext::BTREE() {
  return getToken(MySqlParser::BTREE, 0);
}

tree::TerminalNode* MySqlParser::Index_typeContext::HASH() {
  return getToken(MySqlParser::HASH, 0);
}


size_t MySqlParser::Index_typeContext::getRuleIndex() const {
  return MySqlParser::RuleIndex_type;
}

void MySqlParser::Index_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_type(this);
}

void MySqlParser::Index_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_type(this);
}

MySqlParser::Index_typeContext* MySqlParser::index_type() {
  Index_typeContext *_localctx = _tracker.createInstance<Index_typeContext>(_ctx, getState());
  enterRule(_localctx, 60, MySqlParser::RuleIndex_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1256);
    match(MySqlParser::USING);
    setState(1257);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::BTREE || _la == MySqlParser::HASH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_optionContext ------------------------------------------------------------------

MySqlParser::Index_optionContext::Index_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Index_optionContext::KEY_BLOCK_SIZE() {
  return getToken(MySqlParser::KEY_BLOCK_SIZE, 0);
}

MySqlParser::Filesize_literalContext* MySqlParser::Index_optionContext::filesize_literal() {
  return getRuleContext<MySqlParser::Filesize_literalContext>(0);
}

MySqlParser::Index_typeContext* MySqlParser::Index_optionContext::index_type() {
  return getRuleContext<MySqlParser::Index_typeContext>(0);
}

tree::TerminalNode* MySqlParser::Index_optionContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::Index_optionContext::PARSER() {
  return getToken(MySqlParser::PARSER, 0);
}

MySqlParser::Id_Context* MySqlParser::Index_optionContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Index_optionContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::Index_optionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::Index_optionContext::getRuleIndex() const {
  return MySqlParser::RuleIndex_option;
}

void MySqlParser::Index_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_option(this);
}

void MySqlParser::Index_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_option(this);
}

MySqlParser::Index_optionContext* MySqlParser::index_option() {
  Index_optionContext *_localctx = _tracker.createInstance<Index_optionContext>(_ctx, getState());
  enterRule(_localctx, 62, MySqlParser::RuleIndex_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1270);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::KEY_BLOCK_SIZE: {
        enterOuterAlt(_localctx, 1);
        setState(1259);
        match(MySqlParser::KEY_BLOCK_SIZE);
        setState(1261);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::EQUAL_SYMBOL) {
          setState(1260);
          match(MySqlParser::EQUAL_SYMBOL);
        }
        setState(1263);
        filesize_literal();
        break;
      }

      case MySqlParser::USING: {
        enterOuterAlt(_localctx, 2);
        setState(1264);
        index_type();
        break;
      }

      case MySqlParser::WITH: {
        enterOuterAlt(_localctx, 3);
        setState(1265);
        match(MySqlParser::WITH);
        setState(1266);
        match(MySqlParser::PARSER);
        setState(1267);
        id_();
        break;
      }

      case MySqlParser::COMMENT: {
        enterOuterAlt(_localctx, 4);
        setState(1268);
        match(MySqlParser::COMMENT);
        setState(1269);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Proc_paramContext ------------------------------------------------------------------

MySqlParser::Proc_paramContext::Proc_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Id_Context* MySqlParser::Proc_paramContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::Data_typeContext* MySqlParser::Proc_paramContext::data_type() {
  return getRuleContext<MySqlParser::Data_typeContext>(0);
}

tree::TerminalNode* MySqlParser::Proc_paramContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::Proc_paramContext::OUT() {
  return getToken(MySqlParser::OUT, 0);
}

tree::TerminalNode* MySqlParser::Proc_paramContext::INOUT() {
  return getToken(MySqlParser::INOUT, 0);
}


size_t MySqlParser::Proc_paramContext::getRuleIndex() const {
  return MySqlParser::RuleProc_param;
}

void MySqlParser::Proc_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProc_param(this);
}

void MySqlParser::Proc_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProc_param(this);
}

MySqlParser::Proc_paramContext* MySqlParser::proc_param() {
  Proc_paramContext *_localctx = _tracker.createInstance<Proc_paramContext>(_ctx, getState());
  enterRule(_localctx, 64, MySqlParser::RuleProc_param);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1272);
    _la = _input->LA(1);
    if (!(((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & ((1ULL << (MySqlParser::IN - 66))
      | (1ULL << (MySqlParser::INOUT - 66))
      | (1ULL << (MySqlParser::OUT - 66)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1273);
    id_();
    setState(1274);
    data_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_paramContext ------------------------------------------------------------------

MySqlParser::Func_paramContext::Func_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Id_Context* MySqlParser::Func_paramContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::Data_typeContext* MySqlParser::Func_paramContext::data_type() {
  return getRuleContext<MySqlParser::Data_typeContext>(0);
}


size_t MySqlParser::Func_paramContext::getRuleIndex() const {
  return MySqlParser::RuleFunc_param;
}

void MySqlParser::Func_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_param(this);
}

void MySqlParser::Func_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_param(this);
}

MySqlParser::Func_paramContext* MySqlParser::func_param() {
  Func_paramContext *_localctx = _tracker.createInstance<Func_paramContext>(_ctx, getState());
  enterRule(_localctx, 66, MySqlParser::RuleFunc_param);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1276);
    id_();
    setState(1277);
    data_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Routine_characteristicContext ------------------------------------------------------------------

MySqlParser::Routine_characteristicContext::Routine_characteristicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Routine_characteristicContext::getRuleIndex() const {
  return MySqlParser::RuleRoutine_characteristic;
}

void MySqlParser::Routine_characteristicContext::copyFrom(Routine_characteristicContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- RcSqllangContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RcSqllangContext::LANGUAGE() {
  return getToken(MySqlParser::LANGUAGE, 0);
}

tree::TerminalNode* MySqlParser::RcSqllangContext::SQL() {
  return getToken(MySqlParser::SQL, 0);
}

MySqlParser::RcSqllangContext::RcSqllangContext(Routine_characteristicContext *ctx) { copyFrom(ctx); }

void MySqlParser::RcSqllangContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRcSqllang(this);
}
void MySqlParser::RcSqllangContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRcSqllang(this);
}
//----------------- RcSqldataContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RcSqldataContext::CONTAINS() {
  return getToken(MySqlParser::CONTAINS, 0);
}

tree::TerminalNode* MySqlParser::RcSqldataContext::SQL() {
  return getToken(MySqlParser::SQL, 0);
}

tree::TerminalNode* MySqlParser::RcSqldataContext::NO() {
  return getToken(MySqlParser::NO, 0);
}

tree::TerminalNode* MySqlParser::RcSqldataContext::READS() {
  return getToken(MySqlParser::READS, 0);
}

tree::TerminalNode* MySqlParser::RcSqldataContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::RcSqldataContext::MODIFIES() {
  return getToken(MySqlParser::MODIFIES, 0);
}

MySqlParser::RcSqldataContext::RcSqldataContext(Routine_characteristicContext *ctx) { copyFrom(ctx); }

void MySqlParser::RcSqldataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRcSqldata(this);
}
void MySqlParser::RcSqldataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRcSqldata(this);
}
//----------------- RcCommentContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RcCommentContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::RcCommentContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::RcCommentContext::RcCommentContext(Routine_characteristicContext *ctx) { copyFrom(ctx); }

void MySqlParser::RcCommentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRcComment(this);
}
void MySqlParser::RcCommentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRcComment(this);
}
//----------------- RcDetermContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RcDetermContext::DETERMINISTIC() {
  return getToken(MySqlParser::DETERMINISTIC, 0);
}

tree::TerminalNode* MySqlParser::RcDetermContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

MySqlParser::RcDetermContext::RcDetermContext(Routine_characteristicContext *ctx) { copyFrom(ctx); }

void MySqlParser::RcDetermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRcDeterm(this);
}
void MySqlParser::RcDetermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRcDeterm(this);
}
//----------------- RcSecurestmtContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::RcSecurestmtContext::SQL() {
  return getToken(MySqlParser::SQL, 0);
}

tree::TerminalNode* MySqlParser::RcSecurestmtContext::SECURITY() {
  return getToken(MySqlParser::SECURITY, 0);
}

tree::TerminalNode* MySqlParser::RcSecurestmtContext::DEFINER() {
  return getToken(MySqlParser::DEFINER, 0);
}

tree::TerminalNode* MySqlParser::RcSecurestmtContext::INVOKER() {
  return getToken(MySqlParser::INVOKER, 0);
}

MySqlParser::RcSecurestmtContext::RcSecurestmtContext(Routine_characteristicContext *ctx) { copyFrom(ctx); }

void MySqlParser::RcSecurestmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRcSecurestmt(this);
}
void MySqlParser::RcSecurestmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRcSecurestmt(this);
}
MySqlParser::Routine_characteristicContext* MySqlParser::routine_characteristic() {
  Routine_characteristicContext *_localctx = _tracker.createInstance<Routine_characteristicContext>(_ctx, getState());
  enterRule(_localctx, 68, MySqlParser::RuleRoutine_characteristic);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1302);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::COMMENT: {
        _localctx = dynamic_cast<Routine_characteristicContext *>(_tracker.createInstance<MySqlParser::RcCommentContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1279);
        match(MySqlParser::COMMENT);
        setState(1280);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::LANGUAGE: {
        _localctx = dynamic_cast<Routine_characteristicContext *>(_tracker.createInstance<MySqlParser::RcSqllangContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1281);
        match(MySqlParser::LANGUAGE);
        setState(1282);
        match(MySqlParser::SQL);
        break;
      }

      case MySqlParser::DETERMINISTIC:
      case MySqlParser::NOT: {
        _localctx = dynamic_cast<Routine_characteristicContext *>(_tracker.createInstance<MySqlParser::RcDetermContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(1284);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::NOT) {
          setState(1283);
          match(MySqlParser::NOT);
        }
        setState(1286);
        match(MySqlParser::DETERMINISTIC);
        break;
      }

      case MySqlParser::MODIFIES:
      case MySqlParser::READS:
      case MySqlParser::CONTAINS:
      case MySqlParser::NO: {
        _localctx = dynamic_cast<Routine_characteristicContext *>(_tracker.createInstance<MySqlParser::RcSqldataContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(1297);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::CONTAINS: {
            setState(1287);
            match(MySqlParser::CONTAINS);
            setState(1288);
            match(MySqlParser::SQL);
            break;
          }

          case MySqlParser::NO: {
            setState(1289);
            match(MySqlParser::NO);
            setState(1290);
            match(MySqlParser::SQL);
            break;
          }

          case MySqlParser::READS: {
            setState(1291);
            match(MySqlParser::READS);
            setState(1292);
            match(MySqlParser::SQL);
            setState(1293);
            match(MySqlParser::DATA);
            break;
          }

          case MySqlParser::MODIFIES: {
            setState(1294);
            match(MySqlParser::MODIFIES);
            setState(1295);
            match(MySqlParser::SQL);
            setState(1296);
            match(MySqlParser::DATA);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case MySqlParser::SQL: {
        _localctx = dynamic_cast<Routine_characteristicContext *>(_tracker.createInstance<MySqlParser::RcSecurestmtContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(1299);
        match(MySqlParser::SQL);
        setState(1300);
        match(MySqlParser::SECURITY);
        setState(1301);
        dynamic_cast<RcSecurestmtContext *>(_localctx)->sec_context = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DEFINER

        || _la == MySqlParser::INVOKER)) {
          dynamic_cast<RcSecurestmtContext *>(_localctx)->sec_context = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Server_optionContext ------------------------------------------------------------------

MySqlParser::Server_optionContext::Server_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Server_optionContext::HOST() {
  return getToken(MySqlParser::HOST, 0);
}

tree::TerminalNode* MySqlParser::Server_optionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Server_optionContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::Server_optionContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

tree::TerminalNode* MySqlParser::Server_optionContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::Server_optionContext::SOCKET() {
  return getToken(MySqlParser::SOCKET, 0);
}

tree::TerminalNode* MySqlParser::Server_optionContext::OWNER() {
  return getToken(MySqlParser::OWNER, 0);
}

tree::TerminalNode* MySqlParser::Server_optionContext::PORT() {
  return getToken(MySqlParser::PORT, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::Server_optionContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}


size_t MySqlParser::Server_optionContext::getRuleIndex() const {
  return MySqlParser::RuleServer_option;
}

void MySqlParser::Server_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterServer_option(this);
}

void MySqlParser::Server_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitServer_option(this);
}

MySqlParser::Server_optionContext* MySqlParser::server_option() {
  Server_optionContext *_localctx = _tracker.createInstance<Server_optionContext>(_ctx, getState());
  enterRule(_localctx, 70, MySqlParser::RuleServer_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1318);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::HOST: {
        enterOuterAlt(_localctx, 1);
        setState(1304);
        match(MySqlParser::HOST);
        setState(1305);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::DATABASE: {
        enterOuterAlt(_localctx, 2);
        setState(1306);
        match(MySqlParser::DATABASE);
        setState(1307);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::USER: {
        enterOuterAlt(_localctx, 3);
        setState(1308);
        match(MySqlParser::USER);
        setState(1309);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::PASSWORD: {
        enterOuterAlt(_localctx, 4);
        setState(1310);
        match(MySqlParser::PASSWORD);
        setState(1311);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::SOCKET: {
        enterOuterAlt(_localctx, 5);
        setState(1312);
        match(MySqlParser::SOCKET);
        setState(1313);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::OWNER: {
        enterOuterAlt(_localctx, 6);
        setState(1314);
        match(MySqlParser::OWNER);
        setState(1315);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::PORT: {
        enterOuterAlt(_localctx, 7);
        setState(1316);
        match(MySqlParser::PORT);
        setState(1317);
        decimal_literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_def_table_constraintsContext ------------------------------------------------------------------

MySqlParser::Column_def_table_constraintsContext::Column_def_table_constraintsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Column_def_table_constraintContext *> MySqlParser::Column_def_table_constraintsContext::column_def_table_constraint() {
  return getRuleContexts<MySqlParser::Column_def_table_constraintContext>();
}

MySqlParser::Column_def_table_constraintContext* MySqlParser::Column_def_table_constraintsContext::column_def_table_constraint(size_t i) {
  return getRuleContext<MySqlParser::Column_def_table_constraintContext>(i);
}


size_t MySqlParser::Column_def_table_constraintsContext::getRuleIndex() const {
  return MySqlParser::RuleColumn_def_table_constraints;
}

void MySqlParser::Column_def_table_constraintsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_def_table_constraints(this);
}

void MySqlParser::Column_def_table_constraintsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_def_table_constraints(this);
}

MySqlParser::Column_def_table_constraintsContext* MySqlParser::column_def_table_constraints() {
  Column_def_table_constraintsContext *_localctx = _tracker.createInstance<Column_def_table_constraintsContext>(_ctx, getState());
  enterRule(_localctx, 72, MySqlParser::RuleColumn_def_table_constraints);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1320);
    match(MySqlParser::LR_BRACKET);
    setState(1321);
    column_def_table_constraint();
    setState(1326);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(1322);
      match(MySqlParser::COMMA);
      setState(1323);
      column_def_table_constraint();
      setState(1328);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1329);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_def_table_constraintContext ------------------------------------------------------------------

MySqlParser::Column_def_table_constraintContext::Column_def_table_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Column_def_table_constraintContext::getRuleIndex() const {
  return MySqlParser::RuleColumn_def_table_constraint;
}

void MySqlParser::Column_def_table_constraintContext::copyFrom(Column_def_table_constraintContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ConstraintDefinitionContext ------------------------------------------------------------------

MySqlParser::Table_constraintContext* MySqlParser::ConstraintDefinitionContext::table_constraint() {
  return getRuleContext<MySqlParser::Table_constraintContext>(0);
}

MySqlParser::ConstraintDefinitionContext::ConstraintDefinitionContext(Column_def_table_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::ConstraintDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraintDefinition(this);
}
void MySqlParser::ConstraintDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraintDefinition(this);
}
//----------------- ColumnDefinitionContext ------------------------------------------------------------------

MySqlParser::Id_Context* MySqlParser::ColumnDefinitionContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::Column_definitionContext* MySqlParser::ColumnDefinitionContext::column_definition() {
  return getRuleContext<MySqlParser::Column_definitionContext>(0);
}

MySqlParser::ColumnDefinitionContext::ColumnDefinitionContext(Column_def_table_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::ColumnDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumnDefinition(this);
}
void MySqlParser::ColumnDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumnDefinition(this);
}
//----------------- IndexDefinitionContext ------------------------------------------------------------------

MySqlParser::Index_column_definitionContext* MySqlParser::IndexDefinitionContext::index_column_definition() {
  return getRuleContext<MySqlParser::Index_column_definitionContext>(0);
}

MySqlParser::IndexDefinitionContext::IndexDefinitionContext(Column_def_table_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::IndexDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexDefinition(this);
}
void MySqlParser::IndexDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexDefinition(this);
}
MySqlParser::Column_def_table_constraintContext* MySqlParser::column_def_table_constraint() {
  Column_def_table_constraintContext *_localctx = _tracker.createInstance<Column_def_table_constraintContext>(_ctx, getState());
  enterRule(_localctx, 74, MySqlParser::RuleColumn_def_table_constraint);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1336);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LEFT:
      case MySqlParser::RIGHT:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::COUNT:
      case MySqlParser::POSITION:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BTREE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLIENT:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FIELDS:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::HASH:
      case MySqlParser::HOST:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IMPORT:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INVOKER:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MERGE:
      case MySqlParser::MID:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRESERVE:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATION:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STORAGE:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XML:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFOMANCE_SCHEMA:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        _localctx = dynamic_cast<Column_def_table_constraintContext *>(_tracker.createInstance<MySqlParser::ColumnDefinitionContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1331);
        id_();
        setState(1332);
        column_definition();
        break;
      }

      case MySqlParser::CHECK:
      case MySqlParser::CONSTRAINT:
      case MySqlParser::FOREIGN:
      case MySqlParser::PRIMARY:
      case MySqlParser::UNIQUE: {
        _localctx = dynamic_cast<Column_def_table_constraintContext *>(_tracker.createInstance<MySqlParser::ConstraintDefinitionContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1334);
        table_constraint();
        break;
      }

      case MySqlParser::FULLTEXT:
      case MySqlParser::INDEX:
      case MySqlParser::KEY:
      case MySqlParser::SPATIAL: {
        _localctx = dynamic_cast<Column_def_table_constraintContext *>(_tracker.createInstance<MySqlParser::IndexDefinitionContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(1335);
        index_column_definition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_definitionContext ------------------------------------------------------------------

MySqlParser::Column_definitionContext::Column_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Data_typeContext* MySqlParser::Column_definitionContext::data_type() {
  return getRuleContext<MySqlParser::Data_typeContext>(0);
}

std::vector<MySqlParser::Separate_column_constraintContext *> MySqlParser::Column_definitionContext::separate_column_constraint() {
  return getRuleContexts<MySqlParser::Separate_column_constraintContext>();
}

MySqlParser::Separate_column_constraintContext* MySqlParser::Column_definitionContext::separate_column_constraint(size_t i) {
  return getRuleContext<MySqlParser::Separate_column_constraintContext>(i);
}


size_t MySqlParser::Column_definitionContext::getRuleIndex() const {
  return MySqlParser::RuleColumn_definition;
}

void MySqlParser::Column_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_definition(this);
}

void MySqlParser::Column_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_definition(this);
}

MySqlParser::Column_definitionContext* MySqlParser::column_definition() {
  Column_definitionContext *_localctx = _tracker.createInstance<Column_definitionContext>(_ctx, getState());
  enterRule(_localctx, 76, MySqlParser::RuleColumn_definition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1338);
    data_type();
    setState(1342);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 36) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 36)) & ((1ULL << (MySqlParser::DEFAULT - 36))
      | (1ULL << (MySqlParser::KEY - 36))
      | (1ULL << (MySqlParser::NOTNULL - 36)))) != 0) || ((((_la - 100) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 100)) & ((1ULL << (MySqlParser::NULL_LITERAL - 100))
      | (1ULL << (MySqlParser::PRIMARY - 100))
      | (1ULL << (MySqlParser::REFERENCES - 100))
      | (1ULL << (MySqlParser::UNIQUE - 100)))) != 0) || ((((_la - 255) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 255)) & ((1ULL << (MySqlParser::AUTO_INCREMENT - 255))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 255))
      | (1ULL << (MySqlParser::COMMENT - 255)))) != 0) || _la == MySqlParser::STORAGE || _la == MySqlParser::NULL_SPEC_LITERAL) {
      setState(1339);
      separate_column_constraint();
      setState(1344);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Separate_column_constraintContext ------------------------------------------------------------------

MySqlParser::Separate_column_constraintContext::Separate_column_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Separate_column_constraintContext::getRuleIndex() const {
  return MySqlParser::RuleSeparate_column_constraint;
}

void MySqlParser::Separate_column_constraintContext::copyFrom(Separate_column_constraintContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ColConstrDfltContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ColConstrDfltContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::Default_valueContext* MySqlParser::ColConstrDfltContext::default_value() {
  return getRuleContext<MySqlParser::Default_valueContext>(0);
}

MySqlParser::ColConstrDfltContext::ColConstrDfltContext(Separate_column_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::ColConstrDfltContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColConstrDflt(this);
}
void MySqlParser::ColConstrDfltContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColConstrDflt(this);
}
//----------------- ColConstrPKContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ColConstrPKContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

tree::TerminalNode* MySqlParser::ColConstrPKContext::PRIMARY() {
  return getToken(MySqlParser::PRIMARY, 0);
}

MySqlParser::ColConstrPKContext::ColConstrPKContext(Separate_column_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::ColConstrPKContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColConstrPK(this);
}
void MySqlParser::ColConstrPKContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColConstrPK(this);
}
//----------------- ColConstrAuIncContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ColConstrAuIncContext::AUTO_INCREMENT() {
  return getToken(MySqlParser::AUTO_INCREMENT, 0);
}

MySqlParser::ColConstrAuIncContext::ColConstrAuIncContext(Separate_column_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::ColConstrAuIncContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColConstrAuInc(this);
}
void MySqlParser::ColConstrAuIncContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColConstrAuInc(this);
}
//----------------- ColConstrCommentContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ColConstrCommentContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::ColConstrCommentContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::ColConstrCommentContext::ColConstrCommentContext(Separate_column_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::ColConstrCommentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColConstrComment(this);
}
void MySqlParser::ColConstrCommentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColConstrComment(this);
}
//----------------- ColConstrNullContext ------------------------------------------------------------------

MySqlParser::Null_notnullContext* MySqlParser::ColConstrNullContext::null_notnull() {
  return getRuleContext<MySqlParser::Null_notnullContext>(0);
}

MySqlParser::ColConstrNullContext::ColConstrNullContext(Separate_column_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::ColConstrNullContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColConstrNull(this);
}
void MySqlParser::ColConstrNullContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColConstrNull(this);
}
//----------------- ColConstrFormContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ColConstrFormContext::COLUMN_FORMAT() {
  return getToken(MySqlParser::COLUMN_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::ColConstrFormContext::FIXED() {
  return getToken(MySqlParser::FIXED, 0);
}

tree::TerminalNode* MySqlParser::ColConstrFormContext::DYNAMIC() {
  return getToken(MySqlParser::DYNAMIC, 0);
}

tree::TerminalNode* MySqlParser::ColConstrFormContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::ColConstrFormContext::ColConstrFormContext(Separate_column_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::ColConstrFormContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColConstrForm(this);
}
void MySqlParser::ColConstrFormContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColConstrForm(this);
}
//----------------- ColConstrRefdefContext ------------------------------------------------------------------

MySqlParser::Reference_definitionContext* MySqlParser::ColConstrRefdefContext::reference_definition() {
  return getRuleContext<MySqlParser::Reference_definitionContext>(0);
}

MySqlParser::ColConstrRefdefContext::ColConstrRefdefContext(Separate_column_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::ColConstrRefdefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColConstrRefdef(this);
}
void MySqlParser::ColConstrRefdefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColConstrRefdef(this);
}
//----------------- ColConstrStorageContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ColConstrStorageContext::STORAGE() {
  return getToken(MySqlParser::STORAGE, 0);
}

tree::TerminalNode* MySqlParser::ColConstrStorageContext::DISK() {
  return getToken(MySqlParser::DISK, 0);
}

tree::TerminalNode* MySqlParser::ColConstrStorageContext::MEMORY() {
  return getToken(MySqlParser::MEMORY, 0);
}

tree::TerminalNode* MySqlParser::ColConstrStorageContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::ColConstrStorageContext::ColConstrStorageContext(Separate_column_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::ColConstrStorageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColConstrStorage(this);
}
void MySqlParser::ColConstrStorageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColConstrStorage(this);
}
//----------------- ColConstrUKContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ColConstrUKContext::UNIQUE() {
  return getToken(MySqlParser::UNIQUE, 0);
}

tree::TerminalNode* MySqlParser::ColConstrUKContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::ColConstrUKContext::ColConstrUKContext(Separate_column_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::ColConstrUKContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColConstrUK(this);
}
void MySqlParser::ColConstrUKContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColConstrUK(this);
}
MySqlParser::Separate_column_constraintContext* MySqlParser::separate_column_constraint() {
  Separate_column_constraintContext *_localctx = _tracker.createInstance<Separate_column_constraintContext>(_ctx, getState());
  enterRule(_localctx, 78, MySqlParser::RuleSeparate_column_constraint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1364);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::NOTNULL:
      case MySqlParser::NULL_LITERAL:
      case MySqlParser::NULL_SPEC_LITERAL: {
        _localctx = dynamic_cast<Separate_column_constraintContext *>(_tracker.createInstance<MySqlParser::ColConstrNullContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1345);
        null_notnull();
        break;
      }

      case MySqlParser::DEFAULT: {
        _localctx = dynamic_cast<Separate_column_constraintContext *>(_tracker.createInstance<MySqlParser::ColConstrDfltContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1346);
        match(MySqlParser::DEFAULT);
        setState(1347);
        default_value();
        break;
      }

      case MySqlParser::AUTO_INCREMENT: {
        _localctx = dynamic_cast<Separate_column_constraintContext *>(_tracker.createInstance<MySqlParser::ColConstrAuIncContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(1348);
        match(MySqlParser::AUTO_INCREMENT);
        break;
      }

      case MySqlParser::KEY:
      case MySqlParser::PRIMARY: {
        _localctx = dynamic_cast<Separate_column_constraintContext *>(_tracker.createInstance<MySqlParser::ColConstrPKContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(1350);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::PRIMARY) {
          setState(1349);
          match(MySqlParser::PRIMARY);
        }
        setState(1352);
        match(MySqlParser::KEY);
        break;
      }

      case MySqlParser::UNIQUE: {
        _localctx = dynamic_cast<Separate_column_constraintContext *>(_tracker.createInstance<MySqlParser::ColConstrUKContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(1353);
        match(MySqlParser::UNIQUE);
        setState(1355);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
        case 1: {
          setState(1354);
          match(MySqlParser::KEY);
          break;
        }

        }
        break;
      }

      case MySqlParser::COMMENT: {
        _localctx = dynamic_cast<Separate_column_constraintContext *>(_tracker.createInstance<MySqlParser::ColConstrCommentContext>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(1357);
        match(MySqlParser::COMMENT);
        setState(1358);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::COLUMN_FORMAT: {
        _localctx = dynamic_cast<Separate_column_constraintContext *>(_tracker.createInstance<MySqlParser::ColConstrFormContext>(_localctx));
        enterOuterAlt(_localctx, 7);
        setState(1359);
        match(MySqlParser::COLUMN_FORMAT);
        setState(1360);
        dynamic_cast<ColConstrFormContext *>(_localctx)->colformat = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::DYNAMIC

        || _la == MySqlParser::FIXED)) {
          dynamic_cast<ColConstrFormContext *>(_localctx)->colformat = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::STORAGE: {
        _localctx = dynamic_cast<Separate_column_constraintContext *>(_tracker.createInstance<MySqlParser::ColConstrStorageContext>(_localctx));
        enterOuterAlt(_localctx, 8);
        setState(1361);
        match(MySqlParser::STORAGE);
        setState(1362);
        dynamic_cast<ColConstrStorageContext *>(_localctx)->storageval = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::DISK || _la == MySqlParser::MEMORY)) {
          dynamic_cast<ColConstrStorageContext *>(_localctx)->storageval = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::REFERENCES: {
        _localctx = dynamic_cast<Separate_column_constraintContext *>(_tracker.createInstance<MySqlParser::ColConstrRefdefContext>(_localctx));
        enterOuterAlt(_localctx, 9);
        setState(1363);
        reference_definition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_constraintContext ------------------------------------------------------------------

MySqlParser::Table_constraintContext::Table_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Table_constraintContext::getRuleIndex() const {
  return MySqlParser::RuleTable_constraint;
}

void MySqlParser::Table_constraintContext::copyFrom(Table_constraintContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TblConstCheckContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblConstCheckContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

MySqlParser::ExpressionContext* MySqlParser::TblConstCheckContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::TblConstCheckContext::TblConstCheckContext(Table_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblConstCheckContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblConstCheck(this);
}
void MySqlParser::TblConstCheckContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblConstCheck(this);
}
//----------------- TblConstrPKContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblConstrPKContext::PRIMARY() {
  return getToken(MySqlParser::PRIMARY, 0);
}

tree::TerminalNode* MySqlParser::TblConstrPKContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::Index_colname_listContext* MySqlParser::TblConstrPKContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

tree::TerminalNode* MySqlParser::TblConstrPKContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

MySqlParser::Index_typeContext* MySqlParser::TblConstrPKContext::index_type() {
  return getRuleContext<MySqlParser::Index_typeContext>(0);
}

std::vector<MySqlParser::Index_optionContext *> MySqlParser::TblConstrPKContext::index_option() {
  return getRuleContexts<MySqlParser::Index_optionContext>();
}

MySqlParser::Index_optionContext* MySqlParser::TblConstrPKContext::index_option(size_t i) {
  return getRuleContext<MySqlParser::Index_optionContext>(i);
}

MySqlParser::Id_Context* MySqlParser::TblConstrPKContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::TblConstrPKContext::TblConstrPKContext(Table_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblConstrPKContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblConstrPK(this);
}
void MySqlParser::TblConstrPKContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblConstrPK(this);
}
//----------------- TblConstrUKContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblConstrUKContext::UNIQUE() {
  return getToken(MySqlParser::UNIQUE, 0);
}

MySqlParser::Index_colname_listContext* MySqlParser::TblConstrUKContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

tree::TerminalNode* MySqlParser::TblConstrUKContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

MySqlParser::Index_typeContext* MySqlParser::TblConstrUKContext::index_type() {
  return getRuleContext<MySqlParser::Index_typeContext>(0);
}

std::vector<MySqlParser::Index_optionContext *> MySqlParser::TblConstrUKContext::index_option() {
  return getRuleContexts<MySqlParser::Index_optionContext>();
}

MySqlParser::Index_optionContext* MySqlParser::TblConstrUKContext::index_option(size_t i) {
  return getRuleContext<MySqlParser::Index_optionContext>(i);
}

tree::TerminalNode* MySqlParser::TblConstrUKContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::TblConstrUKContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::TblConstrUKContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::TblConstrUKContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

MySqlParser::TblConstrUKContext::TblConstrUKContext(Table_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblConstrUKContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblConstrUK(this);
}
void MySqlParser::TblConstrUKContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblConstrUK(this);
}
//----------------- TblConstrFKContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblConstrFKContext::FOREIGN() {
  return getToken(MySqlParser::FOREIGN, 0);
}

tree::TerminalNode* MySqlParser::TblConstrFKContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::Index_colname_listContext* MySqlParser::TblConstrFKContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

MySqlParser::Reference_definitionContext* MySqlParser::TblConstrFKContext::reference_definition() {
  return getRuleContext<MySqlParser::Reference_definitionContext>(0);
}

tree::TerminalNode* MySqlParser::TblConstrFKContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::TblConstrFKContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::TblConstrFKContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

MySqlParser::TblConstrFKContext::TblConstrFKContext(Table_constraintContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblConstrFKContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblConstrFK(this);
}
void MySqlParser::TblConstrFKContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblConstrFK(this);
}
MySqlParser::Table_constraintContext* MySqlParser::table_constraint() {
  Table_constraintContext *_localctx = _tracker.createInstance<Table_constraintContext>(_ctx, getState());
  enterRule(_localctx, 80, MySqlParser::RuleTable_constraint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1426);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Table_constraintContext *>(_tracker.createInstance<MySqlParser::TblConstrPKContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1370);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(1366);
        match(MySqlParser::CONSTRAINT);
        setState(1368);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
          | (1ULL << (MySqlParser::TIME - 181))
          | (1ULL << (MySqlParser::TIMESTAMP - 181))
          | (1ULL << (MySqlParser::DATETIME - 181))
          | (1ULL << (MySqlParser::YEAR - 181))
          | (1ULL << (MySqlParser::TEXT - 181))
          | (1ULL << (MySqlParser::ENUM - 181))
          | (1ULL << (MySqlParser::COUNT - 181))
          | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
          | (1ULL << (MySqlParser::AFTER - 246))
          | (1ULL << (MySqlParser::ALGORITHM - 246))
          | (1ULL << (MySqlParser::ANY - 246))
          | (1ULL << (MySqlParser::AT - 246))
          | (1ULL << (MySqlParser::AUTHORS - 246))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
          | (1ULL << (MySqlParser::BEGIN - 246))
          | (1ULL << (MySqlParser::BINLOG - 246))
          | (1ULL << (MySqlParser::BIT - 246))
          | (1ULL << (MySqlParser::BTREE - 246))
          | (1ULL << (MySqlParser::CASCADED - 246))
          | (1ULL << (MySqlParser::CHAIN - 246))
          | (1ULL << (MySqlParser::CHECKSUM - 246))
          | (1ULL << (MySqlParser::CIPHER - 246))
          | (1ULL << (MySqlParser::CLIENT - 246))
          | (1ULL << (MySqlParser::COALESCE - 246))
          | (1ULL << (MySqlParser::CODE - 246))
          | (1ULL << (MySqlParser::COLUMNS - 246))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
          | (1ULL << (MySqlParser::COMMENT - 246))
          | (1ULL << (MySqlParser::COMMIT - 246))
          | (1ULL << (MySqlParser::COMPACT - 246))
          | (1ULL << (MySqlParser::COMPLETION - 246))
          | (1ULL << (MySqlParser::COMPRESSED - 246))
          | (1ULL << (MySqlParser::CONCURRENT - 246))
          | (1ULL << (MySqlParser::CONNECTION - 246))
          | (1ULL << (MySqlParser::CONSISTENT - 246))
          | (1ULL << (MySqlParser::CONTAINS - 246))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
          | (1ULL << (MySqlParser::COPY - 246))
          | (1ULL << (MySqlParser::DATA - 246))
          | (1ULL << (MySqlParser::DATAFILE - 246))
          | (1ULL << (MySqlParser::DEFINER - 246))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
          | (1ULL << (MySqlParser::DIRECTORY - 246))
          | (1ULL << (MySqlParser::DISABLE - 246))
          | (1ULL << (MySqlParser::DISCARD - 246))
          | (1ULL << (MySqlParser::DISK - 246))
          | (1ULL << (MySqlParser::DO - 246))
          | (1ULL << (MySqlParser::DUMPFILE - 246))
          | (1ULL << (MySqlParser::DUPLICATE - 246))
          | (1ULL << (MySqlParser::DYNAMIC - 246))
          | (1ULL << (MySqlParser::ENABLE - 246))
          | (1ULL << (MySqlParser::ENDS - 246))
          | (1ULL << (MySqlParser::ENGINE - 246))
          | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
          | (1ULL << (MySqlParser::ESCAPE - 311))
          | (1ULL << (MySqlParser::EVEN - 311))
          | (1ULL << (MySqlParser::EVENT - 311))
          | (1ULL << (MySqlParser::EVENTS - 311))
          | (1ULL << (MySqlParser::EVERY - 311))
          | (1ULL << (MySqlParser::EXCHANGE - 311))
          | (1ULL << (MySqlParser::EXCLUSIVE - 311))
          | (1ULL << (MySqlParser::EXPIRE - 311))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
          | (1ULL << (MySqlParser::FIELDS - 311))
          | (1ULL << (MySqlParser::FIRST - 311))
          | (1ULL << (MySqlParser::FIXED - 311))
          | (1ULL << (MySqlParser::FULL - 311))
          | (1ULL << (MySqlParser::FUNCTION - 311))
          | (1ULL << (MySqlParser::GLOBAL - 311))
          | (1ULL << (MySqlParser::GRANTS - 311))
          | (1ULL << (MySqlParser::HASH - 311))
          | (1ULL << (MySqlParser::HOST - 311))
          | (1ULL << (MySqlParser::IDENTIFIED - 311))
          | (1ULL << (MySqlParser::IMPORT - 311))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
          | (1ULL << (MySqlParser::INPLACE - 311))
          | (1ULL << (MySqlParser::INSERT_METHOD - 311))
          | (1ULL << (MySqlParser::INVOKER - 311))
          | (1ULL << (MySqlParser::ISOLATION - 311))
          | (1ULL << (MySqlParser::ISSUER - 311))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
          | (1ULL << (MySqlParser::LANGUAGE - 311))
          | (1ULL << (MySqlParser::LAST - 311))
          | (1ULL << (MySqlParser::LESS - 311))
          | (1ULL << (MySqlParser::LEVEL - 311))
          | (1ULL << (MySqlParser::LIST - 311))
          | (1ULL << (MySqlParser::LOCAL - 311))
          | (1ULL << (MySqlParser::LOGFILE - 311))
          | (1ULL << (MySqlParser::LOGS - 311))
          | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_ROWS - 391))
          | (1ULL << (MySqlParser::MAX_SIZE - 391))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
          | (1ULL << (MySqlParser::MERGE - 391))
          | (1ULL << (MySqlParser::MID - 391))
          | (1ULL << (MySqlParser::MIN_ROWS - 391))
          | (1ULL << (MySqlParser::MODIFY - 391))
          | (1ULL << (MySqlParser::MUTEX - 391))
          | (1ULL << (MySqlParser::MYSQL - 391))
          | (1ULL << (MySqlParser::NAME - 391))
          | (1ULL << (MySqlParser::NAMES - 391))
          | (1ULL << (MySqlParser::NCHAR - 391))
          | (1ULL << (MySqlParser::NO - 391))
          | (1ULL << (MySqlParser::NODEGROUP - 391))
          | (1ULL << (MySqlParser::NONE - 391))
          | (1ULL << (MySqlParser::OFFLINE - 391))
          | (1ULL << (MySqlParser::OFFSET - 391))
          | (1ULL << (MySqlParser::OJ - 391))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
          | (1ULL << (MySqlParser::ONLINE - 391))
          | (1ULL << (MySqlParser::ONLY - 391))
          | (1ULL << (MySqlParser::OPTIONS - 391))
          | (1ULL << (MySqlParser::OWNER - 391))
          | (1ULL << (MySqlParser::PACK_KEYS - 391))
          | (1ULL << (MySqlParser::PARSER - 391))
          | (1ULL << (MySqlParser::PARTIAL - 391))
          | (1ULL << (MySqlParser::PARTITIONING - 391))
          | (1ULL << (MySqlParser::PARTITIONS - 391))
          | (1ULL << (MySqlParser::PASSWORD - 391))
          | (1ULL << (MySqlParser::PLUGINS - 391))
          | (1ULL << (MySqlParser::PORT - 391))
          | (1ULL << (MySqlParser::PRESERVE - 391))
          | (1ULL << (MySqlParser::PROCESSLIST - 391))
          | (1ULL << (MySqlParser::PROFILE - 391))
          | (1ULL << (MySqlParser::PROFILES - 391))
          | (1ULL << (MySqlParser::PROXY - 391))
          | (1ULL << (MySqlParser::QUERY - 391))
          | (1ULL << (MySqlParser::QUICK - 391))
          | (1ULL << (MySqlParser::REBUILD - 391))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
          | (1ULL << (MySqlParser::REDUNDANT - 391))
          | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
          | (1ULL << (MySqlParser::REORGANIZE - 455))
          | (1ULL << (MySqlParser::REPAIR - 455))
          | (1ULL << (MySqlParser::REPLICATION - 455))
          | (1ULL << (MySqlParser::RETURNS - 455))
          | (1ULL << (MySqlParser::ROLLBACK - 455))
          | (1ULL << (MySqlParser::ROLLUP - 455))
          | (1ULL << (MySqlParser::ROW - 455))
          | (1ULL << (MySqlParser::ROWS - 455))
          | (1ULL << (MySqlParser::ROW_FORMAT - 455))
          | (1ULL << (MySqlParser::SAVEPOINT - 455))
          | (1ULL << (MySqlParser::SCHEDULE - 455))
          | (1ULL << (MySqlParser::SECURITY - 455))
          | (1ULL << (MySqlParser::SERVER - 455))
          | (1ULL << (MySqlParser::SESSION - 455))
          | (1ULL << (MySqlParser::SHARE - 455))
          | (1ULL << (MySqlParser::SHARED - 455))
          | (1ULL << (MySqlParser::SIGNED - 455))
          | (1ULL << (MySqlParser::SIMPLE - 455))
          | (1ULL << (MySqlParser::SLAVE - 455))
          | (1ULL << (MySqlParser::SNAPSHOT - 455))
          | (1ULL << (MySqlParser::SOCKET - 455))
          | (1ULL << (MySqlParser::SOME - 455))
          | (1ULL << (MySqlParser::SOUNDS - 455))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
          | (1ULL << (MySqlParser::SQL_CACHE - 455))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
          | (1ULL << (MySqlParser::START - 455))
          | (1ULL << (MySqlParser::STARTS - 455))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
          | (1ULL << (MySqlParser::STATUS - 455))
          | (1ULL << (MySqlParser::STORAGE - 455))
          | (1ULL << (MySqlParser::SUBJECT - 455))
          | (1ULL << (MySqlParser::SUBPARTITION - 455))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
          | (1ULL << (MySqlParser::TABLESPACE - 455))
          | (1ULL << (MySqlParser::TEMPORARY - 455))
          | (1ULL << (MySqlParser::TEMPTABLE - 455))
          | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
          | (1ULL << (MySqlParser::TRUNCATE - 519))
          | (1ULL << (MySqlParser::UNDEFINED - 519))
          | (1ULL << (MySqlParser::UNDOFILE - 519))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
          | (1ULL << (MySqlParser::UNKNOWN - 519))
          | (1ULL << (MySqlParser::UPGRADE - 519))
          | (1ULL << (MySqlParser::USER - 519))
          | (1ULL << (MySqlParser::VALUE - 519))
          | (1ULL << (MySqlParser::VARIABLES - 519))
          | (1ULL << (MySqlParser::VIEW - 519))
          | (1ULL << (MySqlParser::WAIT - 519))
          | (1ULL << (MySqlParser::WARNINGS - 519))
          | (1ULL << (MySqlParser::WORK - 519))
          | (1ULL << (MySqlParser::WRAPPER - 519))
          | (1ULL << (MySqlParser::X509 - 519))
          | (1ULL << (MySqlParser::XML - 519))
          | (1ULL << (MySqlParser::QUARTER - 519))
          | (1ULL << (MySqlParser::MONTH - 519))
          | (1ULL << (MySqlParser::DAY - 519))
          | (1ULL << (MySqlParser::HOUR - 519))
          | (1ULL << (MySqlParser::MINUTE - 519))
          | (1ULL << (MySqlParser::WEEK - 519))
          | (1ULL << (MySqlParser::SECOND - 519))
          | (1ULL << (MySqlParser::MICROSECOND - 519))
          | (1ULL << (MySqlParser::TABLES - 519))
          | (1ULL << (MySqlParser::ROUTINE - 519))
          | (1ULL << (MySqlParser::EXECUTE - 519))
          | (1ULL << (MySqlParser::FILE - 519))
          | (1ULL << (MySqlParser::PROCESS - 519))
          | (1ULL << (MySqlParser::RELOAD - 519))
          | (1ULL << (MySqlParser::SHUTDOWN - 519))
          | (1ULL << (MySqlParser::SUPER - 519))
          | (1ULL << (MySqlParser::PRIVILEGES - 519))
          | (1ULL << (MySqlParser::ARMSCII8 - 519))
          | (1ULL << (MySqlParser::ASCII - 519))
          | (1ULL << (MySqlParser::BIG5 - 519))
          | (1ULL << (MySqlParser::CP1250 - 519))
          | (1ULL << (MySqlParser::CP1251 - 519))
          | (1ULL << (MySqlParser::CP1256 - 519))
          | (1ULL << (MySqlParser::CP1257 - 519))
          | (1ULL << (MySqlParser::CP850 - 519))
          | (1ULL << (MySqlParser::CP852 - 519))
          | (1ULL << (MySqlParser::CP866 - 519))
          | (1ULL << (MySqlParser::CP932 - 519))
          | (1ULL << (MySqlParser::DEC8 - 519))
          | (1ULL << (MySqlParser::EUCJPMS - 519))
          | (1ULL << (MySqlParser::EUCKR - 519))
          | (1ULL << (MySqlParser::GB2312 - 519))
          | (1ULL << (MySqlParser::GBK - 519))
          | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
          | (1ULL << (MySqlParser::HEBREW - 583))
          | (1ULL << (MySqlParser::HP8 - 583))
          | (1ULL << (MySqlParser::KEYBCS2 - 583))
          | (1ULL << (MySqlParser::KOI8R - 583))
          | (1ULL << (MySqlParser::KOI8U - 583))
          | (1ULL << (MySqlParser::LATIN1 - 583))
          | (1ULL << (MySqlParser::LATIN2 - 583))
          | (1ULL << (MySqlParser::LATIN5 - 583))
          | (1ULL << (MySqlParser::LATIN7 - 583))
          | (1ULL << (MySqlParser::MACCE - 583))
          | (1ULL << (MySqlParser::MACROMAN - 583))
          | (1ULL << (MySqlParser::SJIS - 583))
          | (1ULL << (MySqlParser::SWE7 - 583))
          | (1ULL << (MySqlParser::TIS620 - 583))
          | (1ULL << (MySqlParser::UCS2 - 583))
          | (1ULL << (MySqlParser::UJIS - 583))
          | (1ULL << (MySqlParser::UTF16 - 583))
          | (1ULL << (MySqlParser::UTF16LE - 583))
          | (1ULL << (MySqlParser::UTF32 - 583))
          | (1ULL << (MySqlParser::UTF8 - 583))
          | (1ULL << (MySqlParser::UTF8MB3 - 583))
          | (1ULL << (MySqlParser::UTF8MB4 - 583))
          | (1ULL << (MySqlParser::ARCHIVE - 583))
          | (1ULL << (MySqlParser::BLACKHOLE - 583))
          | (1ULL << (MySqlParser::CSV - 583))
          | (1ULL << (MySqlParser::FEDERATED - 583))
          | (1ULL << (MySqlParser::INNODB - 583))
          | (1ULL << (MySqlParser::MEMORY - 583))
          | (1ULL << (MySqlParser::MRG_MYISAM - 583))
          | (1ULL << (MySqlParser::MYISAM - 583))
          | (1ULL << (MySqlParser::NDB - 583))
          | (1ULL << (MySqlParser::NDBCLUSTER - 583))
          | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
          | (1ULL << (MySqlParser::REPEATABLE - 583))
          | (1ULL << (MySqlParser::COMMITTED - 583))
          | (1ULL << (MySqlParser::UNCOMMITTED - 583))
          | (1ULL << (MySqlParser::SERIALIZABLE - 583))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
          | (1ULL << (MySqlParser::LINESTRING - 583))
          | (1ULL << (MySqlParser::MULTILINESTRING - 583))
          | (1ULL << (MySqlParser::MULTIPOINT - 583))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
          | (1ULL << (MySqlParser::POINT - 583))
          | (1ULL << (MySqlParser::POLYGON - 583))
          | (1ULL << (MySqlParser::ABS - 583))
          | (1ULL << (MySqlParser::ACOS - 583))
          | (1ULL << (MySqlParser::ADDDATE - 583))
          | (1ULL << (MySqlParser::ADDTIME - 583))
          | (1ULL << (MySqlParser::AES_DECRYPT - 583))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
          | (1ULL << (MySqlParser::AREA - 583))
          | (1ULL << (MySqlParser::ASBINARY - 583))
          | (1ULL << (MySqlParser::ASIN - 583))
          | (1ULL << (MySqlParser::ASTEXT - 583))
          | (1ULL << (MySqlParser::ASWKB - 583))
          | (1ULL << (MySqlParser::ASWKT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
          | (1ULL << (MySqlParser::ATAN - 583))
          | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
          | (1ULL << (MySqlParser::BIN - 647))
          | (1ULL << (MySqlParser::BIT_COUNT - 647))
          | (1ULL << (MySqlParser::BIT_LENGTH - 647))
          | (1ULL << (MySqlParser::BUFFER - 647))
          | (1ULL << (MySqlParser::CEIL - 647))
          | (1ULL << (MySqlParser::CEILING - 647))
          | (1ULL << (MySqlParser::CENTROID - 647))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
          | (1ULL << (MySqlParser::CHARSET - 647))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
          | (1ULL << (MySqlParser::COERCIBILITY - 647))
          | (1ULL << (MySqlParser::COLLATION - 647))
          | (1ULL << (MySqlParser::COMPRESS - 647))
          | (1ULL << (MySqlParser::CONCAT - 647))
          | (1ULL << (MySqlParser::CONCAT_WS - 647))
          | (1ULL << (MySqlParser::CONNECTION_ID - 647))
          | (1ULL << (MySqlParser::CONV - 647))
          | (1ULL << (MySqlParser::CONVERT_TZ - 647))
          | (1ULL << (MySqlParser::COS - 647))
          | (1ULL << (MySqlParser::COT - 647))
          | (1ULL << (MySqlParser::CRC32 - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
          | (1ULL << (MySqlParser::CROSSES - 647))
          | (1ULL << (MySqlParser::DATEDIFF - 647))
          | (1ULL << (MySqlParser::DATE_FORMAT - 647))
          | (1ULL << (MySqlParser::DAYNAME - 647))
          | (1ULL << (MySqlParser::DAYOFMONTH - 647))
          | (1ULL << (MySqlParser::DAYOFWEEK - 647))
          | (1ULL << (MySqlParser::DAYOFYEAR - 647))
          | (1ULL << (MySqlParser::DECODE - 647))
          | (1ULL << (MySqlParser::DEGREES - 647))
          | (1ULL << (MySqlParser::DES_DECRYPT - 647))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
          | (1ULL << (MySqlParser::DIMENSION - 647))
          | (1ULL << (MySqlParser::DISJOINT - 647))
          | (1ULL << (MySqlParser::ELT - 647))
          | (1ULL << (MySqlParser::ENCODE - 647))
          | (1ULL << (MySqlParser::ENCRYPT - 647))
          | (1ULL << (MySqlParser::ENDPOINT - 647))
          | (1ULL << (MySqlParser::ENVELOPE - 647))
          | (1ULL << (MySqlParser::EQUALS - 647))
          | (1ULL << (MySqlParser::EXP - 647))
          | (1ULL << (MySqlParser::EXPORT_SET - 647))
          | (1ULL << (MySqlParser::EXTERIORRING - 647))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
          | (1ULL << (MySqlParser::FIELD - 647))
          | (1ULL << (MySqlParser::FIND_IN_SET - 647))
          | (1ULL << (MySqlParser::FLOOR - 647))
          | (1ULL << (MySqlParser::FORMAT - 647))
          | (1ULL << (MySqlParser::FOUND_ROWS - 647))
          | (1ULL << (MySqlParser::FROM_BASE64 - 647))
          | (1ULL << (MySqlParser::FROM_DAYS - 647))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
          | (1ULL << (MySqlParser::GET_FORMAT - 711))
          | (1ULL << (MySqlParser::GET_LOCK - 711))
          | (1ULL << (MySqlParser::GLENGTH - 711))
          | (1ULL << (MySqlParser::GREATEST - 711))
          | (1ULL << (MySqlParser::GTID_SUBSET - 711))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
          | (1ULL << (MySqlParser::HEX - 711))
          | (1ULL << (MySqlParser::IFNULL - 711))
          | (1ULL << (MySqlParser::INET6_ATON - 711))
          | (1ULL << (MySqlParser::INET6_NTOA - 711))
          | (1ULL << (MySqlParser::INET_ATON - 711))
          | (1ULL << (MySqlParser::INET_NTOA - 711))
          | (1ULL << (MySqlParser::INSTR - 711))
          | (1ULL << (MySqlParser::INTERIORRINGN - 711))
          | (1ULL << (MySqlParser::INTERSECTS - 711))
          | (1ULL << (MySqlParser::ISCLOSED - 711))
          | (1ULL << (MySqlParser::ISEMPTY - 711))
          | (1ULL << (MySqlParser::ISNULL - 711))
          | (1ULL << (MySqlParser::ISSIMPLE - 711))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
          | (1ULL << (MySqlParser::IS_IPV4 - 711))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
          | (1ULL << (MySqlParser::IS_IPV6 - 711))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
          | (1ULL << (MySqlParser::LCASE - 711))
          | (1ULL << (MySqlParser::LEAST - 711))
          | (1ULL << (MySqlParser::LENGTH - 711))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINEFROMWKB - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
          | (1ULL << (MySqlParser::LN - 711))
          | (1ULL << (MySqlParser::LOAD_FILE - 711))
          | (1ULL << (MySqlParser::LOCATE - 711))
          | (1ULL << (MySqlParser::LOG - 711))
          | (1ULL << (MySqlParser::LOG10 - 711))
          | (1ULL << (MySqlParser::LOG2 - 711))
          | (1ULL << (MySqlParser::LOWER - 711))
          | (1ULL << (MySqlParser::LPAD - 711))
          | (1ULL << (MySqlParser::LTRIM - 711))
          | (1ULL << (MySqlParser::MAKEDATE - 711))
          | (1ULL << (MySqlParser::MAKETIME - 711))
          | (1ULL << (MySqlParser::MAKE_SET - 711))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
          | (1ULL << (MySqlParser::MBRCONTAINS - 711))
          | (1ULL << (MySqlParser::MBRDISJOINT - 711))
          | (1ULL << (MySqlParser::MBREQUAL - 711))
          | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
          | (1ULL << (MySqlParser::MBROVERLAPS - 711))
          | (1ULL << (MySqlParser::MBRTOUCHES - 711))
          | (1ULL << (MySqlParser::MBRWITHIN - 711))
          | (1ULL << (MySqlParser::MD5 - 711))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
          | (1ULL << (MySqlParser::MONTHNAME - 711))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::NAME_CONST - 775))
          | (1ULL << (MySqlParser::NULLIF - 775))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
          | (1ULL << (MySqlParser::NUMPOINTS - 775))
          | (1ULL << (MySqlParser::OCT - 775))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
          | (1ULL << (MySqlParser::ORD - 775))
          | (1ULL << (MySqlParser::OVERLAPS - 775))
          | (1ULL << (MySqlParser::PERIOD_ADD - 775))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
          | (1ULL << (MySqlParser::PI - 775))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::POINTFROMWKB - 775))
          | (1ULL << (MySqlParser::POINTN - 775))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYFROMWKB - 775))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::POW - 775))
          | (1ULL << (MySqlParser::POWER - 775))
          | (1ULL << (MySqlParser::QUOTE - 775))
          | (1ULL << (MySqlParser::RADIANS - 775))
          | (1ULL << (MySqlParser::RAND - 775))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
          | (1ULL << (MySqlParser::REVERSE - 775))
          | (1ULL << (MySqlParser::ROUND - 775))
          | (1ULL << (MySqlParser::ROW_COUNT - 775))
          | (1ULL << (MySqlParser::RPAD - 775))
          | (1ULL << (MySqlParser::RTRIM - 775))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
          | (1ULL << (MySqlParser::SESSION_USER - 775))
          | (1ULL << (MySqlParser::SHA - 775))
          | (1ULL << (MySqlParser::SHA1 - 775))
          | (1ULL << (MySqlParser::SHA2 - 775))
          | (1ULL << (MySqlParser::SIGN - 775))
          | (1ULL << (MySqlParser::SIN - 775))
          | (1ULL << (MySqlParser::SLEEP - 775))
          | (1ULL << (MySqlParser::SOUNDEX - 775))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
          | (1ULL << (MySqlParser::SQRT - 775))
          | (1ULL << (MySqlParser::SRID - 775))
          | (1ULL << (MySqlParser::STARTPOINT - 775))
          | (1ULL << (MySqlParser::STRCMP - 775))
          | (1ULL << (MySqlParser::STR_TO_DATE - 775))
          | (1ULL << (MySqlParser::ST_AREA - 775))
          | (1ULL << (MySqlParser::ST_ASBINARY - 775))
          | (1ULL << (MySqlParser::ST_ASTEXT - 775))
          | (1ULL << (MySqlParser::ST_ASWKB - 775))
          | (1ULL << (MySqlParser::ST_ASWKT - 775))
          | (1ULL << (MySqlParser::ST_BUFFER - 775))
          | (1ULL << (MySqlParser::ST_CENTROID - 775))
          | (1ULL << (MySqlParser::ST_CONTAINS - 775))
          | (1ULL << (MySqlParser::ST_CROSSES - 775))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
          | (1ULL << (MySqlParser::ST_DIMENSION - 775))
          | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
          | (1ULL << (MySqlParser::ST_EQUALS - 839))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POINTN - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_SRID - 839))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
          | (1ULL << (MySqlParser::ST_TOUCHES - 839))
          | (1ULL << (MySqlParser::ST_UNION - 839))
          | (1ULL << (MySqlParser::ST_WITHIN - 839))
          | (1ULL << (MySqlParser::ST_X - 839))
          | (1ULL << (MySqlParser::ST_Y - 839))
          | (1ULL << (MySqlParser::SUBDATE - 839))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
          | (1ULL << (MySqlParser::SUBTIME - 839))
          | (1ULL << (MySqlParser::SYSTEM_USER - 839))
          | (1ULL << (MySqlParser::TAN - 839))
          | (1ULL << (MySqlParser::TIMEDIFF - 839))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
          | (1ULL << (MySqlParser::TIME_FORMAT - 839))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
          | (1ULL << (MySqlParser::TOUCHES - 839))
          | (1ULL << (MySqlParser::TO_BASE64 - 839))
          | (1ULL << (MySqlParser::TO_DAYS - 839))
          | (1ULL << (MySqlParser::TO_SECONDS - 839))
          | (1ULL << (MySqlParser::UCASE - 839))
          | (1ULL << (MySqlParser::UNCOMPRESS - 839))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
          | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
          | (1ULL << (MySqlParser::UPDATEXML - 903))
          | (1ULL << (MySqlParser::UPPER - 903))
          | (1ULL << (MySqlParser::UUID - 903))
          | (1ULL << (MySqlParser::UUID_SHORT - 903))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
          | (1ULL << (MySqlParser::VERSION - 903))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
          | (1ULL << (MySqlParser::WEEKDAY - 903))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
          | (1ULL << (MySqlParser::WITHIN - 903))
          | (1ULL << (MySqlParser::YEARWEEK - 903))
          | (1ULL << (MySqlParser::Y_FUNCTION - 903))
          | (1ULL << (MySqlParser::X_FUNCTION - 903))
          | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
          | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
          setState(1367);
          dynamic_cast<TblConstrPKContext *>(_localctx)->constr_name = id_();
        }
      }
      setState(1372);
      match(MySqlParser::PRIMARY);
      setState(1373);
      match(MySqlParser::KEY);
      setState(1375);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(1374);
        index_type();
      }
      setState(1377);
      index_colname_list();
      setState(1381);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::KEY_BLOCK_SIZE) {
        setState(1378);
        index_option();
        setState(1383);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Table_constraintContext *>(_tracker.createInstance<MySqlParser::TblConstrUKContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1388);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(1384);
        match(MySqlParser::CONSTRAINT);
        setState(1386);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
          | (1ULL << (MySqlParser::TIME - 181))
          | (1ULL << (MySqlParser::TIMESTAMP - 181))
          | (1ULL << (MySqlParser::DATETIME - 181))
          | (1ULL << (MySqlParser::YEAR - 181))
          | (1ULL << (MySqlParser::TEXT - 181))
          | (1ULL << (MySqlParser::ENUM - 181))
          | (1ULL << (MySqlParser::COUNT - 181))
          | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
          | (1ULL << (MySqlParser::AFTER - 246))
          | (1ULL << (MySqlParser::ALGORITHM - 246))
          | (1ULL << (MySqlParser::ANY - 246))
          | (1ULL << (MySqlParser::AT - 246))
          | (1ULL << (MySqlParser::AUTHORS - 246))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
          | (1ULL << (MySqlParser::BEGIN - 246))
          | (1ULL << (MySqlParser::BINLOG - 246))
          | (1ULL << (MySqlParser::BIT - 246))
          | (1ULL << (MySqlParser::BTREE - 246))
          | (1ULL << (MySqlParser::CASCADED - 246))
          | (1ULL << (MySqlParser::CHAIN - 246))
          | (1ULL << (MySqlParser::CHECKSUM - 246))
          | (1ULL << (MySqlParser::CIPHER - 246))
          | (1ULL << (MySqlParser::CLIENT - 246))
          | (1ULL << (MySqlParser::COALESCE - 246))
          | (1ULL << (MySqlParser::CODE - 246))
          | (1ULL << (MySqlParser::COLUMNS - 246))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
          | (1ULL << (MySqlParser::COMMENT - 246))
          | (1ULL << (MySqlParser::COMMIT - 246))
          | (1ULL << (MySqlParser::COMPACT - 246))
          | (1ULL << (MySqlParser::COMPLETION - 246))
          | (1ULL << (MySqlParser::COMPRESSED - 246))
          | (1ULL << (MySqlParser::CONCURRENT - 246))
          | (1ULL << (MySqlParser::CONNECTION - 246))
          | (1ULL << (MySqlParser::CONSISTENT - 246))
          | (1ULL << (MySqlParser::CONTAINS - 246))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
          | (1ULL << (MySqlParser::COPY - 246))
          | (1ULL << (MySqlParser::DATA - 246))
          | (1ULL << (MySqlParser::DATAFILE - 246))
          | (1ULL << (MySqlParser::DEFINER - 246))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
          | (1ULL << (MySqlParser::DIRECTORY - 246))
          | (1ULL << (MySqlParser::DISABLE - 246))
          | (1ULL << (MySqlParser::DISCARD - 246))
          | (1ULL << (MySqlParser::DISK - 246))
          | (1ULL << (MySqlParser::DO - 246))
          | (1ULL << (MySqlParser::DUMPFILE - 246))
          | (1ULL << (MySqlParser::DUPLICATE - 246))
          | (1ULL << (MySqlParser::DYNAMIC - 246))
          | (1ULL << (MySqlParser::ENABLE - 246))
          | (1ULL << (MySqlParser::ENDS - 246))
          | (1ULL << (MySqlParser::ENGINE - 246))
          | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
          | (1ULL << (MySqlParser::ESCAPE - 311))
          | (1ULL << (MySqlParser::EVEN - 311))
          | (1ULL << (MySqlParser::EVENT - 311))
          | (1ULL << (MySqlParser::EVENTS - 311))
          | (1ULL << (MySqlParser::EVERY - 311))
          | (1ULL << (MySqlParser::EXCHANGE - 311))
          | (1ULL << (MySqlParser::EXCLUSIVE - 311))
          | (1ULL << (MySqlParser::EXPIRE - 311))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
          | (1ULL << (MySqlParser::FIELDS - 311))
          | (1ULL << (MySqlParser::FIRST - 311))
          | (1ULL << (MySqlParser::FIXED - 311))
          | (1ULL << (MySqlParser::FULL - 311))
          | (1ULL << (MySqlParser::FUNCTION - 311))
          | (1ULL << (MySqlParser::GLOBAL - 311))
          | (1ULL << (MySqlParser::GRANTS - 311))
          | (1ULL << (MySqlParser::HASH - 311))
          | (1ULL << (MySqlParser::HOST - 311))
          | (1ULL << (MySqlParser::IDENTIFIED - 311))
          | (1ULL << (MySqlParser::IMPORT - 311))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
          | (1ULL << (MySqlParser::INPLACE - 311))
          | (1ULL << (MySqlParser::INSERT_METHOD - 311))
          | (1ULL << (MySqlParser::INVOKER - 311))
          | (1ULL << (MySqlParser::ISOLATION - 311))
          | (1ULL << (MySqlParser::ISSUER - 311))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
          | (1ULL << (MySqlParser::LANGUAGE - 311))
          | (1ULL << (MySqlParser::LAST - 311))
          | (1ULL << (MySqlParser::LESS - 311))
          | (1ULL << (MySqlParser::LEVEL - 311))
          | (1ULL << (MySqlParser::LIST - 311))
          | (1ULL << (MySqlParser::LOCAL - 311))
          | (1ULL << (MySqlParser::LOGFILE - 311))
          | (1ULL << (MySqlParser::LOGS - 311))
          | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_ROWS - 391))
          | (1ULL << (MySqlParser::MAX_SIZE - 391))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
          | (1ULL << (MySqlParser::MERGE - 391))
          | (1ULL << (MySqlParser::MID - 391))
          | (1ULL << (MySqlParser::MIN_ROWS - 391))
          | (1ULL << (MySqlParser::MODIFY - 391))
          | (1ULL << (MySqlParser::MUTEX - 391))
          | (1ULL << (MySqlParser::MYSQL - 391))
          | (1ULL << (MySqlParser::NAME - 391))
          | (1ULL << (MySqlParser::NAMES - 391))
          | (1ULL << (MySqlParser::NCHAR - 391))
          | (1ULL << (MySqlParser::NO - 391))
          | (1ULL << (MySqlParser::NODEGROUP - 391))
          | (1ULL << (MySqlParser::NONE - 391))
          | (1ULL << (MySqlParser::OFFLINE - 391))
          | (1ULL << (MySqlParser::OFFSET - 391))
          | (1ULL << (MySqlParser::OJ - 391))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
          | (1ULL << (MySqlParser::ONLINE - 391))
          | (1ULL << (MySqlParser::ONLY - 391))
          | (1ULL << (MySqlParser::OPTIONS - 391))
          | (1ULL << (MySqlParser::OWNER - 391))
          | (1ULL << (MySqlParser::PACK_KEYS - 391))
          | (1ULL << (MySqlParser::PARSER - 391))
          | (1ULL << (MySqlParser::PARTIAL - 391))
          | (1ULL << (MySqlParser::PARTITIONING - 391))
          | (1ULL << (MySqlParser::PARTITIONS - 391))
          | (1ULL << (MySqlParser::PASSWORD - 391))
          | (1ULL << (MySqlParser::PLUGINS - 391))
          | (1ULL << (MySqlParser::PORT - 391))
          | (1ULL << (MySqlParser::PRESERVE - 391))
          | (1ULL << (MySqlParser::PROCESSLIST - 391))
          | (1ULL << (MySqlParser::PROFILE - 391))
          | (1ULL << (MySqlParser::PROFILES - 391))
          | (1ULL << (MySqlParser::PROXY - 391))
          | (1ULL << (MySqlParser::QUERY - 391))
          | (1ULL << (MySqlParser::QUICK - 391))
          | (1ULL << (MySqlParser::REBUILD - 391))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
          | (1ULL << (MySqlParser::REDUNDANT - 391))
          | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
          | (1ULL << (MySqlParser::REORGANIZE - 455))
          | (1ULL << (MySqlParser::REPAIR - 455))
          | (1ULL << (MySqlParser::REPLICATION - 455))
          | (1ULL << (MySqlParser::RETURNS - 455))
          | (1ULL << (MySqlParser::ROLLBACK - 455))
          | (1ULL << (MySqlParser::ROLLUP - 455))
          | (1ULL << (MySqlParser::ROW - 455))
          | (1ULL << (MySqlParser::ROWS - 455))
          | (1ULL << (MySqlParser::ROW_FORMAT - 455))
          | (1ULL << (MySqlParser::SAVEPOINT - 455))
          | (1ULL << (MySqlParser::SCHEDULE - 455))
          | (1ULL << (MySqlParser::SECURITY - 455))
          | (1ULL << (MySqlParser::SERVER - 455))
          | (1ULL << (MySqlParser::SESSION - 455))
          | (1ULL << (MySqlParser::SHARE - 455))
          | (1ULL << (MySqlParser::SHARED - 455))
          | (1ULL << (MySqlParser::SIGNED - 455))
          | (1ULL << (MySqlParser::SIMPLE - 455))
          | (1ULL << (MySqlParser::SLAVE - 455))
          | (1ULL << (MySqlParser::SNAPSHOT - 455))
          | (1ULL << (MySqlParser::SOCKET - 455))
          | (1ULL << (MySqlParser::SOME - 455))
          | (1ULL << (MySqlParser::SOUNDS - 455))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
          | (1ULL << (MySqlParser::SQL_CACHE - 455))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
          | (1ULL << (MySqlParser::START - 455))
          | (1ULL << (MySqlParser::STARTS - 455))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
          | (1ULL << (MySqlParser::STATUS - 455))
          | (1ULL << (MySqlParser::STORAGE - 455))
          | (1ULL << (MySqlParser::SUBJECT - 455))
          | (1ULL << (MySqlParser::SUBPARTITION - 455))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
          | (1ULL << (MySqlParser::TABLESPACE - 455))
          | (1ULL << (MySqlParser::TEMPORARY - 455))
          | (1ULL << (MySqlParser::TEMPTABLE - 455))
          | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
          | (1ULL << (MySqlParser::TRUNCATE - 519))
          | (1ULL << (MySqlParser::UNDEFINED - 519))
          | (1ULL << (MySqlParser::UNDOFILE - 519))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
          | (1ULL << (MySqlParser::UNKNOWN - 519))
          | (1ULL << (MySqlParser::UPGRADE - 519))
          | (1ULL << (MySqlParser::USER - 519))
          | (1ULL << (MySqlParser::VALUE - 519))
          | (1ULL << (MySqlParser::VARIABLES - 519))
          | (1ULL << (MySqlParser::VIEW - 519))
          | (1ULL << (MySqlParser::WAIT - 519))
          | (1ULL << (MySqlParser::WARNINGS - 519))
          | (1ULL << (MySqlParser::WORK - 519))
          | (1ULL << (MySqlParser::WRAPPER - 519))
          | (1ULL << (MySqlParser::X509 - 519))
          | (1ULL << (MySqlParser::XML - 519))
          | (1ULL << (MySqlParser::QUARTER - 519))
          | (1ULL << (MySqlParser::MONTH - 519))
          | (1ULL << (MySqlParser::DAY - 519))
          | (1ULL << (MySqlParser::HOUR - 519))
          | (1ULL << (MySqlParser::MINUTE - 519))
          | (1ULL << (MySqlParser::WEEK - 519))
          | (1ULL << (MySqlParser::SECOND - 519))
          | (1ULL << (MySqlParser::MICROSECOND - 519))
          | (1ULL << (MySqlParser::TABLES - 519))
          | (1ULL << (MySqlParser::ROUTINE - 519))
          | (1ULL << (MySqlParser::EXECUTE - 519))
          | (1ULL << (MySqlParser::FILE - 519))
          | (1ULL << (MySqlParser::PROCESS - 519))
          | (1ULL << (MySqlParser::RELOAD - 519))
          | (1ULL << (MySqlParser::SHUTDOWN - 519))
          | (1ULL << (MySqlParser::SUPER - 519))
          | (1ULL << (MySqlParser::PRIVILEGES - 519))
          | (1ULL << (MySqlParser::ARMSCII8 - 519))
          | (1ULL << (MySqlParser::ASCII - 519))
          | (1ULL << (MySqlParser::BIG5 - 519))
          | (1ULL << (MySqlParser::CP1250 - 519))
          | (1ULL << (MySqlParser::CP1251 - 519))
          | (1ULL << (MySqlParser::CP1256 - 519))
          | (1ULL << (MySqlParser::CP1257 - 519))
          | (1ULL << (MySqlParser::CP850 - 519))
          | (1ULL << (MySqlParser::CP852 - 519))
          | (1ULL << (MySqlParser::CP866 - 519))
          | (1ULL << (MySqlParser::CP932 - 519))
          | (1ULL << (MySqlParser::DEC8 - 519))
          | (1ULL << (MySqlParser::EUCJPMS - 519))
          | (1ULL << (MySqlParser::EUCKR - 519))
          | (1ULL << (MySqlParser::GB2312 - 519))
          | (1ULL << (MySqlParser::GBK - 519))
          | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
          | (1ULL << (MySqlParser::HEBREW - 583))
          | (1ULL << (MySqlParser::HP8 - 583))
          | (1ULL << (MySqlParser::KEYBCS2 - 583))
          | (1ULL << (MySqlParser::KOI8R - 583))
          | (1ULL << (MySqlParser::KOI8U - 583))
          | (1ULL << (MySqlParser::LATIN1 - 583))
          | (1ULL << (MySqlParser::LATIN2 - 583))
          | (1ULL << (MySqlParser::LATIN5 - 583))
          | (1ULL << (MySqlParser::LATIN7 - 583))
          | (1ULL << (MySqlParser::MACCE - 583))
          | (1ULL << (MySqlParser::MACROMAN - 583))
          | (1ULL << (MySqlParser::SJIS - 583))
          | (1ULL << (MySqlParser::SWE7 - 583))
          | (1ULL << (MySqlParser::TIS620 - 583))
          | (1ULL << (MySqlParser::UCS2 - 583))
          | (1ULL << (MySqlParser::UJIS - 583))
          | (1ULL << (MySqlParser::UTF16 - 583))
          | (1ULL << (MySqlParser::UTF16LE - 583))
          | (1ULL << (MySqlParser::UTF32 - 583))
          | (1ULL << (MySqlParser::UTF8 - 583))
          | (1ULL << (MySqlParser::UTF8MB3 - 583))
          | (1ULL << (MySqlParser::UTF8MB4 - 583))
          | (1ULL << (MySqlParser::ARCHIVE - 583))
          | (1ULL << (MySqlParser::BLACKHOLE - 583))
          | (1ULL << (MySqlParser::CSV - 583))
          | (1ULL << (MySqlParser::FEDERATED - 583))
          | (1ULL << (MySqlParser::INNODB - 583))
          | (1ULL << (MySqlParser::MEMORY - 583))
          | (1ULL << (MySqlParser::MRG_MYISAM - 583))
          | (1ULL << (MySqlParser::MYISAM - 583))
          | (1ULL << (MySqlParser::NDB - 583))
          | (1ULL << (MySqlParser::NDBCLUSTER - 583))
          | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
          | (1ULL << (MySqlParser::REPEATABLE - 583))
          | (1ULL << (MySqlParser::COMMITTED - 583))
          | (1ULL << (MySqlParser::UNCOMMITTED - 583))
          | (1ULL << (MySqlParser::SERIALIZABLE - 583))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
          | (1ULL << (MySqlParser::LINESTRING - 583))
          | (1ULL << (MySqlParser::MULTILINESTRING - 583))
          | (1ULL << (MySqlParser::MULTIPOINT - 583))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
          | (1ULL << (MySqlParser::POINT - 583))
          | (1ULL << (MySqlParser::POLYGON - 583))
          | (1ULL << (MySqlParser::ABS - 583))
          | (1ULL << (MySqlParser::ACOS - 583))
          | (1ULL << (MySqlParser::ADDDATE - 583))
          | (1ULL << (MySqlParser::ADDTIME - 583))
          | (1ULL << (MySqlParser::AES_DECRYPT - 583))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
          | (1ULL << (MySqlParser::AREA - 583))
          | (1ULL << (MySqlParser::ASBINARY - 583))
          | (1ULL << (MySqlParser::ASIN - 583))
          | (1ULL << (MySqlParser::ASTEXT - 583))
          | (1ULL << (MySqlParser::ASWKB - 583))
          | (1ULL << (MySqlParser::ASWKT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
          | (1ULL << (MySqlParser::ATAN - 583))
          | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
          | (1ULL << (MySqlParser::BIN - 647))
          | (1ULL << (MySqlParser::BIT_COUNT - 647))
          | (1ULL << (MySqlParser::BIT_LENGTH - 647))
          | (1ULL << (MySqlParser::BUFFER - 647))
          | (1ULL << (MySqlParser::CEIL - 647))
          | (1ULL << (MySqlParser::CEILING - 647))
          | (1ULL << (MySqlParser::CENTROID - 647))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
          | (1ULL << (MySqlParser::CHARSET - 647))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
          | (1ULL << (MySqlParser::COERCIBILITY - 647))
          | (1ULL << (MySqlParser::COLLATION - 647))
          | (1ULL << (MySqlParser::COMPRESS - 647))
          | (1ULL << (MySqlParser::CONCAT - 647))
          | (1ULL << (MySqlParser::CONCAT_WS - 647))
          | (1ULL << (MySqlParser::CONNECTION_ID - 647))
          | (1ULL << (MySqlParser::CONV - 647))
          | (1ULL << (MySqlParser::CONVERT_TZ - 647))
          | (1ULL << (MySqlParser::COS - 647))
          | (1ULL << (MySqlParser::COT - 647))
          | (1ULL << (MySqlParser::CRC32 - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
          | (1ULL << (MySqlParser::CROSSES - 647))
          | (1ULL << (MySqlParser::DATEDIFF - 647))
          | (1ULL << (MySqlParser::DATE_FORMAT - 647))
          | (1ULL << (MySqlParser::DAYNAME - 647))
          | (1ULL << (MySqlParser::DAYOFMONTH - 647))
          | (1ULL << (MySqlParser::DAYOFWEEK - 647))
          | (1ULL << (MySqlParser::DAYOFYEAR - 647))
          | (1ULL << (MySqlParser::DECODE - 647))
          | (1ULL << (MySqlParser::DEGREES - 647))
          | (1ULL << (MySqlParser::DES_DECRYPT - 647))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
          | (1ULL << (MySqlParser::DIMENSION - 647))
          | (1ULL << (MySqlParser::DISJOINT - 647))
          | (1ULL << (MySqlParser::ELT - 647))
          | (1ULL << (MySqlParser::ENCODE - 647))
          | (1ULL << (MySqlParser::ENCRYPT - 647))
          | (1ULL << (MySqlParser::ENDPOINT - 647))
          | (1ULL << (MySqlParser::ENVELOPE - 647))
          | (1ULL << (MySqlParser::EQUALS - 647))
          | (1ULL << (MySqlParser::EXP - 647))
          | (1ULL << (MySqlParser::EXPORT_SET - 647))
          | (1ULL << (MySqlParser::EXTERIORRING - 647))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
          | (1ULL << (MySqlParser::FIELD - 647))
          | (1ULL << (MySqlParser::FIND_IN_SET - 647))
          | (1ULL << (MySqlParser::FLOOR - 647))
          | (1ULL << (MySqlParser::FORMAT - 647))
          | (1ULL << (MySqlParser::FOUND_ROWS - 647))
          | (1ULL << (MySqlParser::FROM_BASE64 - 647))
          | (1ULL << (MySqlParser::FROM_DAYS - 647))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
          | (1ULL << (MySqlParser::GET_FORMAT - 711))
          | (1ULL << (MySqlParser::GET_LOCK - 711))
          | (1ULL << (MySqlParser::GLENGTH - 711))
          | (1ULL << (MySqlParser::GREATEST - 711))
          | (1ULL << (MySqlParser::GTID_SUBSET - 711))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
          | (1ULL << (MySqlParser::HEX - 711))
          | (1ULL << (MySqlParser::IFNULL - 711))
          | (1ULL << (MySqlParser::INET6_ATON - 711))
          | (1ULL << (MySqlParser::INET6_NTOA - 711))
          | (1ULL << (MySqlParser::INET_ATON - 711))
          | (1ULL << (MySqlParser::INET_NTOA - 711))
          | (1ULL << (MySqlParser::INSTR - 711))
          | (1ULL << (MySqlParser::INTERIORRINGN - 711))
          | (1ULL << (MySqlParser::INTERSECTS - 711))
          | (1ULL << (MySqlParser::ISCLOSED - 711))
          | (1ULL << (MySqlParser::ISEMPTY - 711))
          | (1ULL << (MySqlParser::ISNULL - 711))
          | (1ULL << (MySqlParser::ISSIMPLE - 711))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
          | (1ULL << (MySqlParser::IS_IPV4 - 711))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
          | (1ULL << (MySqlParser::IS_IPV6 - 711))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
          | (1ULL << (MySqlParser::LCASE - 711))
          | (1ULL << (MySqlParser::LEAST - 711))
          | (1ULL << (MySqlParser::LENGTH - 711))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINEFROMWKB - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
          | (1ULL << (MySqlParser::LN - 711))
          | (1ULL << (MySqlParser::LOAD_FILE - 711))
          | (1ULL << (MySqlParser::LOCATE - 711))
          | (1ULL << (MySqlParser::LOG - 711))
          | (1ULL << (MySqlParser::LOG10 - 711))
          | (1ULL << (MySqlParser::LOG2 - 711))
          | (1ULL << (MySqlParser::LOWER - 711))
          | (1ULL << (MySqlParser::LPAD - 711))
          | (1ULL << (MySqlParser::LTRIM - 711))
          | (1ULL << (MySqlParser::MAKEDATE - 711))
          | (1ULL << (MySqlParser::MAKETIME - 711))
          | (1ULL << (MySqlParser::MAKE_SET - 711))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
          | (1ULL << (MySqlParser::MBRCONTAINS - 711))
          | (1ULL << (MySqlParser::MBRDISJOINT - 711))
          | (1ULL << (MySqlParser::MBREQUAL - 711))
          | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
          | (1ULL << (MySqlParser::MBROVERLAPS - 711))
          | (1ULL << (MySqlParser::MBRTOUCHES - 711))
          | (1ULL << (MySqlParser::MBRWITHIN - 711))
          | (1ULL << (MySqlParser::MD5 - 711))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
          | (1ULL << (MySqlParser::MONTHNAME - 711))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::NAME_CONST - 775))
          | (1ULL << (MySqlParser::NULLIF - 775))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
          | (1ULL << (MySqlParser::NUMPOINTS - 775))
          | (1ULL << (MySqlParser::OCT - 775))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
          | (1ULL << (MySqlParser::ORD - 775))
          | (1ULL << (MySqlParser::OVERLAPS - 775))
          | (1ULL << (MySqlParser::PERIOD_ADD - 775))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
          | (1ULL << (MySqlParser::PI - 775))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::POINTFROMWKB - 775))
          | (1ULL << (MySqlParser::POINTN - 775))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYFROMWKB - 775))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::POW - 775))
          | (1ULL << (MySqlParser::POWER - 775))
          | (1ULL << (MySqlParser::QUOTE - 775))
          | (1ULL << (MySqlParser::RADIANS - 775))
          | (1ULL << (MySqlParser::RAND - 775))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
          | (1ULL << (MySqlParser::REVERSE - 775))
          | (1ULL << (MySqlParser::ROUND - 775))
          | (1ULL << (MySqlParser::ROW_COUNT - 775))
          | (1ULL << (MySqlParser::RPAD - 775))
          | (1ULL << (MySqlParser::RTRIM - 775))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
          | (1ULL << (MySqlParser::SESSION_USER - 775))
          | (1ULL << (MySqlParser::SHA - 775))
          | (1ULL << (MySqlParser::SHA1 - 775))
          | (1ULL << (MySqlParser::SHA2 - 775))
          | (1ULL << (MySqlParser::SIGN - 775))
          | (1ULL << (MySqlParser::SIN - 775))
          | (1ULL << (MySqlParser::SLEEP - 775))
          | (1ULL << (MySqlParser::SOUNDEX - 775))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
          | (1ULL << (MySqlParser::SQRT - 775))
          | (1ULL << (MySqlParser::SRID - 775))
          | (1ULL << (MySqlParser::STARTPOINT - 775))
          | (1ULL << (MySqlParser::STRCMP - 775))
          | (1ULL << (MySqlParser::STR_TO_DATE - 775))
          | (1ULL << (MySqlParser::ST_AREA - 775))
          | (1ULL << (MySqlParser::ST_ASBINARY - 775))
          | (1ULL << (MySqlParser::ST_ASTEXT - 775))
          | (1ULL << (MySqlParser::ST_ASWKB - 775))
          | (1ULL << (MySqlParser::ST_ASWKT - 775))
          | (1ULL << (MySqlParser::ST_BUFFER - 775))
          | (1ULL << (MySqlParser::ST_CENTROID - 775))
          | (1ULL << (MySqlParser::ST_CONTAINS - 775))
          | (1ULL << (MySqlParser::ST_CROSSES - 775))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
          | (1ULL << (MySqlParser::ST_DIMENSION - 775))
          | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
          | (1ULL << (MySqlParser::ST_EQUALS - 839))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POINTN - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_SRID - 839))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
          | (1ULL << (MySqlParser::ST_TOUCHES - 839))
          | (1ULL << (MySqlParser::ST_UNION - 839))
          | (1ULL << (MySqlParser::ST_WITHIN - 839))
          | (1ULL << (MySqlParser::ST_X - 839))
          | (1ULL << (MySqlParser::ST_Y - 839))
          | (1ULL << (MySqlParser::SUBDATE - 839))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
          | (1ULL << (MySqlParser::SUBTIME - 839))
          | (1ULL << (MySqlParser::SYSTEM_USER - 839))
          | (1ULL << (MySqlParser::TAN - 839))
          | (1ULL << (MySqlParser::TIMEDIFF - 839))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
          | (1ULL << (MySqlParser::TIME_FORMAT - 839))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
          | (1ULL << (MySqlParser::TOUCHES - 839))
          | (1ULL << (MySqlParser::TO_BASE64 - 839))
          | (1ULL << (MySqlParser::TO_DAYS - 839))
          | (1ULL << (MySqlParser::TO_SECONDS - 839))
          | (1ULL << (MySqlParser::UCASE - 839))
          | (1ULL << (MySqlParser::UNCOMPRESS - 839))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
          | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
          | (1ULL << (MySqlParser::UPDATEXML - 903))
          | (1ULL << (MySqlParser::UPPER - 903))
          | (1ULL << (MySqlParser::UUID - 903))
          | (1ULL << (MySqlParser::UUID_SHORT - 903))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
          | (1ULL << (MySqlParser::VERSION - 903))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
          | (1ULL << (MySqlParser::WEEKDAY - 903))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
          | (1ULL << (MySqlParser::WITHIN - 903))
          | (1ULL << (MySqlParser::YEARWEEK - 903))
          | (1ULL << (MySqlParser::Y_FUNCTION - 903))
          | (1ULL << (MySqlParser::X_FUNCTION - 903))
          | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
          | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
          setState(1385);
          dynamic_cast<TblConstrUKContext *>(_localctx)->constr_name = id_();
        }
      }
      setState(1390);
      match(MySqlParser::UNIQUE);
      setState(1392);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY) {
        setState(1391);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1395);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LEFT

      || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
        | (1ULL << (MySqlParser::TIME - 181))
        | (1ULL << (MySqlParser::TIMESTAMP - 181))
        | (1ULL << (MySqlParser::DATETIME - 181))
        | (1ULL << (MySqlParser::YEAR - 181))
        | (1ULL << (MySqlParser::TEXT - 181))
        | (1ULL << (MySqlParser::ENUM - 181))
        | (1ULL << (MySqlParser::COUNT - 181))
        | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
        | (1ULL << (MySqlParser::AFTER - 246))
        | (1ULL << (MySqlParser::ALGORITHM - 246))
        | (1ULL << (MySqlParser::ANY - 246))
        | (1ULL << (MySqlParser::AT - 246))
        | (1ULL << (MySqlParser::AUTHORS - 246))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
        | (1ULL << (MySqlParser::BEGIN - 246))
        | (1ULL << (MySqlParser::BINLOG - 246))
        | (1ULL << (MySqlParser::BIT - 246))
        | (1ULL << (MySqlParser::BTREE - 246))
        | (1ULL << (MySqlParser::CASCADED - 246))
        | (1ULL << (MySqlParser::CHAIN - 246))
        | (1ULL << (MySqlParser::CHECKSUM - 246))
        | (1ULL << (MySqlParser::CIPHER - 246))
        | (1ULL << (MySqlParser::CLIENT - 246))
        | (1ULL << (MySqlParser::COALESCE - 246))
        | (1ULL << (MySqlParser::CODE - 246))
        | (1ULL << (MySqlParser::COLUMNS - 246))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
        | (1ULL << (MySqlParser::COMMENT - 246))
        | (1ULL << (MySqlParser::COMMIT - 246))
        | (1ULL << (MySqlParser::COMPACT - 246))
        | (1ULL << (MySqlParser::COMPLETION - 246))
        | (1ULL << (MySqlParser::COMPRESSED - 246))
        | (1ULL << (MySqlParser::CONCURRENT - 246))
        | (1ULL << (MySqlParser::CONNECTION - 246))
        | (1ULL << (MySqlParser::CONSISTENT - 246))
        | (1ULL << (MySqlParser::CONTAINS - 246))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
        | (1ULL << (MySqlParser::COPY - 246))
        | (1ULL << (MySqlParser::DATA - 246))
        | (1ULL << (MySqlParser::DATAFILE - 246))
        | (1ULL << (MySqlParser::DEFINER - 246))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
        | (1ULL << (MySqlParser::DIRECTORY - 246))
        | (1ULL << (MySqlParser::DISABLE - 246))
        | (1ULL << (MySqlParser::DISCARD - 246))
        | (1ULL << (MySqlParser::DISK - 246))
        | (1ULL << (MySqlParser::DO - 246))
        | (1ULL << (MySqlParser::DUMPFILE - 246))
        | (1ULL << (MySqlParser::DUPLICATE - 246))
        | (1ULL << (MySqlParser::DYNAMIC - 246))
        | (1ULL << (MySqlParser::ENABLE - 246))
        | (1ULL << (MySqlParser::ENDS - 246))
        | (1ULL << (MySqlParser::ENGINE - 246))
        | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
        | (1ULL << (MySqlParser::ESCAPE - 311))
        | (1ULL << (MySqlParser::EVEN - 311))
        | (1ULL << (MySqlParser::EVENT - 311))
        | (1ULL << (MySqlParser::EVENTS - 311))
        | (1ULL << (MySqlParser::EVERY - 311))
        | (1ULL << (MySqlParser::EXCHANGE - 311))
        | (1ULL << (MySqlParser::EXCLUSIVE - 311))
        | (1ULL << (MySqlParser::EXPIRE - 311))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
        | (1ULL << (MySqlParser::FIELDS - 311))
        | (1ULL << (MySqlParser::FIRST - 311))
        | (1ULL << (MySqlParser::FIXED - 311))
        | (1ULL << (MySqlParser::FULL - 311))
        | (1ULL << (MySqlParser::FUNCTION - 311))
        | (1ULL << (MySqlParser::GLOBAL - 311))
        | (1ULL << (MySqlParser::GRANTS - 311))
        | (1ULL << (MySqlParser::HASH - 311))
        | (1ULL << (MySqlParser::HOST - 311))
        | (1ULL << (MySqlParser::IDENTIFIED - 311))
        | (1ULL << (MySqlParser::IMPORT - 311))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
        | (1ULL << (MySqlParser::INPLACE - 311))
        | (1ULL << (MySqlParser::INSERT_METHOD - 311))
        | (1ULL << (MySqlParser::INVOKER - 311))
        | (1ULL << (MySqlParser::ISOLATION - 311))
        | (1ULL << (MySqlParser::ISSUER - 311))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
        | (1ULL << (MySqlParser::LANGUAGE - 311))
        | (1ULL << (MySqlParser::LAST - 311))
        | (1ULL << (MySqlParser::LESS - 311))
        | (1ULL << (MySqlParser::LEVEL - 311))
        | (1ULL << (MySqlParser::LIST - 311))
        | (1ULL << (MySqlParser::LOCAL - 311))
        | (1ULL << (MySqlParser::LOGFILE - 311))
        | (1ULL << (MySqlParser::LOGS - 311))
        | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_ROWS - 391))
        | (1ULL << (MySqlParser::MAX_SIZE - 391))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
        | (1ULL << (MySqlParser::MERGE - 391))
        | (1ULL << (MySqlParser::MID - 391))
        | (1ULL << (MySqlParser::MIN_ROWS - 391))
        | (1ULL << (MySqlParser::MODIFY - 391))
        | (1ULL << (MySqlParser::MUTEX - 391))
        | (1ULL << (MySqlParser::MYSQL - 391))
        | (1ULL << (MySqlParser::NAME - 391))
        | (1ULL << (MySqlParser::NAMES - 391))
        | (1ULL << (MySqlParser::NCHAR - 391))
        | (1ULL << (MySqlParser::NO - 391))
        | (1ULL << (MySqlParser::NODEGROUP - 391))
        | (1ULL << (MySqlParser::NONE - 391))
        | (1ULL << (MySqlParser::OFFLINE - 391))
        | (1ULL << (MySqlParser::OFFSET - 391))
        | (1ULL << (MySqlParser::OJ - 391))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
        | (1ULL << (MySqlParser::ONLINE - 391))
        | (1ULL << (MySqlParser::ONLY - 391))
        | (1ULL << (MySqlParser::OPTIONS - 391))
        | (1ULL << (MySqlParser::OWNER - 391))
        | (1ULL << (MySqlParser::PACK_KEYS - 391))
        | (1ULL << (MySqlParser::PARSER - 391))
        | (1ULL << (MySqlParser::PARTIAL - 391))
        | (1ULL << (MySqlParser::PARTITIONING - 391))
        | (1ULL << (MySqlParser::PARTITIONS - 391))
        | (1ULL << (MySqlParser::PASSWORD - 391))
        | (1ULL << (MySqlParser::PLUGINS - 391))
        | (1ULL << (MySqlParser::PORT - 391))
        | (1ULL << (MySqlParser::PRESERVE - 391))
        | (1ULL << (MySqlParser::PROCESSLIST - 391))
        | (1ULL << (MySqlParser::PROFILE - 391))
        | (1ULL << (MySqlParser::PROFILES - 391))
        | (1ULL << (MySqlParser::PROXY - 391))
        | (1ULL << (MySqlParser::QUERY - 391))
        | (1ULL << (MySqlParser::QUICK - 391))
        | (1ULL << (MySqlParser::REBUILD - 391))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
        | (1ULL << (MySqlParser::REDUNDANT - 391))
        | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
        | (1ULL << (MySqlParser::REORGANIZE - 455))
        | (1ULL << (MySqlParser::REPAIR - 455))
        | (1ULL << (MySqlParser::REPLICATION - 455))
        | (1ULL << (MySqlParser::RETURNS - 455))
        | (1ULL << (MySqlParser::ROLLBACK - 455))
        | (1ULL << (MySqlParser::ROLLUP - 455))
        | (1ULL << (MySqlParser::ROW - 455))
        | (1ULL << (MySqlParser::ROWS - 455))
        | (1ULL << (MySqlParser::ROW_FORMAT - 455))
        | (1ULL << (MySqlParser::SAVEPOINT - 455))
        | (1ULL << (MySqlParser::SCHEDULE - 455))
        | (1ULL << (MySqlParser::SECURITY - 455))
        | (1ULL << (MySqlParser::SERVER - 455))
        | (1ULL << (MySqlParser::SESSION - 455))
        | (1ULL << (MySqlParser::SHARE - 455))
        | (1ULL << (MySqlParser::SHARED - 455))
        | (1ULL << (MySqlParser::SIGNED - 455))
        | (1ULL << (MySqlParser::SIMPLE - 455))
        | (1ULL << (MySqlParser::SLAVE - 455))
        | (1ULL << (MySqlParser::SNAPSHOT - 455))
        | (1ULL << (MySqlParser::SOCKET - 455))
        | (1ULL << (MySqlParser::SOME - 455))
        | (1ULL << (MySqlParser::SOUNDS - 455))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
        | (1ULL << (MySqlParser::SQL_CACHE - 455))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
        | (1ULL << (MySqlParser::START - 455))
        | (1ULL << (MySqlParser::STARTS - 455))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
        | (1ULL << (MySqlParser::STATUS - 455))
        | (1ULL << (MySqlParser::STORAGE - 455))
        | (1ULL << (MySqlParser::SUBJECT - 455))
        | (1ULL << (MySqlParser::SUBPARTITION - 455))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
        | (1ULL << (MySqlParser::TABLESPACE - 455))
        | (1ULL << (MySqlParser::TEMPORARY - 455))
        | (1ULL << (MySqlParser::TEMPTABLE - 455))
        | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
        | (1ULL << (MySqlParser::TRUNCATE - 519))
        | (1ULL << (MySqlParser::UNDEFINED - 519))
        | (1ULL << (MySqlParser::UNDOFILE - 519))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
        | (1ULL << (MySqlParser::UNKNOWN - 519))
        | (1ULL << (MySqlParser::UPGRADE - 519))
        | (1ULL << (MySqlParser::USER - 519))
        | (1ULL << (MySqlParser::VALUE - 519))
        | (1ULL << (MySqlParser::VARIABLES - 519))
        | (1ULL << (MySqlParser::VIEW - 519))
        | (1ULL << (MySqlParser::WAIT - 519))
        | (1ULL << (MySqlParser::WARNINGS - 519))
        | (1ULL << (MySqlParser::WORK - 519))
        | (1ULL << (MySqlParser::WRAPPER - 519))
        | (1ULL << (MySqlParser::X509 - 519))
        | (1ULL << (MySqlParser::XML - 519))
        | (1ULL << (MySqlParser::QUARTER - 519))
        | (1ULL << (MySqlParser::MONTH - 519))
        | (1ULL << (MySqlParser::DAY - 519))
        | (1ULL << (MySqlParser::HOUR - 519))
        | (1ULL << (MySqlParser::MINUTE - 519))
        | (1ULL << (MySqlParser::WEEK - 519))
        | (1ULL << (MySqlParser::SECOND - 519))
        | (1ULL << (MySqlParser::MICROSECOND - 519))
        | (1ULL << (MySqlParser::TABLES - 519))
        | (1ULL << (MySqlParser::ROUTINE - 519))
        | (1ULL << (MySqlParser::EXECUTE - 519))
        | (1ULL << (MySqlParser::FILE - 519))
        | (1ULL << (MySqlParser::PROCESS - 519))
        | (1ULL << (MySqlParser::RELOAD - 519))
        | (1ULL << (MySqlParser::SHUTDOWN - 519))
        | (1ULL << (MySqlParser::SUPER - 519))
        | (1ULL << (MySqlParser::PRIVILEGES - 519))
        | (1ULL << (MySqlParser::ARMSCII8 - 519))
        | (1ULL << (MySqlParser::ASCII - 519))
        | (1ULL << (MySqlParser::BIG5 - 519))
        | (1ULL << (MySqlParser::CP1250 - 519))
        | (1ULL << (MySqlParser::CP1251 - 519))
        | (1ULL << (MySqlParser::CP1256 - 519))
        | (1ULL << (MySqlParser::CP1257 - 519))
        | (1ULL << (MySqlParser::CP850 - 519))
        | (1ULL << (MySqlParser::CP852 - 519))
        | (1ULL << (MySqlParser::CP866 - 519))
        | (1ULL << (MySqlParser::CP932 - 519))
        | (1ULL << (MySqlParser::DEC8 - 519))
        | (1ULL << (MySqlParser::EUCJPMS - 519))
        | (1ULL << (MySqlParser::EUCKR - 519))
        | (1ULL << (MySqlParser::GB2312 - 519))
        | (1ULL << (MySqlParser::GBK - 519))
        | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
        | (1ULL << (MySqlParser::HEBREW - 583))
        | (1ULL << (MySqlParser::HP8 - 583))
        | (1ULL << (MySqlParser::KEYBCS2 - 583))
        | (1ULL << (MySqlParser::KOI8R - 583))
        | (1ULL << (MySqlParser::KOI8U - 583))
        | (1ULL << (MySqlParser::LATIN1 - 583))
        | (1ULL << (MySqlParser::LATIN2 - 583))
        | (1ULL << (MySqlParser::LATIN5 - 583))
        | (1ULL << (MySqlParser::LATIN7 - 583))
        | (1ULL << (MySqlParser::MACCE - 583))
        | (1ULL << (MySqlParser::MACROMAN - 583))
        | (1ULL << (MySqlParser::SJIS - 583))
        | (1ULL << (MySqlParser::SWE7 - 583))
        | (1ULL << (MySqlParser::TIS620 - 583))
        | (1ULL << (MySqlParser::UCS2 - 583))
        | (1ULL << (MySqlParser::UJIS - 583))
        | (1ULL << (MySqlParser::UTF16 - 583))
        | (1ULL << (MySqlParser::UTF16LE - 583))
        | (1ULL << (MySqlParser::UTF32 - 583))
        | (1ULL << (MySqlParser::UTF8 - 583))
        | (1ULL << (MySqlParser::UTF8MB3 - 583))
        | (1ULL << (MySqlParser::UTF8MB4 - 583))
        | (1ULL << (MySqlParser::ARCHIVE - 583))
        | (1ULL << (MySqlParser::BLACKHOLE - 583))
        | (1ULL << (MySqlParser::CSV - 583))
        | (1ULL << (MySqlParser::FEDERATED - 583))
        | (1ULL << (MySqlParser::INNODB - 583))
        | (1ULL << (MySqlParser::MEMORY - 583))
        | (1ULL << (MySqlParser::MRG_MYISAM - 583))
        | (1ULL << (MySqlParser::MYISAM - 583))
        | (1ULL << (MySqlParser::NDB - 583))
        | (1ULL << (MySqlParser::NDBCLUSTER - 583))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
        | (1ULL << (MySqlParser::REPEATABLE - 583))
        | (1ULL << (MySqlParser::COMMITTED - 583))
        | (1ULL << (MySqlParser::UNCOMMITTED - 583))
        | (1ULL << (MySqlParser::SERIALIZABLE - 583))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
        | (1ULL << (MySqlParser::LINESTRING - 583))
        | (1ULL << (MySqlParser::MULTILINESTRING - 583))
        | (1ULL << (MySqlParser::MULTIPOINT - 583))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
        | (1ULL << (MySqlParser::POINT - 583))
        | (1ULL << (MySqlParser::POLYGON - 583))
        | (1ULL << (MySqlParser::ABS - 583))
        | (1ULL << (MySqlParser::ACOS - 583))
        | (1ULL << (MySqlParser::ADDDATE - 583))
        | (1ULL << (MySqlParser::ADDTIME - 583))
        | (1ULL << (MySqlParser::AES_DECRYPT - 583))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
        | (1ULL << (MySqlParser::AREA - 583))
        | (1ULL << (MySqlParser::ASBINARY - 583))
        | (1ULL << (MySqlParser::ASIN - 583))
        | (1ULL << (MySqlParser::ASTEXT - 583))
        | (1ULL << (MySqlParser::ASWKB - 583))
        | (1ULL << (MySqlParser::ASWKT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
        | (1ULL << (MySqlParser::ATAN - 583))
        | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
        | (1ULL << (MySqlParser::BIN - 647))
        | (1ULL << (MySqlParser::BIT_COUNT - 647))
        | (1ULL << (MySqlParser::BIT_LENGTH - 647))
        | (1ULL << (MySqlParser::BUFFER - 647))
        | (1ULL << (MySqlParser::CEIL - 647))
        | (1ULL << (MySqlParser::CEILING - 647))
        | (1ULL << (MySqlParser::CENTROID - 647))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
        | (1ULL << (MySqlParser::CHARSET - 647))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
        | (1ULL << (MySqlParser::COERCIBILITY - 647))
        | (1ULL << (MySqlParser::COLLATION - 647))
        | (1ULL << (MySqlParser::COMPRESS - 647))
        | (1ULL << (MySqlParser::CONCAT - 647))
        | (1ULL << (MySqlParser::CONCAT_WS - 647))
        | (1ULL << (MySqlParser::CONNECTION_ID - 647))
        | (1ULL << (MySqlParser::CONV - 647))
        | (1ULL << (MySqlParser::CONVERT_TZ - 647))
        | (1ULL << (MySqlParser::COS - 647))
        | (1ULL << (MySqlParser::COT - 647))
        | (1ULL << (MySqlParser::CRC32 - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
        | (1ULL << (MySqlParser::CROSSES - 647))
        | (1ULL << (MySqlParser::DATEDIFF - 647))
        | (1ULL << (MySqlParser::DATE_FORMAT - 647))
        | (1ULL << (MySqlParser::DAYNAME - 647))
        | (1ULL << (MySqlParser::DAYOFMONTH - 647))
        | (1ULL << (MySqlParser::DAYOFWEEK - 647))
        | (1ULL << (MySqlParser::DAYOFYEAR - 647))
        | (1ULL << (MySqlParser::DECODE - 647))
        | (1ULL << (MySqlParser::DEGREES - 647))
        | (1ULL << (MySqlParser::DES_DECRYPT - 647))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
        | (1ULL << (MySqlParser::DIMENSION - 647))
        | (1ULL << (MySqlParser::DISJOINT - 647))
        | (1ULL << (MySqlParser::ELT - 647))
        | (1ULL << (MySqlParser::ENCODE - 647))
        | (1ULL << (MySqlParser::ENCRYPT - 647))
        | (1ULL << (MySqlParser::ENDPOINT - 647))
        | (1ULL << (MySqlParser::ENVELOPE - 647))
        | (1ULL << (MySqlParser::EQUALS - 647))
        | (1ULL << (MySqlParser::EXP - 647))
        | (1ULL << (MySqlParser::EXPORT_SET - 647))
        | (1ULL << (MySqlParser::EXTERIORRING - 647))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
        | (1ULL << (MySqlParser::FIELD - 647))
        | (1ULL << (MySqlParser::FIND_IN_SET - 647))
        | (1ULL << (MySqlParser::FLOOR - 647))
        | (1ULL << (MySqlParser::FORMAT - 647))
        | (1ULL << (MySqlParser::FOUND_ROWS - 647))
        | (1ULL << (MySqlParser::FROM_BASE64 - 647))
        | (1ULL << (MySqlParser::FROM_DAYS - 647))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
        | (1ULL << (MySqlParser::GET_FORMAT - 711))
        | (1ULL << (MySqlParser::GET_LOCK - 711))
        | (1ULL << (MySqlParser::GLENGTH - 711))
        | (1ULL << (MySqlParser::GREATEST - 711))
        | (1ULL << (MySqlParser::GTID_SUBSET - 711))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
        | (1ULL << (MySqlParser::HEX - 711))
        | (1ULL << (MySqlParser::IFNULL - 711))
        | (1ULL << (MySqlParser::INET6_ATON - 711))
        | (1ULL << (MySqlParser::INET6_NTOA - 711))
        | (1ULL << (MySqlParser::INET_ATON - 711))
        | (1ULL << (MySqlParser::INET_NTOA - 711))
        | (1ULL << (MySqlParser::INSTR - 711))
        | (1ULL << (MySqlParser::INTERIORRINGN - 711))
        | (1ULL << (MySqlParser::INTERSECTS - 711))
        | (1ULL << (MySqlParser::ISCLOSED - 711))
        | (1ULL << (MySqlParser::ISEMPTY - 711))
        | (1ULL << (MySqlParser::ISNULL - 711))
        | (1ULL << (MySqlParser::ISSIMPLE - 711))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
        | (1ULL << (MySqlParser::IS_IPV4 - 711))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
        | (1ULL << (MySqlParser::IS_IPV6 - 711))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
        | (1ULL << (MySqlParser::LCASE - 711))
        | (1ULL << (MySqlParser::LEAST - 711))
        | (1ULL << (MySqlParser::LENGTH - 711))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINEFROMWKB - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
        | (1ULL << (MySqlParser::LN - 711))
        | (1ULL << (MySqlParser::LOAD_FILE - 711))
        | (1ULL << (MySqlParser::LOCATE - 711))
        | (1ULL << (MySqlParser::LOG - 711))
        | (1ULL << (MySqlParser::LOG10 - 711))
        | (1ULL << (MySqlParser::LOG2 - 711))
        | (1ULL << (MySqlParser::LOWER - 711))
        | (1ULL << (MySqlParser::LPAD - 711))
        | (1ULL << (MySqlParser::LTRIM - 711))
        | (1ULL << (MySqlParser::MAKEDATE - 711))
        | (1ULL << (MySqlParser::MAKETIME - 711))
        | (1ULL << (MySqlParser::MAKE_SET - 711))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
        | (1ULL << (MySqlParser::MBRCONTAINS - 711))
        | (1ULL << (MySqlParser::MBRDISJOINT - 711))
        | (1ULL << (MySqlParser::MBREQUAL - 711))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
        | (1ULL << (MySqlParser::MBROVERLAPS - 711))
        | (1ULL << (MySqlParser::MBRTOUCHES - 711))
        | (1ULL << (MySqlParser::MBRWITHIN - 711))
        | (1ULL << (MySqlParser::MD5 - 711))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
        | (1ULL << (MySqlParser::MONTHNAME - 711))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::NAME_CONST - 775))
        | (1ULL << (MySqlParser::NULLIF - 775))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
        | (1ULL << (MySqlParser::NUMPOINTS - 775))
        | (1ULL << (MySqlParser::OCT - 775))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
        | (1ULL << (MySqlParser::ORD - 775))
        | (1ULL << (MySqlParser::OVERLAPS - 775))
        | (1ULL << (MySqlParser::PERIOD_ADD - 775))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
        | (1ULL << (MySqlParser::PI - 775))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::POINTFROMWKB - 775))
        | (1ULL << (MySqlParser::POINTN - 775))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYFROMWKB - 775))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::POW - 775))
        | (1ULL << (MySqlParser::POWER - 775))
        | (1ULL << (MySqlParser::QUOTE - 775))
        | (1ULL << (MySqlParser::RADIANS - 775))
        | (1ULL << (MySqlParser::RAND - 775))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
        | (1ULL << (MySqlParser::REVERSE - 775))
        | (1ULL << (MySqlParser::ROUND - 775))
        | (1ULL << (MySqlParser::ROW_COUNT - 775))
        | (1ULL << (MySqlParser::RPAD - 775))
        | (1ULL << (MySqlParser::RTRIM - 775))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
        | (1ULL << (MySqlParser::SESSION_USER - 775))
        | (1ULL << (MySqlParser::SHA - 775))
        | (1ULL << (MySqlParser::SHA1 - 775))
        | (1ULL << (MySqlParser::SHA2 - 775))
        | (1ULL << (MySqlParser::SIGN - 775))
        | (1ULL << (MySqlParser::SIN - 775))
        | (1ULL << (MySqlParser::SLEEP - 775))
        | (1ULL << (MySqlParser::SOUNDEX - 775))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
        | (1ULL << (MySqlParser::SQRT - 775))
        | (1ULL << (MySqlParser::SRID - 775))
        | (1ULL << (MySqlParser::STARTPOINT - 775))
        | (1ULL << (MySqlParser::STRCMP - 775))
        | (1ULL << (MySqlParser::STR_TO_DATE - 775))
        | (1ULL << (MySqlParser::ST_AREA - 775))
        | (1ULL << (MySqlParser::ST_ASBINARY - 775))
        | (1ULL << (MySqlParser::ST_ASTEXT - 775))
        | (1ULL << (MySqlParser::ST_ASWKB - 775))
        | (1ULL << (MySqlParser::ST_ASWKT - 775))
        | (1ULL << (MySqlParser::ST_BUFFER - 775))
        | (1ULL << (MySqlParser::ST_CENTROID - 775))
        | (1ULL << (MySqlParser::ST_CONTAINS - 775))
        | (1ULL << (MySqlParser::ST_CROSSES - 775))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
        | (1ULL << (MySqlParser::ST_DIMENSION - 775))
        | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
        | (1ULL << (MySqlParser::ST_EQUALS - 839))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POINTN - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_SRID - 839))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
        | (1ULL << (MySqlParser::ST_TOUCHES - 839))
        | (1ULL << (MySqlParser::ST_UNION - 839))
        | (1ULL << (MySqlParser::ST_WITHIN - 839))
        | (1ULL << (MySqlParser::ST_X - 839))
        | (1ULL << (MySqlParser::ST_Y - 839))
        | (1ULL << (MySqlParser::SUBDATE - 839))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
        | (1ULL << (MySqlParser::SUBTIME - 839))
        | (1ULL << (MySqlParser::SYSTEM_USER - 839))
        | (1ULL << (MySqlParser::TAN - 839))
        | (1ULL << (MySqlParser::TIMEDIFF - 839))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
        | (1ULL << (MySqlParser::TIME_FORMAT - 839))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
        | (1ULL << (MySqlParser::TOUCHES - 839))
        | (1ULL << (MySqlParser::TO_BASE64 - 839))
        | (1ULL << (MySqlParser::TO_DAYS - 839))
        | (1ULL << (MySqlParser::TO_SECONDS - 839))
        | (1ULL << (MySqlParser::UCASE - 839))
        | (1ULL << (MySqlParser::UNCOMPRESS - 839))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
        | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
        | (1ULL << (MySqlParser::UPDATEXML - 903))
        | (1ULL << (MySqlParser::UPPER - 903))
        | (1ULL << (MySqlParser::UUID - 903))
        | (1ULL << (MySqlParser::UUID_SHORT - 903))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
        | (1ULL << (MySqlParser::VERSION - 903))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
        | (1ULL << (MySqlParser::WEEKDAY - 903))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
        | (1ULL << (MySqlParser::WITHIN - 903))
        | (1ULL << (MySqlParser::YEARWEEK - 903))
        | (1ULL << (MySqlParser::Y_FUNCTION - 903))
        | (1ULL << (MySqlParser::X_FUNCTION - 903))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
        | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
        setState(1394);
        dynamic_cast<TblConstrUKContext *>(_localctx)->index_name = id_();
      }
      setState(1398);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(1397);
        index_type();
      }
      setState(1400);
      index_colname_list();
      setState(1404);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::KEY_BLOCK_SIZE) {
        setState(1401);
        index_option();
        setState(1406);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Table_constraintContext *>(_tracker.createInstance<MySqlParser::TblConstrFKContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1411);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(1407);
        match(MySqlParser::CONSTRAINT);
        setState(1409);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
          | (1ULL << (MySqlParser::TIME - 181))
          | (1ULL << (MySqlParser::TIMESTAMP - 181))
          | (1ULL << (MySqlParser::DATETIME - 181))
          | (1ULL << (MySqlParser::YEAR - 181))
          | (1ULL << (MySqlParser::TEXT - 181))
          | (1ULL << (MySqlParser::ENUM - 181))
          | (1ULL << (MySqlParser::COUNT - 181))
          | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
          | (1ULL << (MySqlParser::AFTER - 246))
          | (1ULL << (MySqlParser::ALGORITHM - 246))
          | (1ULL << (MySqlParser::ANY - 246))
          | (1ULL << (MySqlParser::AT - 246))
          | (1ULL << (MySqlParser::AUTHORS - 246))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
          | (1ULL << (MySqlParser::BEGIN - 246))
          | (1ULL << (MySqlParser::BINLOG - 246))
          | (1ULL << (MySqlParser::BIT - 246))
          | (1ULL << (MySqlParser::BTREE - 246))
          | (1ULL << (MySqlParser::CASCADED - 246))
          | (1ULL << (MySqlParser::CHAIN - 246))
          | (1ULL << (MySqlParser::CHECKSUM - 246))
          | (1ULL << (MySqlParser::CIPHER - 246))
          | (1ULL << (MySqlParser::CLIENT - 246))
          | (1ULL << (MySqlParser::COALESCE - 246))
          | (1ULL << (MySqlParser::CODE - 246))
          | (1ULL << (MySqlParser::COLUMNS - 246))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
          | (1ULL << (MySqlParser::COMMENT - 246))
          | (1ULL << (MySqlParser::COMMIT - 246))
          | (1ULL << (MySqlParser::COMPACT - 246))
          | (1ULL << (MySqlParser::COMPLETION - 246))
          | (1ULL << (MySqlParser::COMPRESSED - 246))
          | (1ULL << (MySqlParser::CONCURRENT - 246))
          | (1ULL << (MySqlParser::CONNECTION - 246))
          | (1ULL << (MySqlParser::CONSISTENT - 246))
          | (1ULL << (MySqlParser::CONTAINS - 246))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
          | (1ULL << (MySqlParser::COPY - 246))
          | (1ULL << (MySqlParser::DATA - 246))
          | (1ULL << (MySqlParser::DATAFILE - 246))
          | (1ULL << (MySqlParser::DEFINER - 246))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
          | (1ULL << (MySqlParser::DIRECTORY - 246))
          | (1ULL << (MySqlParser::DISABLE - 246))
          | (1ULL << (MySqlParser::DISCARD - 246))
          | (1ULL << (MySqlParser::DISK - 246))
          | (1ULL << (MySqlParser::DO - 246))
          | (1ULL << (MySqlParser::DUMPFILE - 246))
          | (1ULL << (MySqlParser::DUPLICATE - 246))
          | (1ULL << (MySqlParser::DYNAMIC - 246))
          | (1ULL << (MySqlParser::ENABLE - 246))
          | (1ULL << (MySqlParser::ENDS - 246))
          | (1ULL << (MySqlParser::ENGINE - 246))
          | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
          | (1ULL << (MySqlParser::ESCAPE - 311))
          | (1ULL << (MySqlParser::EVEN - 311))
          | (1ULL << (MySqlParser::EVENT - 311))
          | (1ULL << (MySqlParser::EVENTS - 311))
          | (1ULL << (MySqlParser::EVERY - 311))
          | (1ULL << (MySqlParser::EXCHANGE - 311))
          | (1ULL << (MySqlParser::EXCLUSIVE - 311))
          | (1ULL << (MySqlParser::EXPIRE - 311))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
          | (1ULL << (MySqlParser::FIELDS - 311))
          | (1ULL << (MySqlParser::FIRST - 311))
          | (1ULL << (MySqlParser::FIXED - 311))
          | (1ULL << (MySqlParser::FULL - 311))
          | (1ULL << (MySqlParser::FUNCTION - 311))
          | (1ULL << (MySqlParser::GLOBAL - 311))
          | (1ULL << (MySqlParser::GRANTS - 311))
          | (1ULL << (MySqlParser::HASH - 311))
          | (1ULL << (MySqlParser::HOST - 311))
          | (1ULL << (MySqlParser::IDENTIFIED - 311))
          | (1ULL << (MySqlParser::IMPORT - 311))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
          | (1ULL << (MySqlParser::INPLACE - 311))
          | (1ULL << (MySqlParser::INSERT_METHOD - 311))
          | (1ULL << (MySqlParser::INVOKER - 311))
          | (1ULL << (MySqlParser::ISOLATION - 311))
          | (1ULL << (MySqlParser::ISSUER - 311))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
          | (1ULL << (MySqlParser::LANGUAGE - 311))
          | (1ULL << (MySqlParser::LAST - 311))
          | (1ULL << (MySqlParser::LESS - 311))
          | (1ULL << (MySqlParser::LEVEL - 311))
          | (1ULL << (MySqlParser::LIST - 311))
          | (1ULL << (MySqlParser::LOCAL - 311))
          | (1ULL << (MySqlParser::LOGFILE - 311))
          | (1ULL << (MySqlParser::LOGS - 311))
          | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_ROWS - 391))
          | (1ULL << (MySqlParser::MAX_SIZE - 391))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
          | (1ULL << (MySqlParser::MERGE - 391))
          | (1ULL << (MySqlParser::MID - 391))
          | (1ULL << (MySqlParser::MIN_ROWS - 391))
          | (1ULL << (MySqlParser::MODIFY - 391))
          | (1ULL << (MySqlParser::MUTEX - 391))
          | (1ULL << (MySqlParser::MYSQL - 391))
          | (1ULL << (MySqlParser::NAME - 391))
          | (1ULL << (MySqlParser::NAMES - 391))
          | (1ULL << (MySqlParser::NCHAR - 391))
          | (1ULL << (MySqlParser::NO - 391))
          | (1ULL << (MySqlParser::NODEGROUP - 391))
          | (1ULL << (MySqlParser::NONE - 391))
          | (1ULL << (MySqlParser::OFFLINE - 391))
          | (1ULL << (MySqlParser::OFFSET - 391))
          | (1ULL << (MySqlParser::OJ - 391))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
          | (1ULL << (MySqlParser::ONLINE - 391))
          | (1ULL << (MySqlParser::ONLY - 391))
          | (1ULL << (MySqlParser::OPTIONS - 391))
          | (1ULL << (MySqlParser::OWNER - 391))
          | (1ULL << (MySqlParser::PACK_KEYS - 391))
          | (1ULL << (MySqlParser::PARSER - 391))
          | (1ULL << (MySqlParser::PARTIAL - 391))
          | (1ULL << (MySqlParser::PARTITIONING - 391))
          | (1ULL << (MySqlParser::PARTITIONS - 391))
          | (1ULL << (MySqlParser::PASSWORD - 391))
          | (1ULL << (MySqlParser::PLUGINS - 391))
          | (1ULL << (MySqlParser::PORT - 391))
          | (1ULL << (MySqlParser::PRESERVE - 391))
          | (1ULL << (MySqlParser::PROCESSLIST - 391))
          | (1ULL << (MySqlParser::PROFILE - 391))
          | (1ULL << (MySqlParser::PROFILES - 391))
          | (1ULL << (MySqlParser::PROXY - 391))
          | (1ULL << (MySqlParser::QUERY - 391))
          | (1ULL << (MySqlParser::QUICK - 391))
          | (1ULL << (MySqlParser::REBUILD - 391))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
          | (1ULL << (MySqlParser::REDUNDANT - 391))
          | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
          | (1ULL << (MySqlParser::REORGANIZE - 455))
          | (1ULL << (MySqlParser::REPAIR - 455))
          | (1ULL << (MySqlParser::REPLICATION - 455))
          | (1ULL << (MySqlParser::RETURNS - 455))
          | (1ULL << (MySqlParser::ROLLBACK - 455))
          | (1ULL << (MySqlParser::ROLLUP - 455))
          | (1ULL << (MySqlParser::ROW - 455))
          | (1ULL << (MySqlParser::ROWS - 455))
          | (1ULL << (MySqlParser::ROW_FORMAT - 455))
          | (1ULL << (MySqlParser::SAVEPOINT - 455))
          | (1ULL << (MySqlParser::SCHEDULE - 455))
          | (1ULL << (MySqlParser::SECURITY - 455))
          | (1ULL << (MySqlParser::SERVER - 455))
          | (1ULL << (MySqlParser::SESSION - 455))
          | (1ULL << (MySqlParser::SHARE - 455))
          | (1ULL << (MySqlParser::SHARED - 455))
          | (1ULL << (MySqlParser::SIGNED - 455))
          | (1ULL << (MySqlParser::SIMPLE - 455))
          | (1ULL << (MySqlParser::SLAVE - 455))
          | (1ULL << (MySqlParser::SNAPSHOT - 455))
          | (1ULL << (MySqlParser::SOCKET - 455))
          | (1ULL << (MySqlParser::SOME - 455))
          | (1ULL << (MySqlParser::SOUNDS - 455))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
          | (1ULL << (MySqlParser::SQL_CACHE - 455))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
          | (1ULL << (MySqlParser::START - 455))
          | (1ULL << (MySqlParser::STARTS - 455))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
          | (1ULL << (MySqlParser::STATUS - 455))
          | (1ULL << (MySqlParser::STORAGE - 455))
          | (1ULL << (MySqlParser::SUBJECT - 455))
          | (1ULL << (MySqlParser::SUBPARTITION - 455))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
          | (1ULL << (MySqlParser::TABLESPACE - 455))
          | (1ULL << (MySqlParser::TEMPORARY - 455))
          | (1ULL << (MySqlParser::TEMPTABLE - 455))
          | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
          | (1ULL << (MySqlParser::TRUNCATE - 519))
          | (1ULL << (MySqlParser::UNDEFINED - 519))
          | (1ULL << (MySqlParser::UNDOFILE - 519))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
          | (1ULL << (MySqlParser::UNKNOWN - 519))
          | (1ULL << (MySqlParser::UPGRADE - 519))
          | (1ULL << (MySqlParser::USER - 519))
          | (1ULL << (MySqlParser::VALUE - 519))
          | (1ULL << (MySqlParser::VARIABLES - 519))
          | (1ULL << (MySqlParser::VIEW - 519))
          | (1ULL << (MySqlParser::WAIT - 519))
          | (1ULL << (MySqlParser::WARNINGS - 519))
          | (1ULL << (MySqlParser::WORK - 519))
          | (1ULL << (MySqlParser::WRAPPER - 519))
          | (1ULL << (MySqlParser::X509 - 519))
          | (1ULL << (MySqlParser::XML - 519))
          | (1ULL << (MySqlParser::QUARTER - 519))
          | (1ULL << (MySqlParser::MONTH - 519))
          | (1ULL << (MySqlParser::DAY - 519))
          | (1ULL << (MySqlParser::HOUR - 519))
          | (1ULL << (MySqlParser::MINUTE - 519))
          | (1ULL << (MySqlParser::WEEK - 519))
          | (1ULL << (MySqlParser::SECOND - 519))
          | (1ULL << (MySqlParser::MICROSECOND - 519))
          | (1ULL << (MySqlParser::TABLES - 519))
          | (1ULL << (MySqlParser::ROUTINE - 519))
          | (1ULL << (MySqlParser::EXECUTE - 519))
          | (1ULL << (MySqlParser::FILE - 519))
          | (1ULL << (MySqlParser::PROCESS - 519))
          | (1ULL << (MySqlParser::RELOAD - 519))
          | (1ULL << (MySqlParser::SHUTDOWN - 519))
          | (1ULL << (MySqlParser::SUPER - 519))
          | (1ULL << (MySqlParser::PRIVILEGES - 519))
          | (1ULL << (MySqlParser::ARMSCII8 - 519))
          | (1ULL << (MySqlParser::ASCII - 519))
          | (1ULL << (MySqlParser::BIG5 - 519))
          | (1ULL << (MySqlParser::CP1250 - 519))
          | (1ULL << (MySqlParser::CP1251 - 519))
          | (1ULL << (MySqlParser::CP1256 - 519))
          | (1ULL << (MySqlParser::CP1257 - 519))
          | (1ULL << (MySqlParser::CP850 - 519))
          | (1ULL << (MySqlParser::CP852 - 519))
          | (1ULL << (MySqlParser::CP866 - 519))
          | (1ULL << (MySqlParser::CP932 - 519))
          | (1ULL << (MySqlParser::DEC8 - 519))
          | (1ULL << (MySqlParser::EUCJPMS - 519))
          | (1ULL << (MySqlParser::EUCKR - 519))
          | (1ULL << (MySqlParser::GB2312 - 519))
          | (1ULL << (MySqlParser::GBK - 519))
          | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
          | (1ULL << (MySqlParser::HEBREW - 583))
          | (1ULL << (MySqlParser::HP8 - 583))
          | (1ULL << (MySqlParser::KEYBCS2 - 583))
          | (1ULL << (MySqlParser::KOI8R - 583))
          | (1ULL << (MySqlParser::KOI8U - 583))
          | (1ULL << (MySqlParser::LATIN1 - 583))
          | (1ULL << (MySqlParser::LATIN2 - 583))
          | (1ULL << (MySqlParser::LATIN5 - 583))
          | (1ULL << (MySqlParser::LATIN7 - 583))
          | (1ULL << (MySqlParser::MACCE - 583))
          | (1ULL << (MySqlParser::MACROMAN - 583))
          | (1ULL << (MySqlParser::SJIS - 583))
          | (1ULL << (MySqlParser::SWE7 - 583))
          | (1ULL << (MySqlParser::TIS620 - 583))
          | (1ULL << (MySqlParser::UCS2 - 583))
          | (1ULL << (MySqlParser::UJIS - 583))
          | (1ULL << (MySqlParser::UTF16 - 583))
          | (1ULL << (MySqlParser::UTF16LE - 583))
          | (1ULL << (MySqlParser::UTF32 - 583))
          | (1ULL << (MySqlParser::UTF8 - 583))
          | (1ULL << (MySqlParser::UTF8MB3 - 583))
          | (1ULL << (MySqlParser::UTF8MB4 - 583))
          | (1ULL << (MySqlParser::ARCHIVE - 583))
          | (1ULL << (MySqlParser::BLACKHOLE - 583))
          | (1ULL << (MySqlParser::CSV - 583))
          | (1ULL << (MySqlParser::FEDERATED - 583))
          | (1ULL << (MySqlParser::INNODB - 583))
          | (1ULL << (MySqlParser::MEMORY - 583))
          | (1ULL << (MySqlParser::MRG_MYISAM - 583))
          | (1ULL << (MySqlParser::MYISAM - 583))
          | (1ULL << (MySqlParser::NDB - 583))
          | (1ULL << (MySqlParser::NDBCLUSTER - 583))
          | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
          | (1ULL << (MySqlParser::REPEATABLE - 583))
          | (1ULL << (MySqlParser::COMMITTED - 583))
          | (1ULL << (MySqlParser::UNCOMMITTED - 583))
          | (1ULL << (MySqlParser::SERIALIZABLE - 583))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
          | (1ULL << (MySqlParser::LINESTRING - 583))
          | (1ULL << (MySqlParser::MULTILINESTRING - 583))
          | (1ULL << (MySqlParser::MULTIPOINT - 583))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
          | (1ULL << (MySqlParser::POINT - 583))
          | (1ULL << (MySqlParser::POLYGON - 583))
          | (1ULL << (MySqlParser::ABS - 583))
          | (1ULL << (MySqlParser::ACOS - 583))
          | (1ULL << (MySqlParser::ADDDATE - 583))
          | (1ULL << (MySqlParser::ADDTIME - 583))
          | (1ULL << (MySqlParser::AES_DECRYPT - 583))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
          | (1ULL << (MySqlParser::AREA - 583))
          | (1ULL << (MySqlParser::ASBINARY - 583))
          | (1ULL << (MySqlParser::ASIN - 583))
          | (1ULL << (MySqlParser::ASTEXT - 583))
          | (1ULL << (MySqlParser::ASWKB - 583))
          | (1ULL << (MySqlParser::ASWKT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
          | (1ULL << (MySqlParser::ATAN - 583))
          | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
          | (1ULL << (MySqlParser::BIN - 647))
          | (1ULL << (MySqlParser::BIT_COUNT - 647))
          | (1ULL << (MySqlParser::BIT_LENGTH - 647))
          | (1ULL << (MySqlParser::BUFFER - 647))
          | (1ULL << (MySqlParser::CEIL - 647))
          | (1ULL << (MySqlParser::CEILING - 647))
          | (1ULL << (MySqlParser::CENTROID - 647))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
          | (1ULL << (MySqlParser::CHARSET - 647))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
          | (1ULL << (MySqlParser::COERCIBILITY - 647))
          | (1ULL << (MySqlParser::COLLATION - 647))
          | (1ULL << (MySqlParser::COMPRESS - 647))
          | (1ULL << (MySqlParser::CONCAT - 647))
          | (1ULL << (MySqlParser::CONCAT_WS - 647))
          | (1ULL << (MySqlParser::CONNECTION_ID - 647))
          | (1ULL << (MySqlParser::CONV - 647))
          | (1ULL << (MySqlParser::CONVERT_TZ - 647))
          | (1ULL << (MySqlParser::COS - 647))
          | (1ULL << (MySqlParser::COT - 647))
          | (1ULL << (MySqlParser::CRC32 - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
          | (1ULL << (MySqlParser::CROSSES - 647))
          | (1ULL << (MySqlParser::DATEDIFF - 647))
          | (1ULL << (MySqlParser::DATE_FORMAT - 647))
          | (1ULL << (MySqlParser::DAYNAME - 647))
          | (1ULL << (MySqlParser::DAYOFMONTH - 647))
          | (1ULL << (MySqlParser::DAYOFWEEK - 647))
          | (1ULL << (MySqlParser::DAYOFYEAR - 647))
          | (1ULL << (MySqlParser::DECODE - 647))
          | (1ULL << (MySqlParser::DEGREES - 647))
          | (1ULL << (MySqlParser::DES_DECRYPT - 647))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
          | (1ULL << (MySqlParser::DIMENSION - 647))
          | (1ULL << (MySqlParser::DISJOINT - 647))
          | (1ULL << (MySqlParser::ELT - 647))
          | (1ULL << (MySqlParser::ENCODE - 647))
          | (1ULL << (MySqlParser::ENCRYPT - 647))
          | (1ULL << (MySqlParser::ENDPOINT - 647))
          | (1ULL << (MySqlParser::ENVELOPE - 647))
          | (1ULL << (MySqlParser::EQUALS - 647))
          | (1ULL << (MySqlParser::EXP - 647))
          | (1ULL << (MySqlParser::EXPORT_SET - 647))
          | (1ULL << (MySqlParser::EXTERIORRING - 647))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
          | (1ULL << (MySqlParser::FIELD - 647))
          | (1ULL << (MySqlParser::FIND_IN_SET - 647))
          | (1ULL << (MySqlParser::FLOOR - 647))
          | (1ULL << (MySqlParser::FORMAT - 647))
          | (1ULL << (MySqlParser::FOUND_ROWS - 647))
          | (1ULL << (MySqlParser::FROM_BASE64 - 647))
          | (1ULL << (MySqlParser::FROM_DAYS - 647))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
          | (1ULL << (MySqlParser::GET_FORMAT - 711))
          | (1ULL << (MySqlParser::GET_LOCK - 711))
          | (1ULL << (MySqlParser::GLENGTH - 711))
          | (1ULL << (MySqlParser::GREATEST - 711))
          | (1ULL << (MySqlParser::GTID_SUBSET - 711))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
          | (1ULL << (MySqlParser::HEX - 711))
          | (1ULL << (MySqlParser::IFNULL - 711))
          | (1ULL << (MySqlParser::INET6_ATON - 711))
          | (1ULL << (MySqlParser::INET6_NTOA - 711))
          | (1ULL << (MySqlParser::INET_ATON - 711))
          | (1ULL << (MySqlParser::INET_NTOA - 711))
          | (1ULL << (MySqlParser::INSTR - 711))
          | (1ULL << (MySqlParser::INTERIORRINGN - 711))
          | (1ULL << (MySqlParser::INTERSECTS - 711))
          | (1ULL << (MySqlParser::ISCLOSED - 711))
          | (1ULL << (MySqlParser::ISEMPTY - 711))
          | (1ULL << (MySqlParser::ISNULL - 711))
          | (1ULL << (MySqlParser::ISSIMPLE - 711))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
          | (1ULL << (MySqlParser::IS_IPV4 - 711))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
          | (1ULL << (MySqlParser::IS_IPV6 - 711))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
          | (1ULL << (MySqlParser::LCASE - 711))
          | (1ULL << (MySqlParser::LEAST - 711))
          | (1ULL << (MySqlParser::LENGTH - 711))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINEFROMWKB - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
          | (1ULL << (MySqlParser::LN - 711))
          | (1ULL << (MySqlParser::LOAD_FILE - 711))
          | (1ULL << (MySqlParser::LOCATE - 711))
          | (1ULL << (MySqlParser::LOG - 711))
          | (1ULL << (MySqlParser::LOG10 - 711))
          | (1ULL << (MySqlParser::LOG2 - 711))
          | (1ULL << (MySqlParser::LOWER - 711))
          | (1ULL << (MySqlParser::LPAD - 711))
          | (1ULL << (MySqlParser::LTRIM - 711))
          | (1ULL << (MySqlParser::MAKEDATE - 711))
          | (1ULL << (MySqlParser::MAKETIME - 711))
          | (1ULL << (MySqlParser::MAKE_SET - 711))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
          | (1ULL << (MySqlParser::MBRCONTAINS - 711))
          | (1ULL << (MySqlParser::MBRDISJOINT - 711))
          | (1ULL << (MySqlParser::MBREQUAL - 711))
          | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
          | (1ULL << (MySqlParser::MBROVERLAPS - 711))
          | (1ULL << (MySqlParser::MBRTOUCHES - 711))
          | (1ULL << (MySqlParser::MBRWITHIN - 711))
          | (1ULL << (MySqlParser::MD5 - 711))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
          | (1ULL << (MySqlParser::MONTHNAME - 711))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::NAME_CONST - 775))
          | (1ULL << (MySqlParser::NULLIF - 775))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
          | (1ULL << (MySqlParser::NUMPOINTS - 775))
          | (1ULL << (MySqlParser::OCT - 775))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
          | (1ULL << (MySqlParser::ORD - 775))
          | (1ULL << (MySqlParser::OVERLAPS - 775))
          | (1ULL << (MySqlParser::PERIOD_ADD - 775))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
          | (1ULL << (MySqlParser::PI - 775))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::POINTFROMWKB - 775))
          | (1ULL << (MySqlParser::POINTN - 775))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYFROMWKB - 775))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::POW - 775))
          | (1ULL << (MySqlParser::POWER - 775))
          | (1ULL << (MySqlParser::QUOTE - 775))
          | (1ULL << (MySqlParser::RADIANS - 775))
          | (1ULL << (MySqlParser::RAND - 775))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
          | (1ULL << (MySqlParser::REVERSE - 775))
          | (1ULL << (MySqlParser::ROUND - 775))
          | (1ULL << (MySqlParser::ROW_COUNT - 775))
          | (1ULL << (MySqlParser::RPAD - 775))
          | (1ULL << (MySqlParser::RTRIM - 775))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
          | (1ULL << (MySqlParser::SESSION_USER - 775))
          | (1ULL << (MySqlParser::SHA - 775))
          | (1ULL << (MySqlParser::SHA1 - 775))
          | (1ULL << (MySqlParser::SHA2 - 775))
          | (1ULL << (MySqlParser::SIGN - 775))
          | (1ULL << (MySqlParser::SIN - 775))
          | (1ULL << (MySqlParser::SLEEP - 775))
          | (1ULL << (MySqlParser::SOUNDEX - 775))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
          | (1ULL << (MySqlParser::SQRT - 775))
          | (1ULL << (MySqlParser::SRID - 775))
          | (1ULL << (MySqlParser::STARTPOINT - 775))
          | (1ULL << (MySqlParser::STRCMP - 775))
          | (1ULL << (MySqlParser::STR_TO_DATE - 775))
          | (1ULL << (MySqlParser::ST_AREA - 775))
          | (1ULL << (MySqlParser::ST_ASBINARY - 775))
          | (1ULL << (MySqlParser::ST_ASTEXT - 775))
          | (1ULL << (MySqlParser::ST_ASWKB - 775))
          | (1ULL << (MySqlParser::ST_ASWKT - 775))
          | (1ULL << (MySqlParser::ST_BUFFER - 775))
          | (1ULL << (MySqlParser::ST_CENTROID - 775))
          | (1ULL << (MySqlParser::ST_CONTAINS - 775))
          | (1ULL << (MySqlParser::ST_CROSSES - 775))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
          | (1ULL << (MySqlParser::ST_DIMENSION - 775))
          | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
          | (1ULL << (MySqlParser::ST_EQUALS - 839))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POINTN - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_SRID - 839))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
          | (1ULL << (MySqlParser::ST_TOUCHES - 839))
          | (1ULL << (MySqlParser::ST_UNION - 839))
          | (1ULL << (MySqlParser::ST_WITHIN - 839))
          | (1ULL << (MySqlParser::ST_X - 839))
          | (1ULL << (MySqlParser::ST_Y - 839))
          | (1ULL << (MySqlParser::SUBDATE - 839))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
          | (1ULL << (MySqlParser::SUBTIME - 839))
          | (1ULL << (MySqlParser::SYSTEM_USER - 839))
          | (1ULL << (MySqlParser::TAN - 839))
          | (1ULL << (MySqlParser::TIMEDIFF - 839))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
          | (1ULL << (MySqlParser::TIME_FORMAT - 839))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
          | (1ULL << (MySqlParser::TOUCHES - 839))
          | (1ULL << (MySqlParser::TO_BASE64 - 839))
          | (1ULL << (MySqlParser::TO_DAYS - 839))
          | (1ULL << (MySqlParser::TO_SECONDS - 839))
          | (1ULL << (MySqlParser::UCASE - 839))
          | (1ULL << (MySqlParser::UNCOMPRESS - 839))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
          | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
          | (1ULL << (MySqlParser::UPDATEXML - 903))
          | (1ULL << (MySqlParser::UPPER - 903))
          | (1ULL << (MySqlParser::UUID - 903))
          | (1ULL << (MySqlParser::UUID_SHORT - 903))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
          | (1ULL << (MySqlParser::VERSION - 903))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
          | (1ULL << (MySqlParser::WEEKDAY - 903))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
          | (1ULL << (MySqlParser::WITHIN - 903))
          | (1ULL << (MySqlParser::YEARWEEK - 903))
          | (1ULL << (MySqlParser::Y_FUNCTION - 903))
          | (1ULL << (MySqlParser::X_FUNCTION - 903))
          | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
          | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
          setState(1408);
          dynamic_cast<TblConstrFKContext *>(_localctx)->constr_name = id_();
        }
      }
      setState(1413);
      match(MySqlParser::FOREIGN);
      setState(1414);
      match(MySqlParser::KEY);
      setState(1416);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LEFT

      || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
        | (1ULL << (MySqlParser::TIME - 181))
        | (1ULL << (MySqlParser::TIMESTAMP - 181))
        | (1ULL << (MySqlParser::DATETIME - 181))
        | (1ULL << (MySqlParser::YEAR - 181))
        | (1ULL << (MySqlParser::TEXT - 181))
        | (1ULL << (MySqlParser::ENUM - 181))
        | (1ULL << (MySqlParser::COUNT - 181))
        | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
        | (1ULL << (MySqlParser::AFTER - 246))
        | (1ULL << (MySqlParser::ALGORITHM - 246))
        | (1ULL << (MySqlParser::ANY - 246))
        | (1ULL << (MySqlParser::AT - 246))
        | (1ULL << (MySqlParser::AUTHORS - 246))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
        | (1ULL << (MySqlParser::BEGIN - 246))
        | (1ULL << (MySqlParser::BINLOG - 246))
        | (1ULL << (MySqlParser::BIT - 246))
        | (1ULL << (MySqlParser::BTREE - 246))
        | (1ULL << (MySqlParser::CASCADED - 246))
        | (1ULL << (MySqlParser::CHAIN - 246))
        | (1ULL << (MySqlParser::CHECKSUM - 246))
        | (1ULL << (MySqlParser::CIPHER - 246))
        | (1ULL << (MySqlParser::CLIENT - 246))
        | (1ULL << (MySqlParser::COALESCE - 246))
        | (1ULL << (MySqlParser::CODE - 246))
        | (1ULL << (MySqlParser::COLUMNS - 246))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
        | (1ULL << (MySqlParser::COMMENT - 246))
        | (1ULL << (MySqlParser::COMMIT - 246))
        | (1ULL << (MySqlParser::COMPACT - 246))
        | (1ULL << (MySqlParser::COMPLETION - 246))
        | (1ULL << (MySqlParser::COMPRESSED - 246))
        | (1ULL << (MySqlParser::CONCURRENT - 246))
        | (1ULL << (MySqlParser::CONNECTION - 246))
        | (1ULL << (MySqlParser::CONSISTENT - 246))
        | (1ULL << (MySqlParser::CONTAINS - 246))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
        | (1ULL << (MySqlParser::COPY - 246))
        | (1ULL << (MySqlParser::DATA - 246))
        | (1ULL << (MySqlParser::DATAFILE - 246))
        | (1ULL << (MySqlParser::DEFINER - 246))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
        | (1ULL << (MySqlParser::DIRECTORY - 246))
        | (1ULL << (MySqlParser::DISABLE - 246))
        | (1ULL << (MySqlParser::DISCARD - 246))
        | (1ULL << (MySqlParser::DISK - 246))
        | (1ULL << (MySqlParser::DO - 246))
        | (1ULL << (MySqlParser::DUMPFILE - 246))
        | (1ULL << (MySqlParser::DUPLICATE - 246))
        | (1ULL << (MySqlParser::DYNAMIC - 246))
        | (1ULL << (MySqlParser::ENABLE - 246))
        | (1ULL << (MySqlParser::ENDS - 246))
        | (1ULL << (MySqlParser::ENGINE - 246))
        | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
        | (1ULL << (MySqlParser::ESCAPE - 311))
        | (1ULL << (MySqlParser::EVEN - 311))
        | (1ULL << (MySqlParser::EVENT - 311))
        | (1ULL << (MySqlParser::EVENTS - 311))
        | (1ULL << (MySqlParser::EVERY - 311))
        | (1ULL << (MySqlParser::EXCHANGE - 311))
        | (1ULL << (MySqlParser::EXCLUSIVE - 311))
        | (1ULL << (MySqlParser::EXPIRE - 311))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
        | (1ULL << (MySqlParser::FIELDS - 311))
        | (1ULL << (MySqlParser::FIRST - 311))
        | (1ULL << (MySqlParser::FIXED - 311))
        | (1ULL << (MySqlParser::FULL - 311))
        | (1ULL << (MySqlParser::FUNCTION - 311))
        | (1ULL << (MySqlParser::GLOBAL - 311))
        | (1ULL << (MySqlParser::GRANTS - 311))
        | (1ULL << (MySqlParser::HASH - 311))
        | (1ULL << (MySqlParser::HOST - 311))
        | (1ULL << (MySqlParser::IDENTIFIED - 311))
        | (1ULL << (MySqlParser::IMPORT - 311))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
        | (1ULL << (MySqlParser::INPLACE - 311))
        | (1ULL << (MySqlParser::INSERT_METHOD - 311))
        | (1ULL << (MySqlParser::INVOKER - 311))
        | (1ULL << (MySqlParser::ISOLATION - 311))
        | (1ULL << (MySqlParser::ISSUER - 311))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
        | (1ULL << (MySqlParser::LANGUAGE - 311))
        | (1ULL << (MySqlParser::LAST - 311))
        | (1ULL << (MySqlParser::LESS - 311))
        | (1ULL << (MySqlParser::LEVEL - 311))
        | (1ULL << (MySqlParser::LIST - 311))
        | (1ULL << (MySqlParser::LOCAL - 311))
        | (1ULL << (MySqlParser::LOGFILE - 311))
        | (1ULL << (MySqlParser::LOGS - 311))
        | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_ROWS - 391))
        | (1ULL << (MySqlParser::MAX_SIZE - 391))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
        | (1ULL << (MySqlParser::MERGE - 391))
        | (1ULL << (MySqlParser::MID - 391))
        | (1ULL << (MySqlParser::MIN_ROWS - 391))
        | (1ULL << (MySqlParser::MODIFY - 391))
        | (1ULL << (MySqlParser::MUTEX - 391))
        | (1ULL << (MySqlParser::MYSQL - 391))
        | (1ULL << (MySqlParser::NAME - 391))
        | (1ULL << (MySqlParser::NAMES - 391))
        | (1ULL << (MySqlParser::NCHAR - 391))
        | (1ULL << (MySqlParser::NO - 391))
        | (1ULL << (MySqlParser::NODEGROUP - 391))
        | (1ULL << (MySqlParser::NONE - 391))
        | (1ULL << (MySqlParser::OFFLINE - 391))
        | (1ULL << (MySqlParser::OFFSET - 391))
        | (1ULL << (MySqlParser::OJ - 391))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
        | (1ULL << (MySqlParser::ONLINE - 391))
        | (1ULL << (MySqlParser::ONLY - 391))
        | (1ULL << (MySqlParser::OPTIONS - 391))
        | (1ULL << (MySqlParser::OWNER - 391))
        | (1ULL << (MySqlParser::PACK_KEYS - 391))
        | (1ULL << (MySqlParser::PARSER - 391))
        | (1ULL << (MySqlParser::PARTIAL - 391))
        | (1ULL << (MySqlParser::PARTITIONING - 391))
        | (1ULL << (MySqlParser::PARTITIONS - 391))
        | (1ULL << (MySqlParser::PASSWORD - 391))
        | (1ULL << (MySqlParser::PLUGINS - 391))
        | (1ULL << (MySqlParser::PORT - 391))
        | (1ULL << (MySqlParser::PRESERVE - 391))
        | (1ULL << (MySqlParser::PROCESSLIST - 391))
        | (1ULL << (MySqlParser::PROFILE - 391))
        | (1ULL << (MySqlParser::PROFILES - 391))
        | (1ULL << (MySqlParser::PROXY - 391))
        | (1ULL << (MySqlParser::QUERY - 391))
        | (1ULL << (MySqlParser::QUICK - 391))
        | (1ULL << (MySqlParser::REBUILD - 391))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
        | (1ULL << (MySqlParser::REDUNDANT - 391))
        | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
        | (1ULL << (MySqlParser::REORGANIZE - 455))
        | (1ULL << (MySqlParser::REPAIR - 455))
        | (1ULL << (MySqlParser::REPLICATION - 455))
        | (1ULL << (MySqlParser::RETURNS - 455))
        | (1ULL << (MySqlParser::ROLLBACK - 455))
        | (1ULL << (MySqlParser::ROLLUP - 455))
        | (1ULL << (MySqlParser::ROW - 455))
        | (1ULL << (MySqlParser::ROWS - 455))
        | (1ULL << (MySqlParser::ROW_FORMAT - 455))
        | (1ULL << (MySqlParser::SAVEPOINT - 455))
        | (1ULL << (MySqlParser::SCHEDULE - 455))
        | (1ULL << (MySqlParser::SECURITY - 455))
        | (1ULL << (MySqlParser::SERVER - 455))
        | (1ULL << (MySqlParser::SESSION - 455))
        | (1ULL << (MySqlParser::SHARE - 455))
        | (1ULL << (MySqlParser::SHARED - 455))
        | (1ULL << (MySqlParser::SIGNED - 455))
        | (1ULL << (MySqlParser::SIMPLE - 455))
        | (1ULL << (MySqlParser::SLAVE - 455))
        | (1ULL << (MySqlParser::SNAPSHOT - 455))
        | (1ULL << (MySqlParser::SOCKET - 455))
        | (1ULL << (MySqlParser::SOME - 455))
        | (1ULL << (MySqlParser::SOUNDS - 455))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
        | (1ULL << (MySqlParser::SQL_CACHE - 455))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
        | (1ULL << (MySqlParser::START - 455))
        | (1ULL << (MySqlParser::STARTS - 455))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
        | (1ULL << (MySqlParser::STATUS - 455))
        | (1ULL << (MySqlParser::STORAGE - 455))
        | (1ULL << (MySqlParser::SUBJECT - 455))
        | (1ULL << (MySqlParser::SUBPARTITION - 455))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
        | (1ULL << (MySqlParser::TABLESPACE - 455))
        | (1ULL << (MySqlParser::TEMPORARY - 455))
        | (1ULL << (MySqlParser::TEMPTABLE - 455))
        | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
        | (1ULL << (MySqlParser::TRUNCATE - 519))
        | (1ULL << (MySqlParser::UNDEFINED - 519))
        | (1ULL << (MySqlParser::UNDOFILE - 519))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
        | (1ULL << (MySqlParser::UNKNOWN - 519))
        | (1ULL << (MySqlParser::UPGRADE - 519))
        | (1ULL << (MySqlParser::USER - 519))
        | (1ULL << (MySqlParser::VALUE - 519))
        | (1ULL << (MySqlParser::VARIABLES - 519))
        | (1ULL << (MySqlParser::VIEW - 519))
        | (1ULL << (MySqlParser::WAIT - 519))
        | (1ULL << (MySqlParser::WARNINGS - 519))
        | (1ULL << (MySqlParser::WORK - 519))
        | (1ULL << (MySqlParser::WRAPPER - 519))
        | (1ULL << (MySqlParser::X509 - 519))
        | (1ULL << (MySqlParser::XML - 519))
        | (1ULL << (MySqlParser::QUARTER - 519))
        | (1ULL << (MySqlParser::MONTH - 519))
        | (1ULL << (MySqlParser::DAY - 519))
        | (1ULL << (MySqlParser::HOUR - 519))
        | (1ULL << (MySqlParser::MINUTE - 519))
        | (1ULL << (MySqlParser::WEEK - 519))
        | (1ULL << (MySqlParser::SECOND - 519))
        | (1ULL << (MySqlParser::MICROSECOND - 519))
        | (1ULL << (MySqlParser::TABLES - 519))
        | (1ULL << (MySqlParser::ROUTINE - 519))
        | (1ULL << (MySqlParser::EXECUTE - 519))
        | (1ULL << (MySqlParser::FILE - 519))
        | (1ULL << (MySqlParser::PROCESS - 519))
        | (1ULL << (MySqlParser::RELOAD - 519))
        | (1ULL << (MySqlParser::SHUTDOWN - 519))
        | (1ULL << (MySqlParser::SUPER - 519))
        | (1ULL << (MySqlParser::PRIVILEGES - 519))
        | (1ULL << (MySqlParser::ARMSCII8 - 519))
        | (1ULL << (MySqlParser::ASCII - 519))
        | (1ULL << (MySqlParser::BIG5 - 519))
        | (1ULL << (MySqlParser::CP1250 - 519))
        | (1ULL << (MySqlParser::CP1251 - 519))
        | (1ULL << (MySqlParser::CP1256 - 519))
        | (1ULL << (MySqlParser::CP1257 - 519))
        | (1ULL << (MySqlParser::CP850 - 519))
        | (1ULL << (MySqlParser::CP852 - 519))
        | (1ULL << (MySqlParser::CP866 - 519))
        | (1ULL << (MySqlParser::CP932 - 519))
        | (1ULL << (MySqlParser::DEC8 - 519))
        | (1ULL << (MySqlParser::EUCJPMS - 519))
        | (1ULL << (MySqlParser::EUCKR - 519))
        | (1ULL << (MySqlParser::GB2312 - 519))
        | (1ULL << (MySqlParser::GBK - 519))
        | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
        | (1ULL << (MySqlParser::HEBREW - 583))
        | (1ULL << (MySqlParser::HP8 - 583))
        | (1ULL << (MySqlParser::KEYBCS2 - 583))
        | (1ULL << (MySqlParser::KOI8R - 583))
        | (1ULL << (MySqlParser::KOI8U - 583))
        | (1ULL << (MySqlParser::LATIN1 - 583))
        | (1ULL << (MySqlParser::LATIN2 - 583))
        | (1ULL << (MySqlParser::LATIN5 - 583))
        | (1ULL << (MySqlParser::LATIN7 - 583))
        | (1ULL << (MySqlParser::MACCE - 583))
        | (1ULL << (MySqlParser::MACROMAN - 583))
        | (1ULL << (MySqlParser::SJIS - 583))
        | (1ULL << (MySqlParser::SWE7 - 583))
        | (1ULL << (MySqlParser::TIS620 - 583))
        | (1ULL << (MySqlParser::UCS2 - 583))
        | (1ULL << (MySqlParser::UJIS - 583))
        | (1ULL << (MySqlParser::UTF16 - 583))
        | (1ULL << (MySqlParser::UTF16LE - 583))
        | (1ULL << (MySqlParser::UTF32 - 583))
        | (1ULL << (MySqlParser::UTF8 - 583))
        | (1ULL << (MySqlParser::UTF8MB3 - 583))
        | (1ULL << (MySqlParser::UTF8MB4 - 583))
        | (1ULL << (MySqlParser::ARCHIVE - 583))
        | (1ULL << (MySqlParser::BLACKHOLE - 583))
        | (1ULL << (MySqlParser::CSV - 583))
        | (1ULL << (MySqlParser::FEDERATED - 583))
        | (1ULL << (MySqlParser::INNODB - 583))
        | (1ULL << (MySqlParser::MEMORY - 583))
        | (1ULL << (MySqlParser::MRG_MYISAM - 583))
        | (1ULL << (MySqlParser::MYISAM - 583))
        | (1ULL << (MySqlParser::NDB - 583))
        | (1ULL << (MySqlParser::NDBCLUSTER - 583))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
        | (1ULL << (MySqlParser::REPEATABLE - 583))
        | (1ULL << (MySqlParser::COMMITTED - 583))
        | (1ULL << (MySqlParser::UNCOMMITTED - 583))
        | (1ULL << (MySqlParser::SERIALIZABLE - 583))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
        | (1ULL << (MySqlParser::LINESTRING - 583))
        | (1ULL << (MySqlParser::MULTILINESTRING - 583))
        | (1ULL << (MySqlParser::MULTIPOINT - 583))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
        | (1ULL << (MySqlParser::POINT - 583))
        | (1ULL << (MySqlParser::POLYGON - 583))
        | (1ULL << (MySqlParser::ABS - 583))
        | (1ULL << (MySqlParser::ACOS - 583))
        | (1ULL << (MySqlParser::ADDDATE - 583))
        | (1ULL << (MySqlParser::ADDTIME - 583))
        | (1ULL << (MySqlParser::AES_DECRYPT - 583))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
        | (1ULL << (MySqlParser::AREA - 583))
        | (1ULL << (MySqlParser::ASBINARY - 583))
        | (1ULL << (MySqlParser::ASIN - 583))
        | (1ULL << (MySqlParser::ASTEXT - 583))
        | (1ULL << (MySqlParser::ASWKB - 583))
        | (1ULL << (MySqlParser::ASWKT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
        | (1ULL << (MySqlParser::ATAN - 583))
        | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
        | (1ULL << (MySqlParser::BIN - 647))
        | (1ULL << (MySqlParser::BIT_COUNT - 647))
        | (1ULL << (MySqlParser::BIT_LENGTH - 647))
        | (1ULL << (MySqlParser::BUFFER - 647))
        | (1ULL << (MySqlParser::CEIL - 647))
        | (1ULL << (MySqlParser::CEILING - 647))
        | (1ULL << (MySqlParser::CENTROID - 647))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
        | (1ULL << (MySqlParser::CHARSET - 647))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
        | (1ULL << (MySqlParser::COERCIBILITY - 647))
        | (1ULL << (MySqlParser::COLLATION - 647))
        | (1ULL << (MySqlParser::COMPRESS - 647))
        | (1ULL << (MySqlParser::CONCAT - 647))
        | (1ULL << (MySqlParser::CONCAT_WS - 647))
        | (1ULL << (MySqlParser::CONNECTION_ID - 647))
        | (1ULL << (MySqlParser::CONV - 647))
        | (1ULL << (MySqlParser::CONVERT_TZ - 647))
        | (1ULL << (MySqlParser::COS - 647))
        | (1ULL << (MySqlParser::COT - 647))
        | (1ULL << (MySqlParser::CRC32 - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
        | (1ULL << (MySqlParser::CROSSES - 647))
        | (1ULL << (MySqlParser::DATEDIFF - 647))
        | (1ULL << (MySqlParser::DATE_FORMAT - 647))
        | (1ULL << (MySqlParser::DAYNAME - 647))
        | (1ULL << (MySqlParser::DAYOFMONTH - 647))
        | (1ULL << (MySqlParser::DAYOFWEEK - 647))
        | (1ULL << (MySqlParser::DAYOFYEAR - 647))
        | (1ULL << (MySqlParser::DECODE - 647))
        | (1ULL << (MySqlParser::DEGREES - 647))
        | (1ULL << (MySqlParser::DES_DECRYPT - 647))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
        | (1ULL << (MySqlParser::DIMENSION - 647))
        | (1ULL << (MySqlParser::DISJOINT - 647))
        | (1ULL << (MySqlParser::ELT - 647))
        | (1ULL << (MySqlParser::ENCODE - 647))
        | (1ULL << (MySqlParser::ENCRYPT - 647))
        | (1ULL << (MySqlParser::ENDPOINT - 647))
        | (1ULL << (MySqlParser::ENVELOPE - 647))
        | (1ULL << (MySqlParser::EQUALS - 647))
        | (1ULL << (MySqlParser::EXP - 647))
        | (1ULL << (MySqlParser::EXPORT_SET - 647))
        | (1ULL << (MySqlParser::EXTERIORRING - 647))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
        | (1ULL << (MySqlParser::FIELD - 647))
        | (1ULL << (MySqlParser::FIND_IN_SET - 647))
        | (1ULL << (MySqlParser::FLOOR - 647))
        | (1ULL << (MySqlParser::FORMAT - 647))
        | (1ULL << (MySqlParser::FOUND_ROWS - 647))
        | (1ULL << (MySqlParser::FROM_BASE64 - 647))
        | (1ULL << (MySqlParser::FROM_DAYS - 647))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
        | (1ULL << (MySqlParser::GET_FORMAT - 711))
        | (1ULL << (MySqlParser::GET_LOCK - 711))
        | (1ULL << (MySqlParser::GLENGTH - 711))
        | (1ULL << (MySqlParser::GREATEST - 711))
        | (1ULL << (MySqlParser::GTID_SUBSET - 711))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
        | (1ULL << (MySqlParser::HEX - 711))
        | (1ULL << (MySqlParser::IFNULL - 711))
        | (1ULL << (MySqlParser::INET6_ATON - 711))
        | (1ULL << (MySqlParser::INET6_NTOA - 711))
        | (1ULL << (MySqlParser::INET_ATON - 711))
        | (1ULL << (MySqlParser::INET_NTOA - 711))
        | (1ULL << (MySqlParser::INSTR - 711))
        | (1ULL << (MySqlParser::INTERIORRINGN - 711))
        | (1ULL << (MySqlParser::INTERSECTS - 711))
        | (1ULL << (MySqlParser::ISCLOSED - 711))
        | (1ULL << (MySqlParser::ISEMPTY - 711))
        | (1ULL << (MySqlParser::ISNULL - 711))
        | (1ULL << (MySqlParser::ISSIMPLE - 711))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
        | (1ULL << (MySqlParser::IS_IPV4 - 711))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
        | (1ULL << (MySqlParser::IS_IPV6 - 711))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
        | (1ULL << (MySqlParser::LCASE - 711))
        | (1ULL << (MySqlParser::LEAST - 711))
        | (1ULL << (MySqlParser::LENGTH - 711))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINEFROMWKB - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
        | (1ULL << (MySqlParser::LN - 711))
        | (1ULL << (MySqlParser::LOAD_FILE - 711))
        | (1ULL << (MySqlParser::LOCATE - 711))
        | (1ULL << (MySqlParser::LOG - 711))
        | (1ULL << (MySqlParser::LOG10 - 711))
        | (1ULL << (MySqlParser::LOG2 - 711))
        | (1ULL << (MySqlParser::LOWER - 711))
        | (1ULL << (MySqlParser::LPAD - 711))
        | (1ULL << (MySqlParser::LTRIM - 711))
        | (1ULL << (MySqlParser::MAKEDATE - 711))
        | (1ULL << (MySqlParser::MAKETIME - 711))
        | (1ULL << (MySqlParser::MAKE_SET - 711))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
        | (1ULL << (MySqlParser::MBRCONTAINS - 711))
        | (1ULL << (MySqlParser::MBRDISJOINT - 711))
        | (1ULL << (MySqlParser::MBREQUAL - 711))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
        | (1ULL << (MySqlParser::MBROVERLAPS - 711))
        | (1ULL << (MySqlParser::MBRTOUCHES - 711))
        | (1ULL << (MySqlParser::MBRWITHIN - 711))
        | (1ULL << (MySqlParser::MD5 - 711))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
        | (1ULL << (MySqlParser::MONTHNAME - 711))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::NAME_CONST - 775))
        | (1ULL << (MySqlParser::NULLIF - 775))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
        | (1ULL << (MySqlParser::NUMPOINTS - 775))
        | (1ULL << (MySqlParser::OCT - 775))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
        | (1ULL << (MySqlParser::ORD - 775))
        | (1ULL << (MySqlParser::OVERLAPS - 775))
        | (1ULL << (MySqlParser::PERIOD_ADD - 775))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
        | (1ULL << (MySqlParser::PI - 775))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::POINTFROMWKB - 775))
        | (1ULL << (MySqlParser::POINTN - 775))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYFROMWKB - 775))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::POW - 775))
        | (1ULL << (MySqlParser::POWER - 775))
        | (1ULL << (MySqlParser::QUOTE - 775))
        | (1ULL << (MySqlParser::RADIANS - 775))
        | (1ULL << (MySqlParser::RAND - 775))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
        | (1ULL << (MySqlParser::REVERSE - 775))
        | (1ULL << (MySqlParser::ROUND - 775))
        | (1ULL << (MySqlParser::ROW_COUNT - 775))
        | (1ULL << (MySqlParser::RPAD - 775))
        | (1ULL << (MySqlParser::RTRIM - 775))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
        | (1ULL << (MySqlParser::SESSION_USER - 775))
        | (1ULL << (MySqlParser::SHA - 775))
        | (1ULL << (MySqlParser::SHA1 - 775))
        | (1ULL << (MySqlParser::SHA2 - 775))
        | (1ULL << (MySqlParser::SIGN - 775))
        | (1ULL << (MySqlParser::SIN - 775))
        | (1ULL << (MySqlParser::SLEEP - 775))
        | (1ULL << (MySqlParser::SOUNDEX - 775))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
        | (1ULL << (MySqlParser::SQRT - 775))
        | (1ULL << (MySqlParser::SRID - 775))
        | (1ULL << (MySqlParser::STARTPOINT - 775))
        | (1ULL << (MySqlParser::STRCMP - 775))
        | (1ULL << (MySqlParser::STR_TO_DATE - 775))
        | (1ULL << (MySqlParser::ST_AREA - 775))
        | (1ULL << (MySqlParser::ST_ASBINARY - 775))
        | (1ULL << (MySqlParser::ST_ASTEXT - 775))
        | (1ULL << (MySqlParser::ST_ASWKB - 775))
        | (1ULL << (MySqlParser::ST_ASWKT - 775))
        | (1ULL << (MySqlParser::ST_BUFFER - 775))
        | (1ULL << (MySqlParser::ST_CENTROID - 775))
        | (1ULL << (MySqlParser::ST_CONTAINS - 775))
        | (1ULL << (MySqlParser::ST_CROSSES - 775))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
        | (1ULL << (MySqlParser::ST_DIMENSION - 775))
        | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
        | (1ULL << (MySqlParser::ST_EQUALS - 839))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POINTN - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_SRID - 839))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
        | (1ULL << (MySqlParser::ST_TOUCHES - 839))
        | (1ULL << (MySqlParser::ST_UNION - 839))
        | (1ULL << (MySqlParser::ST_WITHIN - 839))
        | (1ULL << (MySqlParser::ST_X - 839))
        | (1ULL << (MySqlParser::ST_Y - 839))
        | (1ULL << (MySqlParser::SUBDATE - 839))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
        | (1ULL << (MySqlParser::SUBTIME - 839))
        | (1ULL << (MySqlParser::SYSTEM_USER - 839))
        | (1ULL << (MySqlParser::TAN - 839))
        | (1ULL << (MySqlParser::TIMEDIFF - 839))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
        | (1ULL << (MySqlParser::TIME_FORMAT - 839))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
        | (1ULL << (MySqlParser::TOUCHES - 839))
        | (1ULL << (MySqlParser::TO_BASE64 - 839))
        | (1ULL << (MySqlParser::TO_DAYS - 839))
        | (1ULL << (MySqlParser::TO_SECONDS - 839))
        | (1ULL << (MySqlParser::UCASE - 839))
        | (1ULL << (MySqlParser::UNCOMPRESS - 839))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
        | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
        | (1ULL << (MySqlParser::UPDATEXML - 903))
        | (1ULL << (MySqlParser::UPPER - 903))
        | (1ULL << (MySqlParser::UUID - 903))
        | (1ULL << (MySqlParser::UUID_SHORT - 903))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
        | (1ULL << (MySqlParser::VERSION - 903))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
        | (1ULL << (MySqlParser::WEEKDAY - 903))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
        | (1ULL << (MySqlParser::WITHIN - 903))
        | (1ULL << (MySqlParser::YEARWEEK - 903))
        | (1ULL << (MySqlParser::Y_FUNCTION - 903))
        | (1ULL << (MySqlParser::X_FUNCTION - 903))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
        | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
        setState(1415);
        dynamic_cast<TblConstrFKContext *>(_localctx)->index_name = id_();
      }
      setState(1418);
      index_colname_list();
      setState(1419);
      reference_definition();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Table_constraintContext *>(_tracker.createInstance<MySqlParser::TblConstCheckContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1421);
      match(MySqlParser::CHECK);
      setState(1422);
      match(MySqlParser::LR_BRACKET);
      setState(1423);
      expression(0);
      setState(1424);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reference_definitionContext ------------------------------------------------------------------

MySqlParser::Reference_definitionContext::Reference_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Reference_definitionContext::REFERENCES() {
  return getToken(MySqlParser::REFERENCES, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Reference_definitionContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

MySqlParser::Index_colname_listContext* MySqlParser::Reference_definitionContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

tree::TerminalNode* MySqlParser::Reference_definitionContext::MATCH() {
  return getToken(MySqlParser::MATCH, 0);
}

MySqlParser::On_delete_actionContext* MySqlParser::Reference_definitionContext::on_delete_action() {
  return getRuleContext<MySqlParser::On_delete_actionContext>(0);
}

MySqlParser::On_update_actionContext* MySqlParser::Reference_definitionContext::on_update_action() {
  return getRuleContext<MySqlParser::On_update_actionContext>(0);
}

tree::TerminalNode* MySqlParser::Reference_definitionContext::FULL() {
  return getToken(MySqlParser::FULL, 0);
}

tree::TerminalNode* MySqlParser::Reference_definitionContext::PARTIAL() {
  return getToken(MySqlParser::PARTIAL, 0);
}

tree::TerminalNode* MySqlParser::Reference_definitionContext::SIMPLE() {
  return getToken(MySqlParser::SIMPLE, 0);
}


size_t MySqlParser::Reference_definitionContext::getRuleIndex() const {
  return MySqlParser::RuleReference_definition;
}

void MySqlParser::Reference_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReference_definition(this);
}

void MySqlParser::Reference_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReference_definition(this);
}

MySqlParser::Reference_definitionContext* MySqlParser::reference_definition() {
  Reference_definitionContext *_localctx = _tracker.createInstance<Reference_definitionContext>(_ctx, getState());
  enterRule(_localctx, 82, MySqlParser::RuleReference_definition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1428);
    match(MySqlParser::REFERENCES);
    setState(1429);
    table_name();
    setState(1430);
    index_colname_list();
    setState(1433);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::MATCH) {
      setState(1431);
      match(MySqlParser::MATCH);
      setState(1432);
      dynamic_cast<Reference_definitionContext *>(_localctx)->ref_match_type = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FULL || _la == MySqlParser::PARTIAL

      || _la == MySqlParser::SIMPLE)) {
        dynamic_cast<Reference_definitionContext *>(_localctx)->ref_match_type = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1437);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
    case 1: {
      setState(1435);
      on_delete_action();
      break;
    }

    case 2: {
      setState(1436);
      on_update_action();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- On_delete_actionContext ------------------------------------------------------------------

MySqlParser::On_delete_actionContext::On_delete_actionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::On_delete_actionContext::ON() {
  return getTokens(MySqlParser::ON);
}

tree::TerminalNode* MySqlParser::On_delete_actionContext::ON(size_t i) {
  return getToken(MySqlParser::ON, i);
}

tree::TerminalNode* MySqlParser::On_delete_actionContext::DELETE() {
  return getToken(MySqlParser::DELETE, 0);
}

std::vector<MySqlParser::Reference_action_control_typeContext *> MySqlParser::On_delete_actionContext::reference_action_control_type() {
  return getRuleContexts<MySqlParser::Reference_action_control_typeContext>();
}

MySqlParser::Reference_action_control_typeContext* MySqlParser::On_delete_actionContext::reference_action_control_type(size_t i) {
  return getRuleContext<MySqlParser::Reference_action_control_typeContext>(i);
}

tree::TerminalNode* MySqlParser::On_delete_actionContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}


size_t MySqlParser::On_delete_actionContext::getRuleIndex() const {
  return MySqlParser::RuleOn_delete_action;
}

void MySqlParser::On_delete_actionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOn_delete_action(this);
}

void MySqlParser::On_delete_actionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOn_delete_action(this);
}

MySqlParser::On_delete_actionContext* MySqlParser::on_delete_action() {
  On_delete_actionContext *_localctx = _tracker.createInstance<On_delete_actionContext>(_ctx, getState());
  enterRule(_localctx, 84, MySqlParser::RuleOn_delete_action);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1439);
    match(MySqlParser::ON);
    setState(1440);
    match(MySqlParser::DELETE);
    setState(1441);
    reference_action_control_type();
    setState(1445);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ON) {
      setState(1442);
      match(MySqlParser::ON);
      setState(1443);
      match(MySqlParser::UPDATE);
      setState(1444);
      reference_action_control_type();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- On_update_actionContext ------------------------------------------------------------------

MySqlParser::On_update_actionContext::On_update_actionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::On_update_actionContext::ON() {
  return getTokens(MySqlParser::ON);
}

tree::TerminalNode* MySqlParser::On_update_actionContext::ON(size_t i) {
  return getToken(MySqlParser::ON, i);
}

tree::TerminalNode* MySqlParser::On_update_actionContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

std::vector<MySqlParser::Reference_action_control_typeContext *> MySqlParser::On_update_actionContext::reference_action_control_type() {
  return getRuleContexts<MySqlParser::Reference_action_control_typeContext>();
}

MySqlParser::Reference_action_control_typeContext* MySqlParser::On_update_actionContext::reference_action_control_type(size_t i) {
  return getRuleContext<MySqlParser::Reference_action_control_typeContext>(i);
}

tree::TerminalNode* MySqlParser::On_update_actionContext::DELETE() {
  return getToken(MySqlParser::DELETE, 0);
}


size_t MySqlParser::On_update_actionContext::getRuleIndex() const {
  return MySqlParser::RuleOn_update_action;
}

void MySqlParser::On_update_actionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOn_update_action(this);
}

void MySqlParser::On_update_actionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOn_update_action(this);
}

MySqlParser::On_update_actionContext* MySqlParser::on_update_action() {
  On_update_actionContext *_localctx = _tracker.createInstance<On_update_actionContext>(_ctx, getState());
  enterRule(_localctx, 86, MySqlParser::RuleOn_update_action);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1447);
    match(MySqlParser::ON);
    setState(1448);
    match(MySqlParser::UPDATE);
    setState(1449);
    reference_action_control_type();
    setState(1453);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ON) {
      setState(1450);
      match(MySqlParser::ON);
      setState(1451);
      match(MySqlParser::DELETE);
      setState(1452);
      reference_action_control_type();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reference_action_control_typeContext ------------------------------------------------------------------

MySqlParser::Reference_action_control_typeContext::Reference_action_control_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Reference_action_control_typeContext::RESTRICT() {
  return getToken(MySqlParser::RESTRICT, 0);
}

tree::TerminalNode* MySqlParser::Reference_action_control_typeContext::CASCADE() {
  return getToken(MySqlParser::CASCADE, 0);
}

tree::TerminalNode* MySqlParser::Reference_action_control_typeContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::Reference_action_control_typeContext::NULL_LITERAL() {
  return getToken(MySqlParser::NULL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Reference_action_control_typeContext::NO() {
  return getToken(MySqlParser::NO, 0);
}

tree::TerminalNode* MySqlParser::Reference_action_control_typeContext::ACTION() {
  return getToken(MySqlParser::ACTION, 0);
}


size_t MySqlParser::Reference_action_control_typeContext::getRuleIndex() const {
  return MySqlParser::RuleReference_action_control_type;
}

void MySqlParser::Reference_action_control_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReference_action_control_type(this);
}

void MySqlParser::Reference_action_control_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReference_action_control_type(this);
}

MySqlParser::Reference_action_control_typeContext* MySqlParser::reference_action_control_type() {
  Reference_action_control_typeContext *_localctx = _tracker.createInstance<Reference_action_control_typeContext>(_ctx, getState());
  enterRule(_localctx, 88, MySqlParser::RuleReference_action_control_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1461);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::RESTRICT: {
        enterOuterAlt(_localctx, 1);
        setState(1455);
        match(MySqlParser::RESTRICT);
        break;
      }

      case MySqlParser::CASCADE: {
        enterOuterAlt(_localctx, 2);
        setState(1456);
        match(MySqlParser::CASCADE);
        break;
      }

      case MySqlParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1457);
        match(MySqlParser::SET);
        setState(1458);
        match(MySqlParser::NULL_LITERAL);
        break;
      }

      case MySqlParser::NO: {
        enterOuterAlt(_localctx, 4);
        setState(1459);
        match(MySqlParser::NO);
        setState(1460);
        match(MySqlParser::ACTION);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_column_definitionContext ------------------------------------------------------------------

MySqlParser::Index_column_definitionContext::Index_column_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Index_column_definitionContext::getRuleIndex() const {
  return MySqlParser::RuleIndex_column_definition;
}

void MySqlParser::Index_column_definitionContext::copyFrom(Index_column_definitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SimpleIndexContext ------------------------------------------------------------------

MySqlParser::Index_colname_listContext* MySqlParser::SimpleIndexContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

tree::TerminalNode* MySqlParser::SimpleIndexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::SimpleIndexContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::Id_Context* MySqlParser::SimpleIndexContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::Index_typeContext* MySqlParser::SimpleIndexContext::index_type() {
  return getRuleContext<MySqlParser::Index_typeContext>(0);
}

std::vector<MySqlParser::Index_optionContext *> MySqlParser::SimpleIndexContext::index_option() {
  return getRuleContexts<MySqlParser::Index_optionContext>();
}

MySqlParser::Index_optionContext* MySqlParser::SimpleIndexContext::index_option(size_t i) {
  return getRuleContext<MySqlParser::Index_optionContext>(i);
}

MySqlParser::SimpleIndexContext::SimpleIndexContext(Index_column_definitionContext *ctx) { copyFrom(ctx); }

void MySqlParser::SimpleIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleIndex(this);
}
void MySqlParser::SimpleIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleIndex(this);
}
//----------------- SpecIndexContext ------------------------------------------------------------------

MySqlParser::Index_colname_listContext* MySqlParser::SpecIndexContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

tree::TerminalNode* MySqlParser::SpecIndexContext::FULLTEXT() {
  return getToken(MySqlParser::FULLTEXT, 0);
}

tree::TerminalNode* MySqlParser::SpecIndexContext::SPATIAL() {
  return getToken(MySqlParser::SPATIAL, 0);
}

MySqlParser::Id_Context* MySqlParser::SpecIndexContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

std::vector<MySqlParser::Index_optionContext *> MySqlParser::SpecIndexContext::index_option() {
  return getRuleContexts<MySqlParser::Index_optionContext>();
}

MySqlParser::Index_optionContext* MySqlParser::SpecIndexContext::index_option(size_t i) {
  return getRuleContext<MySqlParser::Index_optionContext>(i);
}

tree::TerminalNode* MySqlParser::SpecIndexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::SpecIndexContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::SpecIndexContext::SpecIndexContext(Index_column_definitionContext *ctx) { copyFrom(ctx); }

void MySqlParser::SpecIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecIndex(this);
}
void MySqlParser::SpecIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecIndex(this);
}
MySqlParser::Index_column_definitionContext* MySqlParser::index_column_definition() {
  Index_column_definitionContext *_localctx = _tracker.createInstance<Index_column_definitionContext>(_ctx, getState());
  enterRule(_localctx, 90, MySqlParser::RuleIndex_column_definition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1491);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::INDEX:
      case MySqlParser::KEY: {
        _localctx = dynamic_cast<Index_column_definitionContext *>(_tracker.createInstance<MySqlParser::SimpleIndexContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(1463);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1465);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
          | (1ULL << (MySqlParser::TIME - 181))
          | (1ULL << (MySqlParser::TIMESTAMP - 181))
          | (1ULL << (MySqlParser::DATETIME - 181))
          | (1ULL << (MySqlParser::YEAR - 181))
          | (1ULL << (MySqlParser::TEXT - 181))
          | (1ULL << (MySqlParser::ENUM - 181))
          | (1ULL << (MySqlParser::COUNT - 181))
          | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
          | (1ULL << (MySqlParser::AFTER - 246))
          | (1ULL << (MySqlParser::ALGORITHM - 246))
          | (1ULL << (MySqlParser::ANY - 246))
          | (1ULL << (MySqlParser::AT - 246))
          | (1ULL << (MySqlParser::AUTHORS - 246))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
          | (1ULL << (MySqlParser::BEGIN - 246))
          | (1ULL << (MySqlParser::BINLOG - 246))
          | (1ULL << (MySqlParser::BIT - 246))
          | (1ULL << (MySqlParser::BTREE - 246))
          | (1ULL << (MySqlParser::CASCADED - 246))
          | (1ULL << (MySqlParser::CHAIN - 246))
          | (1ULL << (MySqlParser::CHECKSUM - 246))
          | (1ULL << (MySqlParser::CIPHER - 246))
          | (1ULL << (MySqlParser::CLIENT - 246))
          | (1ULL << (MySqlParser::COALESCE - 246))
          | (1ULL << (MySqlParser::CODE - 246))
          | (1ULL << (MySqlParser::COLUMNS - 246))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
          | (1ULL << (MySqlParser::COMMENT - 246))
          | (1ULL << (MySqlParser::COMMIT - 246))
          | (1ULL << (MySqlParser::COMPACT - 246))
          | (1ULL << (MySqlParser::COMPLETION - 246))
          | (1ULL << (MySqlParser::COMPRESSED - 246))
          | (1ULL << (MySqlParser::CONCURRENT - 246))
          | (1ULL << (MySqlParser::CONNECTION - 246))
          | (1ULL << (MySqlParser::CONSISTENT - 246))
          | (1ULL << (MySqlParser::CONTAINS - 246))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
          | (1ULL << (MySqlParser::COPY - 246))
          | (1ULL << (MySqlParser::DATA - 246))
          | (1ULL << (MySqlParser::DATAFILE - 246))
          | (1ULL << (MySqlParser::DEFINER - 246))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
          | (1ULL << (MySqlParser::DIRECTORY - 246))
          | (1ULL << (MySqlParser::DISABLE - 246))
          | (1ULL << (MySqlParser::DISCARD - 246))
          | (1ULL << (MySqlParser::DISK - 246))
          | (1ULL << (MySqlParser::DO - 246))
          | (1ULL << (MySqlParser::DUMPFILE - 246))
          | (1ULL << (MySqlParser::DUPLICATE - 246))
          | (1ULL << (MySqlParser::DYNAMIC - 246))
          | (1ULL << (MySqlParser::ENABLE - 246))
          | (1ULL << (MySqlParser::ENDS - 246))
          | (1ULL << (MySqlParser::ENGINE - 246))
          | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
          | (1ULL << (MySqlParser::ESCAPE - 311))
          | (1ULL << (MySqlParser::EVEN - 311))
          | (1ULL << (MySqlParser::EVENT - 311))
          | (1ULL << (MySqlParser::EVENTS - 311))
          | (1ULL << (MySqlParser::EVERY - 311))
          | (1ULL << (MySqlParser::EXCHANGE - 311))
          | (1ULL << (MySqlParser::EXCLUSIVE - 311))
          | (1ULL << (MySqlParser::EXPIRE - 311))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
          | (1ULL << (MySqlParser::FIELDS - 311))
          | (1ULL << (MySqlParser::FIRST - 311))
          | (1ULL << (MySqlParser::FIXED - 311))
          | (1ULL << (MySqlParser::FULL - 311))
          | (1ULL << (MySqlParser::FUNCTION - 311))
          | (1ULL << (MySqlParser::GLOBAL - 311))
          | (1ULL << (MySqlParser::GRANTS - 311))
          | (1ULL << (MySqlParser::HASH - 311))
          | (1ULL << (MySqlParser::HOST - 311))
          | (1ULL << (MySqlParser::IDENTIFIED - 311))
          | (1ULL << (MySqlParser::IMPORT - 311))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
          | (1ULL << (MySqlParser::INPLACE - 311))
          | (1ULL << (MySqlParser::INSERT_METHOD - 311))
          | (1ULL << (MySqlParser::INVOKER - 311))
          | (1ULL << (MySqlParser::ISOLATION - 311))
          | (1ULL << (MySqlParser::ISSUER - 311))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
          | (1ULL << (MySqlParser::LANGUAGE - 311))
          | (1ULL << (MySqlParser::LAST - 311))
          | (1ULL << (MySqlParser::LESS - 311))
          | (1ULL << (MySqlParser::LEVEL - 311))
          | (1ULL << (MySqlParser::LIST - 311))
          | (1ULL << (MySqlParser::LOCAL - 311))
          | (1ULL << (MySqlParser::LOGFILE - 311))
          | (1ULL << (MySqlParser::LOGS - 311))
          | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_ROWS - 391))
          | (1ULL << (MySqlParser::MAX_SIZE - 391))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
          | (1ULL << (MySqlParser::MERGE - 391))
          | (1ULL << (MySqlParser::MID - 391))
          | (1ULL << (MySqlParser::MIN_ROWS - 391))
          | (1ULL << (MySqlParser::MODIFY - 391))
          | (1ULL << (MySqlParser::MUTEX - 391))
          | (1ULL << (MySqlParser::MYSQL - 391))
          | (1ULL << (MySqlParser::NAME - 391))
          | (1ULL << (MySqlParser::NAMES - 391))
          | (1ULL << (MySqlParser::NCHAR - 391))
          | (1ULL << (MySqlParser::NO - 391))
          | (1ULL << (MySqlParser::NODEGROUP - 391))
          | (1ULL << (MySqlParser::NONE - 391))
          | (1ULL << (MySqlParser::OFFLINE - 391))
          | (1ULL << (MySqlParser::OFFSET - 391))
          | (1ULL << (MySqlParser::OJ - 391))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
          | (1ULL << (MySqlParser::ONLINE - 391))
          | (1ULL << (MySqlParser::ONLY - 391))
          | (1ULL << (MySqlParser::OPTIONS - 391))
          | (1ULL << (MySqlParser::OWNER - 391))
          | (1ULL << (MySqlParser::PACK_KEYS - 391))
          | (1ULL << (MySqlParser::PARSER - 391))
          | (1ULL << (MySqlParser::PARTIAL - 391))
          | (1ULL << (MySqlParser::PARTITIONING - 391))
          | (1ULL << (MySqlParser::PARTITIONS - 391))
          | (1ULL << (MySqlParser::PASSWORD - 391))
          | (1ULL << (MySqlParser::PLUGINS - 391))
          | (1ULL << (MySqlParser::PORT - 391))
          | (1ULL << (MySqlParser::PRESERVE - 391))
          | (1ULL << (MySqlParser::PROCESSLIST - 391))
          | (1ULL << (MySqlParser::PROFILE - 391))
          | (1ULL << (MySqlParser::PROFILES - 391))
          | (1ULL << (MySqlParser::PROXY - 391))
          | (1ULL << (MySqlParser::QUERY - 391))
          | (1ULL << (MySqlParser::QUICK - 391))
          | (1ULL << (MySqlParser::REBUILD - 391))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
          | (1ULL << (MySqlParser::REDUNDANT - 391))
          | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
          | (1ULL << (MySqlParser::REORGANIZE - 455))
          | (1ULL << (MySqlParser::REPAIR - 455))
          | (1ULL << (MySqlParser::REPLICATION - 455))
          | (1ULL << (MySqlParser::RETURNS - 455))
          | (1ULL << (MySqlParser::ROLLBACK - 455))
          | (1ULL << (MySqlParser::ROLLUP - 455))
          | (1ULL << (MySqlParser::ROW - 455))
          | (1ULL << (MySqlParser::ROWS - 455))
          | (1ULL << (MySqlParser::ROW_FORMAT - 455))
          | (1ULL << (MySqlParser::SAVEPOINT - 455))
          | (1ULL << (MySqlParser::SCHEDULE - 455))
          | (1ULL << (MySqlParser::SECURITY - 455))
          | (1ULL << (MySqlParser::SERVER - 455))
          | (1ULL << (MySqlParser::SESSION - 455))
          | (1ULL << (MySqlParser::SHARE - 455))
          | (1ULL << (MySqlParser::SHARED - 455))
          | (1ULL << (MySqlParser::SIGNED - 455))
          | (1ULL << (MySqlParser::SIMPLE - 455))
          | (1ULL << (MySqlParser::SLAVE - 455))
          | (1ULL << (MySqlParser::SNAPSHOT - 455))
          | (1ULL << (MySqlParser::SOCKET - 455))
          | (1ULL << (MySqlParser::SOME - 455))
          | (1ULL << (MySqlParser::SOUNDS - 455))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
          | (1ULL << (MySqlParser::SQL_CACHE - 455))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
          | (1ULL << (MySqlParser::START - 455))
          | (1ULL << (MySqlParser::STARTS - 455))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
          | (1ULL << (MySqlParser::STATUS - 455))
          | (1ULL << (MySqlParser::STORAGE - 455))
          | (1ULL << (MySqlParser::SUBJECT - 455))
          | (1ULL << (MySqlParser::SUBPARTITION - 455))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
          | (1ULL << (MySqlParser::TABLESPACE - 455))
          | (1ULL << (MySqlParser::TEMPORARY - 455))
          | (1ULL << (MySqlParser::TEMPTABLE - 455))
          | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
          | (1ULL << (MySqlParser::TRUNCATE - 519))
          | (1ULL << (MySqlParser::UNDEFINED - 519))
          | (1ULL << (MySqlParser::UNDOFILE - 519))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
          | (1ULL << (MySqlParser::UNKNOWN - 519))
          | (1ULL << (MySqlParser::UPGRADE - 519))
          | (1ULL << (MySqlParser::USER - 519))
          | (1ULL << (MySqlParser::VALUE - 519))
          | (1ULL << (MySqlParser::VARIABLES - 519))
          | (1ULL << (MySqlParser::VIEW - 519))
          | (1ULL << (MySqlParser::WAIT - 519))
          | (1ULL << (MySqlParser::WARNINGS - 519))
          | (1ULL << (MySqlParser::WORK - 519))
          | (1ULL << (MySqlParser::WRAPPER - 519))
          | (1ULL << (MySqlParser::X509 - 519))
          | (1ULL << (MySqlParser::XML - 519))
          | (1ULL << (MySqlParser::QUARTER - 519))
          | (1ULL << (MySqlParser::MONTH - 519))
          | (1ULL << (MySqlParser::DAY - 519))
          | (1ULL << (MySqlParser::HOUR - 519))
          | (1ULL << (MySqlParser::MINUTE - 519))
          | (1ULL << (MySqlParser::WEEK - 519))
          | (1ULL << (MySqlParser::SECOND - 519))
          | (1ULL << (MySqlParser::MICROSECOND - 519))
          | (1ULL << (MySqlParser::TABLES - 519))
          | (1ULL << (MySqlParser::ROUTINE - 519))
          | (1ULL << (MySqlParser::EXECUTE - 519))
          | (1ULL << (MySqlParser::FILE - 519))
          | (1ULL << (MySqlParser::PROCESS - 519))
          | (1ULL << (MySqlParser::RELOAD - 519))
          | (1ULL << (MySqlParser::SHUTDOWN - 519))
          | (1ULL << (MySqlParser::SUPER - 519))
          | (1ULL << (MySqlParser::PRIVILEGES - 519))
          | (1ULL << (MySqlParser::ARMSCII8 - 519))
          | (1ULL << (MySqlParser::ASCII - 519))
          | (1ULL << (MySqlParser::BIG5 - 519))
          | (1ULL << (MySqlParser::CP1250 - 519))
          | (1ULL << (MySqlParser::CP1251 - 519))
          | (1ULL << (MySqlParser::CP1256 - 519))
          | (1ULL << (MySqlParser::CP1257 - 519))
          | (1ULL << (MySqlParser::CP850 - 519))
          | (1ULL << (MySqlParser::CP852 - 519))
          | (1ULL << (MySqlParser::CP866 - 519))
          | (1ULL << (MySqlParser::CP932 - 519))
          | (1ULL << (MySqlParser::DEC8 - 519))
          | (1ULL << (MySqlParser::EUCJPMS - 519))
          | (1ULL << (MySqlParser::EUCKR - 519))
          | (1ULL << (MySqlParser::GB2312 - 519))
          | (1ULL << (MySqlParser::GBK - 519))
          | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
          | (1ULL << (MySqlParser::HEBREW - 583))
          | (1ULL << (MySqlParser::HP8 - 583))
          | (1ULL << (MySqlParser::KEYBCS2 - 583))
          | (1ULL << (MySqlParser::KOI8R - 583))
          | (1ULL << (MySqlParser::KOI8U - 583))
          | (1ULL << (MySqlParser::LATIN1 - 583))
          | (1ULL << (MySqlParser::LATIN2 - 583))
          | (1ULL << (MySqlParser::LATIN5 - 583))
          | (1ULL << (MySqlParser::LATIN7 - 583))
          | (1ULL << (MySqlParser::MACCE - 583))
          | (1ULL << (MySqlParser::MACROMAN - 583))
          | (1ULL << (MySqlParser::SJIS - 583))
          | (1ULL << (MySqlParser::SWE7 - 583))
          | (1ULL << (MySqlParser::TIS620 - 583))
          | (1ULL << (MySqlParser::UCS2 - 583))
          | (1ULL << (MySqlParser::UJIS - 583))
          | (1ULL << (MySqlParser::UTF16 - 583))
          | (1ULL << (MySqlParser::UTF16LE - 583))
          | (1ULL << (MySqlParser::UTF32 - 583))
          | (1ULL << (MySqlParser::UTF8 - 583))
          | (1ULL << (MySqlParser::UTF8MB3 - 583))
          | (1ULL << (MySqlParser::UTF8MB4 - 583))
          | (1ULL << (MySqlParser::ARCHIVE - 583))
          | (1ULL << (MySqlParser::BLACKHOLE - 583))
          | (1ULL << (MySqlParser::CSV - 583))
          | (1ULL << (MySqlParser::FEDERATED - 583))
          | (1ULL << (MySqlParser::INNODB - 583))
          | (1ULL << (MySqlParser::MEMORY - 583))
          | (1ULL << (MySqlParser::MRG_MYISAM - 583))
          | (1ULL << (MySqlParser::MYISAM - 583))
          | (1ULL << (MySqlParser::NDB - 583))
          | (1ULL << (MySqlParser::NDBCLUSTER - 583))
          | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
          | (1ULL << (MySqlParser::REPEATABLE - 583))
          | (1ULL << (MySqlParser::COMMITTED - 583))
          | (1ULL << (MySqlParser::UNCOMMITTED - 583))
          | (1ULL << (MySqlParser::SERIALIZABLE - 583))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
          | (1ULL << (MySqlParser::LINESTRING - 583))
          | (1ULL << (MySqlParser::MULTILINESTRING - 583))
          | (1ULL << (MySqlParser::MULTIPOINT - 583))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
          | (1ULL << (MySqlParser::POINT - 583))
          | (1ULL << (MySqlParser::POLYGON - 583))
          | (1ULL << (MySqlParser::ABS - 583))
          | (1ULL << (MySqlParser::ACOS - 583))
          | (1ULL << (MySqlParser::ADDDATE - 583))
          | (1ULL << (MySqlParser::ADDTIME - 583))
          | (1ULL << (MySqlParser::AES_DECRYPT - 583))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
          | (1ULL << (MySqlParser::AREA - 583))
          | (1ULL << (MySqlParser::ASBINARY - 583))
          | (1ULL << (MySqlParser::ASIN - 583))
          | (1ULL << (MySqlParser::ASTEXT - 583))
          | (1ULL << (MySqlParser::ASWKB - 583))
          | (1ULL << (MySqlParser::ASWKT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
          | (1ULL << (MySqlParser::ATAN - 583))
          | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
          | (1ULL << (MySqlParser::BIN - 647))
          | (1ULL << (MySqlParser::BIT_COUNT - 647))
          | (1ULL << (MySqlParser::BIT_LENGTH - 647))
          | (1ULL << (MySqlParser::BUFFER - 647))
          | (1ULL << (MySqlParser::CEIL - 647))
          | (1ULL << (MySqlParser::CEILING - 647))
          | (1ULL << (MySqlParser::CENTROID - 647))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
          | (1ULL << (MySqlParser::CHARSET - 647))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
          | (1ULL << (MySqlParser::COERCIBILITY - 647))
          | (1ULL << (MySqlParser::COLLATION - 647))
          | (1ULL << (MySqlParser::COMPRESS - 647))
          | (1ULL << (MySqlParser::CONCAT - 647))
          | (1ULL << (MySqlParser::CONCAT_WS - 647))
          | (1ULL << (MySqlParser::CONNECTION_ID - 647))
          | (1ULL << (MySqlParser::CONV - 647))
          | (1ULL << (MySqlParser::CONVERT_TZ - 647))
          | (1ULL << (MySqlParser::COS - 647))
          | (1ULL << (MySqlParser::COT - 647))
          | (1ULL << (MySqlParser::CRC32 - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
          | (1ULL << (MySqlParser::CROSSES - 647))
          | (1ULL << (MySqlParser::DATEDIFF - 647))
          | (1ULL << (MySqlParser::DATE_FORMAT - 647))
          | (1ULL << (MySqlParser::DAYNAME - 647))
          | (1ULL << (MySqlParser::DAYOFMONTH - 647))
          | (1ULL << (MySqlParser::DAYOFWEEK - 647))
          | (1ULL << (MySqlParser::DAYOFYEAR - 647))
          | (1ULL << (MySqlParser::DECODE - 647))
          | (1ULL << (MySqlParser::DEGREES - 647))
          | (1ULL << (MySqlParser::DES_DECRYPT - 647))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
          | (1ULL << (MySqlParser::DIMENSION - 647))
          | (1ULL << (MySqlParser::DISJOINT - 647))
          | (1ULL << (MySqlParser::ELT - 647))
          | (1ULL << (MySqlParser::ENCODE - 647))
          | (1ULL << (MySqlParser::ENCRYPT - 647))
          | (1ULL << (MySqlParser::ENDPOINT - 647))
          | (1ULL << (MySqlParser::ENVELOPE - 647))
          | (1ULL << (MySqlParser::EQUALS - 647))
          | (1ULL << (MySqlParser::EXP - 647))
          | (1ULL << (MySqlParser::EXPORT_SET - 647))
          | (1ULL << (MySqlParser::EXTERIORRING - 647))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
          | (1ULL << (MySqlParser::FIELD - 647))
          | (1ULL << (MySqlParser::FIND_IN_SET - 647))
          | (1ULL << (MySqlParser::FLOOR - 647))
          | (1ULL << (MySqlParser::FORMAT - 647))
          | (1ULL << (MySqlParser::FOUND_ROWS - 647))
          | (1ULL << (MySqlParser::FROM_BASE64 - 647))
          | (1ULL << (MySqlParser::FROM_DAYS - 647))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
          | (1ULL << (MySqlParser::GET_FORMAT - 711))
          | (1ULL << (MySqlParser::GET_LOCK - 711))
          | (1ULL << (MySqlParser::GLENGTH - 711))
          | (1ULL << (MySqlParser::GREATEST - 711))
          | (1ULL << (MySqlParser::GTID_SUBSET - 711))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
          | (1ULL << (MySqlParser::HEX - 711))
          | (1ULL << (MySqlParser::IFNULL - 711))
          | (1ULL << (MySqlParser::INET6_ATON - 711))
          | (1ULL << (MySqlParser::INET6_NTOA - 711))
          | (1ULL << (MySqlParser::INET_ATON - 711))
          | (1ULL << (MySqlParser::INET_NTOA - 711))
          | (1ULL << (MySqlParser::INSTR - 711))
          | (1ULL << (MySqlParser::INTERIORRINGN - 711))
          | (1ULL << (MySqlParser::INTERSECTS - 711))
          | (1ULL << (MySqlParser::ISCLOSED - 711))
          | (1ULL << (MySqlParser::ISEMPTY - 711))
          | (1ULL << (MySqlParser::ISNULL - 711))
          | (1ULL << (MySqlParser::ISSIMPLE - 711))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
          | (1ULL << (MySqlParser::IS_IPV4 - 711))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
          | (1ULL << (MySqlParser::IS_IPV6 - 711))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
          | (1ULL << (MySqlParser::LCASE - 711))
          | (1ULL << (MySqlParser::LEAST - 711))
          | (1ULL << (MySqlParser::LENGTH - 711))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINEFROMWKB - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
          | (1ULL << (MySqlParser::LN - 711))
          | (1ULL << (MySqlParser::LOAD_FILE - 711))
          | (1ULL << (MySqlParser::LOCATE - 711))
          | (1ULL << (MySqlParser::LOG - 711))
          | (1ULL << (MySqlParser::LOG10 - 711))
          | (1ULL << (MySqlParser::LOG2 - 711))
          | (1ULL << (MySqlParser::LOWER - 711))
          | (1ULL << (MySqlParser::LPAD - 711))
          | (1ULL << (MySqlParser::LTRIM - 711))
          | (1ULL << (MySqlParser::MAKEDATE - 711))
          | (1ULL << (MySqlParser::MAKETIME - 711))
          | (1ULL << (MySqlParser::MAKE_SET - 711))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
          | (1ULL << (MySqlParser::MBRCONTAINS - 711))
          | (1ULL << (MySqlParser::MBRDISJOINT - 711))
          | (1ULL << (MySqlParser::MBREQUAL - 711))
          | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
          | (1ULL << (MySqlParser::MBROVERLAPS - 711))
          | (1ULL << (MySqlParser::MBRTOUCHES - 711))
          | (1ULL << (MySqlParser::MBRWITHIN - 711))
          | (1ULL << (MySqlParser::MD5 - 711))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
          | (1ULL << (MySqlParser::MONTHNAME - 711))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::NAME_CONST - 775))
          | (1ULL << (MySqlParser::NULLIF - 775))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
          | (1ULL << (MySqlParser::NUMPOINTS - 775))
          | (1ULL << (MySqlParser::OCT - 775))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
          | (1ULL << (MySqlParser::ORD - 775))
          | (1ULL << (MySqlParser::OVERLAPS - 775))
          | (1ULL << (MySqlParser::PERIOD_ADD - 775))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
          | (1ULL << (MySqlParser::PI - 775))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::POINTFROMWKB - 775))
          | (1ULL << (MySqlParser::POINTN - 775))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYFROMWKB - 775))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::POW - 775))
          | (1ULL << (MySqlParser::POWER - 775))
          | (1ULL << (MySqlParser::QUOTE - 775))
          | (1ULL << (MySqlParser::RADIANS - 775))
          | (1ULL << (MySqlParser::RAND - 775))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
          | (1ULL << (MySqlParser::REVERSE - 775))
          | (1ULL << (MySqlParser::ROUND - 775))
          | (1ULL << (MySqlParser::ROW_COUNT - 775))
          | (1ULL << (MySqlParser::RPAD - 775))
          | (1ULL << (MySqlParser::RTRIM - 775))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
          | (1ULL << (MySqlParser::SESSION_USER - 775))
          | (1ULL << (MySqlParser::SHA - 775))
          | (1ULL << (MySqlParser::SHA1 - 775))
          | (1ULL << (MySqlParser::SHA2 - 775))
          | (1ULL << (MySqlParser::SIGN - 775))
          | (1ULL << (MySqlParser::SIN - 775))
          | (1ULL << (MySqlParser::SLEEP - 775))
          | (1ULL << (MySqlParser::SOUNDEX - 775))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
          | (1ULL << (MySqlParser::SQRT - 775))
          | (1ULL << (MySqlParser::SRID - 775))
          | (1ULL << (MySqlParser::STARTPOINT - 775))
          | (1ULL << (MySqlParser::STRCMP - 775))
          | (1ULL << (MySqlParser::STR_TO_DATE - 775))
          | (1ULL << (MySqlParser::ST_AREA - 775))
          | (1ULL << (MySqlParser::ST_ASBINARY - 775))
          | (1ULL << (MySqlParser::ST_ASTEXT - 775))
          | (1ULL << (MySqlParser::ST_ASWKB - 775))
          | (1ULL << (MySqlParser::ST_ASWKT - 775))
          | (1ULL << (MySqlParser::ST_BUFFER - 775))
          | (1ULL << (MySqlParser::ST_CENTROID - 775))
          | (1ULL << (MySqlParser::ST_CONTAINS - 775))
          | (1ULL << (MySqlParser::ST_CROSSES - 775))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
          | (1ULL << (MySqlParser::ST_DIMENSION - 775))
          | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
          | (1ULL << (MySqlParser::ST_EQUALS - 839))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POINTN - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_SRID - 839))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
          | (1ULL << (MySqlParser::ST_TOUCHES - 839))
          | (1ULL << (MySqlParser::ST_UNION - 839))
          | (1ULL << (MySqlParser::ST_WITHIN - 839))
          | (1ULL << (MySqlParser::ST_X - 839))
          | (1ULL << (MySqlParser::ST_Y - 839))
          | (1ULL << (MySqlParser::SUBDATE - 839))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
          | (1ULL << (MySqlParser::SUBTIME - 839))
          | (1ULL << (MySqlParser::SYSTEM_USER - 839))
          | (1ULL << (MySqlParser::TAN - 839))
          | (1ULL << (MySqlParser::TIMEDIFF - 839))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
          | (1ULL << (MySqlParser::TIME_FORMAT - 839))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
          | (1ULL << (MySqlParser::TOUCHES - 839))
          | (1ULL << (MySqlParser::TO_BASE64 - 839))
          | (1ULL << (MySqlParser::TO_DAYS - 839))
          | (1ULL << (MySqlParser::TO_SECONDS - 839))
          | (1ULL << (MySqlParser::UCASE - 839))
          | (1ULL << (MySqlParser::UNCOMPRESS - 839))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
          | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
          | (1ULL << (MySqlParser::UPDATEXML - 903))
          | (1ULL << (MySqlParser::UPPER - 903))
          | (1ULL << (MySqlParser::UUID - 903))
          | (1ULL << (MySqlParser::UUID_SHORT - 903))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
          | (1ULL << (MySqlParser::VERSION - 903))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
          | (1ULL << (MySqlParser::WEEKDAY - 903))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
          | (1ULL << (MySqlParser::WITHIN - 903))
          | (1ULL << (MySqlParser::YEARWEEK - 903))
          | (1ULL << (MySqlParser::Y_FUNCTION - 903))
          | (1ULL << (MySqlParser::X_FUNCTION - 903))
          | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
          | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
          setState(1464);
          id_();
        }
        setState(1468);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::USING) {
          setState(1467);
          index_type();
        }
        setState(1470);
        index_colname_list();
        setState(1474);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::USING

        || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::KEY_BLOCK_SIZE) {
          setState(1471);
          index_option();
          setState(1476);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case MySqlParser::FULLTEXT:
      case MySqlParser::SPATIAL: {
        _localctx = dynamic_cast<Index_column_definitionContext *>(_tracker.createInstance<MySqlParser::SpecIndexContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(1477);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FULLTEXT || _la == MySqlParser::SPATIAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1479);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY) {
          setState(1478);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::INDEX

          || _la == MySqlParser::KEY)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(1482);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
          | (1ULL << (MySqlParser::TIME - 181))
          | (1ULL << (MySqlParser::TIMESTAMP - 181))
          | (1ULL << (MySqlParser::DATETIME - 181))
          | (1ULL << (MySqlParser::YEAR - 181))
          | (1ULL << (MySqlParser::TEXT - 181))
          | (1ULL << (MySqlParser::ENUM - 181))
          | (1ULL << (MySqlParser::COUNT - 181))
          | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
          | (1ULL << (MySqlParser::AFTER - 246))
          | (1ULL << (MySqlParser::ALGORITHM - 246))
          | (1ULL << (MySqlParser::ANY - 246))
          | (1ULL << (MySqlParser::AT - 246))
          | (1ULL << (MySqlParser::AUTHORS - 246))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
          | (1ULL << (MySqlParser::BEGIN - 246))
          | (1ULL << (MySqlParser::BINLOG - 246))
          | (1ULL << (MySqlParser::BIT - 246))
          | (1ULL << (MySqlParser::BTREE - 246))
          | (1ULL << (MySqlParser::CASCADED - 246))
          | (1ULL << (MySqlParser::CHAIN - 246))
          | (1ULL << (MySqlParser::CHECKSUM - 246))
          | (1ULL << (MySqlParser::CIPHER - 246))
          | (1ULL << (MySqlParser::CLIENT - 246))
          | (1ULL << (MySqlParser::COALESCE - 246))
          | (1ULL << (MySqlParser::CODE - 246))
          | (1ULL << (MySqlParser::COLUMNS - 246))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
          | (1ULL << (MySqlParser::COMMENT - 246))
          | (1ULL << (MySqlParser::COMMIT - 246))
          | (1ULL << (MySqlParser::COMPACT - 246))
          | (1ULL << (MySqlParser::COMPLETION - 246))
          | (1ULL << (MySqlParser::COMPRESSED - 246))
          | (1ULL << (MySqlParser::CONCURRENT - 246))
          | (1ULL << (MySqlParser::CONNECTION - 246))
          | (1ULL << (MySqlParser::CONSISTENT - 246))
          | (1ULL << (MySqlParser::CONTAINS - 246))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
          | (1ULL << (MySqlParser::COPY - 246))
          | (1ULL << (MySqlParser::DATA - 246))
          | (1ULL << (MySqlParser::DATAFILE - 246))
          | (1ULL << (MySqlParser::DEFINER - 246))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
          | (1ULL << (MySqlParser::DIRECTORY - 246))
          | (1ULL << (MySqlParser::DISABLE - 246))
          | (1ULL << (MySqlParser::DISCARD - 246))
          | (1ULL << (MySqlParser::DISK - 246))
          | (1ULL << (MySqlParser::DO - 246))
          | (1ULL << (MySqlParser::DUMPFILE - 246))
          | (1ULL << (MySqlParser::DUPLICATE - 246))
          | (1ULL << (MySqlParser::DYNAMIC - 246))
          | (1ULL << (MySqlParser::ENABLE - 246))
          | (1ULL << (MySqlParser::ENDS - 246))
          | (1ULL << (MySqlParser::ENGINE - 246))
          | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
          | (1ULL << (MySqlParser::ESCAPE - 311))
          | (1ULL << (MySqlParser::EVEN - 311))
          | (1ULL << (MySqlParser::EVENT - 311))
          | (1ULL << (MySqlParser::EVENTS - 311))
          | (1ULL << (MySqlParser::EVERY - 311))
          | (1ULL << (MySqlParser::EXCHANGE - 311))
          | (1ULL << (MySqlParser::EXCLUSIVE - 311))
          | (1ULL << (MySqlParser::EXPIRE - 311))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
          | (1ULL << (MySqlParser::FIELDS - 311))
          | (1ULL << (MySqlParser::FIRST - 311))
          | (1ULL << (MySqlParser::FIXED - 311))
          | (1ULL << (MySqlParser::FULL - 311))
          | (1ULL << (MySqlParser::FUNCTION - 311))
          | (1ULL << (MySqlParser::GLOBAL - 311))
          | (1ULL << (MySqlParser::GRANTS - 311))
          | (1ULL << (MySqlParser::HASH - 311))
          | (1ULL << (MySqlParser::HOST - 311))
          | (1ULL << (MySqlParser::IDENTIFIED - 311))
          | (1ULL << (MySqlParser::IMPORT - 311))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
          | (1ULL << (MySqlParser::INPLACE - 311))
          | (1ULL << (MySqlParser::INSERT_METHOD - 311))
          | (1ULL << (MySqlParser::INVOKER - 311))
          | (1ULL << (MySqlParser::ISOLATION - 311))
          | (1ULL << (MySqlParser::ISSUER - 311))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
          | (1ULL << (MySqlParser::LANGUAGE - 311))
          | (1ULL << (MySqlParser::LAST - 311))
          | (1ULL << (MySqlParser::LESS - 311))
          | (1ULL << (MySqlParser::LEVEL - 311))
          | (1ULL << (MySqlParser::LIST - 311))
          | (1ULL << (MySqlParser::LOCAL - 311))
          | (1ULL << (MySqlParser::LOGFILE - 311))
          | (1ULL << (MySqlParser::LOGS - 311))
          | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_ROWS - 391))
          | (1ULL << (MySqlParser::MAX_SIZE - 391))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
          | (1ULL << (MySqlParser::MERGE - 391))
          | (1ULL << (MySqlParser::MID - 391))
          | (1ULL << (MySqlParser::MIN_ROWS - 391))
          | (1ULL << (MySqlParser::MODIFY - 391))
          | (1ULL << (MySqlParser::MUTEX - 391))
          | (1ULL << (MySqlParser::MYSQL - 391))
          | (1ULL << (MySqlParser::NAME - 391))
          | (1ULL << (MySqlParser::NAMES - 391))
          | (1ULL << (MySqlParser::NCHAR - 391))
          | (1ULL << (MySqlParser::NO - 391))
          | (1ULL << (MySqlParser::NODEGROUP - 391))
          | (1ULL << (MySqlParser::NONE - 391))
          | (1ULL << (MySqlParser::OFFLINE - 391))
          | (1ULL << (MySqlParser::OFFSET - 391))
          | (1ULL << (MySqlParser::OJ - 391))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
          | (1ULL << (MySqlParser::ONLINE - 391))
          | (1ULL << (MySqlParser::ONLY - 391))
          | (1ULL << (MySqlParser::OPTIONS - 391))
          | (1ULL << (MySqlParser::OWNER - 391))
          | (1ULL << (MySqlParser::PACK_KEYS - 391))
          | (1ULL << (MySqlParser::PARSER - 391))
          | (1ULL << (MySqlParser::PARTIAL - 391))
          | (1ULL << (MySqlParser::PARTITIONING - 391))
          | (1ULL << (MySqlParser::PARTITIONS - 391))
          | (1ULL << (MySqlParser::PASSWORD - 391))
          | (1ULL << (MySqlParser::PLUGINS - 391))
          | (1ULL << (MySqlParser::PORT - 391))
          | (1ULL << (MySqlParser::PRESERVE - 391))
          | (1ULL << (MySqlParser::PROCESSLIST - 391))
          | (1ULL << (MySqlParser::PROFILE - 391))
          | (1ULL << (MySqlParser::PROFILES - 391))
          | (1ULL << (MySqlParser::PROXY - 391))
          | (1ULL << (MySqlParser::QUERY - 391))
          | (1ULL << (MySqlParser::QUICK - 391))
          | (1ULL << (MySqlParser::REBUILD - 391))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
          | (1ULL << (MySqlParser::REDUNDANT - 391))
          | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
          | (1ULL << (MySqlParser::REORGANIZE - 455))
          | (1ULL << (MySqlParser::REPAIR - 455))
          | (1ULL << (MySqlParser::REPLICATION - 455))
          | (1ULL << (MySqlParser::RETURNS - 455))
          | (1ULL << (MySqlParser::ROLLBACK - 455))
          | (1ULL << (MySqlParser::ROLLUP - 455))
          | (1ULL << (MySqlParser::ROW - 455))
          | (1ULL << (MySqlParser::ROWS - 455))
          | (1ULL << (MySqlParser::ROW_FORMAT - 455))
          | (1ULL << (MySqlParser::SAVEPOINT - 455))
          | (1ULL << (MySqlParser::SCHEDULE - 455))
          | (1ULL << (MySqlParser::SECURITY - 455))
          | (1ULL << (MySqlParser::SERVER - 455))
          | (1ULL << (MySqlParser::SESSION - 455))
          | (1ULL << (MySqlParser::SHARE - 455))
          | (1ULL << (MySqlParser::SHARED - 455))
          | (1ULL << (MySqlParser::SIGNED - 455))
          | (1ULL << (MySqlParser::SIMPLE - 455))
          | (1ULL << (MySqlParser::SLAVE - 455))
          | (1ULL << (MySqlParser::SNAPSHOT - 455))
          | (1ULL << (MySqlParser::SOCKET - 455))
          | (1ULL << (MySqlParser::SOME - 455))
          | (1ULL << (MySqlParser::SOUNDS - 455))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
          | (1ULL << (MySqlParser::SQL_CACHE - 455))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
          | (1ULL << (MySqlParser::START - 455))
          | (1ULL << (MySqlParser::STARTS - 455))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
          | (1ULL << (MySqlParser::STATUS - 455))
          | (1ULL << (MySqlParser::STORAGE - 455))
          | (1ULL << (MySqlParser::SUBJECT - 455))
          | (1ULL << (MySqlParser::SUBPARTITION - 455))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
          | (1ULL << (MySqlParser::TABLESPACE - 455))
          | (1ULL << (MySqlParser::TEMPORARY - 455))
          | (1ULL << (MySqlParser::TEMPTABLE - 455))
          | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
          | (1ULL << (MySqlParser::TRUNCATE - 519))
          | (1ULL << (MySqlParser::UNDEFINED - 519))
          | (1ULL << (MySqlParser::UNDOFILE - 519))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
          | (1ULL << (MySqlParser::UNKNOWN - 519))
          | (1ULL << (MySqlParser::UPGRADE - 519))
          | (1ULL << (MySqlParser::USER - 519))
          | (1ULL << (MySqlParser::VALUE - 519))
          | (1ULL << (MySqlParser::VARIABLES - 519))
          | (1ULL << (MySqlParser::VIEW - 519))
          | (1ULL << (MySqlParser::WAIT - 519))
          | (1ULL << (MySqlParser::WARNINGS - 519))
          | (1ULL << (MySqlParser::WORK - 519))
          | (1ULL << (MySqlParser::WRAPPER - 519))
          | (1ULL << (MySqlParser::X509 - 519))
          | (1ULL << (MySqlParser::XML - 519))
          | (1ULL << (MySqlParser::QUARTER - 519))
          | (1ULL << (MySqlParser::MONTH - 519))
          | (1ULL << (MySqlParser::DAY - 519))
          | (1ULL << (MySqlParser::HOUR - 519))
          | (1ULL << (MySqlParser::MINUTE - 519))
          | (1ULL << (MySqlParser::WEEK - 519))
          | (1ULL << (MySqlParser::SECOND - 519))
          | (1ULL << (MySqlParser::MICROSECOND - 519))
          | (1ULL << (MySqlParser::TABLES - 519))
          | (1ULL << (MySqlParser::ROUTINE - 519))
          | (1ULL << (MySqlParser::EXECUTE - 519))
          | (1ULL << (MySqlParser::FILE - 519))
          | (1ULL << (MySqlParser::PROCESS - 519))
          | (1ULL << (MySqlParser::RELOAD - 519))
          | (1ULL << (MySqlParser::SHUTDOWN - 519))
          | (1ULL << (MySqlParser::SUPER - 519))
          | (1ULL << (MySqlParser::PRIVILEGES - 519))
          | (1ULL << (MySqlParser::ARMSCII8 - 519))
          | (1ULL << (MySqlParser::ASCII - 519))
          | (1ULL << (MySqlParser::BIG5 - 519))
          | (1ULL << (MySqlParser::CP1250 - 519))
          | (1ULL << (MySqlParser::CP1251 - 519))
          | (1ULL << (MySqlParser::CP1256 - 519))
          | (1ULL << (MySqlParser::CP1257 - 519))
          | (1ULL << (MySqlParser::CP850 - 519))
          | (1ULL << (MySqlParser::CP852 - 519))
          | (1ULL << (MySqlParser::CP866 - 519))
          | (1ULL << (MySqlParser::CP932 - 519))
          | (1ULL << (MySqlParser::DEC8 - 519))
          | (1ULL << (MySqlParser::EUCJPMS - 519))
          | (1ULL << (MySqlParser::EUCKR - 519))
          | (1ULL << (MySqlParser::GB2312 - 519))
          | (1ULL << (MySqlParser::GBK - 519))
          | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
          | (1ULL << (MySqlParser::HEBREW - 583))
          | (1ULL << (MySqlParser::HP8 - 583))
          | (1ULL << (MySqlParser::KEYBCS2 - 583))
          | (1ULL << (MySqlParser::KOI8R - 583))
          | (1ULL << (MySqlParser::KOI8U - 583))
          | (1ULL << (MySqlParser::LATIN1 - 583))
          | (1ULL << (MySqlParser::LATIN2 - 583))
          | (1ULL << (MySqlParser::LATIN5 - 583))
          | (1ULL << (MySqlParser::LATIN7 - 583))
          | (1ULL << (MySqlParser::MACCE - 583))
          | (1ULL << (MySqlParser::MACROMAN - 583))
          | (1ULL << (MySqlParser::SJIS - 583))
          | (1ULL << (MySqlParser::SWE7 - 583))
          | (1ULL << (MySqlParser::TIS620 - 583))
          | (1ULL << (MySqlParser::UCS2 - 583))
          | (1ULL << (MySqlParser::UJIS - 583))
          | (1ULL << (MySqlParser::UTF16 - 583))
          | (1ULL << (MySqlParser::UTF16LE - 583))
          | (1ULL << (MySqlParser::UTF32 - 583))
          | (1ULL << (MySqlParser::UTF8 - 583))
          | (1ULL << (MySqlParser::UTF8MB3 - 583))
          | (1ULL << (MySqlParser::UTF8MB4 - 583))
          | (1ULL << (MySqlParser::ARCHIVE - 583))
          | (1ULL << (MySqlParser::BLACKHOLE - 583))
          | (1ULL << (MySqlParser::CSV - 583))
          | (1ULL << (MySqlParser::FEDERATED - 583))
          | (1ULL << (MySqlParser::INNODB - 583))
          | (1ULL << (MySqlParser::MEMORY - 583))
          | (1ULL << (MySqlParser::MRG_MYISAM - 583))
          | (1ULL << (MySqlParser::MYISAM - 583))
          | (1ULL << (MySqlParser::NDB - 583))
          | (1ULL << (MySqlParser::NDBCLUSTER - 583))
          | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
          | (1ULL << (MySqlParser::REPEATABLE - 583))
          | (1ULL << (MySqlParser::COMMITTED - 583))
          | (1ULL << (MySqlParser::UNCOMMITTED - 583))
          | (1ULL << (MySqlParser::SERIALIZABLE - 583))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
          | (1ULL << (MySqlParser::LINESTRING - 583))
          | (1ULL << (MySqlParser::MULTILINESTRING - 583))
          | (1ULL << (MySqlParser::MULTIPOINT - 583))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
          | (1ULL << (MySqlParser::POINT - 583))
          | (1ULL << (MySqlParser::POLYGON - 583))
          | (1ULL << (MySqlParser::ABS - 583))
          | (1ULL << (MySqlParser::ACOS - 583))
          | (1ULL << (MySqlParser::ADDDATE - 583))
          | (1ULL << (MySqlParser::ADDTIME - 583))
          | (1ULL << (MySqlParser::AES_DECRYPT - 583))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
          | (1ULL << (MySqlParser::AREA - 583))
          | (1ULL << (MySqlParser::ASBINARY - 583))
          | (1ULL << (MySqlParser::ASIN - 583))
          | (1ULL << (MySqlParser::ASTEXT - 583))
          | (1ULL << (MySqlParser::ASWKB - 583))
          | (1ULL << (MySqlParser::ASWKT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
          | (1ULL << (MySqlParser::ATAN - 583))
          | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
          | (1ULL << (MySqlParser::BIN - 647))
          | (1ULL << (MySqlParser::BIT_COUNT - 647))
          | (1ULL << (MySqlParser::BIT_LENGTH - 647))
          | (1ULL << (MySqlParser::BUFFER - 647))
          | (1ULL << (MySqlParser::CEIL - 647))
          | (1ULL << (MySqlParser::CEILING - 647))
          | (1ULL << (MySqlParser::CENTROID - 647))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
          | (1ULL << (MySqlParser::CHARSET - 647))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
          | (1ULL << (MySqlParser::COERCIBILITY - 647))
          | (1ULL << (MySqlParser::COLLATION - 647))
          | (1ULL << (MySqlParser::COMPRESS - 647))
          | (1ULL << (MySqlParser::CONCAT - 647))
          | (1ULL << (MySqlParser::CONCAT_WS - 647))
          | (1ULL << (MySqlParser::CONNECTION_ID - 647))
          | (1ULL << (MySqlParser::CONV - 647))
          | (1ULL << (MySqlParser::CONVERT_TZ - 647))
          | (1ULL << (MySqlParser::COS - 647))
          | (1ULL << (MySqlParser::COT - 647))
          | (1ULL << (MySqlParser::CRC32 - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
          | (1ULL << (MySqlParser::CROSSES - 647))
          | (1ULL << (MySqlParser::DATEDIFF - 647))
          | (1ULL << (MySqlParser::DATE_FORMAT - 647))
          | (1ULL << (MySqlParser::DAYNAME - 647))
          | (1ULL << (MySqlParser::DAYOFMONTH - 647))
          | (1ULL << (MySqlParser::DAYOFWEEK - 647))
          | (1ULL << (MySqlParser::DAYOFYEAR - 647))
          | (1ULL << (MySqlParser::DECODE - 647))
          | (1ULL << (MySqlParser::DEGREES - 647))
          | (1ULL << (MySqlParser::DES_DECRYPT - 647))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
          | (1ULL << (MySqlParser::DIMENSION - 647))
          | (1ULL << (MySqlParser::DISJOINT - 647))
          | (1ULL << (MySqlParser::ELT - 647))
          | (1ULL << (MySqlParser::ENCODE - 647))
          | (1ULL << (MySqlParser::ENCRYPT - 647))
          | (1ULL << (MySqlParser::ENDPOINT - 647))
          | (1ULL << (MySqlParser::ENVELOPE - 647))
          | (1ULL << (MySqlParser::EQUALS - 647))
          | (1ULL << (MySqlParser::EXP - 647))
          | (1ULL << (MySqlParser::EXPORT_SET - 647))
          | (1ULL << (MySqlParser::EXTERIORRING - 647))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
          | (1ULL << (MySqlParser::FIELD - 647))
          | (1ULL << (MySqlParser::FIND_IN_SET - 647))
          | (1ULL << (MySqlParser::FLOOR - 647))
          | (1ULL << (MySqlParser::FORMAT - 647))
          | (1ULL << (MySqlParser::FOUND_ROWS - 647))
          | (1ULL << (MySqlParser::FROM_BASE64 - 647))
          | (1ULL << (MySqlParser::FROM_DAYS - 647))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
          | (1ULL << (MySqlParser::GET_FORMAT - 711))
          | (1ULL << (MySqlParser::GET_LOCK - 711))
          | (1ULL << (MySqlParser::GLENGTH - 711))
          | (1ULL << (MySqlParser::GREATEST - 711))
          | (1ULL << (MySqlParser::GTID_SUBSET - 711))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
          | (1ULL << (MySqlParser::HEX - 711))
          | (1ULL << (MySqlParser::IFNULL - 711))
          | (1ULL << (MySqlParser::INET6_ATON - 711))
          | (1ULL << (MySqlParser::INET6_NTOA - 711))
          | (1ULL << (MySqlParser::INET_ATON - 711))
          | (1ULL << (MySqlParser::INET_NTOA - 711))
          | (1ULL << (MySqlParser::INSTR - 711))
          | (1ULL << (MySqlParser::INTERIORRINGN - 711))
          | (1ULL << (MySqlParser::INTERSECTS - 711))
          | (1ULL << (MySqlParser::ISCLOSED - 711))
          | (1ULL << (MySqlParser::ISEMPTY - 711))
          | (1ULL << (MySqlParser::ISNULL - 711))
          | (1ULL << (MySqlParser::ISSIMPLE - 711))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
          | (1ULL << (MySqlParser::IS_IPV4 - 711))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
          | (1ULL << (MySqlParser::IS_IPV6 - 711))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
          | (1ULL << (MySqlParser::LCASE - 711))
          | (1ULL << (MySqlParser::LEAST - 711))
          | (1ULL << (MySqlParser::LENGTH - 711))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINEFROMWKB - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
          | (1ULL << (MySqlParser::LN - 711))
          | (1ULL << (MySqlParser::LOAD_FILE - 711))
          | (1ULL << (MySqlParser::LOCATE - 711))
          | (1ULL << (MySqlParser::LOG - 711))
          | (1ULL << (MySqlParser::LOG10 - 711))
          | (1ULL << (MySqlParser::LOG2 - 711))
          | (1ULL << (MySqlParser::LOWER - 711))
          | (1ULL << (MySqlParser::LPAD - 711))
          | (1ULL << (MySqlParser::LTRIM - 711))
          | (1ULL << (MySqlParser::MAKEDATE - 711))
          | (1ULL << (MySqlParser::MAKETIME - 711))
          | (1ULL << (MySqlParser::MAKE_SET - 711))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
          | (1ULL << (MySqlParser::MBRCONTAINS - 711))
          | (1ULL << (MySqlParser::MBRDISJOINT - 711))
          | (1ULL << (MySqlParser::MBREQUAL - 711))
          | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
          | (1ULL << (MySqlParser::MBROVERLAPS - 711))
          | (1ULL << (MySqlParser::MBRTOUCHES - 711))
          | (1ULL << (MySqlParser::MBRWITHIN - 711))
          | (1ULL << (MySqlParser::MD5 - 711))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
          | (1ULL << (MySqlParser::MONTHNAME - 711))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::NAME_CONST - 775))
          | (1ULL << (MySqlParser::NULLIF - 775))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
          | (1ULL << (MySqlParser::NUMPOINTS - 775))
          | (1ULL << (MySqlParser::OCT - 775))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
          | (1ULL << (MySqlParser::ORD - 775))
          | (1ULL << (MySqlParser::OVERLAPS - 775))
          | (1ULL << (MySqlParser::PERIOD_ADD - 775))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
          | (1ULL << (MySqlParser::PI - 775))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::POINTFROMWKB - 775))
          | (1ULL << (MySqlParser::POINTN - 775))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYFROMWKB - 775))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::POW - 775))
          | (1ULL << (MySqlParser::POWER - 775))
          | (1ULL << (MySqlParser::QUOTE - 775))
          | (1ULL << (MySqlParser::RADIANS - 775))
          | (1ULL << (MySqlParser::RAND - 775))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
          | (1ULL << (MySqlParser::REVERSE - 775))
          | (1ULL << (MySqlParser::ROUND - 775))
          | (1ULL << (MySqlParser::ROW_COUNT - 775))
          | (1ULL << (MySqlParser::RPAD - 775))
          | (1ULL << (MySqlParser::RTRIM - 775))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
          | (1ULL << (MySqlParser::SESSION_USER - 775))
          | (1ULL << (MySqlParser::SHA - 775))
          | (1ULL << (MySqlParser::SHA1 - 775))
          | (1ULL << (MySqlParser::SHA2 - 775))
          | (1ULL << (MySqlParser::SIGN - 775))
          | (1ULL << (MySqlParser::SIN - 775))
          | (1ULL << (MySqlParser::SLEEP - 775))
          | (1ULL << (MySqlParser::SOUNDEX - 775))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
          | (1ULL << (MySqlParser::SQRT - 775))
          | (1ULL << (MySqlParser::SRID - 775))
          | (1ULL << (MySqlParser::STARTPOINT - 775))
          | (1ULL << (MySqlParser::STRCMP - 775))
          | (1ULL << (MySqlParser::STR_TO_DATE - 775))
          | (1ULL << (MySqlParser::ST_AREA - 775))
          | (1ULL << (MySqlParser::ST_ASBINARY - 775))
          | (1ULL << (MySqlParser::ST_ASTEXT - 775))
          | (1ULL << (MySqlParser::ST_ASWKB - 775))
          | (1ULL << (MySqlParser::ST_ASWKT - 775))
          | (1ULL << (MySqlParser::ST_BUFFER - 775))
          | (1ULL << (MySqlParser::ST_CENTROID - 775))
          | (1ULL << (MySqlParser::ST_CONTAINS - 775))
          | (1ULL << (MySqlParser::ST_CROSSES - 775))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
          | (1ULL << (MySqlParser::ST_DIMENSION - 775))
          | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
          | (1ULL << (MySqlParser::ST_EQUALS - 839))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POINTN - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_SRID - 839))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
          | (1ULL << (MySqlParser::ST_TOUCHES - 839))
          | (1ULL << (MySqlParser::ST_UNION - 839))
          | (1ULL << (MySqlParser::ST_WITHIN - 839))
          | (1ULL << (MySqlParser::ST_X - 839))
          | (1ULL << (MySqlParser::ST_Y - 839))
          | (1ULL << (MySqlParser::SUBDATE - 839))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
          | (1ULL << (MySqlParser::SUBTIME - 839))
          | (1ULL << (MySqlParser::SYSTEM_USER - 839))
          | (1ULL << (MySqlParser::TAN - 839))
          | (1ULL << (MySqlParser::TIMEDIFF - 839))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
          | (1ULL << (MySqlParser::TIME_FORMAT - 839))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
          | (1ULL << (MySqlParser::TOUCHES - 839))
          | (1ULL << (MySqlParser::TO_BASE64 - 839))
          | (1ULL << (MySqlParser::TO_DAYS - 839))
          | (1ULL << (MySqlParser::TO_SECONDS - 839))
          | (1ULL << (MySqlParser::UCASE - 839))
          | (1ULL << (MySqlParser::UNCOMPRESS - 839))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
          | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
          | (1ULL << (MySqlParser::UPDATEXML - 903))
          | (1ULL << (MySqlParser::UPPER - 903))
          | (1ULL << (MySqlParser::UUID - 903))
          | (1ULL << (MySqlParser::UUID_SHORT - 903))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
          | (1ULL << (MySqlParser::VERSION - 903))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
          | (1ULL << (MySqlParser::WEEKDAY - 903))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
          | (1ULL << (MySqlParser::WITHIN - 903))
          | (1ULL << (MySqlParser::YEARWEEK - 903))
          | (1ULL << (MySqlParser::Y_FUNCTION - 903))
          | (1ULL << (MySqlParser::X_FUNCTION - 903))
          | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
          | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
          setState(1481);
          id_();
        }
        setState(1484);
        index_colname_list();
        setState(1488);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::USING

        || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::KEY_BLOCK_SIZE) {
          setState(1485);
          index_option();
          setState(1490);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_optionContext ------------------------------------------------------------------

MySqlParser::Table_optionContext::Table_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Table_optionContext::getRuleIndex() const {
  return MySqlParser::RuleTable_option;
}

void MySqlParser::Table_optionContext::copyFrom(Table_optionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TblOptAvgRLenContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptAvgRLenContext::AVG_ROW_LENGTH() {
  return getToken(MySqlParser::AVG_ROW_LENGTH, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::TblOptAvgRLenContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::TblOptAvgRLenContext::TblOptAvgRLenContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptAvgRLenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptAvgRLen(this);
}
void MySqlParser::TblOptAvgRLenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptAvgRLen(this);
}
//----------------- TblOptChkSumContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptChkSumContext::CHECKSUM() {
  return getToken(MySqlParser::CHECKSUM, 0);
}

MySqlParser::TblOptChkSumContext::TblOptChkSumContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptChkSumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptChkSum(this);
}
void MySqlParser::TblOptChkSumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptChkSum(this);
}
//----------------- TblOptTablespaceContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptTablespaceContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::Id_Context* MySqlParser::TblOptTablespaceContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::TblOptTablespaceContext::STORAGE() {
  return getToken(MySqlParser::STORAGE, 0);
}

tree::TerminalNode* MySqlParser::TblOptTablespaceContext::DISK() {
  return getToken(MySqlParser::DISK, 0);
}

tree::TerminalNode* MySqlParser::TblOptTablespaceContext::MEMORY() {
  return getToken(MySqlParser::MEMORY, 0);
}

tree::TerminalNode* MySqlParser::TblOptTablespaceContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::TblOptTablespaceContext::TblOptTablespaceContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptTablespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptTablespace(this);
}
void MySqlParser::TblOptTablespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptTablespace(this);
}
//----------------- TblOptComprContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptComprContext::COMPRESSION() {
  return getToken(MySqlParser::COMPRESSION, 0);
}

tree::TerminalNode* MySqlParser::TblOptComprContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::TblOptComprContext::TblOptComprContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptComprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptCompr(this);
}
void MySqlParser::TblOptComprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptCompr(this);
}
//----------------- TblOptStatPersistContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptStatPersistContext::STATS_PERSISTENT() {
  return getToken(MySqlParser::STATS_PERSISTENT, 0);
}

tree::TerminalNode* MySqlParser::TblOptStatPersistContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::TblOptStatPersistContext::TblOptStatPersistContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptStatPersistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptStatPersist(this);
}
void MySqlParser::TblOptStatPersistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptStatPersist(this);
}
//----------------- TblOptRowFormatContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptRowFormatContext::ROW_FORMAT() {
  return getToken(MySqlParser::ROW_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::TblOptRowFormatContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::TblOptRowFormatContext::DYNAMIC() {
  return getToken(MySqlParser::DYNAMIC, 0);
}

tree::TerminalNode* MySqlParser::TblOptRowFormatContext::FIXED() {
  return getToken(MySqlParser::FIXED, 0);
}

tree::TerminalNode* MySqlParser::TblOptRowFormatContext::COMPRESSED() {
  return getToken(MySqlParser::COMPRESSED, 0);
}

tree::TerminalNode* MySqlParser::TblOptRowFormatContext::REDUNDANT() {
  return getToken(MySqlParser::REDUNDANT, 0);
}

tree::TerminalNode* MySqlParser::TblOptRowFormatContext::COMPACT() {
  return getToken(MySqlParser::COMPACT, 0);
}

MySqlParser::TblOptRowFormatContext::TblOptRowFormatContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptRowFormatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptRowFormat(this);
}
void MySqlParser::TblOptRowFormatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptRowFormat(this);
}
//----------------- TblOptConnContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptConnContext::CONNECTION() {
  return getToken(MySqlParser::CONNECTION, 0);
}

tree::TerminalNode* MySqlParser::TblOptConnContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::TblOptConnContext::TblOptConnContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptConnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptConn(this);
}
void MySqlParser::TblOptConnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptConn(this);
}
//----------------- TblOptStatAutoRContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptStatAutoRContext::STATS_AUTO_RECALC() {
  return getToken(MySqlParser::STATS_AUTO_RECALC, 0);
}

tree::TerminalNode* MySqlParser::TblOptStatAutoRContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::TblOptStatAutoRContext::TblOptStatAutoRContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptStatAutoRContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptStatAutoR(this);
}
void MySqlParser::TblOptStatAutoRContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptStatAutoR(this);
}
//----------------- TblOptMaxRowsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptMaxRowsContext::MAX_ROWS() {
  return getToken(MySqlParser::MAX_ROWS, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::TblOptMaxRowsContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::TblOptMaxRowsContext::TblOptMaxRowsContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptMaxRowsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptMaxRows(this);
}
void MySqlParser::TblOptMaxRowsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptMaxRows(this);
}
//----------------- TblOptEngineContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptEngineContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::Engine_nameContext* MySqlParser::TblOptEngineContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}

MySqlParser::TblOptEngineContext::TblOptEngineContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptEngineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptEngine(this);
}
void MySqlParser::TblOptEngineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptEngine(this);
}
//----------------- TblOptIndexDirContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptIndexDirContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::TblOptIndexDirContext::DIRECTORY() {
  return getToken(MySqlParser::DIRECTORY, 0);
}

tree::TerminalNode* MySqlParser::TblOptIndexDirContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::TblOptIndexDirContext::TblOptIndexDirContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptIndexDirContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptIndexDir(this);
}
void MySqlParser::TblOptIndexDirContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptIndexDir(this);
}
//----------------- TblOptStatSamplPgContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptStatSamplPgContext::STATS_SAMPLE_PAGES() {
  return getToken(MySqlParser::STATS_SAMPLE_PAGES, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::TblOptStatSamplPgContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::TblOptStatSamplPgContext::TblOptStatSamplPgContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptStatSamplPgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptStatSamplPg(this);
}
void MySqlParser::TblOptStatSamplPgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptStatSamplPg(this);
}
//----------------- TblOptDelKWContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptDelKWContext::DELAY_KEY_WRITE() {
  return getToken(MySqlParser::DELAY_KEY_WRITE, 0);
}

MySqlParser::TblOptDelKWContext::TblOptDelKWContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptDelKWContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptDelKW(this);
}
void MySqlParser::TblOptDelKWContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptDelKW(this);
}
//----------------- TblOptDataDirContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptDataDirContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::TblOptDataDirContext::DIRECTORY() {
  return getToken(MySqlParser::DIRECTORY, 0);
}

tree::TerminalNode* MySqlParser::TblOptDataDirContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::TblOptDataDirContext::TblOptDataDirContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptDataDirContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptDataDir(this);
}
void MySqlParser::TblOptDataDirContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptDataDir(this);
}
//----------------- TblOptCommentContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptCommentContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::TblOptCommentContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::TblOptCommentContext::TblOptCommentContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptCommentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptComment(this);
}
void MySqlParser::TblOptCommentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptComment(this);
}
//----------------- TblOptInsMethContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptInsMethContext::INSERT_METHOD() {
  return getToken(MySqlParser::INSERT_METHOD, 0);
}

tree::TerminalNode* MySqlParser::TblOptInsMethContext::NO() {
  return getToken(MySqlParser::NO, 0);
}

tree::TerminalNode* MySqlParser::TblOptInsMethContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::TblOptInsMethContext::LAST() {
  return getToken(MySqlParser::LAST, 0);
}

MySqlParser::TblOptInsMethContext::TblOptInsMethContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptInsMethContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptInsMeth(this);
}
void MySqlParser::TblOptInsMethContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptInsMeth(this);
}
//----------------- TblOptMinRowsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptMinRowsContext::MIN_ROWS() {
  return getToken(MySqlParser::MIN_ROWS, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::TblOptMinRowsContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::TblOptMinRowsContext::TblOptMinRowsContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptMinRowsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptMinRows(this);
}
void MySqlParser::TblOptMinRowsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptMinRows(this);
}
//----------------- TblOptUnionContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptUnionContext::UNION() {
  return getToken(MySqlParser::UNION, 0);
}

std::vector<MySqlParser::Table_nameContext *> MySqlParser::TblOptUnionContext::table_name() {
  return getRuleContexts<MySqlParser::Table_nameContext>();
}

MySqlParser::Table_nameContext* MySqlParser::TblOptUnionContext::table_name(size_t i) {
  return getRuleContext<MySqlParser::Table_nameContext>(i);
}

MySqlParser::TblOptUnionContext::TblOptUnionContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptUnionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptUnion(this);
}
void MySqlParser::TblOptUnionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptUnion(this);
}
//----------------- TblOptPasswdContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptPasswdContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::TblOptPasswdContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::TblOptPasswdContext::TblOptPasswdContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptPasswdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptPasswd(this);
}
void MySqlParser::TblOptPasswdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptPasswd(this);
}
//----------------- TblOptAuIncContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptAuIncContext::AUTO_INCREMENT() {
  return getToken(MySqlParser::AUTO_INCREMENT, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::TblOptAuIncContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::TblOptAuIncContext::TblOptAuIncContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptAuIncContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptAuInc(this);
}
void MySqlParser::TblOptAuIncContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptAuInc(this);
}
//----------------- TblOptPackKContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptPackKContext::PACK_KEYS() {
  return getToken(MySqlParser::PACK_KEYS, 0);
}

tree::TerminalNode* MySqlParser::TblOptPackKContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::TblOptPackKContext::TblOptPackKContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptPackKContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptPackK(this);
}
void MySqlParser::TblOptPackKContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptPackK(this);
}
//----------------- TblOptEncrContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptEncrContext::ENCRYPTION() {
  return getToken(MySqlParser::ENCRYPTION, 0);
}

tree::TerminalNode* MySqlParser::TblOptEncrContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::TblOptEncrContext::TblOptEncrContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptEncrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptEncr(this);
}
void MySqlParser::TblOptEncrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptEncr(this);
}
//----------------- TblOptDefCollateContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptDefCollateContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::Collation_nameContext* MySqlParser::TblOptDefCollateContext::collation_name() {
  return getRuleContext<MySqlParser::Collation_nameContext>(0);
}

tree::TerminalNode* MySqlParser::TblOptDefCollateContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::TblOptDefCollateContext::TblOptDefCollateContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptDefCollateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptDefCollate(this);
}
void MySqlParser::TblOptDefCollateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptDefCollate(this);
}
//----------------- TblOptDefCharSetContext ------------------------------------------------------------------

MySqlParser::Charset_nameContext* MySqlParser::TblOptDefCharSetContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::TblOptDefCharSetContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::TblOptDefCharSetContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::TblOptDefCharSetContext::CHARSET() {
  return getToken(MySqlParser::CHARSET, 0);
}

tree::TerminalNode* MySqlParser::TblOptDefCharSetContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::TblOptDefCharSetContext::TblOptDefCharSetContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptDefCharSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptDefCharSet(this);
}
void MySqlParser::TblOptDefCharSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptDefCharSet(this);
}
//----------------- TblOptKeyBlockSzContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TblOptKeyBlockSzContext::KEY_BLOCK_SIZE() {
  return getToken(MySqlParser::KEY_BLOCK_SIZE, 0);
}

MySqlParser::Filesize_literalContext* MySqlParser::TblOptKeyBlockSzContext::filesize_literal() {
  return getRuleContext<MySqlParser::Filesize_literalContext>(0);
}

MySqlParser::TblOptKeyBlockSzContext::TblOptKeyBlockSzContext(Table_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::TblOptKeyBlockSzContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTblOptKeyBlockSz(this);
}
void MySqlParser::TblOptKeyBlockSzContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTblOptKeyBlockSz(this);
}
MySqlParser::Table_optionContext* MySqlParser::table_option() {
  Table_optionContext *_localctx = _tracker.createInstance<Table_optionContext>(_ctx, getState());
  enterRule(_localctx, 92, MySqlParser::RuleTable_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1641);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptEngineContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1493);
      match(MySqlParser::ENGINE);
      setState(1495);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1494);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1497);
      engine_name();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptAuIncContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1498);
      match(MySqlParser::AUTO_INCREMENT);
      setState(1500);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1499);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1502);
      decimal_literal();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptAvgRLenContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1503);
      match(MySqlParser::AVG_ROW_LENGTH);
      setState(1505);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1504);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1507);
      decimal_literal();
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptDefCharSetContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1509);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DEFAULT) {
        setState(1508);
        match(MySqlParser::DEFAULT);
      }
      setState(1514);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CHARACTER: {
          setState(1511);
          match(MySqlParser::CHARACTER);
          setState(1512);
          match(MySqlParser::SET);
          break;
        }

        case MySqlParser::CHARSET: {
          setState(1513);
          match(MySqlParser::CHARSET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1517);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1516);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1519);
      charset_name();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptChkSumContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1520);
      match(MySqlParser::CHECKSUM);
      setState(1522);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1521);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1524);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ZERO_DECIMAL

      || _la == MySqlParser::ONE_DECIMAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 6: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptDefCollateContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(1526);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DEFAULT) {
        setState(1525);
        match(MySqlParser::DEFAULT);
      }
      setState(1528);
      match(MySqlParser::COLLATE);
      setState(1530);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1529);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1532);
      collation_name();
      break;
    }

    case 7: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptCommentContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(1533);
      match(MySqlParser::COMMENT);
      setState(1535);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1534);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1537);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 8: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptComprContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(1538);
      match(MySqlParser::COMPRESSION);
      setState(1540);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1539);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1542);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 9: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptConnContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(1543);
      match(MySqlParser::CONNECTION);
      setState(1545);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1544);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1547);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 10: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptDataDirContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(1548);
      match(MySqlParser::DATA);
      setState(1549);
      match(MySqlParser::DIRECTORY);
      setState(1551);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1550);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1553);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 11: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptDelKWContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(1554);
      match(MySqlParser::DELAY_KEY_WRITE);
      setState(1556);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1555);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1558);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ZERO_DECIMAL

      || _la == MySqlParser::ONE_DECIMAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 12: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptEncrContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(1559);
      match(MySqlParser::ENCRYPTION);
      setState(1561);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1560);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1563);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 13: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptIndexDirContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(1564);
      match(MySqlParser::INDEX);
      setState(1565);
      match(MySqlParser::DIRECTORY);
      setState(1567);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1566);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1569);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 14: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptInsMethContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(1570);
      match(MySqlParser::INSERT_METHOD);
      setState(1572);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1571);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1574);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FIRST

      || _la == MySqlParser::LAST || _la == MySqlParser::NO)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 15: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptKeyBlockSzContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(1575);
      match(MySqlParser::KEY_BLOCK_SIZE);
      setState(1577);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1576);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1579);
      filesize_literal();
      break;
    }

    case 16: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptMaxRowsContext>(_localctx));
      enterOuterAlt(_localctx, 16);
      setState(1580);
      match(MySqlParser::MAX_ROWS);
      setState(1582);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1581);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1584);
      decimal_literal();
      break;
    }

    case 17: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptMinRowsContext>(_localctx));
      enterOuterAlt(_localctx, 17);
      setState(1585);
      match(MySqlParser::MIN_ROWS);
      setState(1587);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1586);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1589);
      decimal_literal();
      break;
    }

    case 18: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptPackKContext>(_localctx));
      enterOuterAlt(_localctx, 18);
      setState(1590);
      match(MySqlParser::PACK_KEYS);
      setState(1592);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1591);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1594);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::ZERO_DECIMAL

      || _la == MySqlParser::ONE_DECIMAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 19: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptPasswdContext>(_localctx));
      enterOuterAlt(_localctx, 19);
      setState(1595);
      match(MySqlParser::PASSWORD);
      setState(1597);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1596);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1599);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 20: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptRowFormatContext>(_localctx));
      enterOuterAlt(_localctx, 20);
      setState(1600);
      match(MySqlParser::ROW_FORMAT);
      setState(1602);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1601);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1604);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || ((((_la - 277) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 277)) & ((1ULL << (MySqlParser::COMPACT - 277))
        | (1ULL << (MySqlParser::COMPRESSED - 277))
        | (1ULL << (MySqlParser::DYNAMIC - 277))
        | (1ULL << (MySqlParser::FIXED - 277)))) != 0) || _la == MySqlParser::REDUNDANT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 21: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptStatAutoRContext>(_localctx));
      enterOuterAlt(_localctx, 21);
      setState(1605);
      match(MySqlParser::STATS_AUTO_RECALC);
      setState(1607);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1606);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1609);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::ZERO_DECIMAL

      || _la == MySqlParser::ONE_DECIMAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 22: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptStatPersistContext>(_localctx));
      enterOuterAlt(_localctx, 22);
      setState(1610);
      match(MySqlParser::STATS_PERSISTENT);
      setState(1612);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1611);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1614);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::ZERO_DECIMAL

      || _la == MySqlParser::ONE_DECIMAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 23: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptStatSamplPgContext>(_localctx));
      enterOuterAlt(_localctx, 23);
      setState(1615);
      match(MySqlParser::STATS_SAMPLE_PAGES);
      setState(1617);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1616);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1619);
      decimal_literal();
      break;
    }

    case 24: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptTablespaceContext>(_localctx));
      enterOuterAlt(_localctx, 24);
      setState(1620);
      match(MySqlParser::TABLESPACE);
      setState(1621);
      id_();
      setState(1624);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::STORAGE) {
        setState(1622);
        match(MySqlParser::STORAGE);
        setState(1623);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::DISK || _la == MySqlParser::MEMORY)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      break;
    }

    case 25: {
      _localctx = dynamic_cast<Table_optionContext *>(_tracker.createInstance<MySqlParser::TblOptUnionContext>(_localctx));
      enterOuterAlt(_localctx, 25);
      setState(1626);
      match(MySqlParser::UNION);
      setState(1628);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1627);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1630);
      match(MySqlParser::LR_BRACKET);
      setState(1631);
      table_name();
      setState(1636);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(1632);
        match(MySqlParser::COMMA);
        setState(1633);
        table_name();
        setState(1638);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1639);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_optionsContext ------------------------------------------------------------------

MySqlParser::Partition_optionsContext::Partition_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Partition_optionsContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Partition_optionsContext::BY() {
  return getTokens(MySqlParser::BY);
}

tree::TerminalNode* MySqlParser::Partition_optionsContext::BY(size_t i) {
  return getToken(MySqlParser::BY, i);
}

MySqlParser::Partition_function_definitionContext* MySqlParser::Partition_optionsContext::partition_function_definition() {
  return getRuleContext<MySqlParser::Partition_function_definitionContext>(0);
}

tree::TerminalNode* MySqlParser::Partition_optionsContext::PARTITIONS() {
  return getToken(MySqlParser::PARTITIONS, 0);
}

tree::TerminalNode* MySqlParser::Partition_optionsContext::SUBPARTITION() {
  return getToken(MySqlParser::SUBPARTITION, 0);
}

MySqlParser::Linear_partition_func_defContext* MySqlParser::Partition_optionsContext::linear_partition_func_def() {
  return getRuleContext<MySqlParser::Linear_partition_func_defContext>(0);
}

std::vector<MySqlParser::Partition_defContext *> MySqlParser::Partition_optionsContext::partition_def() {
  return getRuleContexts<MySqlParser::Partition_defContext>();
}

MySqlParser::Partition_defContext* MySqlParser::Partition_optionsContext::partition_def(size_t i) {
  return getRuleContext<MySqlParser::Partition_defContext>(i);
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::Partition_optionsContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::Partition_optionsContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}

tree::TerminalNode* MySqlParser::Partition_optionsContext::SUBPARTITIONS() {
  return getToken(MySqlParser::SUBPARTITIONS, 0);
}


size_t MySqlParser::Partition_optionsContext::getRuleIndex() const {
  return MySqlParser::RulePartition_options;
}

void MySqlParser::Partition_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_options(this);
}

void MySqlParser::Partition_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_options(this);
}

MySqlParser::Partition_optionsContext* MySqlParser::partition_options() {
  Partition_optionsContext *_localctx = _tracker.createInstance<Partition_optionsContext>(_ctx, getState());
  enterRule(_localctx, 94, MySqlParser::RulePartition_options);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1643);
    match(MySqlParser::PARTITION);
    setState(1644);
    match(MySqlParser::BY);
    setState(1645);
    partition_function_definition();
    setState(1648);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITIONS) {
      setState(1646);
      match(MySqlParser::PARTITIONS);
      setState(1647);
      dynamic_cast<Partition_optionsContext *>(_localctx)->part_num = decimal_literal();
    }
    setState(1657);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::SUBPARTITION) {
      setState(1650);
      match(MySqlParser::SUBPARTITION);
      setState(1651);
      match(MySqlParser::BY);
      setState(1652);
      linear_partition_func_def();
      setState(1655);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::SUBPARTITIONS) {
        setState(1653);
        match(MySqlParser::SUBPARTITIONS);
        setState(1654);
        dynamic_cast<Partition_optionsContext *>(_localctx)->subpart_num = decimal_literal();
      }
    }
    setState(1670);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
    case 1: {
      setState(1659);
      match(MySqlParser::LR_BRACKET);
      setState(1660);
      partition_def();
      setState(1665);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(1661);
        match(MySqlParser::COMMA);
        setState(1662);
        partition_def();
        setState(1667);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1668);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_function_definitionContext ------------------------------------------------------------------

MySqlParser::Partition_function_definitionContext::Partition_function_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Linear_partition_func_defContext* MySqlParser::Partition_function_definitionContext::linear_partition_func_def() {
  return getRuleContext<MySqlParser::Linear_partition_func_defContext>(0);
}

tree::TerminalNode* MySqlParser::Partition_function_definitionContext::RANGE() {
  return getToken(MySqlParser::RANGE, 0);
}

tree::TerminalNode* MySqlParser::Partition_function_definitionContext::LIST() {
  return getToken(MySqlParser::LIST, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Partition_function_definitionContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::Partition_function_definitionContext::COLUMNS() {
  return getToken(MySqlParser::COLUMNS, 0);
}

MySqlParser::Id_listContext* MySqlParser::Partition_function_definitionContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}


size_t MySqlParser::Partition_function_definitionContext::getRuleIndex() const {
  return MySqlParser::RulePartition_function_definition;
}

void MySqlParser::Partition_function_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_function_definition(this);
}

void MySqlParser::Partition_function_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_function_definition(this);
}

MySqlParser::Partition_function_definitionContext* MySqlParser::partition_function_definition() {
  Partition_function_definitionContext *_localctx = _tracker.createInstance<Partition_function_definitionContext>(_ctx, getState());
  enterRule(_localctx, 96, MySqlParser::RulePartition_function_definition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1685);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::KEY:
      case MySqlParser::LINEAR:
      case MySqlParser::HASH: {
        enterOuterAlt(_localctx, 1);
        setState(1672);
        linear_partition_func_def();
        break;
      }

      case MySqlParser::RANGE:
      case MySqlParser::LIST: {
        enterOuterAlt(_localctx, 2);
        setState(1673);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::RANGE || _la == MySqlParser::LIST)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1683);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::LR_BRACKET: {
            setState(1674);
            match(MySqlParser::LR_BRACKET);
            setState(1675);
            expression(0);
            setState(1676);
            match(MySqlParser::RR_BRACKET);
            break;
          }

          case MySqlParser::COLUMNS: {
            setState(1678);
            match(MySqlParser::COLUMNS);
            setState(1679);
            match(MySqlParser::LR_BRACKET);
            setState(1680);
            id_list();
            setState(1681);
            match(MySqlParser::RR_BRACKET);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Linear_partition_func_defContext ------------------------------------------------------------------

MySqlParser::Linear_partition_func_defContext::Linear_partition_func_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Linear_partition_func_defContext::HASH() {
  return getToken(MySqlParser::HASH, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Linear_partition_func_defContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::Linear_partition_func_defContext::LINEAR() {
  return getToken(MySqlParser::LINEAR, 0);
}

tree::TerminalNode* MySqlParser::Linear_partition_func_defContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::Id_listContext* MySqlParser::Linear_partition_func_defContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::Linear_partition_func_defContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}


size_t MySqlParser::Linear_partition_func_defContext::getRuleIndex() const {
  return MySqlParser::RuleLinear_partition_func_def;
}

void MySqlParser::Linear_partition_func_defContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinear_partition_func_def(this);
}

void MySqlParser::Linear_partition_func_defContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinear_partition_func_def(this);
}

MySqlParser::Linear_partition_func_defContext* MySqlParser::linear_partition_func_def() {
  Linear_partition_func_defContext *_localctx = _tracker.createInstance<Linear_partition_func_defContext>(_ctx, getState());
  enterRule(_localctx, 98, MySqlParser::RuleLinear_partition_func_def);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1708);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1688);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LINEAR) {
        setState(1687);
        match(MySqlParser::LINEAR);
      }
      setState(1690);
      match(MySqlParser::HASH);
      setState(1691);
      match(MySqlParser::LR_BRACKET);
      setState(1692);
      expression(0);
      setState(1693);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1696);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LINEAR) {
        setState(1695);
        match(MySqlParser::LINEAR);
      }
      setState(1698);
      match(MySqlParser::KEY);
      setState(1702);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ALGORITHM) {
        setState(1699);
        match(MySqlParser::ALGORITHM);
        setState(1700);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(1701);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::ONE_DECIMAL

        || _la == MySqlParser::TWO_DECIMAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1704);
      match(MySqlParser::LR_BRACKET);
      setState(1705);
      id_list();
      setState(1706);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_defContext ------------------------------------------------------------------

MySqlParser::Partition_defContext::Partition_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Partition_defContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::Partition_defContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::Partition_defContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

tree::TerminalNode* MySqlParser::Partition_defContext::VALUES() {
  return getToken(MySqlParser::VALUES, 0);
}

tree::TerminalNode* MySqlParser::Partition_defContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::Engine_nameContext* MySqlParser::Partition_defContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Partition_defContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::Partition_defContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Partition_defContext::DIRECTORY() {
  return getTokens(MySqlParser::DIRECTORY);
}

tree::TerminalNode* MySqlParser::Partition_defContext::DIRECTORY(size_t i) {
  return getToken(MySqlParser::DIRECTORY, i);
}

tree::TerminalNode* MySqlParser::Partition_defContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::Partition_defContext::MAX_ROWS() {
  return getToken(MySqlParser::MAX_ROWS, 0);
}

tree::TerminalNode* MySqlParser::Partition_defContext::MIN_ROWS() {
  return getToken(MySqlParser::MIN_ROWS, 0);
}

tree::TerminalNode* MySqlParser::Partition_defContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

tree::TerminalNode* MySqlParser::Partition_defContext::NODEGROUP() {
  return getToken(MySqlParser::NODEGROUP, 0);
}

std::vector<MySqlParser::Subpartition_defContext *> MySqlParser::Partition_defContext::subpartition_def() {
  return getRuleContexts<MySqlParser::Subpartition_defContext>();
}

MySqlParser::Subpartition_defContext* MySqlParser::Partition_defContext::subpartition_def(size_t i) {
  return getRuleContext<MySqlParser::Subpartition_defContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::Partition_defContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::Partition_defContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::Partition_defContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::Partition_defContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}

tree::TerminalNode* MySqlParser::Partition_defContext::LESS() {
  return getToken(MySqlParser::LESS, 0);
}

tree::TerminalNode* MySqlParser::Partition_defContext::THAN() {
  return getToken(MySqlParser::THAN, 0);
}

tree::TerminalNode* MySqlParser::Partition_defContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

MySqlParser::Constant_listContext* MySqlParser::Partition_defContext::constant_list() {
  return getRuleContext<MySqlParser::Constant_listContext>(0);
}

tree::TerminalNode* MySqlParser::Partition_defContext::STORAGE() {
  return getToken(MySqlParser::STORAGE, 0);
}

tree::TerminalNode* MySqlParser::Partition_defContext::MAXVALUE() {
  return getToken(MySqlParser::MAXVALUE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Partition_defContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::Partition_defContext::getRuleIndex() const {
  return MySqlParser::RulePartition_def;
}

void MySqlParser::Partition_defContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_def(this);
}

void MySqlParser::Partition_defContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_def(this);
}

MySqlParser::Partition_defContext* MySqlParser::partition_def() {
  Partition_defContext *_localctx = _tracker.createInstance<Partition_defContext>(_ctx, getState());
  enterRule(_localctx, 100, MySqlParser::RulePartition_def);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1710);
    match(MySqlParser::PARTITION);
    setState(1711);
    id_();
    setState(1732);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::VALUES) {
      setState(1712);
      match(MySqlParser::VALUES);
      setState(1730);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LESS: {
          setState(1713);
          match(MySqlParser::LESS);
          setState(1714);
          match(MySqlParser::THAN);
          setState(1723);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case MySqlParser::LR_BRACKET: {
              setState(1715);
              match(MySqlParser::LR_BRACKET);
              setState(1718);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
              case 1: {
                setState(1716);
                expression(0);
                break;
              }

              case 2: {
                setState(1717);
                constant_list();
                break;
              }

              }
              setState(1720);
              match(MySqlParser::RR_BRACKET);
              break;
            }

            case MySqlParser::MAXVALUE: {
              setState(1722);
              match(MySqlParser::MAXVALUE);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          break;
        }

        case MySqlParser::IN: {
          setState(1725);
          match(MySqlParser::IN);
          setState(1726);
          match(MySqlParser::LR_BRACKET);
          setState(1727);
          constant_list();
          setState(1728);
          match(MySqlParser::RR_BRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
    }
    setState(1742);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ENGINE || _la == MySqlParser::STORAGE) {
      setState(1735);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::STORAGE) {
        setState(1734);
        match(MySqlParser::STORAGE);
      }
      setState(1737);
      match(MySqlParser::ENGINE);
      setState(1739);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1738);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1741);
      engine_name();
    }
    setState(1749);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMENT) {
      setState(1744);
      match(MySqlParser::COMMENT);
      setState(1746);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1745);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1748);
      dynamic_cast<Partition_defContext *>(_localctx)->comment = match(MySqlParser::STRING_LITERAL);
    }
    setState(1757);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DATA) {
      setState(1751);
      match(MySqlParser::DATA);
      setState(1752);
      match(MySqlParser::DIRECTORY);
      setState(1754);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1753);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1756);
      dynamic_cast<Partition_defContext *>(_localctx)->data_dir = match(MySqlParser::STRING_LITERAL);
    }
    setState(1765);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INDEX) {
      setState(1759);
      match(MySqlParser::INDEX);
      setState(1760);
      match(MySqlParser::DIRECTORY);
      setState(1762);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1761);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1764);
      dynamic_cast<Partition_defContext *>(_localctx)->index_dir = match(MySqlParser::STRING_LITERAL);
    }
    setState(1772);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::MAX_ROWS) {
      setState(1767);
      match(MySqlParser::MAX_ROWS);
      setState(1769);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1768);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1771);
      dynamic_cast<Partition_defContext *>(_localctx)->max_row_num = decimal_literal();
    }
    setState(1779);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::MIN_ROWS) {
      setState(1774);
      match(MySqlParser::MIN_ROWS);
      setState(1776);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1775);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1778);
      dynamic_cast<Partition_defContext *>(_localctx)->min_row_num = decimal_literal();
    }
    setState(1786);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::TABLESPACE) {
      setState(1781);
      match(MySqlParser::TABLESPACE);
      setState(1783);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1782);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1785);
      dynamic_cast<Partition_defContext *>(_localctx)->tblspace_id = id_();
    }
    setState(1793);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NODEGROUP) {
      setState(1788);
      match(MySqlParser::NODEGROUP);
      setState(1790);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1789);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1792);
      dynamic_cast<Partition_defContext *>(_localctx)->nodegroup_id = id_();
    }
    setState(1803);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::SUBPARTITION) {
      setState(1795);
      subpartition_def();
      setState(1800);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1796);
          match(MySqlParser::COMMA);
          setState(1797);
          subpartition_def(); 
        }
        setState(1802);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subpartition_defContext ------------------------------------------------------------------

MySqlParser::Subpartition_defContext::Subpartition_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::SUBPARTITION() {
  return getToken(MySqlParser::SUBPARTITION, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::Subpartition_defContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::Subpartition_defContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::Engine_nameContext* MySqlParser::Subpartition_defContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Subpartition_defContext::DIRECTORY() {
  return getTokens(MySqlParser::DIRECTORY);
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::DIRECTORY(size_t i) {
  return getToken(MySqlParser::DIRECTORY, i);
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::MAX_ROWS() {
  return getToken(MySqlParser::MAX_ROWS, 0);
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::MIN_ROWS() {
  return getToken(MySqlParser::MIN_ROWS, 0);
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::NODEGROUP() {
  return getToken(MySqlParser::NODEGROUP, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Subpartition_defContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::Subpartition_defContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::Subpartition_defContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}

tree::TerminalNode* MySqlParser::Subpartition_defContext::STORAGE() {
  return getToken(MySqlParser::STORAGE, 0);
}


size_t MySqlParser::Subpartition_defContext::getRuleIndex() const {
  return MySqlParser::RuleSubpartition_def;
}

void MySqlParser::Subpartition_defContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubpartition_def(this);
}

void MySqlParser::Subpartition_defContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubpartition_def(this);
}

MySqlParser::Subpartition_defContext* MySqlParser::subpartition_def() {
  Subpartition_defContext *_localctx = _tracker.createInstance<Subpartition_defContext>(_ctx, getState());
  enterRule(_localctx, 102, MySqlParser::RuleSubpartition_def);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1805);
    match(MySqlParser::SUBPARTITION);
    setState(1806);
    id_();
    setState(1815);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ENGINE || _la == MySqlParser::STORAGE) {
      setState(1808);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::STORAGE) {
        setState(1807);
        match(MySqlParser::STORAGE);
      }
      setState(1810);
      match(MySqlParser::ENGINE);
      setState(1812);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1811);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1814);
      engine_name();
    }
    setState(1822);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMENT) {
      setState(1817);
      match(MySqlParser::COMMENT);
      setState(1819);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1818);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1821);
      dynamic_cast<Subpartition_defContext *>(_localctx)->comment = match(MySqlParser::STRING_LITERAL);
    }
    setState(1830);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DATA) {
      setState(1824);
      match(MySqlParser::DATA);
      setState(1825);
      match(MySqlParser::DIRECTORY);
      setState(1827);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1826);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1829);
      dynamic_cast<Subpartition_defContext *>(_localctx)->data_dir = match(MySqlParser::STRING_LITERAL);
    }
    setState(1838);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INDEX) {
      setState(1832);
      match(MySqlParser::INDEX);
      setState(1833);
      match(MySqlParser::DIRECTORY);
      setState(1835);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1834);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1837);
      dynamic_cast<Subpartition_defContext *>(_localctx)->index_dir = match(MySqlParser::STRING_LITERAL);
    }
    setState(1845);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::MAX_ROWS) {
      setState(1840);
      match(MySqlParser::MAX_ROWS);
      setState(1842);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1841);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1844);
      dynamic_cast<Subpartition_defContext *>(_localctx)->max_row_num = decimal_literal();
    }
    setState(1852);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::MIN_ROWS) {
      setState(1847);
      match(MySqlParser::MIN_ROWS);
      setState(1849);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1848);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1851);
      dynamic_cast<Subpartition_defContext *>(_localctx)->min_row_num = decimal_literal();
    }
    setState(1859);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::TABLESPACE) {
      setState(1854);
      match(MySqlParser::TABLESPACE);
      setState(1856);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1855);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1858);
      dynamic_cast<Subpartition_defContext *>(_localctx)->tblspace_id = id_();
    }
    setState(1866);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NODEGROUP) {
      setState(1861);
      match(MySqlParser::NODEGROUP);
      setState(1863);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1862);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1865);
      dynamic_cast<Subpartition_defContext *>(_localctx)->nodegroup_id = id_();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_databaseContext ------------------------------------------------------------------

MySqlParser::Alter_databaseContext::Alter_databaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Alter_databaseContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_database;
}

void MySqlParser::Alter_databaseContext::copyFrom(Alter_databaseContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AlterDbUpgradeNameContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterDbUpgradeNameContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

MySqlParser::Id_Context* MySqlParser::AlterDbUpgradeNameContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::AlterDbUpgradeNameContext::UPGRADE() {
  return getToken(MySqlParser::UPGRADE, 0);
}

tree::TerminalNode* MySqlParser::AlterDbUpgradeNameContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::AlterDbUpgradeNameContext::DIRECTORY() {
  return getToken(MySqlParser::DIRECTORY, 0);
}

tree::TerminalNode* MySqlParser::AlterDbUpgradeNameContext::NAME() {
  return getToken(MySqlParser::NAME, 0);
}

tree::TerminalNode* MySqlParser::AlterDbUpgradeNameContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::AlterDbUpgradeNameContext::SCHEMA() {
  return getToken(MySqlParser::SCHEMA, 0);
}

MySqlParser::AlterDbUpgradeNameContext::AlterDbUpgradeNameContext(Alter_databaseContext *ctx) { copyFrom(ctx); }

void MySqlParser::AlterDbUpgradeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterDbUpgradeName(this);
}
void MySqlParser::AlterDbUpgradeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterDbUpgradeName(this);
}
//----------------- AlterDbContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterDbContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterDbContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::AlterDbContext::SCHEMA() {
  return getToken(MySqlParser::SCHEMA, 0);
}

MySqlParser::Id_Context* MySqlParser::AlterDbContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

std::vector<MySqlParser::Create_database_optionContext *> MySqlParser::AlterDbContext::create_database_option() {
  return getRuleContexts<MySqlParser::Create_database_optionContext>();
}

MySqlParser::Create_database_optionContext* MySqlParser::AlterDbContext::create_database_option(size_t i) {
  return getRuleContext<MySqlParser::Create_database_optionContext>(i);
}

MySqlParser::AlterDbContext::AlterDbContext(Alter_databaseContext *ctx) { copyFrom(ctx); }

void MySqlParser::AlterDbContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterDb(this);
}
void MySqlParser::AlterDbContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterDb(this);
}
MySqlParser::Alter_databaseContext* MySqlParser::alter_database() {
  Alter_databaseContext *_localctx = _tracker.createInstance<Alter_databaseContext>(_ctx, getState());
  enterRule(_localctx, 104, MySqlParser::RuleAlter_database);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(1886);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Alter_databaseContext *>(_tracker.createInstance<MySqlParser::AlterDbContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1868);
      match(MySqlParser::ALTER);
      setState(1869);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DATABASE || _la == MySqlParser::SCHEMA)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1871);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LEFT

      || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
        | (1ULL << (MySqlParser::TIME - 181))
        | (1ULL << (MySqlParser::TIMESTAMP - 181))
        | (1ULL << (MySqlParser::DATETIME - 181))
        | (1ULL << (MySqlParser::YEAR - 181))
        | (1ULL << (MySqlParser::TEXT - 181))
        | (1ULL << (MySqlParser::ENUM - 181))
        | (1ULL << (MySqlParser::COUNT - 181))
        | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
        | (1ULL << (MySqlParser::AFTER - 246))
        | (1ULL << (MySqlParser::ALGORITHM - 246))
        | (1ULL << (MySqlParser::ANY - 246))
        | (1ULL << (MySqlParser::AT - 246))
        | (1ULL << (MySqlParser::AUTHORS - 246))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
        | (1ULL << (MySqlParser::BEGIN - 246))
        | (1ULL << (MySqlParser::BINLOG - 246))
        | (1ULL << (MySqlParser::BIT - 246))
        | (1ULL << (MySqlParser::BTREE - 246))
        | (1ULL << (MySqlParser::CASCADED - 246))
        | (1ULL << (MySqlParser::CHAIN - 246))
        | (1ULL << (MySqlParser::CHECKSUM - 246))
        | (1ULL << (MySqlParser::CIPHER - 246))
        | (1ULL << (MySqlParser::CLIENT - 246))
        | (1ULL << (MySqlParser::COALESCE - 246))
        | (1ULL << (MySqlParser::CODE - 246))
        | (1ULL << (MySqlParser::COLUMNS - 246))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
        | (1ULL << (MySqlParser::COMMENT - 246))
        | (1ULL << (MySqlParser::COMMIT - 246))
        | (1ULL << (MySqlParser::COMPACT - 246))
        | (1ULL << (MySqlParser::COMPLETION - 246))
        | (1ULL << (MySqlParser::COMPRESSED - 246))
        | (1ULL << (MySqlParser::CONCURRENT - 246))
        | (1ULL << (MySqlParser::CONNECTION - 246))
        | (1ULL << (MySqlParser::CONSISTENT - 246))
        | (1ULL << (MySqlParser::CONTAINS - 246))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
        | (1ULL << (MySqlParser::COPY - 246))
        | (1ULL << (MySqlParser::DATA - 246))
        | (1ULL << (MySqlParser::DATAFILE - 246))
        | (1ULL << (MySqlParser::DEFINER - 246))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
        | (1ULL << (MySqlParser::DIRECTORY - 246))
        | (1ULL << (MySqlParser::DISABLE - 246))
        | (1ULL << (MySqlParser::DISCARD - 246))
        | (1ULL << (MySqlParser::DISK - 246))
        | (1ULL << (MySqlParser::DO - 246))
        | (1ULL << (MySqlParser::DUMPFILE - 246))
        | (1ULL << (MySqlParser::DUPLICATE - 246))
        | (1ULL << (MySqlParser::DYNAMIC - 246))
        | (1ULL << (MySqlParser::ENABLE - 246))
        | (1ULL << (MySqlParser::ENDS - 246))
        | (1ULL << (MySqlParser::ENGINE - 246))
        | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
        | (1ULL << (MySqlParser::ESCAPE - 311))
        | (1ULL << (MySqlParser::EVEN - 311))
        | (1ULL << (MySqlParser::EVENT - 311))
        | (1ULL << (MySqlParser::EVENTS - 311))
        | (1ULL << (MySqlParser::EVERY - 311))
        | (1ULL << (MySqlParser::EXCHANGE - 311))
        | (1ULL << (MySqlParser::EXCLUSIVE - 311))
        | (1ULL << (MySqlParser::EXPIRE - 311))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
        | (1ULL << (MySqlParser::FIELDS - 311))
        | (1ULL << (MySqlParser::FIRST - 311))
        | (1ULL << (MySqlParser::FIXED - 311))
        | (1ULL << (MySqlParser::FULL - 311))
        | (1ULL << (MySqlParser::FUNCTION - 311))
        | (1ULL << (MySqlParser::GLOBAL - 311))
        | (1ULL << (MySqlParser::GRANTS - 311))
        | (1ULL << (MySqlParser::HASH - 311))
        | (1ULL << (MySqlParser::HOST - 311))
        | (1ULL << (MySqlParser::IDENTIFIED - 311))
        | (1ULL << (MySqlParser::IMPORT - 311))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
        | (1ULL << (MySqlParser::INPLACE - 311))
        | (1ULL << (MySqlParser::INSERT_METHOD - 311))
        | (1ULL << (MySqlParser::INVOKER - 311))
        | (1ULL << (MySqlParser::ISOLATION - 311))
        | (1ULL << (MySqlParser::ISSUER - 311))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
        | (1ULL << (MySqlParser::LANGUAGE - 311))
        | (1ULL << (MySqlParser::LAST - 311))
        | (1ULL << (MySqlParser::LESS - 311))
        | (1ULL << (MySqlParser::LEVEL - 311))
        | (1ULL << (MySqlParser::LIST - 311))
        | (1ULL << (MySqlParser::LOCAL - 311))
        | (1ULL << (MySqlParser::LOGFILE - 311))
        | (1ULL << (MySqlParser::LOGS - 311))
        | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_ROWS - 391))
        | (1ULL << (MySqlParser::MAX_SIZE - 391))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
        | (1ULL << (MySqlParser::MERGE - 391))
        | (1ULL << (MySqlParser::MID - 391))
        | (1ULL << (MySqlParser::MIN_ROWS - 391))
        | (1ULL << (MySqlParser::MODIFY - 391))
        | (1ULL << (MySqlParser::MUTEX - 391))
        | (1ULL << (MySqlParser::MYSQL - 391))
        | (1ULL << (MySqlParser::NAME - 391))
        | (1ULL << (MySqlParser::NAMES - 391))
        | (1ULL << (MySqlParser::NCHAR - 391))
        | (1ULL << (MySqlParser::NO - 391))
        | (1ULL << (MySqlParser::NODEGROUP - 391))
        | (1ULL << (MySqlParser::NONE - 391))
        | (1ULL << (MySqlParser::OFFLINE - 391))
        | (1ULL << (MySqlParser::OFFSET - 391))
        | (1ULL << (MySqlParser::OJ - 391))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
        | (1ULL << (MySqlParser::ONLINE - 391))
        | (1ULL << (MySqlParser::ONLY - 391))
        | (1ULL << (MySqlParser::OPTIONS - 391))
        | (1ULL << (MySqlParser::OWNER - 391))
        | (1ULL << (MySqlParser::PACK_KEYS - 391))
        | (1ULL << (MySqlParser::PARSER - 391))
        | (1ULL << (MySqlParser::PARTIAL - 391))
        | (1ULL << (MySqlParser::PARTITIONING - 391))
        | (1ULL << (MySqlParser::PARTITIONS - 391))
        | (1ULL << (MySqlParser::PASSWORD - 391))
        | (1ULL << (MySqlParser::PLUGINS - 391))
        | (1ULL << (MySqlParser::PORT - 391))
        | (1ULL << (MySqlParser::PRESERVE - 391))
        | (1ULL << (MySqlParser::PROCESSLIST - 391))
        | (1ULL << (MySqlParser::PROFILE - 391))
        | (1ULL << (MySqlParser::PROFILES - 391))
        | (1ULL << (MySqlParser::PROXY - 391))
        | (1ULL << (MySqlParser::QUERY - 391))
        | (1ULL << (MySqlParser::QUICK - 391))
        | (1ULL << (MySqlParser::REBUILD - 391))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
        | (1ULL << (MySqlParser::REDUNDANT - 391))
        | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
        | (1ULL << (MySqlParser::REORGANIZE - 455))
        | (1ULL << (MySqlParser::REPAIR - 455))
        | (1ULL << (MySqlParser::REPLICATION - 455))
        | (1ULL << (MySqlParser::RETURNS - 455))
        | (1ULL << (MySqlParser::ROLLBACK - 455))
        | (1ULL << (MySqlParser::ROLLUP - 455))
        | (1ULL << (MySqlParser::ROW - 455))
        | (1ULL << (MySqlParser::ROWS - 455))
        | (1ULL << (MySqlParser::ROW_FORMAT - 455))
        | (1ULL << (MySqlParser::SAVEPOINT - 455))
        | (1ULL << (MySqlParser::SCHEDULE - 455))
        | (1ULL << (MySqlParser::SECURITY - 455))
        | (1ULL << (MySqlParser::SERVER - 455))
        | (1ULL << (MySqlParser::SESSION - 455))
        | (1ULL << (MySqlParser::SHARE - 455))
        | (1ULL << (MySqlParser::SHARED - 455))
        | (1ULL << (MySqlParser::SIGNED - 455))
        | (1ULL << (MySqlParser::SIMPLE - 455))
        | (1ULL << (MySqlParser::SLAVE - 455))
        | (1ULL << (MySqlParser::SNAPSHOT - 455))
        | (1ULL << (MySqlParser::SOCKET - 455))
        | (1ULL << (MySqlParser::SOME - 455))
        | (1ULL << (MySqlParser::SOUNDS - 455))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
        | (1ULL << (MySqlParser::SQL_CACHE - 455))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
        | (1ULL << (MySqlParser::START - 455))
        | (1ULL << (MySqlParser::STARTS - 455))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
        | (1ULL << (MySqlParser::STATUS - 455))
        | (1ULL << (MySqlParser::STORAGE - 455))
        | (1ULL << (MySqlParser::SUBJECT - 455))
        | (1ULL << (MySqlParser::SUBPARTITION - 455))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
        | (1ULL << (MySqlParser::TABLESPACE - 455))
        | (1ULL << (MySqlParser::TEMPORARY - 455))
        | (1ULL << (MySqlParser::TEMPTABLE - 455))
        | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
        | (1ULL << (MySqlParser::TRUNCATE - 519))
        | (1ULL << (MySqlParser::UNDEFINED - 519))
        | (1ULL << (MySqlParser::UNDOFILE - 519))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
        | (1ULL << (MySqlParser::UNKNOWN - 519))
        | (1ULL << (MySqlParser::UPGRADE - 519))
        | (1ULL << (MySqlParser::USER - 519))
        | (1ULL << (MySqlParser::VALUE - 519))
        | (1ULL << (MySqlParser::VARIABLES - 519))
        | (1ULL << (MySqlParser::VIEW - 519))
        | (1ULL << (MySqlParser::WAIT - 519))
        | (1ULL << (MySqlParser::WARNINGS - 519))
        | (1ULL << (MySqlParser::WORK - 519))
        | (1ULL << (MySqlParser::WRAPPER - 519))
        | (1ULL << (MySqlParser::X509 - 519))
        | (1ULL << (MySqlParser::XML - 519))
        | (1ULL << (MySqlParser::QUARTER - 519))
        | (1ULL << (MySqlParser::MONTH - 519))
        | (1ULL << (MySqlParser::DAY - 519))
        | (1ULL << (MySqlParser::HOUR - 519))
        | (1ULL << (MySqlParser::MINUTE - 519))
        | (1ULL << (MySqlParser::WEEK - 519))
        | (1ULL << (MySqlParser::SECOND - 519))
        | (1ULL << (MySqlParser::MICROSECOND - 519))
        | (1ULL << (MySqlParser::TABLES - 519))
        | (1ULL << (MySqlParser::ROUTINE - 519))
        | (1ULL << (MySqlParser::EXECUTE - 519))
        | (1ULL << (MySqlParser::FILE - 519))
        | (1ULL << (MySqlParser::PROCESS - 519))
        | (1ULL << (MySqlParser::RELOAD - 519))
        | (1ULL << (MySqlParser::SHUTDOWN - 519))
        | (1ULL << (MySqlParser::SUPER - 519))
        | (1ULL << (MySqlParser::PRIVILEGES - 519))
        | (1ULL << (MySqlParser::ARMSCII8 - 519))
        | (1ULL << (MySqlParser::ASCII - 519))
        | (1ULL << (MySqlParser::BIG5 - 519))
        | (1ULL << (MySqlParser::CP1250 - 519))
        | (1ULL << (MySqlParser::CP1251 - 519))
        | (1ULL << (MySqlParser::CP1256 - 519))
        | (1ULL << (MySqlParser::CP1257 - 519))
        | (1ULL << (MySqlParser::CP850 - 519))
        | (1ULL << (MySqlParser::CP852 - 519))
        | (1ULL << (MySqlParser::CP866 - 519))
        | (1ULL << (MySqlParser::CP932 - 519))
        | (1ULL << (MySqlParser::DEC8 - 519))
        | (1ULL << (MySqlParser::EUCJPMS - 519))
        | (1ULL << (MySqlParser::EUCKR - 519))
        | (1ULL << (MySqlParser::GB2312 - 519))
        | (1ULL << (MySqlParser::GBK - 519))
        | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
        | (1ULL << (MySqlParser::HEBREW - 583))
        | (1ULL << (MySqlParser::HP8 - 583))
        | (1ULL << (MySqlParser::KEYBCS2 - 583))
        | (1ULL << (MySqlParser::KOI8R - 583))
        | (1ULL << (MySqlParser::KOI8U - 583))
        | (1ULL << (MySqlParser::LATIN1 - 583))
        | (1ULL << (MySqlParser::LATIN2 - 583))
        | (1ULL << (MySqlParser::LATIN5 - 583))
        | (1ULL << (MySqlParser::LATIN7 - 583))
        | (1ULL << (MySqlParser::MACCE - 583))
        | (1ULL << (MySqlParser::MACROMAN - 583))
        | (1ULL << (MySqlParser::SJIS - 583))
        | (1ULL << (MySqlParser::SWE7 - 583))
        | (1ULL << (MySqlParser::TIS620 - 583))
        | (1ULL << (MySqlParser::UCS2 - 583))
        | (1ULL << (MySqlParser::UJIS - 583))
        | (1ULL << (MySqlParser::UTF16 - 583))
        | (1ULL << (MySqlParser::UTF16LE - 583))
        | (1ULL << (MySqlParser::UTF32 - 583))
        | (1ULL << (MySqlParser::UTF8 - 583))
        | (1ULL << (MySqlParser::UTF8MB3 - 583))
        | (1ULL << (MySqlParser::UTF8MB4 - 583))
        | (1ULL << (MySqlParser::ARCHIVE - 583))
        | (1ULL << (MySqlParser::BLACKHOLE - 583))
        | (1ULL << (MySqlParser::CSV - 583))
        | (1ULL << (MySqlParser::FEDERATED - 583))
        | (1ULL << (MySqlParser::INNODB - 583))
        | (1ULL << (MySqlParser::MEMORY - 583))
        | (1ULL << (MySqlParser::MRG_MYISAM - 583))
        | (1ULL << (MySqlParser::MYISAM - 583))
        | (1ULL << (MySqlParser::NDB - 583))
        | (1ULL << (MySqlParser::NDBCLUSTER - 583))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
        | (1ULL << (MySqlParser::REPEATABLE - 583))
        | (1ULL << (MySqlParser::COMMITTED - 583))
        | (1ULL << (MySqlParser::UNCOMMITTED - 583))
        | (1ULL << (MySqlParser::SERIALIZABLE - 583))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
        | (1ULL << (MySqlParser::LINESTRING - 583))
        | (1ULL << (MySqlParser::MULTILINESTRING - 583))
        | (1ULL << (MySqlParser::MULTIPOINT - 583))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
        | (1ULL << (MySqlParser::POINT - 583))
        | (1ULL << (MySqlParser::POLYGON - 583))
        | (1ULL << (MySqlParser::ABS - 583))
        | (1ULL << (MySqlParser::ACOS - 583))
        | (1ULL << (MySqlParser::ADDDATE - 583))
        | (1ULL << (MySqlParser::ADDTIME - 583))
        | (1ULL << (MySqlParser::AES_DECRYPT - 583))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
        | (1ULL << (MySqlParser::AREA - 583))
        | (1ULL << (MySqlParser::ASBINARY - 583))
        | (1ULL << (MySqlParser::ASIN - 583))
        | (1ULL << (MySqlParser::ASTEXT - 583))
        | (1ULL << (MySqlParser::ASWKB - 583))
        | (1ULL << (MySqlParser::ASWKT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
        | (1ULL << (MySqlParser::ATAN - 583))
        | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
        | (1ULL << (MySqlParser::BIN - 647))
        | (1ULL << (MySqlParser::BIT_COUNT - 647))
        | (1ULL << (MySqlParser::BIT_LENGTH - 647))
        | (1ULL << (MySqlParser::BUFFER - 647))
        | (1ULL << (MySqlParser::CEIL - 647))
        | (1ULL << (MySqlParser::CEILING - 647))
        | (1ULL << (MySqlParser::CENTROID - 647))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
        | (1ULL << (MySqlParser::CHARSET - 647))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
        | (1ULL << (MySqlParser::COERCIBILITY - 647))
        | (1ULL << (MySqlParser::COLLATION - 647))
        | (1ULL << (MySqlParser::COMPRESS - 647))
        | (1ULL << (MySqlParser::CONCAT - 647))
        | (1ULL << (MySqlParser::CONCAT_WS - 647))
        | (1ULL << (MySqlParser::CONNECTION_ID - 647))
        | (1ULL << (MySqlParser::CONV - 647))
        | (1ULL << (MySqlParser::CONVERT_TZ - 647))
        | (1ULL << (MySqlParser::COS - 647))
        | (1ULL << (MySqlParser::COT - 647))
        | (1ULL << (MySqlParser::CRC32 - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
        | (1ULL << (MySqlParser::CROSSES - 647))
        | (1ULL << (MySqlParser::DATEDIFF - 647))
        | (1ULL << (MySqlParser::DATE_FORMAT - 647))
        | (1ULL << (MySqlParser::DAYNAME - 647))
        | (1ULL << (MySqlParser::DAYOFMONTH - 647))
        | (1ULL << (MySqlParser::DAYOFWEEK - 647))
        | (1ULL << (MySqlParser::DAYOFYEAR - 647))
        | (1ULL << (MySqlParser::DECODE - 647))
        | (1ULL << (MySqlParser::DEGREES - 647))
        | (1ULL << (MySqlParser::DES_DECRYPT - 647))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
        | (1ULL << (MySqlParser::DIMENSION - 647))
        | (1ULL << (MySqlParser::DISJOINT - 647))
        | (1ULL << (MySqlParser::ELT - 647))
        | (1ULL << (MySqlParser::ENCODE - 647))
        | (1ULL << (MySqlParser::ENCRYPT - 647))
        | (1ULL << (MySqlParser::ENDPOINT - 647))
        | (1ULL << (MySqlParser::ENVELOPE - 647))
        | (1ULL << (MySqlParser::EQUALS - 647))
        | (1ULL << (MySqlParser::EXP - 647))
        | (1ULL << (MySqlParser::EXPORT_SET - 647))
        | (1ULL << (MySqlParser::EXTERIORRING - 647))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
        | (1ULL << (MySqlParser::FIELD - 647))
        | (1ULL << (MySqlParser::FIND_IN_SET - 647))
        | (1ULL << (MySqlParser::FLOOR - 647))
        | (1ULL << (MySqlParser::FORMAT - 647))
        | (1ULL << (MySqlParser::FOUND_ROWS - 647))
        | (1ULL << (MySqlParser::FROM_BASE64 - 647))
        | (1ULL << (MySqlParser::FROM_DAYS - 647))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
        | (1ULL << (MySqlParser::GET_FORMAT - 711))
        | (1ULL << (MySqlParser::GET_LOCK - 711))
        | (1ULL << (MySqlParser::GLENGTH - 711))
        | (1ULL << (MySqlParser::GREATEST - 711))
        | (1ULL << (MySqlParser::GTID_SUBSET - 711))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
        | (1ULL << (MySqlParser::HEX - 711))
        | (1ULL << (MySqlParser::IFNULL - 711))
        | (1ULL << (MySqlParser::INET6_ATON - 711))
        | (1ULL << (MySqlParser::INET6_NTOA - 711))
        | (1ULL << (MySqlParser::INET_ATON - 711))
        | (1ULL << (MySqlParser::INET_NTOA - 711))
        | (1ULL << (MySqlParser::INSTR - 711))
        | (1ULL << (MySqlParser::INTERIORRINGN - 711))
        | (1ULL << (MySqlParser::INTERSECTS - 711))
        | (1ULL << (MySqlParser::ISCLOSED - 711))
        | (1ULL << (MySqlParser::ISEMPTY - 711))
        | (1ULL << (MySqlParser::ISNULL - 711))
        | (1ULL << (MySqlParser::ISSIMPLE - 711))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
        | (1ULL << (MySqlParser::IS_IPV4 - 711))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
        | (1ULL << (MySqlParser::IS_IPV6 - 711))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
        | (1ULL << (MySqlParser::LCASE - 711))
        | (1ULL << (MySqlParser::LEAST - 711))
        | (1ULL << (MySqlParser::LENGTH - 711))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINEFROMWKB - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
        | (1ULL << (MySqlParser::LN - 711))
        | (1ULL << (MySqlParser::LOAD_FILE - 711))
        | (1ULL << (MySqlParser::LOCATE - 711))
        | (1ULL << (MySqlParser::LOG - 711))
        | (1ULL << (MySqlParser::LOG10 - 711))
        | (1ULL << (MySqlParser::LOG2 - 711))
        | (1ULL << (MySqlParser::LOWER - 711))
        | (1ULL << (MySqlParser::LPAD - 711))
        | (1ULL << (MySqlParser::LTRIM - 711))
        | (1ULL << (MySqlParser::MAKEDATE - 711))
        | (1ULL << (MySqlParser::MAKETIME - 711))
        | (1ULL << (MySqlParser::MAKE_SET - 711))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
        | (1ULL << (MySqlParser::MBRCONTAINS - 711))
        | (1ULL << (MySqlParser::MBRDISJOINT - 711))
        | (1ULL << (MySqlParser::MBREQUAL - 711))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
        | (1ULL << (MySqlParser::MBROVERLAPS - 711))
        | (1ULL << (MySqlParser::MBRTOUCHES - 711))
        | (1ULL << (MySqlParser::MBRWITHIN - 711))
        | (1ULL << (MySqlParser::MD5 - 711))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
        | (1ULL << (MySqlParser::MONTHNAME - 711))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::NAME_CONST - 775))
        | (1ULL << (MySqlParser::NULLIF - 775))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
        | (1ULL << (MySqlParser::NUMPOINTS - 775))
        | (1ULL << (MySqlParser::OCT - 775))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
        | (1ULL << (MySqlParser::ORD - 775))
        | (1ULL << (MySqlParser::OVERLAPS - 775))
        | (1ULL << (MySqlParser::PERIOD_ADD - 775))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
        | (1ULL << (MySqlParser::PI - 775))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::POINTFROMWKB - 775))
        | (1ULL << (MySqlParser::POINTN - 775))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYFROMWKB - 775))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::POW - 775))
        | (1ULL << (MySqlParser::POWER - 775))
        | (1ULL << (MySqlParser::QUOTE - 775))
        | (1ULL << (MySqlParser::RADIANS - 775))
        | (1ULL << (MySqlParser::RAND - 775))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
        | (1ULL << (MySqlParser::REVERSE - 775))
        | (1ULL << (MySqlParser::ROUND - 775))
        | (1ULL << (MySqlParser::ROW_COUNT - 775))
        | (1ULL << (MySqlParser::RPAD - 775))
        | (1ULL << (MySqlParser::RTRIM - 775))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
        | (1ULL << (MySqlParser::SESSION_USER - 775))
        | (1ULL << (MySqlParser::SHA - 775))
        | (1ULL << (MySqlParser::SHA1 - 775))
        | (1ULL << (MySqlParser::SHA2 - 775))
        | (1ULL << (MySqlParser::SIGN - 775))
        | (1ULL << (MySqlParser::SIN - 775))
        | (1ULL << (MySqlParser::SLEEP - 775))
        | (1ULL << (MySqlParser::SOUNDEX - 775))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
        | (1ULL << (MySqlParser::SQRT - 775))
        | (1ULL << (MySqlParser::SRID - 775))
        | (1ULL << (MySqlParser::STARTPOINT - 775))
        | (1ULL << (MySqlParser::STRCMP - 775))
        | (1ULL << (MySqlParser::STR_TO_DATE - 775))
        | (1ULL << (MySqlParser::ST_AREA - 775))
        | (1ULL << (MySqlParser::ST_ASBINARY - 775))
        | (1ULL << (MySqlParser::ST_ASTEXT - 775))
        | (1ULL << (MySqlParser::ST_ASWKB - 775))
        | (1ULL << (MySqlParser::ST_ASWKT - 775))
        | (1ULL << (MySqlParser::ST_BUFFER - 775))
        | (1ULL << (MySqlParser::ST_CENTROID - 775))
        | (1ULL << (MySqlParser::ST_CONTAINS - 775))
        | (1ULL << (MySqlParser::ST_CROSSES - 775))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
        | (1ULL << (MySqlParser::ST_DIMENSION - 775))
        | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
        | (1ULL << (MySqlParser::ST_EQUALS - 839))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POINTN - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_SRID - 839))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
        | (1ULL << (MySqlParser::ST_TOUCHES - 839))
        | (1ULL << (MySqlParser::ST_UNION - 839))
        | (1ULL << (MySqlParser::ST_WITHIN - 839))
        | (1ULL << (MySqlParser::ST_X - 839))
        | (1ULL << (MySqlParser::ST_Y - 839))
        | (1ULL << (MySqlParser::SUBDATE - 839))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
        | (1ULL << (MySqlParser::SUBTIME - 839))
        | (1ULL << (MySqlParser::SYSTEM_USER - 839))
        | (1ULL << (MySqlParser::TAN - 839))
        | (1ULL << (MySqlParser::TIMEDIFF - 839))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
        | (1ULL << (MySqlParser::TIME_FORMAT - 839))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
        | (1ULL << (MySqlParser::TOUCHES - 839))
        | (1ULL << (MySqlParser::TO_BASE64 - 839))
        | (1ULL << (MySqlParser::TO_DAYS - 839))
        | (1ULL << (MySqlParser::TO_SECONDS - 839))
        | (1ULL << (MySqlParser::UCASE - 839))
        | (1ULL << (MySqlParser::UNCOMPRESS - 839))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
        | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
        | (1ULL << (MySqlParser::UPDATEXML - 903))
        | (1ULL << (MySqlParser::UPPER - 903))
        | (1ULL << (MySqlParser::UUID - 903))
        | (1ULL << (MySqlParser::UUID_SHORT - 903))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
        | (1ULL << (MySqlParser::VERSION - 903))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
        | (1ULL << (MySqlParser::WEEKDAY - 903))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
        | (1ULL << (MySqlParser::WITHIN - 903))
        | (1ULL << (MySqlParser::YEARWEEK - 903))
        | (1ULL << (MySqlParser::Y_FUNCTION - 903))
        | (1ULL << (MySqlParser::X_FUNCTION - 903))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
        | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
        setState(1870);
        id_();
      }
      setState(1874); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1873);
        create_database_option();
        setState(1876); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << MySqlParser::CHARACTER)
        | (1ULL << MySqlParser::COLLATE)
        | (1ULL << MySqlParser::DEFAULT))) != 0));
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Alter_databaseContext *>(_tracker.createInstance<MySqlParser::AlterDbUpgradeNameContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1878);
      match(MySqlParser::ALTER);
      setState(1879);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DATABASE || _la == MySqlParser::SCHEMA)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1880);
      id_();
      setState(1881);
      match(MySqlParser::UPGRADE);
      setState(1882);
      match(MySqlParser::DATA);
      setState(1883);
      match(MySqlParser::DIRECTORY);
      setState(1884);
      match(MySqlParser::NAME);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_eventContext ------------------------------------------------------------------

MySqlParser::Alter_eventContext::Alter_eventContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Alter_eventContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

std::vector<MySqlParser::Full_idContext *> MySqlParser::Alter_eventContext::full_id() {
  return getRuleContexts<MySqlParser::Full_idContext>();
}

MySqlParser::Full_idContext* MySqlParser::Alter_eventContext::full_id(size_t i) {
  return getRuleContext<MySqlParser::Full_idContext>(i);
}

MySqlParser::Owner_statementContext* MySqlParser::Alter_eventContext::owner_statement() {
  return getRuleContext<MySqlParser::Owner_statementContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::Alter_eventContext::ON() {
  return getTokens(MySqlParser::ON);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::ON(size_t i) {
  return getToken(MySqlParser::ON, i);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::SCHEDULE() {
  return getToken(MySqlParser::SCHEDULE, 0);
}

MySqlParser::Schedule_expressionContext* MySqlParser::Alter_eventContext::schedule_expression() {
  return getRuleContext<MySqlParser::Schedule_expressionContext>(0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::COMPLETION() {
  return getToken(MySqlParser::COMPLETION, 0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::PRESERVE() {
  return getToken(MySqlParser::PRESERVE, 0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::RENAME() {
  return getToken(MySqlParser::RENAME, 0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::ENABLE() {
  return getToken(MySqlParser::ENABLE, 0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::DISABLE() {
  return getToken(MySqlParser::DISABLE, 0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::DO() {
  return getToken(MySqlParser::DO, 0);
}

MySqlParser::Routine_bodyContext* MySqlParser::Alter_eventContext::routine_body() {
  return getRuleContext<MySqlParser::Routine_bodyContext>(0);
}

tree::TerminalNode* MySqlParser::Alter_eventContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}


size_t MySqlParser::Alter_eventContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_event;
}

void MySqlParser::Alter_eventContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_event(this);
}

void MySqlParser::Alter_eventContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_event(this);
}

MySqlParser::Alter_eventContext* MySqlParser::alter_event() {
  Alter_eventContext *_localctx = _tracker.createInstance<Alter_eventContext>(_ctx, getState());
  enterRule(_localctx, 106, MySqlParser::RuleAlter_event);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1888);
    match(MySqlParser::ALTER);
    setState(1890);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(1889);
      owner_statement();
    }
    setState(1892);
    match(MySqlParser::EVENT);
    setState(1893);
    full_id();
    setState(1897);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
    case 1: {
      setState(1894);
      match(MySqlParser::ON);
      setState(1895);
      match(MySqlParser::SCHEDULE);
      setState(1896);
      schedule_expression();
      break;
    }

    }
    setState(1905);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ON) {
      setState(1899);
      match(MySqlParser::ON);
      setState(1900);
      match(MySqlParser::COMPLETION);
      setState(1902);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NOT) {
        setState(1901);
        match(MySqlParser::NOT);
      }
      setState(1904);
      match(MySqlParser::PRESERVE);
    }
    setState(1910);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::RENAME) {
      setState(1907);
      match(MySqlParser::RENAME);
      setState(1908);
      match(MySqlParser::TO);
      setState(1909);
      full_id();
    }
    setState(1917);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx)) {
    case 1: {
      setState(1912);
      match(MySqlParser::ENABLE);
      break;
    }

    case 2: {
      setState(1913);
      match(MySqlParser::DISABLE);
      break;
    }

    case 3: {
      setState(1914);
      match(MySqlParser::DISABLE);
      setState(1915);
      match(MySqlParser::ON);
      setState(1916);
      match(MySqlParser::SLAVE);
      break;
    }

    }
    setState(1921);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMENT) {
      setState(1919);
      match(MySqlParser::COMMENT);
      setState(1920);
      match(MySqlParser::STRING_LITERAL);
    }
    setState(1925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DO) {
      setState(1923);
      match(MySqlParser::DO);
      setState(1924);
      routine_body();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_functionContext ------------------------------------------------------------------

MySqlParser::Alter_functionContext::Alter_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Alter_functionContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::Alter_functionContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

MySqlParser::Full_idContext* MySqlParser::Alter_functionContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

std::vector<MySqlParser::Routine_characteristicContext *> MySqlParser::Alter_functionContext::routine_characteristic() {
  return getRuleContexts<MySqlParser::Routine_characteristicContext>();
}

MySqlParser::Routine_characteristicContext* MySqlParser::Alter_functionContext::routine_characteristic(size_t i) {
  return getRuleContext<MySqlParser::Routine_characteristicContext>(i);
}


size_t MySqlParser::Alter_functionContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_function;
}

void MySqlParser::Alter_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_function(this);
}

void MySqlParser::Alter_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_function(this);
}

MySqlParser::Alter_functionContext* MySqlParser::alter_function() {
  Alter_functionContext *_localctx = _tracker.createInstance<Alter_functionContext>(_ctx, getState());
  enterRule(_localctx, 108, MySqlParser::RuleAlter_function);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1927);
    match(MySqlParser::ALTER);
    setState(1928);
    match(MySqlParser::FUNCTION);
    setState(1929);
    full_id();
    setState(1933);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::DETERMINISTIC || ((((_la - 95) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 95)) & ((1ULL << (MySqlParser::MODIFIES - 95))
      | (1ULL << (MySqlParser::NOT - 95))
      | (1ULL << (MySqlParser::READS - 95))
      | (1ULL << (MySqlParser::SQL - 95)))) != 0) || _la == MySqlParser::COMMENT

    || _la == MySqlParser::CONTAINS || _la == MySqlParser::LANGUAGE

    || _la == MySqlParser::NO) {
      setState(1930);
      routine_characteristic();
      setState(1935);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_instanceContext ------------------------------------------------------------------

MySqlParser::Alter_instanceContext::Alter_instanceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Alter_instanceContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::Alter_instanceContext::INSTANCE() {
  return getToken(MySqlParser::INSTANCE, 0);
}

tree::TerminalNode* MySqlParser::Alter_instanceContext::ROTATE() {
  return getToken(MySqlParser::ROTATE, 0);
}

tree::TerminalNode* MySqlParser::Alter_instanceContext::INNODB() {
  return getToken(MySqlParser::INNODB, 0);
}

tree::TerminalNode* MySqlParser::Alter_instanceContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

tree::TerminalNode* MySqlParser::Alter_instanceContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}


size_t MySqlParser::Alter_instanceContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_instance;
}

void MySqlParser::Alter_instanceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_instance(this);
}

void MySqlParser::Alter_instanceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_instance(this);
}

MySqlParser::Alter_instanceContext* MySqlParser::alter_instance() {
  Alter_instanceContext *_localctx = _tracker.createInstance<Alter_instanceContext>(_ctx, getState());
  enterRule(_localctx, 110, MySqlParser::RuleAlter_instance);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1936);
    match(MySqlParser::ALTER);
    setState(1937);
    match(MySqlParser::INSTANCE);
    setState(1938);
    match(MySqlParser::ROTATE);
    setState(1939);
    match(MySqlParser::INNODB);
    setState(1940);
    match(MySqlParser::MASTER);
    setState(1941);
    match(MySqlParser::KEY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_logfile_groupContext ------------------------------------------------------------------

MySqlParser::Alter_logfile_groupContext::Alter_logfile_groupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Alter_logfile_groupContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::Alter_logfile_groupContext::LOGFILE() {
  return getToken(MySqlParser::LOGFILE, 0);
}

tree::TerminalNode* MySqlParser::Alter_logfile_groupContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}

MySqlParser::Id_Context* MySqlParser::Alter_logfile_groupContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Alter_logfile_groupContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::Alter_logfile_groupContext::UNDOFILE() {
  return getToken(MySqlParser::UNDOFILE, 0);
}

tree::TerminalNode* MySqlParser::Alter_logfile_groupContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Alter_logfile_groupContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::Engine_nameContext* MySqlParser::Alter_logfile_groupContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Alter_logfile_groupContext::INITIAL_SIZE() {
  return getToken(MySqlParser::INITIAL_SIZE, 0);
}

MySqlParser::Filesize_literalContext* MySqlParser::Alter_logfile_groupContext::filesize_literal() {
  return getRuleContext<MySqlParser::Filesize_literalContext>(0);
}

tree::TerminalNode* MySqlParser::Alter_logfile_groupContext::WAIT() {
  return getToken(MySqlParser::WAIT, 0);
}


size_t MySqlParser::Alter_logfile_groupContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_logfile_group;
}

void MySqlParser::Alter_logfile_groupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_logfile_group(this);
}

void MySqlParser::Alter_logfile_groupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_logfile_group(this);
}

MySqlParser::Alter_logfile_groupContext* MySqlParser::alter_logfile_group() {
  Alter_logfile_groupContext *_localctx = _tracker.createInstance<Alter_logfile_groupContext>(_ctx, getState());
  enterRule(_localctx, 112, MySqlParser::RuleAlter_logfile_group);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1943);
    match(MySqlParser::ALTER);
    setState(1944);
    match(MySqlParser::LOGFILE);
    setState(1945);
    match(MySqlParser::GROUP);
    setState(1946);
    id_();
    setState(1947);
    match(MySqlParser::ADD);
    setState(1948);
    match(MySqlParser::UNDOFILE);
    setState(1949);
    match(MySqlParser::STRING_LITERAL);
    setState(1955);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INITIAL_SIZE) {
      setState(1950);
      match(MySqlParser::INITIAL_SIZE);
      setState(1952);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(1951);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(1954);
      filesize_literal();
    }
    setState(1958);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WAIT) {
      setState(1957);
      match(MySqlParser::WAIT);
    }
    setState(1960);
    match(MySqlParser::ENGINE);
    setState(1962);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EQUAL_SYMBOL) {
      setState(1961);
      match(MySqlParser::EQUAL_SYMBOL);
    }
    setState(1964);
    engine_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_procedureContext ------------------------------------------------------------------

MySqlParser::Alter_procedureContext::Alter_procedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Alter_procedureContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::Alter_procedureContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

MySqlParser::Full_idContext* MySqlParser::Alter_procedureContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

std::vector<MySqlParser::Routine_characteristicContext *> MySqlParser::Alter_procedureContext::routine_characteristic() {
  return getRuleContexts<MySqlParser::Routine_characteristicContext>();
}

MySqlParser::Routine_characteristicContext* MySqlParser::Alter_procedureContext::routine_characteristic(size_t i) {
  return getRuleContext<MySqlParser::Routine_characteristicContext>(i);
}


size_t MySqlParser::Alter_procedureContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_procedure;
}

void MySqlParser::Alter_procedureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_procedure(this);
}

void MySqlParser::Alter_procedureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_procedure(this);
}

MySqlParser::Alter_procedureContext* MySqlParser::alter_procedure() {
  Alter_procedureContext *_localctx = _tracker.createInstance<Alter_procedureContext>(_ctx, getState());
  enterRule(_localctx, 114, MySqlParser::RuleAlter_procedure);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1966);
    match(MySqlParser::ALTER);
    setState(1967);
    match(MySqlParser::PROCEDURE);
    setState(1968);
    full_id();
    setState(1972);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::DETERMINISTIC || ((((_la - 95) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 95)) & ((1ULL << (MySqlParser::MODIFIES - 95))
      | (1ULL << (MySqlParser::NOT - 95))
      | (1ULL << (MySqlParser::READS - 95))
      | (1ULL << (MySqlParser::SQL - 95)))) != 0) || _la == MySqlParser::COMMENT

    || _la == MySqlParser::CONTAINS || _la == MySqlParser::LANGUAGE

    || _la == MySqlParser::NO) {
      setState(1969);
      routine_characteristic();
      setState(1974);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_serverContext ------------------------------------------------------------------

MySqlParser::Alter_serverContext::Alter_serverContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Alter_serverContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::Alter_serverContext::SERVER() {
  return getToken(MySqlParser::SERVER, 0);
}

MySqlParser::Id_Context* MySqlParser::Alter_serverContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Alter_serverContext::OPTIONS() {
  return getToken(MySqlParser::OPTIONS, 0);
}

std::vector<MySqlParser::Server_optionContext *> MySqlParser::Alter_serverContext::server_option() {
  return getRuleContexts<MySqlParser::Server_optionContext>();
}

MySqlParser::Server_optionContext* MySqlParser::Alter_serverContext::server_option(size_t i) {
  return getRuleContext<MySqlParser::Server_optionContext>(i);
}


size_t MySqlParser::Alter_serverContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_server;
}

void MySqlParser::Alter_serverContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_server(this);
}

void MySqlParser::Alter_serverContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_server(this);
}

MySqlParser::Alter_serverContext* MySqlParser::alter_server() {
  Alter_serverContext *_localctx = _tracker.createInstance<Alter_serverContext>(_ctx, getState());
  enterRule(_localctx, 116, MySqlParser::RuleAlter_server);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1975);
    match(MySqlParser::ALTER);
    setState(1976);
    match(MySqlParser::SERVER);
    setState(1977);
    id_();
    setState(1978);
    match(MySqlParser::OPTIONS);
    setState(1979);
    match(MySqlParser::LR_BRACKET);
    setState(1980);
    server_option();
    setState(1985);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(1981);
      match(MySqlParser::COMMA);
      setState(1982);
      server_option();
      setState(1987);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1988);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_tableContext ------------------------------------------------------------------

MySqlParser::Alter_tableContext::Alter_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Alter_tableContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::Alter_tableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Alter_tableContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

std::vector<MySqlParser::Alter_table_specContext *> MySqlParser::Alter_tableContext::alter_table_spec() {
  return getRuleContexts<MySqlParser::Alter_table_specContext>();
}

MySqlParser::Alter_table_specContext* MySqlParser::Alter_tableContext::alter_table_spec(size_t i) {
  return getRuleContext<MySqlParser::Alter_table_specContext>(i);
}

tree::TerminalNode* MySqlParser::Alter_tableContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

std::vector<MySqlParser::Partition_optionsContext *> MySqlParser::Alter_tableContext::partition_options() {
  return getRuleContexts<MySqlParser::Partition_optionsContext>();
}

MySqlParser::Partition_optionsContext* MySqlParser::Alter_tableContext::partition_options(size_t i) {
  return getRuleContext<MySqlParser::Partition_optionsContext>(i);
}

tree::TerminalNode* MySqlParser::Alter_tableContext::ONLINE() {
  return getToken(MySqlParser::ONLINE, 0);
}

tree::TerminalNode* MySqlParser::Alter_tableContext::OFFLINE() {
  return getToken(MySqlParser::OFFLINE, 0);
}


size_t MySqlParser::Alter_tableContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_table;
}

void MySqlParser::Alter_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table(this);
}

void MySqlParser::Alter_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table(this);
}

MySqlParser::Alter_tableContext* MySqlParser::alter_table() {
  Alter_tableContext *_localctx = _tracker.createInstance<Alter_tableContext>(_ctx, getState());
  enterRule(_localctx, 118, MySqlParser::RuleAlter_table);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1990);
    match(MySqlParser::ALTER);
    setState(1992);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::OFFLINE

    || _la == MySqlParser::ONLINE) {
      setState(1991);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::OFFLINE

      || _la == MySqlParser::ONLINE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1995);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(1994);
      match(MySqlParser::IGNORE);
    }
    setState(1997);
    match(MySqlParser::TABLE);
    setState(1998);
    table_name();
    setState(1999);
    alter_table_spec();
    setState(2004);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(2000);
      match(MySqlParser::COMMA);
      setState(2001);
      alter_table_spec();
      setState(2006);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2010);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::PARTITION) {
      setState(2007);
      partition_options();
      setState(2012);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_tablespaceContext ------------------------------------------------------------------

MySqlParser::Alter_tablespaceContext::Alter_tablespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Alter_tablespaceContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::Alter_tablespaceContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::Id_Context* MySqlParser::Alter_tablespaceContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Alter_tablespaceContext::DATAFILE() {
  return getToken(MySqlParser::DATAFILE, 0);
}

tree::TerminalNode* MySqlParser::Alter_tablespaceContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Alter_tablespaceContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::Engine_nameContext* MySqlParser::Alter_tablespaceContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Alter_tablespaceContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::Alter_tablespaceContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Alter_tablespaceContext::INITIAL_SIZE() {
  return getToken(MySqlParser::INITIAL_SIZE, 0);
}

MySqlParser::Filesize_literalContext* MySqlParser::Alter_tablespaceContext::filesize_literal() {
  return getRuleContext<MySqlParser::Filesize_literalContext>(0);
}

tree::TerminalNode* MySqlParser::Alter_tablespaceContext::WAIT() {
  return getToken(MySqlParser::WAIT, 0);
}


size_t MySqlParser::Alter_tablespaceContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_tablespace;
}

void MySqlParser::Alter_tablespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_tablespace(this);
}

void MySqlParser::Alter_tablespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_tablespace(this);
}

MySqlParser::Alter_tablespaceContext* MySqlParser::alter_tablespace() {
  Alter_tablespaceContext *_localctx = _tracker.createInstance<Alter_tablespaceContext>(_ctx, getState());
  enterRule(_localctx, 120, MySqlParser::RuleAlter_tablespace);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2013);
    match(MySqlParser::ALTER);
    setState(2014);
    match(MySqlParser::TABLESPACE);
    setState(2015);
    id_();
    setState(2016);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::ADD

    || _la == MySqlParser::DROP)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2017);
    match(MySqlParser::DATAFILE);
    setState(2018);
    match(MySqlParser::STRING_LITERAL);
    setState(2022);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INITIAL_SIZE) {
      setState(2019);
      match(MySqlParser::INITIAL_SIZE);
      setState(2020);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(2021);
      filesize_literal();
    }
    setState(2025);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WAIT) {
      setState(2024);
      match(MySqlParser::WAIT);
    }
    setState(2027);
    match(MySqlParser::ENGINE);
    setState(2029);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EQUAL_SYMBOL) {
      setState(2028);
      match(MySqlParser::EQUAL_SYMBOL);
    }
    setState(2031);
    engine_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_viewContext ------------------------------------------------------------------

MySqlParser::Alter_viewContext::Alter_viewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Alter_viewContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

MySqlParser::Full_idContext* MySqlParser::Alter_viewContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::Select_statementContext* MySqlParser::Alter_viewContext::select_statement() {
  return getRuleContext<MySqlParser::Select_statementContext>(0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

MySqlParser::Owner_statementContext* MySqlParser::Alter_viewContext::owner_statement() {
  return getRuleContext<MySqlParser::Owner_statementContext>(0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::SQL() {
  return getToken(MySqlParser::SQL, 0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::SECURITY() {
  return getToken(MySqlParser::SECURITY, 0);
}

MySqlParser::Id_listContext* MySqlParser::Alter_viewContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::OPTION() {
  return getToken(MySqlParser::OPTION, 0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::UNDEFINED() {
  return getToken(MySqlParser::UNDEFINED, 0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::MERGE() {
  return getToken(MySqlParser::MERGE, 0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::TEMPTABLE() {
  return getToken(MySqlParser::TEMPTABLE, 0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::DEFINER() {
  return getToken(MySqlParser::DEFINER, 0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::INVOKER() {
  return getToken(MySqlParser::INVOKER, 0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::CASCADED() {
  return getToken(MySqlParser::CASCADED, 0);
}

tree::TerminalNode* MySqlParser::Alter_viewContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::Alter_viewContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_view;
}

void MySqlParser::Alter_viewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_view(this);
}

void MySqlParser::Alter_viewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_view(this);
}

MySqlParser::Alter_viewContext* MySqlParser::alter_view() {
  Alter_viewContext *_localctx = _tracker.createInstance<Alter_viewContext>(_ctx, getState());
  enterRule(_localctx, 122, MySqlParser::RuleAlter_view);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2033);
    match(MySqlParser::ALTER);
    setState(2037);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ALGORITHM) {
      setState(2034);
      match(MySqlParser::ALGORITHM);
      setState(2035);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(2036);
      dynamic_cast<Alter_viewContext *>(_localctx)->alg_type = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::MERGE || _la == MySqlParser::TEMPTABLE

      || _la == MySqlParser::UNDEFINED)) {
        dynamic_cast<Alter_viewContext *>(_localctx)->alg_type = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2040);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFINER) {
      setState(2039);
      owner_statement();
    }
    setState(2045);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::SQL) {
      setState(2042);
      match(MySqlParser::SQL);
      setState(2043);
      match(MySqlParser::SECURITY);
      setState(2044);
      dynamic_cast<Alter_viewContext *>(_localctx)->sec_context = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFINER

      || _la == MySqlParser::INVOKER)) {
        dynamic_cast<Alter_viewContext *>(_localctx)->sec_context = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2047);
    match(MySqlParser::VIEW);
    setState(2048);
    full_id();
    setState(2053);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LR_BRACKET) {
      setState(2049);
      match(MySqlParser::LR_BRACKET);
      setState(2050);
      id_list();
      setState(2051);
      match(MySqlParser::RR_BRACKET);
    }
    setState(2055);
    match(MySqlParser::AS);
    setState(2056);
    select_statement();
    setState(2063);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WITH) {
      setState(2057);
      match(MySqlParser::WITH);
      setState(2059);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CASCADED || _la == MySqlParser::LOCAL) {
        setState(2058);
        dynamic_cast<Alter_viewContext *>(_localctx)->check_opt = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::CASCADED || _la == MySqlParser::LOCAL)) {
          dynamic_cast<Alter_viewContext *>(_localctx)->check_opt = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2061);
      match(MySqlParser::CHECK);
      setState(2062);
      match(MySqlParser::OPTION);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_specContext ------------------------------------------------------------------

MySqlParser::Alter_table_specContext::Alter_table_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Alter_table_specContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_table_spec;
}

void MySqlParser::Alter_table_specContext::copyFrom(Alter_table_specContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AltblDropPKContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblDropPKContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::AltblDropPKContext::PRIMARY() {
  return getToken(MySqlParser::PRIMARY, 0);
}

tree::TerminalNode* MySqlParser::AltblDropPKContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::AltblDropPKContext::AltblDropPKContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblDropPKContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblDropPK(this);
}
void MySqlParser::AltblDropPKContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblDropPK(this);
}
//----------------- AltblDisKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblDisKeyContext::DISABLE() {
  return getToken(MySqlParser::DISABLE, 0);
}

tree::TerminalNode* MySqlParser::AltblDisKeyContext::KEYS() {
  return getToken(MySqlParser::KEYS, 0);
}

MySqlParser::AltblDisKeyContext::AltblDisKeyContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblDisKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblDisKey(this);
}
void MySqlParser::AltblDisKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblDisKey(this);
}
//----------------- AltblAddPKContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblAddPKContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AltblAddPKContext::PRIMARY() {
  return getToken(MySqlParser::PRIMARY, 0);
}

tree::TerminalNode* MySqlParser::AltblAddPKContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::Index_colname_listContext* MySqlParser::AltblAddPKContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblAddPKContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

MySqlParser::Index_typeContext* MySqlParser::AltblAddPKContext::index_type() {
  return getRuleContext<MySqlParser::Index_typeContext>(0);
}

std::vector<MySqlParser::Index_optionContext *> MySqlParser::AltblAddPKContext::index_option() {
  return getRuleContexts<MySqlParser::Index_optionContext>();
}

MySqlParser::Index_optionContext* MySqlParser::AltblAddPKContext::index_option(size_t i) {
  return getRuleContext<MySqlParser::Index_optionContext>(i);
}

MySqlParser::Id_Context* MySqlParser::AltblAddPKContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::AltblAddPKContext::AltblAddPKContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblAddPKContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblAddPK(this);
}
void MySqlParser::AltblAddPKContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblAddPK(this);
}
//----------------- AltblDropIndexContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblDropIndexContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

MySqlParser::Id_Context* MySqlParser::AltblDropIndexContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::AltblDropIndexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::AltblDropIndexContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::AltblDropIndexContext::AltblDropIndexContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblDropIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblDropIndex(this);
}
void MySqlParser::AltblDropIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblDropIndex(this);
}
//----------------- AltblAddPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblAddPartContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AltblAddPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Partition_defContext* MySqlParser::AltblAddPartContext::partition_def() {
  return getRuleContext<MySqlParser::Partition_defContext>(0);
}

MySqlParser::AltblAddPartContext::AltblAddPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblAddPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblAddPart(this);
}
void MySqlParser::AltblAddPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblAddPart(this);
}
//----------------- AltblImportPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblImportPartContext::IMPORT() {
  return getToken(MySqlParser::IMPORT, 0);
}

tree::TerminalNode* MySqlParser::AltblImportPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

tree::TerminalNode* MySqlParser::AltblImportPartContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::Id_listContext* MySqlParser::AltblImportPartContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblImportPartContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AltblImportPartContext::AltblImportPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblImportPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblImportPart(this);
}
void MySqlParser::AltblImportPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblImportPart(this);
}
//----------------- AltblResortContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblResortContext::ORDER() {
  return getToken(MySqlParser::ORDER, 0);
}

tree::TerminalNode* MySqlParser::AltblResortContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

MySqlParser::Id_listContext* MySqlParser::AltblResortContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

MySqlParser::AltblResortContext::AltblResortContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblResortContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblResort(this);
}
void MySqlParser::AltblResortContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblResort(this);
}
//----------------- AltblUpgrPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblUpgrPartContext::UPGRADE() {
  return getToken(MySqlParser::UPGRADE, 0);
}

tree::TerminalNode* MySqlParser::AltblUpgrPartContext::PARTITIONING() {
  return getToken(MySqlParser::PARTITIONING, 0);
}

MySqlParser::AltblUpgrPartContext::AltblUpgrPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblUpgrPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblUpgrPart(this);
}
void MySqlParser::AltblUpgrPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblUpgrPart(this);
}
//----------------- AltblForceContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblForceContext::FORCE() {
  return getToken(MySqlParser::FORCE, 0);
}

MySqlParser::AltblForceContext::AltblForceContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblForceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblForce(this);
}
void MySqlParser::AltblForceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblForce(this);
}
//----------------- AltblRenameTblContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblRenameTblContext::RENAME() {
  return getToken(MySqlParser::RENAME, 0);
}

MySqlParser::Id_Context* MySqlParser::AltblRenameTblContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::AltblRenameTblContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

tree::TerminalNode* MySqlParser::AltblRenameTblContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::AltblRenameTblContext::AltblRenameTblContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblRenameTblContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblRenameTbl(this);
}
void MySqlParser::AltblRenameTblContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblRenameTbl(this);
}
//----------------- AltblDropPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblDropPartContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::AltblDropPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::AltblDropPartContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

MySqlParser::AltblDropPartContext::AltblDropPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblDropPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblDropPart(this);
}
void MySqlParser::AltblDropPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblDropPart(this);
}
//----------------- AltblImpTblSpaceContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblImpTblSpaceContext::IMPORT() {
  return getToken(MySqlParser::IMPORT, 0);
}

tree::TerminalNode* MySqlParser::AltblImpTblSpaceContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::AltblImpTblSpaceContext::AltblImpTblSpaceContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblImpTblSpaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblImpTblSpace(this);
}
void MySqlParser::AltblImpTblSpaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblImpTblSpace(this);
}
//----------------- AltblAnalPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblAnalPartContext::ANALYZE() {
  return getToken(MySqlParser::ANALYZE, 0);
}

tree::TerminalNode* MySqlParser::AltblAnalPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::AltblAnalPartContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblAnalPartContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AltblAnalPartContext::AltblAnalPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblAnalPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblAnalPart(this);
}
void MySqlParser::AltblAnalPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblAnalPart(this);
}
//----------------- AltblTruncPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblTruncPartContext::TRUNCATE() {
  return getToken(MySqlParser::TRUNCATE, 0);
}

tree::TerminalNode* MySqlParser::AltblTruncPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::AltblTruncPartContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblTruncPartContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AltblTruncPartContext::AltblTruncPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblTruncPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblTruncPart(this);
}
void MySqlParser::AltblTruncPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblTruncPart(this);
}
//----------------- AltblAlgContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblAlgContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

tree::TerminalNode* MySqlParser::AltblAlgContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::AltblAlgContext::INPLACE() {
  return getToken(MySqlParser::INPLACE, 0);
}

tree::TerminalNode* MySqlParser::AltblAlgContext::COPY() {
  return getToken(MySqlParser::COPY, 0);
}

MySqlParser::AltblAlgContext::AltblAlgContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblAlgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblAlg(this);
}
void MySqlParser::AltblAlgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblAlg(this);
}
//----------------- AltblDefCharsetContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblDefCharsetContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::AltblDefCharsetContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

MySqlParser::Charset_nameContext* MySqlParser::AltblDefCharsetContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::AltblDefCharsetContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::AltblDefCharsetContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::Collation_nameContext* MySqlParser::AltblDefCharsetContext::collation_name() {
  return getRuleContext<MySqlParser::Collation_nameContext>(0);
}

MySqlParser::AltblDefCharsetContext::AltblDefCharsetContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblDefCharsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblDefCharset(this);
}
void MySqlParser::AltblDefCharsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblDefCharset(this);
}
//----------------- AltblAddSpecIndexContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblAddSpecIndexContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

MySqlParser::Index_colname_listContext* MySqlParser::AltblAddSpecIndexContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblAddSpecIndexContext::FULLTEXT() {
  return getToken(MySqlParser::FULLTEXT, 0);
}

tree::TerminalNode* MySqlParser::AltblAddSpecIndexContext::SPATIAL() {
  return getToken(MySqlParser::SPATIAL, 0);
}

MySqlParser::Id_Context* MySqlParser::AltblAddSpecIndexContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

std::vector<MySqlParser::Index_optionContext *> MySqlParser::AltblAddSpecIndexContext::index_option() {
  return getRuleContexts<MySqlParser::Index_optionContext>();
}

MySqlParser::Index_optionContext* MySqlParser::AltblAddSpecIndexContext::index_option(size_t i) {
  return getRuleContext<MySqlParser::Index_optionContext>(i);
}

tree::TerminalNode* MySqlParser::AltblAddSpecIndexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::AltblAddSpecIndexContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::AltblAddSpecIndexContext::AltblAddSpecIndexContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblAddSpecIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblAddSpecIndex(this);
}
void MySqlParser::AltblAddSpecIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblAddSpecIndex(this);
}
//----------------- AltblValidContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblValidContext::VALIDATION() {
  return getToken(MySqlParser::VALIDATION, 0);
}

tree::TerminalNode* MySqlParser::AltblValidContext::WITHOUT() {
  return getToken(MySqlParser::WITHOUT, 0);
}

tree::TerminalNode* MySqlParser::AltblValidContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

MySqlParser::AltblValidContext::AltblValidContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblValidContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblValid(this);
}
void MySqlParser::AltblValidContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblValid(this);
}
//----------------- AltblRebuildPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblRebuildPartContext::REBUILD() {
  return getToken(MySqlParser::REBUILD, 0);
}

tree::TerminalNode* MySqlParser::AltblRebuildPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::AltblRebuildPartContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblRebuildPartContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AltblRebuildPartContext::AltblRebuildPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblRebuildPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblRebuildPart(this);
}
void MySqlParser::AltblRebuildPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblRebuildPart(this);
}
//----------------- AltblRepairPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblRepairPartContext::REPAIR() {
  return getToken(MySqlParser::REPAIR, 0);
}

tree::TerminalNode* MySqlParser::AltblRepairPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::AltblRepairPartContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblRepairPartContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AltblRepairPartContext::AltblRepairPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblRepairPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblRepairPart(this);
}
void MySqlParser::AltblRepairPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblRepairPart(this);
}
//----------------- AltblColDropContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblColDropContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

MySqlParser::Id_Context* MySqlParser::AltblColDropContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::AltblColDropContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

MySqlParser::AltblColDropContext::AltblColDropContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblColDropContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblColDrop(this);
}
void MySqlParser::AltblColDropContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblColDrop(this);
}
//----------------- AltblExchPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblExchPartContext::EXCHANGE() {
  return getToken(MySqlParser::EXCHANGE, 0);
}

tree::TerminalNode* MySqlParser::AltblExchPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_Context* MySqlParser::AltblExchPartContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::AltblExchPartContext::WITH() {
  return getTokens(MySqlParser::WITH);
}

tree::TerminalNode* MySqlParser::AltblExchPartContext::WITH(size_t i) {
  return getToken(MySqlParser::WITH, i);
}

tree::TerminalNode* MySqlParser::AltblExchPartContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_nameContext* MySqlParser::AltblExchPartContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::AltblExchPartContext::VALIDATION() {
  return getToken(MySqlParser::VALIDATION, 0);
}

tree::TerminalNode* MySqlParser::AltblExchPartContext::WITHOUT() {
  return getToken(MySqlParser::WITHOUT, 0);
}

MySqlParser::AltblExchPartContext::AltblExchPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblExchPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblExchPart(this);
}
void MySqlParser::AltblExchPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblExchPart(this);
}
//----------------- AltblAddFKContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblAddFKContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AltblAddFKContext::FOREIGN() {
  return getToken(MySqlParser::FOREIGN, 0);
}

tree::TerminalNode* MySqlParser::AltblAddFKContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::Index_colname_listContext* MySqlParser::AltblAddFKContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

MySqlParser::Reference_definitionContext* MySqlParser::AltblAddFKContext::reference_definition() {
  return getRuleContext<MySqlParser::Reference_definitionContext>(0);
}

tree::TerminalNode* MySqlParser::AltblAddFKContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::AltblAddFKContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::AltblAddFKContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

MySqlParser::AltblAddFKContext::AltblAddFKContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblAddFKContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblAddFK(this);
}
void MySqlParser::AltblAddFKContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblAddFK(this);
}
//----------------- AltblDiscartPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblDiscartPartContext::DISCARD() {
  return getToken(MySqlParser::DISCARD, 0);
}

tree::TerminalNode* MySqlParser::AltblDiscartPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

tree::TerminalNode* MySqlParser::AltblDiscartPartContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::Id_listContext* MySqlParser::AltblDiscartPartContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblDiscartPartContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AltblDiscartPartContext::AltblDiscartPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblDiscartPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblDiscartPart(this);
}
void MySqlParser::AltblDiscartPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblDiscartPart(this);
}
//----------------- AltblCheckPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblCheckPartContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

tree::TerminalNode* MySqlParser::AltblCheckPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::AltblCheckPartContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblCheckPartContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AltblCheckPartContext::AltblCheckPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblCheckPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblCheckPart(this);
}
void MySqlParser::AltblCheckPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblCheckPart(this);
}
//----------------- AltblColChangeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblColChangeContext::CHANGE() {
  return getToken(MySqlParser::CHANGE, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::AltblColChangeContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::AltblColChangeContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

MySqlParser::Column_definitionContext* MySqlParser::AltblColChangeContext::column_definition() {
  return getRuleContext<MySqlParser::Column_definitionContext>(0);
}

tree::TerminalNode* MySqlParser::AltblColChangeContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

tree::TerminalNode* MySqlParser::AltblColChangeContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::AltblColChangeContext::AFTER() {
  return getToken(MySqlParser::AFTER, 0);
}

MySqlParser::AltblColChangeContext::AltblColChangeContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblColChangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblColChange(this);
}
void MySqlParser::AltblColChangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblColChange(this);
}
//----------------- AltblColDefContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblColDefContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

MySqlParser::Id_Context* MySqlParser::AltblColDefContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::AltblColDefContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::AltblColDefContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::Default_valueContext* MySqlParser::AltblColDefContext::default_value() {
  return getRuleContext<MySqlParser::Default_valueContext>(0);
}

tree::TerminalNode* MySqlParser::AltblColDefContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::AltblColDefContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

MySqlParser::AltblColDefContext::AltblColDefContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblColDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblColDef(this);
}
void MySqlParser::AltblColDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblColDef(this);
}
//----------------- AltblAddColContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblAddColContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::AltblAddColContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::AltblAddColContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

MySqlParser::Column_definitionContext* MySqlParser::AltblAddColContext::column_definition() {
  return getRuleContext<MySqlParser::Column_definitionContext>(0);
}

tree::TerminalNode* MySqlParser::AltblAddColContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

tree::TerminalNode* MySqlParser::AltblAddColContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::AltblAddColContext::AFTER() {
  return getToken(MySqlParser::AFTER, 0);
}

MySqlParser::AltblAddColContext::AltblAddColContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblAddColContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblAddCol(this);
}
void MySqlParser::AltblAddColContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblAddCol(this);
}
//----------------- AltblDisTblspaceContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblDisTblspaceContext::DISCARD() {
  return getToken(MySqlParser::DISCARD, 0);
}

tree::TerminalNode* MySqlParser::AltblDisTblspaceContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::AltblDisTblspaceContext::AltblDisTblspaceContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblDisTblspaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblDisTblspace(this);
}
void MySqlParser::AltblDisTblspaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblDisTblspace(this);
}
//----------------- AltblAddIndexContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblAddIndexContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

MySqlParser::Index_colname_listContext* MySqlParser::AltblAddIndexContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblAddIndexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::AltblAddIndexContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::Id_Context* MySqlParser::AltblAddIndexContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::Index_typeContext* MySqlParser::AltblAddIndexContext::index_type() {
  return getRuleContext<MySqlParser::Index_typeContext>(0);
}

std::vector<MySqlParser::Index_optionContext *> MySqlParser::AltblAddIndexContext::index_option() {
  return getRuleContexts<MySqlParser::Index_optionContext>();
}

MySqlParser::Index_optionContext* MySqlParser::AltblAddIndexContext::index_option(size_t i) {
  return getRuleContext<MySqlParser::Index_optionContext>(i);
}

MySqlParser::AltblAddIndexContext::AltblAddIndexContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblAddIndexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblAddIndex(this);
}
void MySqlParser::AltblAddIndexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblAddIndex(this);
}
//----------------- AltblAddUKContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblAddUKContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

tree::TerminalNode* MySqlParser::AltblAddUKContext::UNIQUE() {
  return getToken(MySqlParser::UNIQUE, 0);
}

MySqlParser::Index_colname_listContext* MySqlParser::AltblAddUKContext::index_colname_list() {
  return getRuleContext<MySqlParser::Index_colname_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblAddUKContext::CONSTRAINT() {
  return getToken(MySqlParser::CONSTRAINT, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::AltblAddUKContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::AltblAddUKContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

MySqlParser::Index_typeContext* MySqlParser::AltblAddUKContext::index_type() {
  return getRuleContext<MySqlParser::Index_typeContext>(0);
}

std::vector<MySqlParser::Index_optionContext *> MySqlParser::AltblAddUKContext::index_option() {
  return getRuleContexts<MySqlParser::Index_optionContext>();
}

MySqlParser::Index_optionContext* MySqlParser::AltblAddUKContext::index_option(size_t i) {
  return getRuleContext<MySqlParser::Index_optionContext>(i);
}

tree::TerminalNode* MySqlParser::AltblAddUKContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::AltblAddUKContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::AltblAddUKContext::AltblAddUKContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblAddUKContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblAddUK(this);
}
void MySqlParser::AltblAddUKContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblAddUK(this);
}
//----------------- AltblColModContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblColModContext::MODIFY() {
  return getToken(MySqlParser::MODIFY, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::AltblColModContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::AltblColModContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

MySqlParser::Column_definitionContext* MySqlParser::AltblColModContext::column_definition() {
  return getRuleContext<MySqlParser::Column_definitionContext>(0);
}

tree::TerminalNode* MySqlParser::AltblColModContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

tree::TerminalNode* MySqlParser::AltblColModContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::AltblColModContext::AFTER() {
  return getToken(MySqlParser::AFTER, 0);
}

MySqlParser::AltblColModContext::AltblColModContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblColModContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblColMod(this);
}
void MySqlParser::AltblColModContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblColMod(this);
}
//----------------- AltblCoalPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblCoalPartContext::COALESCE() {
  return getToken(MySqlParser::COALESCE, 0);
}

tree::TerminalNode* MySqlParser::AltblCoalPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::AltblCoalPartContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::AltblCoalPartContext::AltblCoalPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblCoalPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblCoalPart(this);
}
void MySqlParser::AltblCoalPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblCoalPart(this);
}
//----------------- AltblOptimPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblOptimPartContext::OPTIMIZE() {
  return getToken(MySqlParser::OPTIMIZE, 0);
}

tree::TerminalNode* MySqlParser::AltblOptimPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::AltblOptimPartContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblOptimPartContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::AltblOptimPartContext::AltblOptimPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblOptimPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblOptimPart(this);
}
void MySqlParser::AltblOptimPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblOptimPart(this);
}
//----------------- AltblEnKeyContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblEnKeyContext::ENABLE() {
  return getToken(MySqlParser::ENABLE, 0);
}

tree::TerminalNode* MySqlParser::AltblEnKeyContext::KEYS() {
  return getToken(MySqlParser::KEYS, 0);
}

MySqlParser::AltblEnKeyContext::AltblEnKeyContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblEnKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblEnKey(this);
}
void MySqlParser::AltblEnKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblEnKey(this);
}
//----------------- AltblLockContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblLockContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::AltblLockContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::AltblLockContext::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

tree::TerminalNode* MySqlParser::AltblLockContext::SHARED() {
  return getToken(MySqlParser::SHARED, 0);
}

tree::TerminalNode* MySqlParser::AltblLockContext::EXCLUSIVE() {
  return getToken(MySqlParser::EXCLUSIVE, 0);
}

MySqlParser::AltblLockContext::AltblLockContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblLockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblLock(this);
}
void MySqlParser::AltblLockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblLock(this);
}
//----------------- AltblRemovePartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblRemovePartContext::REMOVE() {
  return getToken(MySqlParser::REMOVE, 0);
}

tree::TerminalNode* MySqlParser::AltblRemovePartContext::PARTITIONING() {
  return getToken(MySqlParser::PARTITIONING, 0);
}

MySqlParser::AltblRemovePartContext::AltblRemovePartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblRemovePartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblRemovePart(this);
}
void MySqlParser::AltblRemovePartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblRemovePart(this);
}
//----------------- AltblConvertContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblConvertContext::CONVERT() {
  return getToken(MySqlParser::CONVERT, 0);
}

tree::TerminalNode* MySqlParser::AltblConvertContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

tree::TerminalNode* MySqlParser::AltblConvertContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::AltblConvertContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

MySqlParser::Charset_nameContext* MySqlParser::AltblConvertContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::AltblConvertContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::Collation_nameContext* MySqlParser::AltblConvertContext::collation_name() {
  return getRuleContext<MySqlParser::Collation_nameContext>(0);
}

MySqlParser::AltblConvertContext::AltblConvertContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblConvertContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblConvert(this);
}
void MySqlParser::AltblConvertContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblConvert(this);
}
//----------------- AltblTableOptContext ------------------------------------------------------------------

MySqlParser::Table_optionContext* MySqlParser::AltblTableOptContext::table_option() {
  return getRuleContext<MySqlParser::Table_optionContext>(0);
}

MySqlParser::AltblTableOptContext::AltblTableOptContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblTableOptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblTableOpt(this);
}
void MySqlParser::AltblTableOptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblTableOpt(this);
}
//----------------- AltblReorgPartContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblReorgPartContext::REORGANIZE() {
  return getToken(MySqlParser::REORGANIZE, 0);
}

tree::TerminalNode* MySqlParser::AltblReorgPartContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::AltblReorgPartContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::AltblReorgPartContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

std::vector<MySqlParser::Partition_defContext *> MySqlParser::AltblReorgPartContext::partition_def() {
  return getRuleContexts<MySqlParser::Partition_defContext>();
}

MySqlParser::Partition_defContext* MySqlParser::AltblReorgPartContext::partition_def(size_t i) {
  return getRuleContext<MySqlParser::Partition_defContext>(i);
}

MySqlParser::AltblReorgPartContext::AltblReorgPartContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblReorgPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblReorgPart(this);
}
void MySqlParser::AltblReorgPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblReorgPart(this);
}
//----------------- AltblDropFKContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblDropFKContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::AltblDropFKContext::FOREIGN() {
  return getToken(MySqlParser::FOREIGN, 0);
}

tree::TerminalNode* MySqlParser::AltblDropFKContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

MySqlParser::Id_Context* MySqlParser::AltblDropFKContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::AltblDropFKContext::AltblDropFKContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblDropFKContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblDropFK(this);
}
void MySqlParser::AltblDropFKContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblDropFK(this);
}
//----------------- AltblAddColsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AltblAddColsContext::ADD() {
  return getToken(MySqlParser::ADD, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::AltblAddColsContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::AltblAddColsContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

std::vector<MySqlParser::Column_definitionContext *> MySqlParser::AltblAddColsContext::column_definition() {
  return getRuleContexts<MySqlParser::Column_definitionContext>();
}

MySqlParser::Column_definitionContext* MySqlParser::AltblAddColsContext::column_definition(size_t i) {
  return getRuleContext<MySqlParser::Column_definitionContext>(i);
}

tree::TerminalNode* MySqlParser::AltblAddColsContext::COLUMN() {
  return getToken(MySqlParser::COLUMN, 0);
}

MySqlParser::AltblAddColsContext::AltblAddColsContext(Alter_table_specContext *ctx) { copyFrom(ctx); }

void MySqlParser::AltblAddColsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltblAddCols(this);
}
void MySqlParser::AltblAddColsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltblAddCols(this);
}
MySqlParser::Alter_table_specContext* MySqlParser::alter_table_spec() {
  Alter_table_specContext *_localctx = _tracker.createInstance<Alter_table_specContext>(_ctx, getState());
  enterRule(_localctx, 124, MySqlParser::RuleAlter_table_spec);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2371);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblTableOptContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2065);
      table_option();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblAddColContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2066);
      match(MySqlParser::ADD);
      setState(2068);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2067);
        match(MySqlParser::COLUMN);
      }
      setState(2070);
      id_();
      setState(2071);
      column_definition();
      setState(2075);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::FIRST: {
          setState(2072);
          match(MySqlParser::FIRST);
          break;
        }

        case MySqlParser::AFTER: {
          setState(2073);
          match(MySqlParser::AFTER);
          setState(2074);
          id_();
          break;
        }

        case MySqlParser::EOF:
        case MySqlParser::PARTITION:
        case MySqlParser::MINUS:
        case MySqlParser::COMMA:
        case MySqlParser::SEMI: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblAddColsContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2077);
      match(MySqlParser::ADD);
      setState(2079);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2078);
        match(MySqlParser::COLUMN);
      }
      setState(2081);
      match(MySqlParser::LR_BRACKET);
      setState(2082);
      id_();
      setState(2083);
      column_definition();
      setState(2090);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2084);
        match(MySqlParser::COMMA);
        setState(2085);
        id_();
        setState(2086);
        column_definition();
        setState(2092);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2093);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblAddIndexContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2095);
      match(MySqlParser::ADD);
      setState(2096);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2098);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LEFT

      || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
        | (1ULL << (MySqlParser::TIME - 181))
        | (1ULL << (MySqlParser::TIMESTAMP - 181))
        | (1ULL << (MySqlParser::DATETIME - 181))
        | (1ULL << (MySqlParser::YEAR - 181))
        | (1ULL << (MySqlParser::TEXT - 181))
        | (1ULL << (MySqlParser::ENUM - 181))
        | (1ULL << (MySqlParser::COUNT - 181))
        | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
        | (1ULL << (MySqlParser::AFTER - 246))
        | (1ULL << (MySqlParser::ALGORITHM - 246))
        | (1ULL << (MySqlParser::ANY - 246))
        | (1ULL << (MySqlParser::AT - 246))
        | (1ULL << (MySqlParser::AUTHORS - 246))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
        | (1ULL << (MySqlParser::BEGIN - 246))
        | (1ULL << (MySqlParser::BINLOG - 246))
        | (1ULL << (MySqlParser::BIT - 246))
        | (1ULL << (MySqlParser::BTREE - 246))
        | (1ULL << (MySqlParser::CASCADED - 246))
        | (1ULL << (MySqlParser::CHAIN - 246))
        | (1ULL << (MySqlParser::CHECKSUM - 246))
        | (1ULL << (MySqlParser::CIPHER - 246))
        | (1ULL << (MySqlParser::CLIENT - 246))
        | (1ULL << (MySqlParser::COALESCE - 246))
        | (1ULL << (MySqlParser::CODE - 246))
        | (1ULL << (MySqlParser::COLUMNS - 246))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
        | (1ULL << (MySqlParser::COMMENT - 246))
        | (1ULL << (MySqlParser::COMMIT - 246))
        | (1ULL << (MySqlParser::COMPACT - 246))
        | (1ULL << (MySqlParser::COMPLETION - 246))
        | (1ULL << (MySqlParser::COMPRESSED - 246))
        | (1ULL << (MySqlParser::CONCURRENT - 246))
        | (1ULL << (MySqlParser::CONNECTION - 246))
        | (1ULL << (MySqlParser::CONSISTENT - 246))
        | (1ULL << (MySqlParser::CONTAINS - 246))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
        | (1ULL << (MySqlParser::COPY - 246))
        | (1ULL << (MySqlParser::DATA - 246))
        | (1ULL << (MySqlParser::DATAFILE - 246))
        | (1ULL << (MySqlParser::DEFINER - 246))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
        | (1ULL << (MySqlParser::DIRECTORY - 246))
        | (1ULL << (MySqlParser::DISABLE - 246))
        | (1ULL << (MySqlParser::DISCARD - 246))
        | (1ULL << (MySqlParser::DISK - 246))
        | (1ULL << (MySqlParser::DO - 246))
        | (1ULL << (MySqlParser::DUMPFILE - 246))
        | (1ULL << (MySqlParser::DUPLICATE - 246))
        | (1ULL << (MySqlParser::DYNAMIC - 246))
        | (1ULL << (MySqlParser::ENABLE - 246))
        | (1ULL << (MySqlParser::ENDS - 246))
        | (1ULL << (MySqlParser::ENGINE - 246))
        | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
        | (1ULL << (MySqlParser::ESCAPE - 311))
        | (1ULL << (MySqlParser::EVEN - 311))
        | (1ULL << (MySqlParser::EVENT - 311))
        | (1ULL << (MySqlParser::EVENTS - 311))
        | (1ULL << (MySqlParser::EVERY - 311))
        | (1ULL << (MySqlParser::EXCHANGE - 311))
        | (1ULL << (MySqlParser::EXCLUSIVE - 311))
        | (1ULL << (MySqlParser::EXPIRE - 311))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
        | (1ULL << (MySqlParser::FIELDS - 311))
        | (1ULL << (MySqlParser::FIRST - 311))
        | (1ULL << (MySqlParser::FIXED - 311))
        | (1ULL << (MySqlParser::FULL - 311))
        | (1ULL << (MySqlParser::FUNCTION - 311))
        | (1ULL << (MySqlParser::GLOBAL - 311))
        | (1ULL << (MySqlParser::GRANTS - 311))
        | (1ULL << (MySqlParser::HASH - 311))
        | (1ULL << (MySqlParser::HOST - 311))
        | (1ULL << (MySqlParser::IDENTIFIED - 311))
        | (1ULL << (MySqlParser::IMPORT - 311))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
        | (1ULL << (MySqlParser::INPLACE - 311))
        | (1ULL << (MySqlParser::INSERT_METHOD - 311))
        | (1ULL << (MySqlParser::INVOKER - 311))
        | (1ULL << (MySqlParser::ISOLATION - 311))
        | (1ULL << (MySqlParser::ISSUER - 311))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
        | (1ULL << (MySqlParser::LANGUAGE - 311))
        | (1ULL << (MySqlParser::LAST - 311))
        | (1ULL << (MySqlParser::LESS - 311))
        | (1ULL << (MySqlParser::LEVEL - 311))
        | (1ULL << (MySqlParser::LIST - 311))
        | (1ULL << (MySqlParser::LOCAL - 311))
        | (1ULL << (MySqlParser::LOGFILE - 311))
        | (1ULL << (MySqlParser::LOGS - 311))
        | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_ROWS - 391))
        | (1ULL << (MySqlParser::MAX_SIZE - 391))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
        | (1ULL << (MySqlParser::MERGE - 391))
        | (1ULL << (MySqlParser::MID - 391))
        | (1ULL << (MySqlParser::MIN_ROWS - 391))
        | (1ULL << (MySqlParser::MODIFY - 391))
        | (1ULL << (MySqlParser::MUTEX - 391))
        | (1ULL << (MySqlParser::MYSQL - 391))
        | (1ULL << (MySqlParser::NAME - 391))
        | (1ULL << (MySqlParser::NAMES - 391))
        | (1ULL << (MySqlParser::NCHAR - 391))
        | (1ULL << (MySqlParser::NO - 391))
        | (1ULL << (MySqlParser::NODEGROUP - 391))
        | (1ULL << (MySqlParser::NONE - 391))
        | (1ULL << (MySqlParser::OFFLINE - 391))
        | (1ULL << (MySqlParser::OFFSET - 391))
        | (1ULL << (MySqlParser::OJ - 391))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
        | (1ULL << (MySqlParser::ONLINE - 391))
        | (1ULL << (MySqlParser::ONLY - 391))
        | (1ULL << (MySqlParser::OPTIONS - 391))
        | (1ULL << (MySqlParser::OWNER - 391))
        | (1ULL << (MySqlParser::PACK_KEYS - 391))
        | (1ULL << (MySqlParser::PARSER - 391))
        | (1ULL << (MySqlParser::PARTIAL - 391))
        | (1ULL << (MySqlParser::PARTITIONING - 391))
        | (1ULL << (MySqlParser::PARTITIONS - 391))
        | (1ULL << (MySqlParser::PASSWORD - 391))
        | (1ULL << (MySqlParser::PLUGINS - 391))
        | (1ULL << (MySqlParser::PORT - 391))
        | (1ULL << (MySqlParser::PRESERVE - 391))
        | (1ULL << (MySqlParser::PROCESSLIST - 391))
        | (1ULL << (MySqlParser::PROFILE - 391))
        | (1ULL << (MySqlParser::PROFILES - 391))
        | (1ULL << (MySqlParser::PROXY - 391))
        | (1ULL << (MySqlParser::QUERY - 391))
        | (1ULL << (MySqlParser::QUICK - 391))
        | (1ULL << (MySqlParser::REBUILD - 391))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
        | (1ULL << (MySqlParser::REDUNDANT - 391))
        | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
        | (1ULL << (MySqlParser::REORGANIZE - 455))
        | (1ULL << (MySqlParser::REPAIR - 455))
        | (1ULL << (MySqlParser::REPLICATION - 455))
        | (1ULL << (MySqlParser::RETURNS - 455))
        | (1ULL << (MySqlParser::ROLLBACK - 455))
        | (1ULL << (MySqlParser::ROLLUP - 455))
        | (1ULL << (MySqlParser::ROW - 455))
        | (1ULL << (MySqlParser::ROWS - 455))
        | (1ULL << (MySqlParser::ROW_FORMAT - 455))
        | (1ULL << (MySqlParser::SAVEPOINT - 455))
        | (1ULL << (MySqlParser::SCHEDULE - 455))
        | (1ULL << (MySqlParser::SECURITY - 455))
        | (1ULL << (MySqlParser::SERVER - 455))
        | (1ULL << (MySqlParser::SESSION - 455))
        | (1ULL << (MySqlParser::SHARE - 455))
        | (1ULL << (MySqlParser::SHARED - 455))
        | (1ULL << (MySqlParser::SIGNED - 455))
        | (1ULL << (MySqlParser::SIMPLE - 455))
        | (1ULL << (MySqlParser::SLAVE - 455))
        | (1ULL << (MySqlParser::SNAPSHOT - 455))
        | (1ULL << (MySqlParser::SOCKET - 455))
        | (1ULL << (MySqlParser::SOME - 455))
        | (1ULL << (MySqlParser::SOUNDS - 455))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
        | (1ULL << (MySqlParser::SQL_CACHE - 455))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
        | (1ULL << (MySqlParser::START - 455))
        | (1ULL << (MySqlParser::STARTS - 455))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
        | (1ULL << (MySqlParser::STATUS - 455))
        | (1ULL << (MySqlParser::STORAGE - 455))
        | (1ULL << (MySqlParser::SUBJECT - 455))
        | (1ULL << (MySqlParser::SUBPARTITION - 455))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
        | (1ULL << (MySqlParser::TABLESPACE - 455))
        | (1ULL << (MySqlParser::TEMPORARY - 455))
        | (1ULL << (MySqlParser::TEMPTABLE - 455))
        | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
        | (1ULL << (MySqlParser::TRUNCATE - 519))
        | (1ULL << (MySqlParser::UNDEFINED - 519))
        | (1ULL << (MySqlParser::UNDOFILE - 519))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
        | (1ULL << (MySqlParser::UNKNOWN - 519))
        | (1ULL << (MySqlParser::UPGRADE - 519))
        | (1ULL << (MySqlParser::USER - 519))
        | (1ULL << (MySqlParser::VALUE - 519))
        | (1ULL << (MySqlParser::VARIABLES - 519))
        | (1ULL << (MySqlParser::VIEW - 519))
        | (1ULL << (MySqlParser::WAIT - 519))
        | (1ULL << (MySqlParser::WARNINGS - 519))
        | (1ULL << (MySqlParser::WORK - 519))
        | (1ULL << (MySqlParser::WRAPPER - 519))
        | (1ULL << (MySqlParser::X509 - 519))
        | (1ULL << (MySqlParser::XML - 519))
        | (1ULL << (MySqlParser::QUARTER - 519))
        | (1ULL << (MySqlParser::MONTH - 519))
        | (1ULL << (MySqlParser::DAY - 519))
        | (1ULL << (MySqlParser::HOUR - 519))
        | (1ULL << (MySqlParser::MINUTE - 519))
        | (1ULL << (MySqlParser::WEEK - 519))
        | (1ULL << (MySqlParser::SECOND - 519))
        | (1ULL << (MySqlParser::MICROSECOND - 519))
        | (1ULL << (MySqlParser::TABLES - 519))
        | (1ULL << (MySqlParser::ROUTINE - 519))
        | (1ULL << (MySqlParser::EXECUTE - 519))
        | (1ULL << (MySqlParser::FILE - 519))
        | (1ULL << (MySqlParser::PROCESS - 519))
        | (1ULL << (MySqlParser::RELOAD - 519))
        | (1ULL << (MySqlParser::SHUTDOWN - 519))
        | (1ULL << (MySqlParser::SUPER - 519))
        | (1ULL << (MySqlParser::PRIVILEGES - 519))
        | (1ULL << (MySqlParser::ARMSCII8 - 519))
        | (1ULL << (MySqlParser::ASCII - 519))
        | (1ULL << (MySqlParser::BIG5 - 519))
        | (1ULL << (MySqlParser::CP1250 - 519))
        | (1ULL << (MySqlParser::CP1251 - 519))
        | (1ULL << (MySqlParser::CP1256 - 519))
        | (1ULL << (MySqlParser::CP1257 - 519))
        | (1ULL << (MySqlParser::CP850 - 519))
        | (1ULL << (MySqlParser::CP852 - 519))
        | (1ULL << (MySqlParser::CP866 - 519))
        | (1ULL << (MySqlParser::CP932 - 519))
        | (1ULL << (MySqlParser::DEC8 - 519))
        | (1ULL << (MySqlParser::EUCJPMS - 519))
        | (1ULL << (MySqlParser::EUCKR - 519))
        | (1ULL << (MySqlParser::GB2312 - 519))
        | (1ULL << (MySqlParser::GBK - 519))
        | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
        | (1ULL << (MySqlParser::HEBREW - 583))
        | (1ULL << (MySqlParser::HP8 - 583))
        | (1ULL << (MySqlParser::KEYBCS2 - 583))
        | (1ULL << (MySqlParser::KOI8R - 583))
        | (1ULL << (MySqlParser::KOI8U - 583))
        | (1ULL << (MySqlParser::LATIN1 - 583))
        | (1ULL << (MySqlParser::LATIN2 - 583))
        | (1ULL << (MySqlParser::LATIN5 - 583))
        | (1ULL << (MySqlParser::LATIN7 - 583))
        | (1ULL << (MySqlParser::MACCE - 583))
        | (1ULL << (MySqlParser::MACROMAN - 583))
        | (1ULL << (MySqlParser::SJIS - 583))
        | (1ULL << (MySqlParser::SWE7 - 583))
        | (1ULL << (MySqlParser::TIS620 - 583))
        | (1ULL << (MySqlParser::UCS2 - 583))
        | (1ULL << (MySqlParser::UJIS - 583))
        | (1ULL << (MySqlParser::UTF16 - 583))
        | (1ULL << (MySqlParser::UTF16LE - 583))
        | (1ULL << (MySqlParser::UTF32 - 583))
        | (1ULL << (MySqlParser::UTF8 - 583))
        | (1ULL << (MySqlParser::UTF8MB3 - 583))
        | (1ULL << (MySqlParser::UTF8MB4 - 583))
        | (1ULL << (MySqlParser::ARCHIVE - 583))
        | (1ULL << (MySqlParser::BLACKHOLE - 583))
        | (1ULL << (MySqlParser::CSV - 583))
        | (1ULL << (MySqlParser::FEDERATED - 583))
        | (1ULL << (MySqlParser::INNODB - 583))
        | (1ULL << (MySqlParser::MEMORY - 583))
        | (1ULL << (MySqlParser::MRG_MYISAM - 583))
        | (1ULL << (MySqlParser::MYISAM - 583))
        | (1ULL << (MySqlParser::NDB - 583))
        | (1ULL << (MySqlParser::NDBCLUSTER - 583))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
        | (1ULL << (MySqlParser::REPEATABLE - 583))
        | (1ULL << (MySqlParser::COMMITTED - 583))
        | (1ULL << (MySqlParser::UNCOMMITTED - 583))
        | (1ULL << (MySqlParser::SERIALIZABLE - 583))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
        | (1ULL << (MySqlParser::LINESTRING - 583))
        | (1ULL << (MySqlParser::MULTILINESTRING - 583))
        | (1ULL << (MySqlParser::MULTIPOINT - 583))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
        | (1ULL << (MySqlParser::POINT - 583))
        | (1ULL << (MySqlParser::POLYGON - 583))
        | (1ULL << (MySqlParser::ABS - 583))
        | (1ULL << (MySqlParser::ACOS - 583))
        | (1ULL << (MySqlParser::ADDDATE - 583))
        | (1ULL << (MySqlParser::ADDTIME - 583))
        | (1ULL << (MySqlParser::AES_DECRYPT - 583))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
        | (1ULL << (MySqlParser::AREA - 583))
        | (1ULL << (MySqlParser::ASBINARY - 583))
        | (1ULL << (MySqlParser::ASIN - 583))
        | (1ULL << (MySqlParser::ASTEXT - 583))
        | (1ULL << (MySqlParser::ASWKB - 583))
        | (1ULL << (MySqlParser::ASWKT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
        | (1ULL << (MySqlParser::ATAN - 583))
        | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
        | (1ULL << (MySqlParser::BIN - 647))
        | (1ULL << (MySqlParser::BIT_COUNT - 647))
        | (1ULL << (MySqlParser::BIT_LENGTH - 647))
        | (1ULL << (MySqlParser::BUFFER - 647))
        | (1ULL << (MySqlParser::CEIL - 647))
        | (1ULL << (MySqlParser::CEILING - 647))
        | (1ULL << (MySqlParser::CENTROID - 647))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
        | (1ULL << (MySqlParser::CHARSET - 647))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
        | (1ULL << (MySqlParser::COERCIBILITY - 647))
        | (1ULL << (MySqlParser::COLLATION - 647))
        | (1ULL << (MySqlParser::COMPRESS - 647))
        | (1ULL << (MySqlParser::CONCAT - 647))
        | (1ULL << (MySqlParser::CONCAT_WS - 647))
        | (1ULL << (MySqlParser::CONNECTION_ID - 647))
        | (1ULL << (MySqlParser::CONV - 647))
        | (1ULL << (MySqlParser::CONVERT_TZ - 647))
        | (1ULL << (MySqlParser::COS - 647))
        | (1ULL << (MySqlParser::COT - 647))
        | (1ULL << (MySqlParser::CRC32 - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
        | (1ULL << (MySqlParser::CROSSES - 647))
        | (1ULL << (MySqlParser::DATEDIFF - 647))
        | (1ULL << (MySqlParser::DATE_FORMAT - 647))
        | (1ULL << (MySqlParser::DAYNAME - 647))
        | (1ULL << (MySqlParser::DAYOFMONTH - 647))
        | (1ULL << (MySqlParser::DAYOFWEEK - 647))
        | (1ULL << (MySqlParser::DAYOFYEAR - 647))
        | (1ULL << (MySqlParser::DECODE - 647))
        | (1ULL << (MySqlParser::DEGREES - 647))
        | (1ULL << (MySqlParser::DES_DECRYPT - 647))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
        | (1ULL << (MySqlParser::DIMENSION - 647))
        | (1ULL << (MySqlParser::DISJOINT - 647))
        | (1ULL << (MySqlParser::ELT - 647))
        | (1ULL << (MySqlParser::ENCODE - 647))
        | (1ULL << (MySqlParser::ENCRYPT - 647))
        | (1ULL << (MySqlParser::ENDPOINT - 647))
        | (1ULL << (MySqlParser::ENVELOPE - 647))
        | (1ULL << (MySqlParser::EQUALS - 647))
        | (1ULL << (MySqlParser::EXP - 647))
        | (1ULL << (MySqlParser::EXPORT_SET - 647))
        | (1ULL << (MySqlParser::EXTERIORRING - 647))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
        | (1ULL << (MySqlParser::FIELD - 647))
        | (1ULL << (MySqlParser::FIND_IN_SET - 647))
        | (1ULL << (MySqlParser::FLOOR - 647))
        | (1ULL << (MySqlParser::FORMAT - 647))
        | (1ULL << (MySqlParser::FOUND_ROWS - 647))
        | (1ULL << (MySqlParser::FROM_BASE64 - 647))
        | (1ULL << (MySqlParser::FROM_DAYS - 647))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
        | (1ULL << (MySqlParser::GET_FORMAT - 711))
        | (1ULL << (MySqlParser::GET_LOCK - 711))
        | (1ULL << (MySqlParser::GLENGTH - 711))
        | (1ULL << (MySqlParser::GREATEST - 711))
        | (1ULL << (MySqlParser::GTID_SUBSET - 711))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
        | (1ULL << (MySqlParser::HEX - 711))
        | (1ULL << (MySqlParser::IFNULL - 711))
        | (1ULL << (MySqlParser::INET6_ATON - 711))
        | (1ULL << (MySqlParser::INET6_NTOA - 711))
        | (1ULL << (MySqlParser::INET_ATON - 711))
        | (1ULL << (MySqlParser::INET_NTOA - 711))
        | (1ULL << (MySqlParser::INSTR - 711))
        | (1ULL << (MySqlParser::INTERIORRINGN - 711))
        | (1ULL << (MySqlParser::INTERSECTS - 711))
        | (1ULL << (MySqlParser::ISCLOSED - 711))
        | (1ULL << (MySqlParser::ISEMPTY - 711))
        | (1ULL << (MySqlParser::ISNULL - 711))
        | (1ULL << (MySqlParser::ISSIMPLE - 711))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
        | (1ULL << (MySqlParser::IS_IPV4 - 711))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
        | (1ULL << (MySqlParser::IS_IPV6 - 711))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
        | (1ULL << (MySqlParser::LCASE - 711))
        | (1ULL << (MySqlParser::LEAST - 711))
        | (1ULL << (MySqlParser::LENGTH - 711))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINEFROMWKB - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
        | (1ULL << (MySqlParser::LN - 711))
        | (1ULL << (MySqlParser::LOAD_FILE - 711))
        | (1ULL << (MySqlParser::LOCATE - 711))
        | (1ULL << (MySqlParser::LOG - 711))
        | (1ULL << (MySqlParser::LOG10 - 711))
        | (1ULL << (MySqlParser::LOG2 - 711))
        | (1ULL << (MySqlParser::LOWER - 711))
        | (1ULL << (MySqlParser::LPAD - 711))
        | (1ULL << (MySqlParser::LTRIM - 711))
        | (1ULL << (MySqlParser::MAKEDATE - 711))
        | (1ULL << (MySqlParser::MAKETIME - 711))
        | (1ULL << (MySqlParser::MAKE_SET - 711))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
        | (1ULL << (MySqlParser::MBRCONTAINS - 711))
        | (1ULL << (MySqlParser::MBRDISJOINT - 711))
        | (1ULL << (MySqlParser::MBREQUAL - 711))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
        | (1ULL << (MySqlParser::MBROVERLAPS - 711))
        | (1ULL << (MySqlParser::MBRTOUCHES - 711))
        | (1ULL << (MySqlParser::MBRWITHIN - 711))
        | (1ULL << (MySqlParser::MD5 - 711))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
        | (1ULL << (MySqlParser::MONTHNAME - 711))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::NAME_CONST - 775))
        | (1ULL << (MySqlParser::NULLIF - 775))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
        | (1ULL << (MySqlParser::NUMPOINTS - 775))
        | (1ULL << (MySqlParser::OCT - 775))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
        | (1ULL << (MySqlParser::ORD - 775))
        | (1ULL << (MySqlParser::OVERLAPS - 775))
        | (1ULL << (MySqlParser::PERIOD_ADD - 775))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
        | (1ULL << (MySqlParser::PI - 775))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::POINTFROMWKB - 775))
        | (1ULL << (MySqlParser::POINTN - 775))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYFROMWKB - 775))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::POW - 775))
        | (1ULL << (MySqlParser::POWER - 775))
        | (1ULL << (MySqlParser::QUOTE - 775))
        | (1ULL << (MySqlParser::RADIANS - 775))
        | (1ULL << (MySqlParser::RAND - 775))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
        | (1ULL << (MySqlParser::REVERSE - 775))
        | (1ULL << (MySqlParser::ROUND - 775))
        | (1ULL << (MySqlParser::ROW_COUNT - 775))
        | (1ULL << (MySqlParser::RPAD - 775))
        | (1ULL << (MySqlParser::RTRIM - 775))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
        | (1ULL << (MySqlParser::SESSION_USER - 775))
        | (1ULL << (MySqlParser::SHA - 775))
        | (1ULL << (MySqlParser::SHA1 - 775))
        | (1ULL << (MySqlParser::SHA2 - 775))
        | (1ULL << (MySqlParser::SIGN - 775))
        | (1ULL << (MySqlParser::SIN - 775))
        | (1ULL << (MySqlParser::SLEEP - 775))
        | (1ULL << (MySqlParser::SOUNDEX - 775))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
        | (1ULL << (MySqlParser::SQRT - 775))
        | (1ULL << (MySqlParser::SRID - 775))
        | (1ULL << (MySqlParser::STARTPOINT - 775))
        | (1ULL << (MySqlParser::STRCMP - 775))
        | (1ULL << (MySqlParser::STR_TO_DATE - 775))
        | (1ULL << (MySqlParser::ST_AREA - 775))
        | (1ULL << (MySqlParser::ST_ASBINARY - 775))
        | (1ULL << (MySqlParser::ST_ASTEXT - 775))
        | (1ULL << (MySqlParser::ST_ASWKB - 775))
        | (1ULL << (MySqlParser::ST_ASWKT - 775))
        | (1ULL << (MySqlParser::ST_BUFFER - 775))
        | (1ULL << (MySqlParser::ST_CENTROID - 775))
        | (1ULL << (MySqlParser::ST_CONTAINS - 775))
        | (1ULL << (MySqlParser::ST_CROSSES - 775))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
        | (1ULL << (MySqlParser::ST_DIMENSION - 775))
        | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
        | (1ULL << (MySqlParser::ST_EQUALS - 839))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POINTN - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_SRID - 839))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
        | (1ULL << (MySqlParser::ST_TOUCHES - 839))
        | (1ULL << (MySqlParser::ST_UNION - 839))
        | (1ULL << (MySqlParser::ST_WITHIN - 839))
        | (1ULL << (MySqlParser::ST_X - 839))
        | (1ULL << (MySqlParser::ST_Y - 839))
        | (1ULL << (MySqlParser::SUBDATE - 839))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
        | (1ULL << (MySqlParser::SUBTIME - 839))
        | (1ULL << (MySqlParser::SYSTEM_USER - 839))
        | (1ULL << (MySqlParser::TAN - 839))
        | (1ULL << (MySqlParser::TIMEDIFF - 839))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
        | (1ULL << (MySqlParser::TIME_FORMAT - 839))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
        | (1ULL << (MySqlParser::TOUCHES - 839))
        | (1ULL << (MySqlParser::TO_BASE64 - 839))
        | (1ULL << (MySqlParser::TO_DAYS - 839))
        | (1ULL << (MySqlParser::TO_SECONDS - 839))
        | (1ULL << (MySqlParser::UCASE - 839))
        | (1ULL << (MySqlParser::UNCOMPRESS - 839))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
        | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
        | (1ULL << (MySqlParser::UPDATEXML - 903))
        | (1ULL << (MySqlParser::UPPER - 903))
        | (1ULL << (MySqlParser::UUID - 903))
        | (1ULL << (MySqlParser::UUID_SHORT - 903))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
        | (1ULL << (MySqlParser::VERSION - 903))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
        | (1ULL << (MySqlParser::WEEKDAY - 903))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
        | (1ULL << (MySqlParser::WITHIN - 903))
        | (1ULL << (MySqlParser::YEARWEEK - 903))
        | (1ULL << (MySqlParser::Y_FUNCTION - 903))
        | (1ULL << (MySqlParser::X_FUNCTION - 903))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
        | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
        setState(2097);
        id_();
      }
      setState(2101);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(2100);
        index_type();
      }
      setState(2103);
      index_colname_list();
      setState(2107);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::KEY_BLOCK_SIZE) {
        setState(2104);
        index_option();
        setState(2109);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblAddPKContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(2110);
      match(MySqlParser::ADD);
      setState(2115);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(2111);
        match(MySqlParser::CONSTRAINT);
        setState(2113);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
          | (1ULL << (MySqlParser::TIME - 181))
          | (1ULL << (MySqlParser::TIMESTAMP - 181))
          | (1ULL << (MySqlParser::DATETIME - 181))
          | (1ULL << (MySqlParser::YEAR - 181))
          | (1ULL << (MySqlParser::TEXT - 181))
          | (1ULL << (MySqlParser::ENUM - 181))
          | (1ULL << (MySqlParser::COUNT - 181))
          | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
          | (1ULL << (MySqlParser::AFTER - 246))
          | (1ULL << (MySqlParser::ALGORITHM - 246))
          | (1ULL << (MySqlParser::ANY - 246))
          | (1ULL << (MySqlParser::AT - 246))
          | (1ULL << (MySqlParser::AUTHORS - 246))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
          | (1ULL << (MySqlParser::BEGIN - 246))
          | (1ULL << (MySqlParser::BINLOG - 246))
          | (1ULL << (MySqlParser::BIT - 246))
          | (1ULL << (MySqlParser::BTREE - 246))
          | (1ULL << (MySqlParser::CASCADED - 246))
          | (1ULL << (MySqlParser::CHAIN - 246))
          | (1ULL << (MySqlParser::CHECKSUM - 246))
          | (1ULL << (MySqlParser::CIPHER - 246))
          | (1ULL << (MySqlParser::CLIENT - 246))
          | (1ULL << (MySqlParser::COALESCE - 246))
          | (1ULL << (MySqlParser::CODE - 246))
          | (1ULL << (MySqlParser::COLUMNS - 246))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
          | (1ULL << (MySqlParser::COMMENT - 246))
          | (1ULL << (MySqlParser::COMMIT - 246))
          | (1ULL << (MySqlParser::COMPACT - 246))
          | (1ULL << (MySqlParser::COMPLETION - 246))
          | (1ULL << (MySqlParser::COMPRESSED - 246))
          | (1ULL << (MySqlParser::CONCURRENT - 246))
          | (1ULL << (MySqlParser::CONNECTION - 246))
          | (1ULL << (MySqlParser::CONSISTENT - 246))
          | (1ULL << (MySqlParser::CONTAINS - 246))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
          | (1ULL << (MySqlParser::COPY - 246))
          | (1ULL << (MySqlParser::DATA - 246))
          | (1ULL << (MySqlParser::DATAFILE - 246))
          | (1ULL << (MySqlParser::DEFINER - 246))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
          | (1ULL << (MySqlParser::DIRECTORY - 246))
          | (1ULL << (MySqlParser::DISABLE - 246))
          | (1ULL << (MySqlParser::DISCARD - 246))
          | (1ULL << (MySqlParser::DISK - 246))
          | (1ULL << (MySqlParser::DO - 246))
          | (1ULL << (MySqlParser::DUMPFILE - 246))
          | (1ULL << (MySqlParser::DUPLICATE - 246))
          | (1ULL << (MySqlParser::DYNAMIC - 246))
          | (1ULL << (MySqlParser::ENABLE - 246))
          | (1ULL << (MySqlParser::ENDS - 246))
          | (1ULL << (MySqlParser::ENGINE - 246))
          | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
          | (1ULL << (MySqlParser::ESCAPE - 311))
          | (1ULL << (MySqlParser::EVEN - 311))
          | (1ULL << (MySqlParser::EVENT - 311))
          | (1ULL << (MySqlParser::EVENTS - 311))
          | (1ULL << (MySqlParser::EVERY - 311))
          | (1ULL << (MySqlParser::EXCHANGE - 311))
          | (1ULL << (MySqlParser::EXCLUSIVE - 311))
          | (1ULL << (MySqlParser::EXPIRE - 311))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
          | (1ULL << (MySqlParser::FIELDS - 311))
          | (1ULL << (MySqlParser::FIRST - 311))
          | (1ULL << (MySqlParser::FIXED - 311))
          | (1ULL << (MySqlParser::FULL - 311))
          | (1ULL << (MySqlParser::FUNCTION - 311))
          | (1ULL << (MySqlParser::GLOBAL - 311))
          | (1ULL << (MySqlParser::GRANTS - 311))
          | (1ULL << (MySqlParser::HASH - 311))
          | (1ULL << (MySqlParser::HOST - 311))
          | (1ULL << (MySqlParser::IDENTIFIED - 311))
          | (1ULL << (MySqlParser::IMPORT - 311))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
          | (1ULL << (MySqlParser::INPLACE - 311))
          | (1ULL << (MySqlParser::INSERT_METHOD - 311))
          | (1ULL << (MySqlParser::INVOKER - 311))
          | (1ULL << (MySqlParser::ISOLATION - 311))
          | (1ULL << (MySqlParser::ISSUER - 311))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
          | (1ULL << (MySqlParser::LANGUAGE - 311))
          | (1ULL << (MySqlParser::LAST - 311))
          | (1ULL << (MySqlParser::LESS - 311))
          | (1ULL << (MySqlParser::LEVEL - 311))
          | (1ULL << (MySqlParser::LIST - 311))
          | (1ULL << (MySqlParser::LOCAL - 311))
          | (1ULL << (MySqlParser::LOGFILE - 311))
          | (1ULL << (MySqlParser::LOGS - 311))
          | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_ROWS - 391))
          | (1ULL << (MySqlParser::MAX_SIZE - 391))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
          | (1ULL << (MySqlParser::MERGE - 391))
          | (1ULL << (MySqlParser::MID - 391))
          | (1ULL << (MySqlParser::MIN_ROWS - 391))
          | (1ULL << (MySqlParser::MODIFY - 391))
          | (1ULL << (MySqlParser::MUTEX - 391))
          | (1ULL << (MySqlParser::MYSQL - 391))
          | (1ULL << (MySqlParser::NAME - 391))
          | (1ULL << (MySqlParser::NAMES - 391))
          | (1ULL << (MySqlParser::NCHAR - 391))
          | (1ULL << (MySqlParser::NO - 391))
          | (1ULL << (MySqlParser::NODEGROUP - 391))
          | (1ULL << (MySqlParser::NONE - 391))
          | (1ULL << (MySqlParser::OFFLINE - 391))
          | (1ULL << (MySqlParser::OFFSET - 391))
          | (1ULL << (MySqlParser::OJ - 391))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
          | (1ULL << (MySqlParser::ONLINE - 391))
          | (1ULL << (MySqlParser::ONLY - 391))
          | (1ULL << (MySqlParser::OPTIONS - 391))
          | (1ULL << (MySqlParser::OWNER - 391))
          | (1ULL << (MySqlParser::PACK_KEYS - 391))
          | (1ULL << (MySqlParser::PARSER - 391))
          | (1ULL << (MySqlParser::PARTIAL - 391))
          | (1ULL << (MySqlParser::PARTITIONING - 391))
          | (1ULL << (MySqlParser::PARTITIONS - 391))
          | (1ULL << (MySqlParser::PASSWORD - 391))
          | (1ULL << (MySqlParser::PLUGINS - 391))
          | (1ULL << (MySqlParser::PORT - 391))
          | (1ULL << (MySqlParser::PRESERVE - 391))
          | (1ULL << (MySqlParser::PROCESSLIST - 391))
          | (1ULL << (MySqlParser::PROFILE - 391))
          | (1ULL << (MySqlParser::PROFILES - 391))
          | (1ULL << (MySqlParser::PROXY - 391))
          | (1ULL << (MySqlParser::QUERY - 391))
          | (1ULL << (MySqlParser::QUICK - 391))
          | (1ULL << (MySqlParser::REBUILD - 391))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
          | (1ULL << (MySqlParser::REDUNDANT - 391))
          | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
          | (1ULL << (MySqlParser::REORGANIZE - 455))
          | (1ULL << (MySqlParser::REPAIR - 455))
          | (1ULL << (MySqlParser::REPLICATION - 455))
          | (1ULL << (MySqlParser::RETURNS - 455))
          | (1ULL << (MySqlParser::ROLLBACK - 455))
          | (1ULL << (MySqlParser::ROLLUP - 455))
          | (1ULL << (MySqlParser::ROW - 455))
          | (1ULL << (MySqlParser::ROWS - 455))
          | (1ULL << (MySqlParser::ROW_FORMAT - 455))
          | (1ULL << (MySqlParser::SAVEPOINT - 455))
          | (1ULL << (MySqlParser::SCHEDULE - 455))
          | (1ULL << (MySqlParser::SECURITY - 455))
          | (1ULL << (MySqlParser::SERVER - 455))
          | (1ULL << (MySqlParser::SESSION - 455))
          | (1ULL << (MySqlParser::SHARE - 455))
          | (1ULL << (MySqlParser::SHARED - 455))
          | (1ULL << (MySqlParser::SIGNED - 455))
          | (1ULL << (MySqlParser::SIMPLE - 455))
          | (1ULL << (MySqlParser::SLAVE - 455))
          | (1ULL << (MySqlParser::SNAPSHOT - 455))
          | (1ULL << (MySqlParser::SOCKET - 455))
          | (1ULL << (MySqlParser::SOME - 455))
          | (1ULL << (MySqlParser::SOUNDS - 455))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
          | (1ULL << (MySqlParser::SQL_CACHE - 455))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
          | (1ULL << (MySqlParser::START - 455))
          | (1ULL << (MySqlParser::STARTS - 455))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
          | (1ULL << (MySqlParser::STATUS - 455))
          | (1ULL << (MySqlParser::STORAGE - 455))
          | (1ULL << (MySqlParser::SUBJECT - 455))
          | (1ULL << (MySqlParser::SUBPARTITION - 455))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
          | (1ULL << (MySqlParser::TABLESPACE - 455))
          | (1ULL << (MySqlParser::TEMPORARY - 455))
          | (1ULL << (MySqlParser::TEMPTABLE - 455))
          | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
          | (1ULL << (MySqlParser::TRUNCATE - 519))
          | (1ULL << (MySqlParser::UNDEFINED - 519))
          | (1ULL << (MySqlParser::UNDOFILE - 519))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
          | (1ULL << (MySqlParser::UNKNOWN - 519))
          | (1ULL << (MySqlParser::UPGRADE - 519))
          | (1ULL << (MySqlParser::USER - 519))
          | (1ULL << (MySqlParser::VALUE - 519))
          | (1ULL << (MySqlParser::VARIABLES - 519))
          | (1ULL << (MySqlParser::VIEW - 519))
          | (1ULL << (MySqlParser::WAIT - 519))
          | (1ULL << (MySqlParser::WARNINGS - 519))
          | (1ULL << (MySqlParser::WORK - 519))
          | (1ULL << (MySqlParser::WRAPPER - 519))
          | (1ULL << (MySqlParser::X509 - 519))
          | (1ULL << (MySqlParser::XML - 519))
          | (1ULL << (MySqlParser::QUARTER - 519))
          | (1ULL << (MySqlParser::MONTH - 519))
          | (1ULL << (MySqlParser::DAY - 519))
          | (1ULL << (MySqlParser::HOUR - 519))
          | (1ULL << (MySqlParser::MINUTE - 519))
          | (1ULL << (MySqlParser::WEEK - 519))
          | (1ULL << (MySqlParser::SECOND - 519))
          | (1ULL << (MySqlParser::MICROSECOND - 519))
          | (1ULL << (MySqlParser::TABLES - 519))
          | (1ULL << (MySqlParser::ROUTINE - 519))
          | (1ULL << (MySqlParser::EXECUTE - 519))
          | (1ULL << (MySqlParser::FILE - 519))
          | (1ULL << (MySqlParser::PROCESS - 519))
          | (1ULL << (MySqlParser::RELOAD - 519))
          | (1ULL << (MySqlParser::SHUTDOWN - 519))
          | (1ULL << (MySqlParser::SUPER - 519))
          | (1ULL << (MySqlParser::PRIVILEGES - 519))
          | (1ULL << (MySqlParser::ARMSCII8 - 519))
          | (1ULL << (MySqlParser::ASCII - 519))
          | (1ULL << (MySqlParser::BIG5 - 519))
          | (1ULL << (MySqlParser::CP1250 - 519))
          | (1ULL << (MySqlParser::CP1251 - 519))
          | (1ULL << (MySqlParser::CP1256 - 519))
          | (1ULL << (MySqlParser::CP1257 - 519))
          | (1ULL << (MySqlParser::CP850 - 519))
          | (1ULL << (MySqlParser::CP852 - 519))
          | (1ULL << (MySqlParser::CP866 - 519))
          | (1ULL << (MySqlParser::CP932 - 519))
          | (1ULL << (MySqlParser::DEC8 - 519))
          | (1ULL << (MySqlParser::EUCJPMS - 519))
          | (1ULL << (MySqlParser::EUCKR - 519))
          | (1ULL << (MySqlParser::GB2312 - 519))
          | (1ULL << (MySqlParser::GBK - 519))
          | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
          | (1ULL << (MySqlParser::HEBREW - 583))
          | (1ULL << (MySqlParser::HP8 - 583))
          | (1ULL << (MySqlParser::KEYBCS2 - 583))
          | (1ULL << (MySqlParser::KOI8R - 583))
          | (1ULL << (MySqlParser::KOI8U - 583))
          | (1ULL << (MySqlParser::LATIN1 - 583))
          | (1ULL << (MySqlParser::LATIN2 - 583))
          | (1ULL << (MySqlParser::LATIN5 - 583))
          | (1ULL << (MySqlParser::LATIN7 - 583))
          | (1ULL << (MySqlParser::MACCE - 583))
          | (1ULL << (MySqlParser::MACROMAN - 583))
          | (1ULL << (MySqlParser::SJIS - 583))
          | (1ULL << (MySqlParser::SWE7 - 583))
          | (1ULL << (MySqlParser::TIS620 - 583))
          | (1ULL << (MySqlParser::UCS2 - 583))
          | (1ULL << (MySqlParser::UJIS - 583))
          | (1ULL << (MySqlParser::UTF16 - 583))
          | (1ULL << (MySqlParser::UTF16LE - 583))
          | (1ULL << (MySqlParser::UTF32 - 583))
          | (1ULL << (MySqlParser::UTF8 - 583))
          | (1ULL << (MySqlParser::UTF8MB3 - 583))
          | (1ULL << (MySqlParser::UTF8MB4 - 583))
          | (1ULL << (MySqlParser::ARCHIVE - 583))
          | (1ULL << (MySqlParser::BLACKHOLE - 583))
          | (1ULL << (MySqlParser::CSV - 583))
          | (1ULL << (MySqlParser::FEDERATED - 583))
          | (1ULL << (MySqlParser::INNODB - 583))
          | (1ULL << (MySqlParser::MEMORY - 583))
          | (1ULL << (MySqlParser::MRG_MYISAM - 583))
          | (1ULL << (MySqlParser::MYISAM - 583))
          | (1ULL << (MySqlParser::NDB - 583))
          | (1ULL << (MySqlParser::NDBCLUSTER - 583))
          | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
          | (1ULL << (MySqlParser::REPEATABLE - 583))
          | (1ULL << (MySqlParser::COMMITTED - 583))
          | (1ULL << (MySqlParser::UNCOMMITTED - 583))
          | (1ULL << (MySqlParser::SERIALIZABLE - 583))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
          | (1ULL << (MySqlParser::LINESTRING - 583))
          | (1ULL << (MySqlParser::MULTILINESTRING - 583))
          | (1ULL << (MySqlParser::MULTIPOINT - 583))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
          | (1ULL << (MySqlParser::POINT - 583))
          | (1ULL << (MySqlParser::POLYGON - 583))
          | (1ULL << (MySqlParser::ABS - 583))
          | (1ULL << (MySqlParser::ACOS - 583))
          | (1ULL << (MySqlParser::ADDDATE - 583))
          | (1ULL << (MySqlParser::ADDTIME - 583))
          | (1ULL << (MySqlParser::AES_DECRYPT - 583))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
          | (1ULL << (MySqlParser::AREA - 583))
          | (1ULL << (MySqlParser::ASBINARY - 583))
          | (1ULL << (MySqlParser::ASIN - 583))
          | (1ULL << (MySqlParser::ASTEXT - 583))
          | (1ULL << (MySqlParser::ASWKB - 583))
          | (1ULL << (MySqlParser::ASWKT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
          | (1ULL << (MySqlParser::ATAN - 583))
          | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
          | (1ULL << (MySqlParser::BIN - 647))
          | (1ULL << (MySqlParser::BIT_COUNT - 647))
          | (1ULL << (MySqlParser::BIT_LENGTH - 647))
          | (1ULL << (MySqlParser::BUFFER - 647))
          | (1ULL << (MySqlParser::CEIL - 647))
          | (1ULL << (MySqlParser::CEILING - 647))
          | (1ULL << (MySqlParser::CENTROID - 647))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
          | (1ULL << (MySqlParser::CHARSET - 647))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
          | (1ULL << (MySqlParser::COERCIBILITY - 647))
          | (1ULL << (MySqlParser::COLLATION - 647))
          | (1ULL << (MySqlParser::COMPRESS - 647))
          | (1ULL << (MySqlParser::CONCAT - 647))
          | (1ULL << (MySqlParser::CONCAT_WS - 647))
          | (1ULL << (MySqlParser::CONNECTION_ID - 647))
          | (1ULL << (MySqlParser::CONV - 647))
          | (1ULL << (MySqlParser::CONVERT_TZ - 647))
          | (1ULL << (MySqlParser::COS - 647))
          | (1ULL << (MySqlParser::COT - 647))
          | (1ULL << (MySqlParser::CRC32 - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
          | (1ULL << (MySqlParser::CROSSES - 647))
          | (1ULL << (MySqlParser::DATEDIFF - 647))
          | (1ULL << (MySqlParser::DATE_FORMAT - 647))
          | (1ULL << (MySqlParser::DAYNAME - 647))
          | (1ULL << (MySqlParser::DAYOFMONTH - 647))
          | (1ULL << (MySqlParser::DAYOFWEEK - 647))
          | (1ULL << (MySqlParser::DAYOFYEAR - 647))
          | (1ULL << (MySqlParser::DECODE - 647))
          | (1ULL << (MySqlParser::DEGREES - 647))
          | (1ULL << (MySqlParser::DES_DECRYPT - 647))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
          | (1ULL << (MySqlParser::DIMENSION - 647))
          | (1ULL << (MySqlParser::DISJOINT - 647))
          | (1ULL << (MySqlParser::ELT - 647))
          | (1ULL << (MySqlParser::ENCODE - 647))
          | (1ULL << (MySqlParser::ENCRYPT - 647))
          | (1ULL << (MySqlParser::ENDPOINT - 647))
          | (1ULL << (MySqlParser::ENVELOPE - 647))
          | (1ULL << (MySqlParser::EQUALS - 647))
          | (1ULL << (MySqlParser::EXP - 647))
          | (1ULL << (MySqlParser::EXPORT_SET - 647))
          | (1ULL << (MySqlParser::EXTERIORRING - 647))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
          | (1ULL << (MySqlParser::FIELD - 647))
          | (1ULL << (MySqlParser::FIND_IN_SET - 647))
          | (1ULL << (MySqlParser::FLOOR - 647))
          | (1ULL << (MySqlParser::FORMAT - 647))
          | (1ULL << (MySqlParser::FOUND_ROWS - 647))
          | (1ULL << (MySqlParser::FROM_BASE64 - 647))
          | (1ULL << (MySqlParser::FROM_DAYS - 647))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
          | (1ULL << (MySqlParser::GET_FORMAT - 711))
          | (1ULL << (MySqlParser::GET_LOCK - 711))
          | (1ULL << (MySqlParser::GLENGTH - 711))
          | (1ULL << (MySqlParser::GREATEST - 711))
          | (1ULL << (MySqlParser::GTID_SUBSET - 711))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
          | (1ULL << (MySqlParser::HEX - 711))
          | (1ULL << (MySqlParser::IFNULL - 711))
          | (1ULL << (MySqlParser::INET6_ATON - 711))
          | (1ULL << (MySqlParser::INET6_NTOA - 711))
          | (1ULL << (MySqlParser::INET_ATON - 711))
          | (1ULL << (MySqlParser::INET_NTOA - 711))
          | (1ULL << (MySqlParser::INSTR - 711))
          | (1ULL << (MySqlParser::INTERIORRINGN - 711))
          | (1ULL << (MySqlParser::INTERSECTS - 711))
          | (1ULL << (MySqlParser::ISCLOSED - 711))
          | (1ULL << (MySqlParser::ISEMPTY - 711))
          | (1ULL << (MySqlParser::ISNULL - 711))
          | (1ULL << (MySqlParser::ISSIMPLE - 711))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
          | (1ULL << (MySqlParser::IS_IPV4 - 711))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
          | (1ULL << (MySqlParser::IS_IPV6 - 711))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
          | (1ULL << (MySqlParser::LCASE - 711))
          | (1ULL << (MySqlParser::LEAST - 711))
          | (1ULL << (MySqlParser::LENGTH - 711))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINEFROMWKB - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
          | (1ULL << (MySqlParser::LN - 711))
          | (1ULL << (MySqlParser::LOAD_FILE - 711))
          | (1ULL << (MySqlParser::LOCATE - 711))
          | (1ULL << (MySqlParser::LOG - 711))
          | (1ULL << (MySqlParser::LOG10 - 711))
          | (1ULL << (MySqlParser::LOG2 - 711))
          | (1ULL << (MySqlParser::LOWER - 711))
          | (1ULL << (MySqlParser::LPAD - 711))
          | (1ULL << (MySqlParser::LTRIM - 711))
          | (1ULL << (MySqlParser::MAKEDATE - 711))
          | (1ULL << (MySqlParser::MAKETIME - 711))
          | (1ULL << (MySqlParser::MAKE_SET - 711))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
          | (1ULL << (MySqlParser::MBRCONTAINS - 711))
          | (1ULL << (MySqlParser::MBRDISJOINT - 711))
          | (1ULL << (MySqlParser::MBREQUAL - 711))
          | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
          | (1ULL << (MySqlParser::MBROVERLAPS - 711))
          | (1ULL << (MySqlParser::MBRTOUCHES - 711))
          | (1ULL << (MySqlParser::MBRWITHIN - 711))
          | (1ULL << (MySqlParser::MD5 - 711))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
          | (1ULL << (MySqlParser::MONTHNAME - 711))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::NAME_CONST - 775))
          | (1ULL << (MySqlParser::NULLIF - 775))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
          | (1ULL << (MySqlParser::NUMPOINTS - 775))
          | (1ULL << (MySqlParser::OCT - 775))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
          | (1ULL << (MySqlParser::ORD - 775))
          | (1ULL << (MySqlParser::OVERLAPS - 775))
          | (1ULL << (MySqlParser::PERIOD_ADD - 775))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
          | (1ULL << (MySqlParser::PI - 775))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::POINTFROMWKB - 775))
          | (1ULL << (MySqlParser::POINTN - 775))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYFROMWKB - 775))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::POW - 775))
          | (1ULL << (MySqlParser::POWER - 775))
          | (1ULL << (MySqlParser::QUOTE - 775))
          | (1ULL << (MySqlParser::RADIANS - 775))
          | (1ULL << (MySqlParser::RAND - 775))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
          | (1ULL << (MySqlParser::REVERSE - 775))
          | (1ULL << (MySqlParser::ROUND - 775))
          | (1ULL << (MySqlParser::ROW_COUNT - 775))
          | (1ULL << (MySqlParser::RPAD - 775))
          | (1ULL << (MySqlParser::RTRIM - 775))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
          | (1ULL << (MySqlParser::SESSION_USER - 775))
          | (1ULL << (MySqlParser::SHA - 775))
          | (1ULL << (MySqlParser::SHA1 - 775))
          | (1ULL << (MySqlParser::SHA2 - 775))
          | (1ULL << (MySqlParser::SIGN - 775))
          | (1ULL << (MySqlParser::SIN - 775))
          | (1ULL << (MySqlParser::SLEEP - 775))
          | (1ULL << (MySqlParser::SOUNDEX - 775))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
          | (1ULL << (MySqlParser::SQRT - 775))
          | (1ULL << (MySqlParser::SRID - 775))
          | (1ULL << (MySqlParser::STARTPOINT - 775))
          | (1ULL << (MySqlParser::STRCMP - 775))
          | (1ULL << (MySqlParser::STR_TO_DATE - 775))
          | (1ULL << (MySqlParser::ST_AREA - 775))
          | (1ULL << (MySqlParser::ST_ASBINARY - 775))
          | (1ULL << (MySqlParser::ST_ASTEXT - 775))
          | (1ULL << (MySqlParser::ST_ASWKB - 775))
          | (1ULL << (MySqlParser::ST_ASWKT - 775))
          | (1ULL << (MySqlParser::ST_BUFFER - 775))
          | (1ULL << (MySqlParser::ST_CENTROID - 775))
          | (1ULL << (MySqlParser::ST_CONTAINS - 775))
          | (1ULL << (MySqlParser::ST_CROSSES - 775))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
          | (1ULL << (MySqlParser::ST_DIMENSION - 775))
          | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
          | (1ULL << (MySqlParser::ST_EQUALS - 839))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POINTN - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_SRID - 839))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
          | (1ULL << (MySqlParser::ST_TOUCHES - 839))
          | (1ULL << (MySqlParser::ST_UNION - 839))
          | (1ULL << (MySqlParser::ST_WITHIN - 839))
          | (1ULL << (MySqlParser::ST_X - 839))
          | (1ULL << (MySqlParser::ST_Y - 839))
          | (1ULL << (MySqlParser::SUBDATE - 839))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
          | (1ULL << (MySqlParser::SUBTIME - 839))
          | (1ULL << (MySqlParser::SYSTEM_USER - 839))
          | (1ULL << (MySqlParser::TAN - 839))
          | (1ULL << (MySqlParser::TIMEDIFF - 839))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
          | (1ULL << (MySqlParser::TIME_FORMAT - 839))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
          | (1ULL << (MySqlParser::TOUCHES - 839))
          | (1ULL << (MySqlParser::TO_BASE64 - 839))
          | (1ULL << (MySqlParser::TO_DAYS - 839))
          | (1ULL << (MySqlParser::TO_SECONDS - 839))
          | (1ULL << (MySqlParser::UCASE - 839))
          | (1ULL << (MySqlParser::UNCOMPRESS - 839))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
          | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
          | (1ULL << (MySqlParser::UPDATEXML - 903))
          | (1ULL << (MySqlParser::UPPER - 903))
          | (1ULL << (MySqlParser::UUID - 903))
          | (1ULL << (MySqlParser::UUID_SHORT - 903))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
          | (1ULL << (MySqlParser::VERSION - 903))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
          | (1ULL << (MySqlParser::WEEKDAY - 903))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
          | (1ULL << (MySqlParser::WITHIN - 903))
          | (1ULL << (MySqlParser::YEARWEEK - 903))
          | (1ULL << (MySqlParser::Y_FUNCTION - 903))
          | (1ULL << (MySqlParser::X_FUNCTION - 903))
          | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
          | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
          setState(2112);
          id_();
        }
      }
      setState(2117);
      match(MySqlParser::PRIMARY);
      setState(2118);
      match(MySqlParser::KEY);
      setState(2120);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(2119);
        index_type();
      }
      setState(2122);
      index_colname_list();
      setState(2126);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::KEY_BLOCK_SIZE) {
        setState(2123);
        index_option();
        setState(2128);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 6: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblAddUKContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(2129);
      match(MySqlParser::ADD);
      setState(2134);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(2130);
        match(MySqlParser::CONSTRAINT);
        setState(2132);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
          | (1ULL << (MySqlParser::TIME - 181))
          | (1ULL << (MySqlParser::TIMESTAMP - 181))
          | (1ULL << (MySqlParser::DATETIME - 181))
          | (1ULL << (MySqlParser::YEAR - 181))
          | (1ULL << (MySqlParser::TEXT - 181))
          | (1ULL << (MySqlParser::ENUM - 181))
          | (1ULL << (MySqlParser::COUNT - 181))
          | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
          | (1ULL << (MySqlParser::AFTER - 246))
          | (1ULL << (MySqlParser::ALGORITHM - 246))
          | (1ULL << (MySqlParser::ANY - 246))
          | (1ULL << (MySqlParser::AT - 246))
          | (1ULL << (MySqlParser::AUTHORS - 246))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
          | (1ULL << (MySqlParser::BEGIN - 246))
          | (1ULL << (MySqlParser::BINLOG - 246))
          | (1ULL << (MySqlParser::BIT - 246))
          | (1ULL << (MySqlParser::BTREE - 246))
          | (1ULL << (MySqlParser::CASCADED - 246))
          | (1ULL << (MySqlParser::CHAIN - 246))
          | (1ULL << (MySqlParser::CHECKSUM - 246))
          | (1ULL << (MySqlParser::CIPHER - 246))
          | (1ULL << (MySqlParser::CLIENT - 246))
          | (1ULL << (MySqlParser::COALESCE - 246))
          | (1ULL << (MySqlParser::CODE - 246))
          | (1ULL << (MySqlParser::COLUMNS - 246))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
          | (1ULL << (MySqlParser::COMMENT - 246))
          | (1ULL << (MySqlParser::COMMIT - 246))
          | (1ULL << (MySqlParser::COMPACT - 246))
          | (1ULL << (MySqlParser::COMPLETION - 246))
          | (1ULL << (MySqlParser::COMPRESSED - 246))
          | (1ULL << (MySqlParser::CONCURRENT - 246))
          | (1ULL << (MySqlParser::CONNECTION - 246))
          | (1ULL << (MySqlParser::CONSISTENT - 246))
          | (1ULL << (MySqlParser::CONTAINS - 246))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
          | (1ULL << (MySqlParser::COPY - 246))
          | (1ULL << (MySqlParser::DATA - 246))
          | (1ULL << (MySqlParser::DATAFILE - 246))
          | (1ULL << (MySqlParser::DEFINER - 246))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
          | (1ULL << (MySqlParser::DIRECTORY - 246))
          | (1ULL << (MySqlParser::DISABLE - 246))
          | (1ULL << (MySqlParser::DISCARD - 246))
          | (1ULL << (MySqlParser::DISK - 246))
          | (1ULL << (MySqlParser::DO - 246))
          | (1ULL << (MySqlParser::DUMPFILE - 246))
          | (1ULL << (MySqlParser::DUPLICATE - 246))
          | (1ULL << (MySqlParser::DYNAMIC - 246))
          | (1ULL << (MySqlParser::ENABLE - 246))
          | (1ULL << (MySqlParser::ENDS - 246))
          | (1ULL << (MySqlParser::ENGINE - 246))
          | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
          | (1ULL << (MySqlParser::ESCAPE - 311))
          | (1ULL << (MySqlParser::EVEN - 311))
          | (1ULL << (MySqlParser::EVENT - 311))
          | (1ULL << (MySqlParser::EVENTS - 311))
          | (1ULL << (MySqlParser::EVERY - 311))
          | (1ULL << (MySqlParser::EXCHANGE - 311))
          | (1ULL << (MySqlParser::EXCLUSIVE - 311))
          | (1ULL << (MySqlParser::EXPIRE - 311))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
          | (1ULL << (MySqlParser::FIELDS - 311))
          | (1ULL << (MySqlParser::FIRST - 311))
          | (1ULL << (MySqlParser::FIXED - 311))
          | (1ULL << (MySqlParser::FULL - 311))
          | (1ULL << (MySqlParser::FUNCTION - 311))
          | (1ULL << (MySqlParser::GLOBAL - 311))
          | (1ULL << (MySqlParser::GRANTS - 311))
          | (1ULL << (MySqlParser::HASH - 311))
          | (1ULL << (MySqlParser::HOST - 311))
          | (1ULL << (MySqlParser::IDENTIFIED - 311))
          | (1ULL << (MySqlParser::IMPORT - 311))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
          | (1ULL << (MySqlParser::INPLACE - 311))
          | (1ULL << (MySqlParser::INSERT_METHOD - 311))
          | (1ULL << (MySqlParser::INVOKER - 311))
          | (1ULL << (MySqlParser::ISOLATION - 311))
          | (1ULL << (MySqlParser::ISSUER - 311))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
          | (1ULL << (MySqlParser::LANGUAGE - 311))
          | (1ULL << (MySqlParser::LAST - 311))
          | (1ULL << (MySqlParser::LESS - 311))
          | (1ULL << (MySqlParser::LEVEL - 311))
          | (1ULL << (MySqlParser::LIST - 311))
          | (1ULL << (MySqlParser::LOCAL - 311))
          | (1ULL << (MySqlParser::LOGFILE - 311))
          | (1ULL << (MySqlParser::LOGS - 311))
          | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_ROWS - 391))
          | (1ULL << (MySqlParser::MAX_SIZE - 391))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
          | (1ULL << (MySqlParser::MERGE - 391))
          | (1ULL << (MySqlParser::MID - 391))
          | (1ULL << (MySqlParser::MIN_ROWS - 391))
          | (1ULL << (MySqlParser::MODIFY - 391))
          | (1ULL << (MySqlParser::MUTEX - 391))
          | (1ULL << (MySqlParser::MYSQL - 391))
          | (1ULL << (MySqlParser::NAME - 391))
          | (1ULL << (MySqlParser::NAMES - 391))
          | (1ULL << (MySqlParser::NCHAR - 391))
          | (1ULL << (MySqlParser::NO - 391))
          | (1ULL << (MySqlParser::NODEGROUP - 391))
          | (1ULL << (MySqlParser::NONE - 391))
          | (1ULL << (MySqlParser::OFFLINE - 391))
          | (1ULL << (MySqlParser::OFFSET - 391))
          | (1ULL << (MySqlParser::OJ - 391))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
          | (1ULL << (MySqlParser::ONLINE - 391))
          | (1ULL << (MySqlParser::ONLY - 391))
          | (1ULL << (MySqlParser::OPTIONS - 391))
          | (1ULL << (MySqlParser::OWNER - 391))
          | (1ULL << (MySqlParser::PACK_KEYS - 391))
          | (1ULL << (MySqlParser::PARSER - 391))
          | (1ULL << (MySqlParser::PARTIAL - 391))
          | (1ULL << (MySqlParser::PARTITIONING - 391))
          | (1ULL << (MySqlParser::PARTITIONS - 391))
          | (1ULL << (MySqlParser::PASSWORD - 391))
          | (1ULL << (MySqlParser::PLUGINS - 391))
          | (1ULL << (MySqlParser::PORT - 391))
          | (1ULL << (MySqlParser::PRESERVE - 391))
          | (1ULL << (MySqlParser::PROCESSLIST - 391))
          | (1ULL << (MySqlParser::PROFILE - 391))
          | (1ULL << (MySqlParser::PROFILES - 391))
          | (1ULL << (MySqlParser::PROXY - 391))
          | (1ULL << (MySqlParser::QUERY - 391))
          | (1ULL << (MySqlParser::QUICK - 391))
          | (1ULL << (MySqlParser::REBUILD - 391))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
          | (1ULL << (MySqlParser::REDUNDANT - 391))
          | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
          | (1ULL << (MySqlParser::REORGANIZE - 455))
          | (1ULL << (MySqlParser::REPAIR - 455))
          | (1ULL << (MySqlParser::REPLICATION - 455))
          | (1ULL << (MySqlParser::RETURNS - 455))
          | (1ULL << (MySqlParser::ROLLBACK - 455))
          | (1ULL << (MySqlParser::ROLLUP - 455))
          | (1ULL << (MySqlParser::ROW - 455))
          | (1ULL << (MySqlParser::ROWS - 455))
          | (1ULL << (MySqlParser::ROW_FORMAT - 455))
          | (1ULL << (MySqlParser::SAVEPOINT - 455))
          | (1ULL << (MySqlParser::SCHEDULE - 455))
          | (1ULL << (MySqlParser::SECURITY - 455))
          | (1ULL << (MySqlParser::SERVER - 455))
          | (1ULL << (MySqlParser::SESSION - 455))
          | (1ULL << (MySqlParser::SHARE - 455))
          | (1ULL << (MySqlParser::SHARED - 455))
          | (1ULL << (MySqlParser::SIGNED - 455))
          | (1ULL << (MySqlParser::SIMPLE - 455))
          | (1ULL << (MySqlParser::SLAVE - 455))
          | (1ULL << (MySqlParser::SNAPSHOT - 455))
          | (1ULL << (MySqlParser::SOCKET - 455))
          | (1ULL << (MySqlParser::SOME - 455))
          | (1ULL << (MySqlParser::SOUNDS - 455))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
          | (1ULL << (MySqlParser::SQL_CACHE - 455))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
          | (1ULL << (MySqlParser::START - 455))
          | (1ULL << (MySqlParser::STARTS - 455))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
          | (1ULL << (MySqlParser::STATUS - 455))
          | (1ULL << (MySqlParser::STORAGE - 455))
          | (1ULL << (MySqlParser::SUBJECT - 455))
          | (1ULL << (MySqlParser::SUBPARTITION - 455))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
          | (1ULL << (MySqlParser::TABLESPACE - 455))
          | (1ULL << (MySqlParser::TEMPORARY - 455))
          | (1ULL << (MySqlParser::TEMPTABLE - 455))
          | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
          | (1ULL << (MySqlParser::TRUNCATE - 519))
          | (1ULL << (MySqlParser::UNDEFINED - 519))
          | (1ULL << (MySqlParser::UNDOFILE - 519))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
          | (1ULL << (MySqlParser::UNKNOWN - 519))
          | (1ULL << (MySqlParser::UPGRADE - 519))
          | (1ULL << (MySqlParser::USER - 519))
          | (1ULL << (MySqlParser::VALUE - 519))
          | (1ULL << (MySqlParser::VARIABLES - 519))
          | (1ULL << (MySqlParser::VIEW - 519))
          | (1ULL << (MySqlParser::WAIT - 519))
          | (1ULL << (MySqlParser::WARNINGS - 519))
          | (1ULL << (MySqlParser::WORK - 519))
          | (1ULL << (MySqlParser::WRAPPER - 519))
          | (1ULL << (MySqlParser::X509 - 519))
          | (1ULL << (MySqlParser::XML - 519))
          | (1ULL << (MySqlParser::QUARTER - 519))
          | (1ULL << (MySqlParser::MONTH - 519))
          | (1ULL << (MySqlParser::DAY - 519))
          | (1ULL << (MySqlParser::HOUR - 519))
          | (1ULL << (MySqlParser::MINUTE - 519))
          | (1ULL << (MySqlParser::WEEK - 519))
          | (1ULL << (MySqlParser::SECOND - 519))
          | (1ULL << (MySqlParser::MICROSECOND - 519))
          | (1ULL << (MySqlParser::TABLES - 519))
          | (1ULL << (MySqlParser::ROUTINE - 519))
          | (1ULL << (MySqlParser::EXECUTE - 519))
          | (1ULL << (MySqlParser::FILE - 519))
          | (1ULL << (MySqlParser::PROCESS - 519))
          | (1ULL << (MySqlParser::RELOAD - 519))
          | (1ULL << (MySqlParser::SHUTDOWN - 519))
          | (1ULL << (MySqlParser::SUPER - 519))
          | (1ULL << (MySqlParser::PRIVILEGES - 519))
          | (1ULL << (MySqlParser::ARMSCII8 - 519))
          | (1ULL << (MySqlParser::ASCII - 519))
          | (1ULL << (MySqlParser::BIG5 - 519))
          | (1ULL << (MySqlParser::CP1250 - 519))
          | (1ULL << (MySqlParser::CP1251 - 519))
          | (1ULL << (MySqlParser::CP1256 - 519))
          | (1ULL << (MySqlParser::CP1257 - 519))
          | (1ULL << (MySqlParser::CP850 - 519))
          | (1ULL << (MySqlParser::CP852 - 519))
          | (1ULL << (MySqlParser::CP866 - 519))
          | (1ULL << (MySqlParser::CP932 - 519))
          | (1ULL << (MySqlParser::DEC8 - 519))
          | (1ULL << (MySqlParser::EUCJPMS - 519))
          | (1ULL << (MySqlParser::EUCKR - 519))
          | (1ULL << (MySqlParser::GB2312 - 519))
          | (1ULL << (MySqlParser::GBK - 519))
          | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
          | (1ULL << (MySqlParser::HEBREW - 583))
          | (1ULL << (MySqlParser::HP8 - 583))
          | (1ULL << (MySqlParser::KEYBCS2 - 583))
          | (1ULL << (MySqlParser::KOI8R - 583))
          | (1ULL << (MySqlParser::KOI8U - 583))
          | (1ULL << (MySqlParser::LATIN1 - 583))
          | (1ULL << (MySqlParser::LATIN2 - 583))
          | (1ULL << (MySqlParser::LATIN5 - 583))
          | (1ULL << (MySqlParser::LATIN7 - 583))
          | (1ULL << (MySqlParser::MACCE - 583))
          | (1ULL << (MySqlParser::MACROMAN - 583))
          | (1ULL << (MySqlParser::SJIS - 583))
          | (1ULL << (MySqlParser::SWE7 - 583))
          | (1ULL << (MySqlParser::TIS620 - 583))
          | (1ULL << (MySqlParser::UCS2 - 583))
          | (1ULL << (MySqlParser::UJIS - 583))
          | (1ULL << (MySqlParser::UTF16 - 583))
          | (1ULL << (MySqlParser::UTF16LE - 583))
          | (1ULL << (MySqlParser::UTF32 - 583))
          | (1ULL << (MySqlParser::UTF8 - 583))
          | (1ULL << (MySqlParser::UTF8MB3 - 583))
          | (1ULL << (MySqlParser::UTF8MB4 - 583))
          | (1ULL << (MySqlParser::ARCHIVE - 583))
          | (1ULL << (MySqlParser::BLACKHOLE - 583))
          | (1ULL << (MySqlParser::CSV - 583))
          | (1ULL << (MySqlParser::FEDERATED - 583))
          | (1ULL << (MySqlParser::INNODB - 583))
          | (1ULL << (MySqlParser::MEMORY - 583))
          | (1ULL << (MySqlParser::MRG_MYISAM - 583))
          | (1ULL << (MySqlParser::MYISAM - 583))
          | (1ULL << (MySqlParser::NDB - 583))
          | (1ULL << (MySqlParser::NDBCLUSTER - 583))
          | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
          | (1ULL << (MySqlParser::REPEATABLE - 583))
          | (1ULL << (MySqlParser::COMMITTED - 583))
          | (1ULL << (MySqlParser::UNCOMMITTED - 583))
          | (1ULL << (MySqlParser::SERIALIZABLE - 583))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
          | (1ULL << (MySqlParser::LINESTRING - 583))
          | (1ULL << (MySqlParser::MULTILINESTRING - 583))
          | (1ULL << (MySqlParser::MULTIPOINT - 583))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
          | (1ULL << (MySqlParser::POINT - 583))
          | (1ULL << (MySqlParser::POLYGON - 583))
          | (1ULL << (MySqlParser::ABS - 583))
          | (1ULL << (MySqlParser::ACOS - 583))
          | (1ULL << (MySqlParser::ADDDATE - 583))
          | (1ULL << (MySqlParser::ADDTIME - 583))
          | (1ULL << (MySqlParser::AES_DECRYPT - 583))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
          | (1ULL << (MySqlParser::AREA - 583))
          | (1ULL << (MySqlParser::ASBINARY - 583))
          | (1ULL << (MySqlParser::ASIN - 583))
          | (1ULL << (MySqlParser::ASTEXT - 583))
          | (1ULL << (MySqlParser::ASWKB - 583))
          | (1ULL << (MySqlParser::ASWKT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
          | (1ULL << (MySqlParser::ATAN - 583))
          | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
          | (1ULL << (MySqlParser::BIN - 647))
          | (1ULL << (MySqlParser::BIT_COUNT - 647))
          | (1ULL << (MySqlParser::BIT_LENGTH - 647))
          | (1ULL << (MySqlParser::BUFFER - 647))
          | (1ULL << (MySqlParser::CEIL - 647))
          | (1ULL << (MySqlParser::CEILING - 647))
          | (1ULL << (MySqlParser::CENTROID - 647))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
          | (1ULL << (MySqlParser::CHARSET - 647))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
          | (1ULL << (MySqlParser::COERCIBILITY - 647))
          | (1ULL << (MySqlParser::COLLATION - 647))
          | (1ULL << (MySqlParser::COMPRESS - 647))
          | (1ULL << (MySqlParser::CONCAT - 647))
          | (1ULL << (MySqlParser::CONCAT_WS - 647))
          | (1ULL << (MySqlParser::CONNECTION_ID - 647))
          | (1ULL << (MySqlParser::CONV - 647))
          | (1ULL << (MySqlParser::CONVERT_TZ - 647))
          | (1ULL << (MySqlParser::COS - 647))
          | (1ULL << (MySqlParser::COT - 647))
          | (1ULL << (MySqlParser::CRC32 - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
          | (1ULL << (MySqlParser::CROSSES - 647))
          | (1ULL << (MySqlParser::DATEDIFF - 647))
          | (1ULL << (MySqlParser::DATE_FORMAT - 647))
          | (1ULL << (MySqlParser::DAYNAME - 647))
          | (1ULL << (MySqlParser::DAYOFMONTH - 647))
          | (1ULL << (MySqlParser::DAYOFWEEK - 647))
          | (1ULL << (MySqlParser::DAYOFYEAR - 647))
          | (1ULL << (MySqlParser::DECODE - 647))
          | (1ULL << (MySqlParser::DEGREES - 647))
          | (1ULL << (MySqlParser::DES_DECRYPT - 647))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
          | (1ULL << (MySqlParser::DIMENSION - 647))
          | (1ULL << (MySqlParser::DISJOINT - 647))
          | (1ULL << (MySqlParser::ELT - 647))
          | (1ULL << (MySqlParser::ENCODE - 647))
          | (1ULL << (MySqlParser::ENCRYPT - 647))
          | (1ULL << (MySqlParser::ENDPOINT - 647))
          | (1ULL << (MySqlParser::ENVELOPE - 647))
          | (1ULL << (MySqlParser::EQUALS - 647))
          | (1ULL << (MySqlParser::EXP - 647))
          | (1ULL << (MySqlParser::EXPORT_SET - 647))
          | (1ULL << (MySqlParser::EXTERIORRING - 647))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
          | (1ULL << (MySqlParser::FIELD - 647))
          | (1ULL << (MySqlParser::FIND_IN_SET - 647))
          | (1ULL << (MySqlParser::FLOOR - 647))
          | (1ULL << (MySqlParser::FORMAT - 647))
          | (1ULL << (MySqlParser::FOUND_ROWS - 647))
          | (1ULL << (MySqlParser::FROM_BASE64 - 647))
          | (1ULL << (MySqlParser::FROM_DAYS - 647))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
          | (1ULL << (MySqlParser::GET_FORMAT - 711))
          | (1ULL << (MySqlParser::GET_LOCK - 711))
          | (1ULL << (MySqlParser::GLENGTH - 711))
          | (1ULL << (MySqlParser::GREATEST - 711))
          | (1ULL << (MySqlParser::GTID_SUBSET - 711))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
          | (1ULL << (MySqlParser::HEX - 711))
          | (1ULL << (MySqlParser::IFNULL - 711))
          | (1ULL << (MySqlParser::INET6_ATON - 711))
          | (1ULL << (MySqlParser::INET6_NTOA - 711))
          | (1ULL << (MySqlParser::INET_ATON - 711))
          | (1ULL << (MySqlParser::INET_NTOA - 711))
          | (1ULL << (MySqlParser::INSTR - 711))
          | (1ULL << (MySqlParser::INTERIORRINGN - 711))
          | (1ULL << (MySqlParser::INTERSECTS - 711))
          | (1ULL << (MySqlParser::ISCLOSED - 711))
          | (1ULL << (MySqlParser::ISEMPTY - 711))
          | (1ULL << (MySqlParser::ISNULL - 711))
          | (1ULL << (MySqlParser::ISSIMPLE - 711))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
          | (1ULL << (MySqlParser::IS_IPV4 - 711))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
          | (1ULL << (MySqlParser::IS_IPV6 - 711))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
          | (1ULL << (MySqlParser::LCASE - 711))
          | (1ULL << (MySqlParser::LEAST - 711))
          | (1ULL << (MySqlParser::LENGTH - 711))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINEFROMWKB - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
          | (1ULL << (MySqlParser::LN - 711))
          | (1ULL << (MySqlParser::LOAD_FILE - 711))
          | (1ULL << (MySqlParser::LOCATE - 711))
          | (1ULL << (MySqlParser::LOG - 711))
          | (1ULL << (MySqlParser::LOG10 - 711))
          | (1ULL << (MySqlParser::LOG2 - 711))
          | (1ULL << (MySqlParser::LOWER - 711))
          | (1ULL << (MySqlParser::LPAD - 711))
          | (1ULL << (MySqlParser::LTRIM - 711))
          | (1ULL << (MySqlParser::MAKEDATE - 711))
          | (1ULL << (MySqlParser::MAKETIME - 711))
          | (1ULL << (MySqlParser::MAKE_SET - 711))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
          | (1ULL << (MySqlParser::MBRCONTAINS - 711))
          | (1ULL << (MySqlParser::MBRDISJOINT - 711))
          | (1ULL << (MySqlParser::MBREQUAL - 711))
          | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
          | (1ULL << (MySqlParser::MBROVERLAPS - 711))
          | (1ULL << (MySqlParser::MBRTOUCHES - 711))
          | (1ULL << (MySqlParser::MBRWITHIN - 711))
          | (1ULL << (MySqlParser::MD5 - 711))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
          | (1ULL << (MySqlParser::MONTHNAME - 711))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::NAME_CONST - 775))
          | (1ULL << (MySqlParser::NULLIF - 775))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
          | (1ULL << (MySqlParser::NUMPOINTS - 775))
          | (1ULL << (MySqlParser::OCT - 775))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
          | (1ULL << (MySqlParser::ORD - 775))
          | (1ULL << (MySqlParser::OVERLAPS - 775))
          | (1ULL << (MySqlParser::PERIOD_ADD - 775))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
          | (1ULL << (MySqlParser::PI - 775))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::POINTFROMWKB - 775))
          | (1ULL << (MySqlParser::POINTN - 775))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYFROMWKB - 775))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::POW - 775))
          | (1ULL << (MySqlParser::POWER - 775))
          | (1ULL << (MySqlParser::QUOTE - 775))
          | (1ULL << (MySqlParser::RADIANS - 775))
          | (1ULL << (MySqlParser::RAND - 775))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
          | (1ULL << (MySqlParser::REVERSE - 775))
          | (1ULL << (MySqlParser::ROUND - 775))
          | (1ULL << (MySqlParser::ROW_COUNT - 775))
          | (1ULL << (MySqlParser::RPAD - 775))
          | (1ULL << (MySqlParser::RTRIM - 775))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
          | (1ULL << (MySqlParser::SESSION_USER - 775))
          | (1ULL << (MySqlParser::SHA - 775))
          | (1ULL << (MySqlParser::SHA1 - 775))
          | (1ULL << (MySqlParser::SHA2 - 775))
          | (1ULL << (MySqlParser::SIGN - 775))
          | (1ULL << (MySqlParser::SIN - 775))
          | (1ULL << (MySqlParser::SLEEP - 775))
          | (1ULL << (MySqlParser::SOUNDEX - 775))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
          | (1ULL << (MySqlParser::SQRT - 775))
          | (1ULL << (MySqlParser::SRID - 775))
          | (1ULL << (MySqlParser::STARTPOINT - 775))
          | (1ULL << (MySqlParser::STRCMP - 775))
          | (1ULL << (MySqlParser::STR_TO_DATE - 775))
          | (1ULL << (MySqlParser::ST_AREA - 775))
          | (1ULL << (MySqlParser::ST_ASBINARY - 775))
          | (1ULL << (MySqlParser::ST_ASTEXT - 775))
          | (1ULL << (MySqlParser::ST_ASWKB - 775))
          | (1ULL << (MySqlParser::ST_ASWKT - 775))
          | (1ULL << (MySqlParser::ST_BUFFER - 775))
          | (1ULL << (MySqlParser::ST_CENTROID - 775))
          | (1ULL << (MySqlParser::ST_CONTAINS - 775))
          | (1ULL << (MySqlParser::ST_CROSSES - 775))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
          | (1ULL << (MySqlParser::ST_DIMENSION - 775))
          | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
          | (1ULL << (MySqlParser::ST_EQUALS - 839))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POINTN - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_SRID - 839))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
          | (1ULL << (MySqlParser::ST_TOUCHES - 839))
          | (1ULL << (MySqlParser::ST_UNION - 839))
          | (1ULL << (MySqlParser::ST_WITHIN - 839))
          | (1ULL << (MySqlParser::ST_X - 839))
          | (1ULL << (MySqlParser::ST_Y - 839))
          | (1ULL << (MySqlParser::SUBDATE - 839))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
          | (1ULL << (MySqlParser::SUBTIME - 839))
          | (1ULL << (MySqlParser::SYSTEM_USER - 839))
          | (1ULL << (MySqlParser::TAN - 839))
          | (1ULL << (MySqlParser::TIMEDIFF - 839))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
          | (1ULL << (MySqlParser::TIME_FORMAT - 839))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
          | (1ULL << (MySqlParser::TOUCHES - 839))
          | (1ULL << (MySqlParser::TO_BASE64 - 839))
          | (1ULL << (MySqlParser::TO_DAYS - 839))
          | (1ULL << (MySqlParser::TO_SECONDS - 839))
          | (1ULL << (MySqlParser::UCASE - 839))
          | (1ULL << (MySqlParser::UNCOMPRESS - 839))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
          | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
          | (1ULL << (MySqlParser::UPDATEXML - 903))
          | (1ULL << (MySqlParser::UPPER - 903))
          | (1ULL << (MySqlParser::UUID - 903))
          | (1ULL << (MySqlParser::UUID_SHORT - 903))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
          | (1ULL << (MySqlParser::VERSION - 903))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
          | (1ULL << (MySqlParser::WEEKDAY - 903))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
          | (1ULL << (MySqlParser::WITHIN - 903))
          | (1ULL << (MySqlParser::YEARWEEK - 903))
          | (1ULL << (MySqlParser::Y_FUNCTION - 903))
          | (1ULL << (MySqlParser::X_FUNCTION - 903))
          | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
          | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
          setState(2131);
          id_();
        }
      }
      setState(2136);
      match(MySqlParser::UNIQUE);
      setState(2138);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY) {
        setState(2137);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2141);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LEFT

      || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
        | (1ULL << (MySqlParser::TIME - 181))
        | (1ULL << (MySqlParser::TIMESTAMP - 181))
        | (1ULL << (MySqlParser::DATETIME - 181))
        | (1ULL << (MySqlParser::YEAR - 181))
        | (1ULL << (MySqlParser::TEXT - 181))
        | (1ULL << (MySqlParser::ENUM - 181))
        | (1ULL << (MySqlParser::COUNT - 181))
        | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
        | (1ULL << (MySqlParser::AFTER - 246))
        | (1ULL << (MySqlParser::ALGORITHM - 246))
        | (1ULL << (MySqlParser::ANY - 246))
        | (1ULL << (MySqlParser::AT - 246))
        | (1ULL << (MySqlParser::AUTHORS - 246))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
        | (1ULL << (MySqlParser::BEGIN - 246))
        | (1ULL << (MySqlParser::BINLOG - 246))
        | (1ULL << (MySqlParser::BIT - 246))
        | (1ULL << (MySqlParser::BTREE - 246))
        | (1ULL << (MySqlParser::CASCADED - 246))
        | (1ULL << (MySqlParser::CHAIN - 246))
        | (1ULL << (MySqlParser::CHECKSUM - 246))
        | (1ULL << (MySqlParser::CIPHER - 246))
        | (1ULL << (MySqlParser::CLIENT - 246))
        | (1ULL << (MySqlParser::COALESCE - 246))
        | (1ULL << (MySqlParser::CODE - 246))
        | (1ULL << (MySqlParser::COLUMNS - 246))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
        | (1ULL << (MySqlParser::COMMENT - 246))
        | (1ULL << (MySqlParser::COMMIT - 246))
        | (1ULL << (MySqlParser::COMPACT - 246))
        | (1ULL << (MySqlParser::COMPLETION - 246))
        | (1ULL << (MySqlParser::COMPRESSED - 246))
        | (1ULL << (MySqlParser::CONCURRENT - 246))
        | (1ULL << (MySqlParser::CONNECTION - 246))
        | (1ULL << (MySqlParser::CONSISTENT - 246))
        | (1ULL << (MySqlParser::CONTAINS - 246))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
        | (1ULL << (MySqlParser::COPY - 246))
        | (1ULL << (MySqlParser::DATA - 246))
        | (1ULL << (MySqlParser::DATAFILE - 246))
        | (1ULL << (MySqlParser::DEFINER - 246))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
        | (1ULL << (MySqlParser::DIRECTORY - 246))
        | (1ULL << (MySqlParser::DISABLE - 246))
        | (1ULL << (MySqlParser::DISCARD - 246))
        | (1ULL << (MySqlParser::DISK - 246))
        | (1ULL << (MySqlParser::DO - 246))
        | (1ULL << (MySqlParser::DUMPFILE - 246))
        | (1ULL << (MySqlParser::DUPLICATE - 246))
        | (1ULL << (MySqlParser::DYNAMIC - 246))
        | (1ULL << (MySqlParser::ENABLE - 246))
        | (1ULL << (MySqlParser::ENDS - 246))
        | (1ULL << (MySqlParser::ENGINE - 246))
        | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
        | (1ULL << (MySqlParser::ESCAPE - 311))
        | (1ULL << (MySqlParser::EVEN - 311))
        | (1ULL << (MySqlParser::EVENT - 311))
        | (1ULL << (MySqlParser::EVENTS - 311))
        | (1ULL << (MySqlParser::EVERY - 311))
        | (1ULL << (MySqlParser::EXCHANGE - 311))
        | (1ULL << (MySqlParser::EXCLUSIVE - 311))
        | (1ULL << (MySqlParser::EXPIRE - 311))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
        | (1ULL << (MySqlParser::FIELDS - 311))
        | (1ULL << (MySqlParser::FIRST - 311))
        | (1ULL << (MySqlParser::FIXED - 311))
        | (1ULL << (MySqlParser::FULL - 311))
        | (1ULL << (MySqlParser::FUNCTION - 311))
        | (1ULL << (MySqlParser::GLOBAL - 311))
        | (1ULL << (MySqlParser::GRANTS - 311))
        | (1ULL << (MySqlParser::HASH - 311))
        | (1ULL << (MySqlParser::HOST - 311))
        | (1ULL << (MySqlParser::IDENTIFIED - 311))
        | (1ULL << (MySqlParser::IMPORT - 311))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
        | (1ULL << (MySqlParser::INPLACE - 311))
        | (1ULL << (MySqlParser::INSERT_METHOD - 311))
        | (1ULL << (MySqlParser::INVOKER - 311))
        | (1ULL << (MySqlParser::ISOLATION - 311))
        | (1ULL << (MySqlParser::ISSUER - 311))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
        | (1ULL << (MySqlParser::LANGUAGE - 311))
        | (1ULL << (MySqlParser::LAST - 311))
        | (1ULL << (MySqlParser::LESS - 311))
        | (1ULL << (MySqlParser::LEVEL - 311))
        | (1ULL << (MySqlParser::LIST - 311))
        | (1ULL << (MySqlParser::LOCAL - 311))
        | (1ULL << (MySqlParser::LOGFILE - 311))
        | (1ULL << (MySqlParser::LOGS - 311))
        | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_ROWS - 391))
        | (1ULL << (MySqlParser::MAX_SIZE - 391))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
        | (1ULL << (MySqlParser::MERGE - 391))
        | (1ULL << (MySqlParser::MID - 391))
        | (1ULL << (MySqlParser::MIN_ROWS - 391))
        | (1ULL << (MySqlParser::MODIFY - 391))
        | (1ULL << (MySqlParser::MUTEX - 391))
        | (1ULL << (MySqlParser::MYSQL - 391))
        | (1ULL << (MySqlParser::NAME - 391))
        | (1ULL << (MySqlParser::NAMES - 391))
        | (1ULL << (MySqlParser::NCHAR - 391))
        | (1ULL << (MySqlParser::NO - 391))
        | (1ULL << (MySqlParser::NODEGROUP - 391))
        | (1ULL << (MySqlParser::NONE - 391))
        | (1ULL << (MySqlParser::OFFLINE - 391))
        | (1ULL << (MySqlParser::OFFSET - 391))
        | (1ULL << (MySqlParser::OJ - 391))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
        | (1ULL << (MySqlParser::ONLINE - 391))
        | (1ULL << (MySqlParser::ONLY - 391))
        | (1ULL << (MySqlParser::OPTIONS - 391))
        | (1ULL << (MySqlParser::OWNER - 391))
        | (1ULL << (MySqlParser::PACK_KEYS - 391))
        | (1ULL << (MySqlParser::PARSER - 391))
        | (1ULL << (MySqlParser::PARTIAL - 391))
        | (1ULL << (MySqlParser::PARTITIONING - 391))
        | (1ULL << (MySqlParser::PARTITIONS - 391))
        | (1ULL << (MySqlParser::PASSWORD - 391))
        | (1ULL << (MySqlParser::PLUGINS - 391))
        | (1ULL << (MySqlParser::PORT - 391))
        | (1ULL << (MySqlParser::PRESERVE - 391))
        | (1ULL << (MySqlParser::PROCESSLIST - 391))
        | (1ULL << (MySqlParser::PROFILE - 391))
        | (1ULL << (MySqlParser::PROFILES - 391))
        | (1ULL << (MySqlParser::PROXY - 391))
        | (1ULL << (MySqlParser::QUERY - 391))
        | (1ULL << (MySqlParser::QUICK - 391))
        | (1ULL << (MySqlParser::REBUILD - 391))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
        | (1ULL << (MySqlParser::REDUNDANT - 391))
        | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
        | (1ULL << (MySqlParser::REORGANIZE - 455))
        | (1ULL << (MySqlParser::REPAIR - 455))
        | (1ULL << (MySqlParser::REPLICATION - 455))
        | (1ULL << (MySqlParser::RETURNS - 455))
        | (1ULL << (MySqlParser::ROLLBACK - 455))
        | (1ULL << (MySqlParser::ROLLUP - 455))
        | (1ULL << (MySqlParser::ROW - 455))
        | (1ULL << (MySqlParser::ROWS - 455))
        | (1ULL << (MySqlParser::ROW_FORMAT - 455))
        | (1ULL << (MySqlParser::SAVEPOINT - 455))
        | (1ULL << (MySqlParser::SCHEDULE - 455))
        | (1ULL << (MySqlParser::SECURITY - 455))
        | (1ULL << (MySqlParser::SERVER - 455))
        | (1ULL << (MySqlParser::SESSION - 455))
        | (1ULL << (MySqlParser::SHARE - 455))
        | (1ULL << (MySqlParser::SHARED - 455))
        | (1ULL << (MySqlParser::SIGNED - 455))
        | (1ULL << (MySqlParser::SIMPLE - 455))
        | (1ULL << (MySqlParser::SLAVE - 455))
        | (1ULL << (MySqlParser::SNAPSHOT - 455))
        | (1ULL << (MySqlParser::SOCKET - 455))
        | (1ULL << (MySqlParser::SOME - 455))
        | (1ULL << (MySqlParser::SOUNDS - 455))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
        | (1ULL << (MySqlParser::SQL_CACHE - 455))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
        | (1ULL << (MySqlParser::START - 455))
        | (1ULL << (MySqlParser::STARTS - 455))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
        | (1ULL << (MySqlParser::STATUS - 455))
        | (1ULL << (MySqlParser::STORAGE - 455))
        | (1ULL << (MySqlParser::SUBJECT - 455))
        | (1ULL << (MySqlParser::SUBPARTITION - 455))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
        | (1ULL << (MySqlParser::TABLESPACE - 455))
        | (1ULL << (MySqlParser::TEMPORARY - 455))
        | (1ULL << (MySqlParser::TEMPTABLE - 455))
        | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
        | (1ULL << (MySqlParser::TRUNCATE - 519))
        | (1ULL << (MySqlParser::UNDEFINED - 519))
        | (1ULL << (MySqlParser::UNDOFILE - 519))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
        | (1ULL << (MySqlParser::UNKNOWN - 519))
        | (1ULL << (MySqlParser::UPGRADE - 519))
        | (1ULL << (MySqlParser::USER - 519))
        | (1ULL << (MySqlParser::VALUE - 519))
        | (1ULL << (MySqlParser::VARIABLES - 519))
        | (1ULL << (MySqlParser::VIEW - 519))
        | (1ULL << (MySqlParser::WAIT - 519))
        | (1ULL << (MySqlParser::WARNINGS - 519))
        | (1ULL << (MySqlParser::WORK - 519))
        | (1ULL << (MySqlParser::WRAPPER - 519))
        | (1ULL << (MySqlParser::X509 - 519))
        | (1ULL << (MySqlParser::XML - 519))
        | (1ULL << (MySqlParser::QUARTER - 519))
        | (1ULL << (MySqlParser::MONTH - 519))
        | (1ULL << (MySqlParser::DAY - 519))
        | (1ULL << (MySqlParser::HOUR - 519))
        | (1ULL << (MySqlParser::MINUTE - 519))
        | (1ULL << (MySqlParser::WEEK - 519))
        | (1ULL << (MySqlParser::SECOND - 519))
        | (1ULL << (MySqlParser::MICROSECOND - 519))
        | (1ULL << (MySqlParser::TABLES - 519))
        | (1ULL << (MySqlParser::ROUTINE - 519))
        | (1ULL << (MySqlParser::EXECUTE - 519))
        | (1ULL << (MySqlParser::FILE - 519))
        | (1ULL << (MySqlParser::PROCESS - 519))
        | (1ULL << (MySqlParser::RELOAD - 519))
        | (1ULL << (MySqlParser::SHUTDOWN - 519))
        | (1ULL << (MySqlParser::SUPER - 519))
        | (1ULL << (MySqlParser::PRIVILEGES - 519))
        | (1ULL << (MySqlParser::ARMSCII8 - 519))
        | (1ULL << (MySqlParser::ASCII - 519))
        | (1ULL << (MySqlParser::BIG5 - 519))
        | (1ULL << (MySqlParser::CP1250 - 519))
        | (1ULL << (MySqlParser::CP1251 - 519))
        | (1ULL << (MySqlParser::CP1256 - 519))
        | (1ULL << (MySqlParser::CP1257 - 519))
        | (1ULL << (MySqlParser::CP850 - 519))
        | (1ULL << (MySqlParser::CP852 - 519))
        | (1ULL << (MySqlParser::CP866 - 519))
        | (1ULL << (MySqlParser::CP932 - 519))
        | (1ULL << (MySqlParser::DEC8 - 519))
        | (1ULL << (MySqlParser::EUCJPMS - 519))
        | (1ULL << (MySqlParser::EUCKR - 519))
        | (1ULL << (MySqlParser::GB2312 - 519))
        | (1ULL << (MySqlParser::GBK - 519))
        | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
        | (1ULL << (MySqlParser::HEBREW - 583))
        | (1ULL << (MySqlParser::HP8 - 583))
        | (1ULL << (MySqlParser::KEYBCS2 - 583))
        | (1ULL << (MySqlParser::KOI8R - 583))
        | (1ULL << (MySqlParser::KOI8U - 583))
        | (1ULL << (MySqlParser::LATIN1 - 583))
        | (1ULL << (MySqlParser::LATIN2 - 583))
        | (1ULL << (MySqlParser::LATIN5 - 583))
        | (1ULL << (MySqlParser::LATIN7 - 583))
        | (1ULL << (MySqlParser::MACCE - 583))
        | (1ULL << (MySqlParser::MACROMAN - 583))
        | (1ULL << (MySqlParser::SJIS - 583))
        | (1ULL << (MySqlParser::SWE7 - 583))
        | (1ULL << (MySqlParser::TIS620 - 583))
        | (1ULL << (MySqlParser::UCS2 - 583))
        | (1ULL << (MySqlParser::UJIS - 583))
        | (1ULL << (MySqlParser::UTF16 - 583))
        | (1ULL << (MySqlParser::UTF16LE - 583))
        | (1ULL << (MySqlParser::UTF32 - 583))
        | (1ULL << (MySqlParser::UTF8 - 583))
        | (1ULL << (MySqlParser::UTF8MB3 - 583))
        | (1ULL << (MySqlParser::UTF8MB4 - 583))
        | (1ULL << (MySqlParser::ARCHIVE - 583))
        | (1ULL << (MySqlParser::BLACKHOLE - 583))
        | (1ULL << (MySqlParser::CSV - 583))
        | (1ULL << (MySqlParser::FEDERATED - 583))
        | (1ULL << (MySqlParser::INNODB - 583))
        | (1ULL << (MySqlParser::MEMORY - 583))
        | (1ULL << (MySqlParser::MRG_MYISAM - 583))
        | (1ULL << (MySqlParser::MYISAM - 583))
        | (1ULL << (MySqlParser::NDB - 583))
        | (1ULL << (MySqlParser::NDBCLUSTER - 583))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
        | (1ULL << (MySqlParser::REPEATABLE - 583))
        | (1ULL << (MySqlParser::COMMITTED - 583))
        | (1ULL << (MySqlParser::UNCOMMITTED - 583))
        | (1ULL << (MySqlParser::SERIALIZABLE - 583))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
        | (1ULL << (MySqlParser::LINESTRING - 583))
        | (1ULL << (MySqlParser::MULTILINESTRING - 583))
        | (1ULL << (MySqlParser::MULTIPOINT - 583))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
        | (1ULL << (MySqlParser::POINT - 583))
        | (1ULL << (MySqlParser::POLYGON - 583))
        | (1ULL << (MySqlParser::ABS - 583))
        | (1ULL << (MySqlParser::ACOS - 583))
        | (1ULL << (MySqlParser::ADDDATE - 583))
        | (1ULL << (MySqlParser::ADDTIME - 583))
        | (1ULL << (MySqlParser::AES_DECRYPT - 583))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
        | (1ULL << (MySqlParser::AREA - 583))
        | (1ULL << (MySqlParser::ASBINARY - 583))
        | (1ULL << (MySqlParser::ASIN - 583))
        | (1ULL << (MySqlParser::ASTEXT - 583))
        | (1ULL << (MySqlParser::ASWKB - 583))
        | (1ULL << (MySqlParser::ASWKT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
        | (1ULL << (MySqlParser::ATAN - 583))
        | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
        | (1ULL << (MySqlParser::BIN - 647))
        | (1ULL << (MySqlParser::BIT_COUNT - 647))
        | (1ULL << (MySqlParser::BIT_LENGTH - 647))
        | (1ULL << (MySqlParser::BUFFER - 647))
        | (1ULL << (MySqlParser::CEIL - 647))
        | (1ULL << (MySqlParser::CEILING - 647))
        | (1ULL << (MySqlParser::CENTROID - 647))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
        | (1ULL << (MySqlParser::CHARSET - 647))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
        | (1ULL << (MySqlParser::COERCIBILITY - 647))
        | (1ULL << (MySqlParser::COLLATION - 647))
        | (1ULL << (MySqlParser::COMPRESS - 647))
        | (1ULL << (MySqlParser::CONCAT - 647))
        | (1ULL << (MySqlParser::CONCAT_WS - 647))
        | (1ULL << (MySqlParser::CONNECTION_ID - 647))
        | (1ULL << (MySqlParser::CONV - 647))
        | (1ULL << (MySqlParser::CONVERT_TZ - 647))
        | (1ULL << (MySqlParser::COS - 647))
        | (1ULL << (MySqlParser::COT - 647))
        | (1ULL << (MySqlParser::CRC32 - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
        | (1ULL << (MySqlParser::CROSSES - 647))
        | (1ULL << (MySqlParser::DATEDIFF - 647))
        | (1ULL << (MySqlParser::DATE_FORMAT - 647))
        | (1ULL << (MySqlParser::DAYNAME - 647))
        | (1ULL << (MySqlParser::DAYOFMONTH - 647))
        | (1ULL << (MySqlParser::DAYOFWEEK - 647))
        | (1ULL << (MySqlParser::DAYOFYEAR - 647))
        | (1ULL << (MySqlParser::DECODE - 647))
        | (1ULL << (MySqlParser::DEGREES - 647))
        | (1ULL << (MySqlParser::DES_DECRYPT - 647))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
        | (1ULL << (MySqlParser::DIMENSION - 647))
        | (1ULL << (MySqlParser::DISJOINT - 647))
        | (1ULL << (MySqlParser::ELT - 647))
        | (1ULL << (MySqlParser::ENCODE - 647))
        | (1ULL << (MySqlParser::ENCRYPT - 647))
        | (1ULL << (MySqlParser::ENDPOINT - 647))
        | (1ULL << (MySqlParser::ENVELOPE - 647))
        | (1ULL << (MySqlParser::EQUALS - 647))
        | (1ULL << (MySqlParser::EXP - 647))
        | (1ULL << (MySqlParser::EXPORT_SET - 647))
        | (1ULL << (MySqlParser::EXTERIORRING - 647))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
        | (1ULL << (MySqlParser::FIELD - 647))
        | (1ULL << (MySqlParser::FIND_IN_SET - 647))
        | (1ULL << (MySqlParser::FLOOR - 647))
        | (1ULL << (MySqlParser::FORMAT - 647))
        | (1ULL << (MySqlParser::FOUND_ROWS - 647))
        | (1ULL << (MySqlParser::FROM_BASE64 - 647))
        | (1ULL << (MySqlParser::FROM_DAYS - 647))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
        | (1ULL << (MySqlParser::GET_FORMAT - 711))
        | (1ULL << (MySqlParser::GET_LOCK - 711))
        | (1ULL << (MySqlParser::GLENGTH - 711))
        | (1ULL << (MySqlParser::GREATEST - 711))
        | (1ULL << (MySqlParser::GTID_SUBSET - 711))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
        | (1ULL << (MySqlParser::HEX - 711))
        | (1ULL << (MySqlParser::IFNULL - 711))
        | (1ULL << (MySqlParser::INET6_ATON - 711))
        | (1ULL << (MySqlParser::INET6_NTOA - 711))
        | (1ULL << (MySqlParser::INET_ATON - 711))
        | (1ULL << (MySqlParser::INET_NTOA - 711))
        | (1ULL << (MySqlParser::INSTR - 711))
        | (1ULL << (MySqlParser::INTERIORRINGN - 711))
        | (1ULL << (MySqlParser::INTERSECTS - 711))
        | (1ULL << (MySqlParser::ISCLOSED - 711))
        | (1ULL << (MySqlParser::ISEMPTY - 711))
        | (1ULL << (MySqlParser::ISNULL - 711))
        | (1ULL << (MySqlParser::ISSIMPLE - 711))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
        | (1ULL << (MySqlParser::IS_IPV4 - 711))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
        | (1ULL << (MySqlParser::IS_IPV6 - 711))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
        | (1ULL << (MySqlParser::LCASE - 711))
        | (1ULL << (MySqlParser::LEAST - 711))
        | (1ULL << (MySqlParser::LENGTH - 711))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINEFROMWKB - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
        | (1ULL << (MySqlParser::LN - 711))
        | (1ULL << (MySqlParser::LOAD_FILE - 711))
        | (1ULL << (MySqlParser::LOCATE - 711))
        | (1ULL << (MySqlParser::LOG - 711))
        | (1ULL << (MySqlParser::LOG10 - 711))
        | (1ULL << (MySqlParser::LOG2 - 711))
        | (1ULL << (MySqlParser::LOWER - 711))
        | (1ULL << (MySqlParser::LPAD - 711))
        | (1ULL << (MySqlParser::LTRIM - 711))
        | (1ULL << (MySqlParser::MAKEDATE - 711))
        | (1ULL << (MySqlParser::MAKETIME - 711))
        | (1ULL << (MySqlParser::MAKE_SET - 711))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
        | (1ULL << (MySqlParser::MBRCONTAINS - 711))
        | (1ULL << (MySqlParser::MBRDISJOINT - 711))
        | (1ULL << (MySqlParser::MBREQUAL - 711))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
        | (1ULL << (MySqlParser::MBROVERLAPS - 711))
        | (1ULL << (MySqlParser::MBRTOUCHES - 711))
        | (1ULL << (MySqlParser::MBRWITHIN - 711))
        | (1ULL << (MySqlParser::MD5 - 711))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
        | (1ULL << (MySqlParser::MONTHNAME - 711))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::NAME_CONST - 775))
        | (1ULL << (MySqlParser::NULLIF - 775))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
        | (1ULL << (MySqlParser::NUMPOINTS - 775))
        | (1ULL << (MySqlParser::OCT - 775))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
        | (1ULL << (MySqlParser::ORD - 775))
        | (1ULL << (MySqlParser::OVERLAPS - 775))
        | (1ULL << (MySqlParser::PERIOD_ADD - 775))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
        | (1ULL << (MySqlParser::PI - 775))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::POINTFROMWKB - 775))
        | (1ULL << (MySqlParser::POINTN - 775))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYFROMWKB - 775))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::POW - 775))
        | (1ULL << (MySqlParser::POWER - 775))
        | (1ULL << (MySqlParser::QUOTE - 775))
        | (1ULL << (MySqlParser::RADIANS - 775))
        | (1ULL << (MySqlParser::RAND - 775))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
        | (1ULL << (MySqlParser::REVERSE - 775))
        | (1ULL << (MySqlParser::ROUND - 775))
        | (1ULL << (MySqlParser::ROW_COUNT - 775))
        | (1ULL << (MySqlParser::RPAD - 775))
        | (1ULL << (MySqlParser::RTRIM - 775))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
        | (1ULL << (MySqlParser::SESSION_USER - 775))
        | (1ULL << (MySqlParser::SHA - 775))
        | (1ULL << (MySqlParser::SHA1 - 775))
        | (1ULL << (MySqlParser::SHA2 - 775))
        | (1ULL << (MySqlParser::SIGN - 775))
        | (1ULL << (MySqlParser::SIN - 775))
        | (1ULL << (MySqlParser::SLEEP - 775))
        | (1ULL << (MySqlParser::SOUNDEX - 775))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
        | (1ULL << (MySqlParser::SQRT - 775))
        | (1ULL << (MySqlParser::SRID - 775))
        | (1ULL << (MySqlParser::STARTPOINT - 775))
        | (1ULL << (MySqlParser::STRCMP - 775))
        | (1ULL << (MySqlParser::STR_TO_DATE - 775))
        | (1ULL << (MySqlParser::ST_AREA - 775))
        | (1ULL << (MySqlParser::ST_ASBINARY - 775))
        | (1ULL << (MySqlParser::ST_ASTEXT - 775))
        | (1ULL << (MySqlParser::ST_ASWKB - 775))
        | (1ULL << (MySqlParser::ST_ASWKT - 775))
        | (1ULL << (MySqlParser::ST_BUFFER - 775))
        | (1ULL << (MySqlParser::ST_CENTROID - 775))
        | (1ULL << (MySqlParser::ST_CONTAINS - 775))
        | (1ULL << (MySqlParser::ST_CROSSES - 775))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
        | (1ULL << (MySqlParser::ST_DIMENSION - 775))
        | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
        | (1ULL << (MySqlParser::ST_EQUALS - 839))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POINTN - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_SRID - 839))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
        | (1ULL << (MySqlParser::ST_TOUCHES - 839))
        | (1ULL << (MySqlParser::ST_UNION - 839))
        | (1ULL << (MySqlParser::ST_WITHIN - 839))
        | (1ULL << (MySqlParser::ST_X - 839))
        | (1ULL << (MySqlParser::ST_Y - 839))
        | (1ULL << (MySqlParser::SUBDATE - 839))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
        | (1ULL << (MySqlParser::SUBTIME - 839))
        | (1ULL << (MySqlParser::SYSTEM_USER - 839))
        | (1ULL << (MySqlParser::TAN - 839))
        | (1ULL << (MySqlParser::TIMEDIFF - 839))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
        | (1ULL << (MySqlParser::TIME_FORMAT - 839))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
        | (1ULL << (MySqlParser::TOUCHES - 839))
        | (1ULL << (MySqlParser::TO_BASE64 - 839))
        | (1ULL << (MySqlParser::TO_DAYS - 839))
        | (1ULL << (MySqlParser::TO_SECONDS - 839))
        | (1ULL << (MySqlParser::UCASE - 839))
        | (1ULL << (MySqlParser::UNCOMPRESS - 839))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
        | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
        | (1ULL << (MySqlParser::UPDATEXML - 903))
        | (1ULL << (MySqlParser::UPPER - 903))
        | (1ULL << (MySqlParser::UUID - 903))
        | (1ULL << (MySqlParser::UUID_SHORT - 903))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
        | (1ULL << (MySqlParser::VERSION - 903))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
        | (1ULL << (MySqlParser::WEEKDAY - 903))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
        | (1ULL << (MySqlParser::WITHIN - 903))
        | (1ULL << (MySqlParser::YEARWEEK - 903))
        | (1ULL << (MySqlParser::Y_FUNCTION - 903))
        | (1ULL << (MySqlParser::X_FUNCTION - 903))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
        | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
        setState(2140);
        id_();
      }
      setState(2144);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(2143);
        index_type();
      }
      setState(2146);
      index_colname_list();
      setState(2150);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::KEY_BLOCK_SIZE) {
        setState(2147);
        index_option();
        setState(2152);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 7: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblAddSpecIndexContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(2153);
      match(MySqlParser::ADD);
      setState(2154);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FULLTEXT || _la == MySqlParser::SPATIAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2156);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY) {
        setState(2155);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2159);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LEFT

      || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
        | (1ULL << (MySqlParser::TIME - 181))
        | (1ULL << (MySqlParser::TIMESTAMP - 181))
        | (1ULL << (MySqlParser::DATETIME - 181))
        | (1ULL << (MySqlParser::YEAR - 181))
        | (1ULL << (MySqlParser::TEXT - 181))
        | (1ULL << (MySqlParser::ENUM - 181))
        | (1ULL << (MySqlParser::COUNT - 181))
        | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
        | (1ULL << (MySqlParser::AFTER - 246))
        | (1ULL << (MySqlParser::ALGORITHM - 246))
        | (1ULL << (MySqlParser::ANY - 246))
        | (1ULL << (MySqlParser::AT - 246))
        | (1ULL << (MySqlParser::AUTHORS - 246))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
        | (1ULL << (MySqlParser::BEGIN - 246))
        | (1ULL << (MySqlParser::BINLOG - 246))
        | (1ULL << (MySqlParser::BIT - 246))
        | (1ULL << (MySqlParser::BTREE - 246))
        | (1ULL << (MySqlParser::CASCADED - 246))
        | (1ULL << (MySqlParser::CHAIN - 246))
        | (1ULL << (MySqlParser::CHECKSUM - 246))
        | (1ULL << (MySqlParser::CIPHER - 246))
        | (1ULL << (MySqlParser::CLIENT - 246))
        | (1ULL << (MySqlParser::COALESCE - 246))
        | (1ULL << (MySqlParser::CODE - 246))
        | (1ULL << (MySqlParser::COLUMNS - 246))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
        | (1ULL << (MySqlParser::COMMENT - 246))
        | (1ULL << (MySqlParser::COMMIT - 246))
        | (1ULL << (MySqlParser::COMPACT - 246))
        | (1ULL << (MySqlParser::COMPLETION - 246))
        | (1ULL << (MySqlParser::COMPRESSED - 246))
        | (1ULL << (MySqlParser::CONCURRENT - 246))
        | (1ULL << (MySqlParser::CONNECTION - 246))
        | (1ULL << (MySqlParser::CONSISTENT - 246))
        | (1ULL << (MySqlParser::CONTAINS - 246))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
        | (1ULL << (MySqlParser::COPY - 246))
        | (1ULL << (MySqlParser::DATA - 246))
        | (1ULL << (MySqlParser::DATAFILE - 246))
        | (1ULL << (MySqlParser::DEFINER - 246))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
        | (1ULL << (MySqlParser::DIRECTORY - 246))
        | (1ULL << (MySqlParser::DISABLE - 246))
        | (1ULL << (MySqlParser::DISCARD - 246))
        | (1ULL << (MySqlParser::DISK - 246))
        | (1ULL << (MySqlParser::DO - 246))
        | (1ULL << (MySqlParser::DUMPFILE - 246))
        | (1ULL << (MySqlParser::DUPLICATE - 246))
        | (1ULL << (MySqlParser::DYNAMIC - 246))
        | (1ULL << (MySqlParser::ENABLE - 246))
        | (1ULL << (MySqlParser::ENDS - 246))
        | (1ULL << (MySqlParser::ENGINE - 246))
        | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
        | (1ULL << (MySqlParser::ESCAPE - 311))
        | (1ULL << (MySqlParser::EVEN - 311))
        | (1ULL << (MySqlParser::EVENT - 311))
        | (1ULL << (MySqlParser::EVENTS - 311))
        | (1ULL << (MySqlParser::EVERY - 311))
        | (1ULL << (MySqlParser::EXCHANGE - 311))
        | (1ULL << (MySqlParser::EXCLUSIVE - 311))
        | (1ULL << (MySqlParser::EXPIRE - 311))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
        | (1ULL << (MySqlParser::FIELDS - 311))
        | (1ULL << (MySqlParser::FIRST - 311))
        | (1ULL << (MySqlParser::FIXED - 311))
        | (1ULL << (MySqlParser::FULL - 311))
        | (1ULL << (MySqlParser::FUNCTION - 311))
        | (1ULL << (MySqlParser::GLOBAL - 311))
        | (1ULL << (MySqlParser::GRANTS - 311))
        | (1ULL << (MySqlParser::HASH - 311))
        | (1ULL << (MySqlParser::HOST - 311))
        | (1ULL << (MySqlParser::IDENTIFIED - 311))
        | (1ULL << (MySqlParser::IMPORT - 311))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
        | (1ULL << (MySqlParser::INPLACE - 311))
        | (1ULL << (MySqlParser::INSERT_METHOD - 311))
        | (1ULL << (MySqlParser::INVOKER - 311))
        | (1ULL << (MySqlParser::ISOLATION - 311))
        | (1ULL << (MySqlParser::ISSUER - 311))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
        | (1ULL << (MySqlParser::LANGUAGE - 311))
        | (1ULL << (MySqlParser::LAST - 311))
        | (1ULL << (MySqlParser::LESS - 311))
        | (1ULL << (MySqlParser::LEVEL - 311))
        | (1ULL << (MySqlParser::LIST - 311))
        | (1ULL << (MySqlParser::LOCAL - 311))
        | (1ULL << (MySqlParser::LOGFILE - 311))
        | (1ULL << (MySqlParser::LOGS - 311))
        | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_ROWS - 391))
        | (1ULL << (MySqlParser::MAX_SIZE - 391))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
        | (1ULL << (MySqlParser::MERGE - 391))
        | (1ULL << (MySqlParser::MID - 391))
        | (1ULL << (MySqlParser::MIN_ROWS - 391))
        | (1ULL << (MySqlParser::MODIFY - 391))
        | (1ULL << (MySqlParser::MUTEX - 391))
        | (1ULL << (MySqlParser::MYSQL - 391))
        | (1ULL << (MySqlParser::NAME - 391))
        | (1ULL << (MySqlParser::NAMES - 391))
        | (1ULL << (MySqlParser::NCHAR - 391))
        | (1ULL << (MySqlParser::NO - 391))
        | (1ULL << (MySqlParser::NODEGROUP - 391))
        | (1ULL << (MySqlParser::NONE - 391))
        | (1ULL << (MySqlParser::OFFLINE - 391))
        | (1ULL << (MySqlParser::OFFSET - 391))
        | (1ULL << (MySqlParser::OJ - 391))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
        | (1ULL << (MySqlParser::ONLINE - 391))
        | (1ULL << (MySqlParser::ONLY - 391))
        | (1ULL << (MySqlParser::OPTIONS - 391))
        | (1ULL << (MySqlParser::OWNER - 391))
        | (1ULL << (MySqlParser::PACK_KEYS - 391))
        | (1ULL << (MySqlParser::PARSER - 391))
        | (1ULL << (MySqlParser::PARTIAL - 391))
        | (1ULL << (MySqlParser::PARTITIONING - 391))
        | (1ULL << (MySqlParser::PARTITIONS - 391))
        | (1ULL << (MySqlParser::PASSWORD - 391))
        | (1ULL << (MySqlParser::PLUGINS - 391))
        | (1ULL << (MySqlParser::PORT - 391))
        | (1ULL << (MySqlParser::PRESERVE - 391))
        | (1ULL << (MySqlParser::PROCESSLIST - 391))
        | (1ULL << (MySqlParser::PROFILE - 391))
        | (1ULL << (MySqlParser::PROFILES - 391))
        | (1ULL << (MySqlParser::PROXY - 391))
        | (1ULL << (MySqlParser::QUERY - 391))
        | (1ULL << (MySqlParser::QUICK - 391))
        | (1ULL << (MySqlParser::REBUILD - 391))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
        | (1ULL << (MySqlParser::REDUNDANT - 391))
        | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
        | (1ULL << (MySqlParser::REORGANIZE - 455))
        | (1ULL << (MySqlParser::REPAIR - 455))
        | (1ULL << (MySqlParser::REPLICATION - 455))
        | (1ULL << (MySqlParser::RETURNS - 455))
        | (1ULL << (MySqlParser::ROLLBACK - 455))
        | (1ULL << (MySqlParser::ROLLUP - 455))
        | (1ULL << (MySqlParser::ROW - 455))
        | (1ULL << (MySqlParser::ROWS - 455))
        | (1ULL << (MySqlParser::ROW_FORMAT - 455))
        | (1ULL << (MySqlParser::SAVEPOINT - 455))
        | (1ULL << (MySqlParser::SCHEDULE - 455))
        | (1ULL << (MySqlParser::SECURITY - 455))
        | (1ULL << (MySqlParser::SERVER - 455))
        | (1ULL << (MySqlParser::SESSION - 455))
        | (1ULL << (MySqlParser::SHARE - 455))
        | (1ULL << (MySqlParser::SHARED - 455))
        | (1ULL << (MySqlParser::SIGNED - 455))
        | (1ULL << (MySqlParser::SIMPLE - 455))
        | (1ULL << (MySqlParser::SLAVE - 455))
        | (1ULL << (MySqlParser::SNAPSHOT - 455))
        | (1ULL << (MySqlParser::SOCKET - 455))
        | (1ULL << (MySqlParser::SOME - 455))
        | (1ULL << (MySqlParser::SOUNDS - 455))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
        | (1ULL << (MySqlParser::SQL_CACHE - 455))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
        | (1ULL << (MySqlParser::START - 455))
        | (1ULL << (MySqlParser::STARTS - 455))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
        | (1ULL << (MySqlParser::STATUS - 455))
        | (1ULL << (MySqlParser::STORAGE - 455))
        | (1ULL << (MySqlParser::SUBJECT - 455))
        | (1ULL << (MySqlParser::SUBPARTITION - 455))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
        | (1ULL << (MySqlParser::TABLESPACE - 455))
        | (1ULL << (MySqlParser::TEMPORARY - 455))
        | (1ULL << (MySqlParser::TEMPTABLE - 455))
        | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
        | (1ULL << (MySqlParser::TRUNCATE - 519))
        | (1ULL << (MySqlParser::UNDEFINED - 519))
        | (1ULL << (MySqlParser::UNDOFILE - 519))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
        | (1ULL << (MySqlParser::UNKNOWN - 519))
        | (1ULL << (MySqlParser::UPGRADE - 519))
        | (1ULL << (MySqlParser::USER - 519))
        | (1ULL << (MySqlParser::VALUE - 519))
        | (1ULL << (MySqlParser::VARIABLES - 519))
        | (1ULL << (MySqlParser::VIEW - 519))
        | (1ULL << (MySqlParser::WAIT - 519))
        | (1ULL << (MySqlParser::WARNINGS - 519))
        | (1ULL << (MySqlParser::WORK - 519))
        | (1ULL << (MySqlParser::WRAPPER - 519))
        | (1ULL << (MySqlParser::X509 - 519))
        | (1ULL << (MySqlParser::XML - 519))
        | (1ULL << (MySqlParser::QUARTER - 519))
        | (1ULL << (MySqlParser::MONTH - 519))
        | (1ULL << (MySqlParser::DAY - 519))
        | (1ULL << (MySqlParser::HOUR - 519))
        | (1ULL << (MySqlParser::MINUTE - 519))
        | (1ULL << (MySqlParser::WEEK - 519))
        | (1ULL << (MySqlParser::SECOND - 519))
        | (1ULL << (MySqlParser::MICROSECOND - 519))
        | (1ULL << (MySqlParser::TABLES - 519))
        | (1ULL << (MySqlParser::ROUTINE - 519))
        | (1ULL << (MySqlParser::EXECUTE - 519))
        | (1ULL << (MySqlParser::FILE - 519))
        | (1ULL << (MySqlParser::PROCESS - 519))
        | (1ULL << (MySqlParser::RELOAD - 519))
        | (1ULL << (MySqlParser::SHUTDOWN - 519))
        | (1ULL << (MySqlParser::SUPER - 519))
        | (1ULL << (MySqlParser::PRIVILEGES - 519))
        | (1ULL << (MySqlParser::ARMSCII8 - 519))
        | (1ULL << (MySqlParser::ASCII - 519))
        | (1ULL << (MySqlParser::BIG5 - 519))
        | (1ULL << (MySqlParser::CP1250 - 519))
        | (1ULL << (MySqlParser::CP1251 - 519))
        | (1ULL << (MySqlParser::CP1256 - 519))
        | (1ULL << (MySqlParser::CP1257 - 519))
        | (1ULL << (MySqlParser::CP850 - 519))
        | (1ULL << (MySqlParser::CP852 - 519))
        | (1ULL << (MySqlParser::CP866 - 519))
        | (1ULL << (MySqlParser::CP932 - 519))
        | (1ULL << (MySqlParser::DEC8 - 519))
        | (1ULL << (MySqlParser::EUCJPMS - 519))
        | (1ULL << (MySqlParser::EUCKR - 519))
        | (1ULL << (MySqlParser::GB2312 - 519))
        | (1ULL << (MySqlParser::GBK - 519))
        | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
        | (1ULL << (MySqlParser::HEBREW - 583))
        | (1ULL << (MySqlParser::HP8 - 583))
        | (1ULL << (MySqlParser::KEYBCS2 - 583))
        | (1ULL << (MySqlParser::KOI8R - 583))
        | (1ULL << (MySqlParser::KOI8U - 583))
        | (1ULL << (MySqlParser::LATIN1 - 583))
        | (1ULL << (MySqlParser::LATIN2 - 583))
        | (1ULL << (MySqlParser::LATIN5 - 583))
        | (1ULL << (MySqlParser::LATIN7 - 583))
        | (1ULL << (MySqlParser::MACCE - 583))
        | (1ULL << (MySqlParser::MACROMAN - 583))
        | (1ULL << (MySqlParser::SJIS - 583))
        | (1ULL << (MySqlParser::SWE7 - 583))
        | (1ULL << (MySqlParser::TIS620 - 583))
        | (1ULL << (MySqlParser::UCS2 - 583))
        | (1ULL << (MySqlParser::UJIS - 583))
        | (1ULL << (MySqlParser::UTF16 - 583))
        | (1ULL << (MySqlParser::UTF16LE - 583))
        | (1ULL << (MySqlParser::UTF32 - 583))
        | (1ULL << (MySqlParser::UTF8 - 583))
        | (1ULL << (MySqlParser::UTF8MB3 - 583))
        | (1ULL << (MySqlParser::UTF8MB4 - 583))
        | (1ULL << (MySqlParser::ARCHIVE - 583))
        | (1ULL << (MySqlParser::BLACKHOLE - 583))
        | (1ULL << (MySqlParser::CSV - 583))
        | (1ULL << (MySqlParser::FEDERATED - 583))
        | (1ULL << (MySqlParser::INNODB - 583))
        | (1ULL << (MySqlParser::MEMORY - 583))
        | (1ULL << (MySqlParser::MRG_MYISAM - 583))
        | (1ULL << (MySqlParser::MYISAM - 583))
        | (1ULL << (MySqlParser::NDB - 583))
        | (1ULL << (MySqlParser::NDBCLUSTER - 583))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
        | (1ULL << (MySqlParser::REPEATABLE - 583))
        | (1ULL << (MySqlParser::COMMITTED - 583))
        | (1ULL << (MySqlParser::UNCOMMITTED - 583))
        | (1ULL << (MySqlParser::SERIALIZABLE - 583))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
        | (1ULL << (MySqlParser::LINESTRING - 583))
        | (1ULL << (MySqlParser::MULTILINESTRING - 583))
        | (1ULL << (MySqlParser::MULTIPOINT - 583))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
        | (1ULL << (MySqlParser::POINT - 583))
        | (1ULL << (MySqlParser::POLYGON - 583))
        | (1ULL << (MySqlParser::ABS - 583))
        | (1ULL << (MySqlParser::ACOS - 583))
        | (1ULL << (MySqlParser::ADDDATE - 583))
        | (1ULL << (MySqlParser::ADDTIME - 583))
        | (1ULL << (MySqlParser::AES_DECRYPT - 583))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
        | (1ULL << (MySqlParser::AREA - 583))
        | (1ULL << (MySqlParser::ASBINARY - 583))
        | (1ULL << (MySqlParser::ASIN - 583))
        | (1ULL << (MySqlParser::ASTEXT - 583))
        | (1ULL << (MySqlParser::ASWKB - 583))
        | (1ULL << (MySqlParser::ASWKT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
        | (1ULL << (MySqlParser::ATAN - 583))
        | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
        | (1ULL << (MySqlParser::BIN - 647))
        | (1ULL << (MySqlParser::BIT_COUNT - 647))
        | (1ULL << (MySqlParser::BIT_LENGTH - 647))
        | (1ULL << (MySqlParser::BUFFER - 647))
        | (1ULL << (MySqlParser::CEIL - 647))
        | (1ULL << (MySqlParser::CEILING - 647))
        | (1ULL << (MySqlParser::CENTROID - 647))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
        | (1ULL << (MySqlParser::CHARSET - 647))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
        | (1ULL << (MySqlParser::COERCIBILITY - 647))
        | (1ULL << (MySqlParser::COLLATION - 647))
        | (1ULL << (MySqlParser::COMPRESS - 647))
        | (1ULL << (MySqlParser::CONCAT - 647))
        | (1ULL << (MySqlParser::CONCAT_WS - 647))
        | (1ULL << (MySqlParser::CONNECTION_ID - 647))
        | (1ULL << (MySqlParser::CONV - 647))
        | (1ULL << (MySqlParser::CONVERT_TZ - 647))
        | (1ULL << (MySqlParser::COS - 647))
        | (1ULL << (MySqlParser::COT - 647))
        | (1ULL << (MySqlParser::CRC32 - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
        | (1ULL << (MySqlParser::CROSSES - 647))
        | (1ULL << (MySqlParser::DATEDIFF - 647))
        | (1ULL << (MySqlParser::DATE_FORMAT - 647))
        | (1ULL << (MySqlParser::DAYNAME - 647))
        | (1ULL << (MySqlParser::DAYOFMONTH - 647))
        | (1ULL << (MySqlParser::DAYOFWEEK - 647))
        | (1ULL << (MySqlParser::DAYOFYEAR - 647))
        | (1ULL << (MySqlParser::DECODE - 647))
        | (1ULL << (MySqlParser::DEGREES - 647))
        | (1ULL << (MySqlParser::DES_DECRYPT - 647))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
        | (1ULL << (MySqlParser::DIMENSION - 647))
        | (1ULL << (MySqlParser::DISJOINT - 647))
        | (1ULL << (MySqlParser::ELT - 647))
        | (1ULL << (MySqlParser::ENCODE - 647))
        | (1ULL << (MySqlParser::ENCRYPT - 647))
        | (1ULL << (MySqlParser::ENDPOINT - 647))
        | (1ULL << (MySqlParser::ENVELOPE - 647))
        | (1ULL << (MySqlParser::EQUALS - 647))
        | (1ULL << (MySqlParser::EXP - 647))
        | (1ULL << (MySqlParser::EXPORT_SET - 647))
        | (1ULL << (MySqlParser::EXTERIORRING - 647))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
        | (1ULL << (MySqlParser::FIELD - 647))
        | (1ULL << (MySqlParser::FIND_IN_SET - 647))
        | (1ULL << (MySqlParser::FLOOR - 647))
        | (1ULL << (MySqlParser::FORMAT - 647))
        | (1ULL << (MySqlParser::FOUND_ROWS - 647))
        | (1ULL << (MySqlParser::FROM_BASE64 - 647))
        | (1ULL << (MySqlParser::FROM_DAYS - 647))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
        | (1ULL << (MySqlParser::GET_FORMAT - 711))
        | (1ULL << (MySqlParser::GET_LOCK - 711))
        | (1ULL << (MySqlParser::GLENGTH - 711))
        | (1ULL << (MySqlParser::GREATEST - 711))
        | (1ULL << (MySqlParser::GTID_SUBSET - 711))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
        | (1ULL << (MySqlParser::HEX - 711))
        | (1ULL << (MySqlParser::IFNULL - 711))
        | (1ULL << (MySqlParser::INET6_ATON - 711))
        | (1ULL << (MySqlParser::INET6_NTOA - 711))
        | (1ULL << (MySqlParser::INET_ATON - 711))
        | (1ULL << (MySqlParser::INET_NTOA - 711))
        | (1ULL << (MySqlParser::INSTR - 711))
        | (1ULL << (MySqlParser::INTERIORRINGN - 711))
        | (1ULL << (MySqlParser::INTERSECTS - 711))
        | (1ULL << (MySqlParser::ISCLOSED - 711))
        | (1ULL << (MySqlParser::ISEMPTY - 711))
        | (1ULL << (MySqlParser::ISNULL - 711))
        | (1ULL << (MySqlParser::ISSIMPLE - 711))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
        | (1ULL << (MySqlParser::IS_IPV4 - 711))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
        | (1ULL << (MySqlParser::IS_IPV6 - 711))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
        | (1ULL << (MySqlParser::LCASE - 711))
        | (1ULL << (MySqlParser::LEAST - 711))
        | (1ULL << (MySqlParser::LENGTH - 711))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINEFROMWKB - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
        | (1ULL << (MySqlParser::LN - 711))
        | (1ULL << (MySqlParser::LOAD_FILE - 711))
        | (1ULL << (MySqlParser::LOCATE - 711))
        | (1ULL << (MySqlParser::LOG - 711))
        | (1ULL << (MySqlParser::LOG10 - 711))
        | (1ULL << (MySqlParser::LOG2 - 711))
        | (1ULL << (MySqlParser::LOWER - 711))
        | (1ULL << (MySqlParser::LPAD - 711))
        | (1ULL << (MySqlParser::LTRIM - 711))
        | (1ULL << (MySqlParser::MAKEDATE - 711))
        | (1ULL << (MySqlParser::MAKETIME - 711))
        | (1ULL << (MySqlParser::MAKE_SET - 711))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
        | (1ULL << (MySqlParser::MBRCONTAINS - 711))
        | (1ULL << (MySqlParser::MBRDISJOINT - 711))
        | (1ULL << (MySqlParser::MBREQUAL - 711))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
        | (1ULL << (MySqlParser::MBROVERLAPS - 711))
        | (1ULL << (MySqlParser::MBRTOUCHES - 711))
        | (1ULL << (MySqlParser::MBRWITHIN - 711))
        | (1ULL << (MySqlParser::MD5 - 711))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
        | (1ULL << (MySqlParser::MONTHNAME - 711))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::NAME_CONST - 775))
        | (1ULL << (MySqlParser::NULLIF - 775))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
        | (1ULL << (MySqlParser::NUMPOINTS - 775))
        | (1ULL << (MySqlParser::OCT - 775))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
        | (1ULL << (MySqlParser::ORD - 775))
        | (1ULL << (MySqlParser::OVERLAPS - 775))
        | (1ULL << (MySqlParser::PERIOD_ADD - 775))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
        | (1ULL << (MySqlParser::PI - 775))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::POINTFROMWKB - 775))
        | (1ULL << (MySqlParser::POINTN - 775))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYFROMWKB - 775))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::POW - 775))
        | (1ULL << (MySqlParser::POWER - 775))
        | (1ULL << (MySqlParser::QUOTE - 775))
        | (1ULL << (MySqlParser::RADIANS - 775))
        | (1ULL << (MySqlParser::RAND - 775))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
        | (1ULL << (MySqlParser::REVERSE - 775))
        | (1ULL << (MySqlParser::ROUND - 775))
        | (1ULL << (MySqlParser::ROW_COUNT - 775))
        | (1ULL << (MySqlParser::RPAD - 775))
        | (1ULL << (MySqlParser::RTRIM - 775))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
        | (1ULL << (MySqlParser::SESSION_USER - 775))
        | (1ULL << (MySqlParser::SHA - 775))
        | (1ULL << (MySqlParser::SHA1 - 775))
        | (1ULL << (MySqlParser::SHA2 - 775))
        | (1ULL << (MySqlParser::SIGN - 775))
        | (1ULL << (MySqlParser::SIN - 775))
        | (1ULL << (MySqlParser::SLEEP - 775))
        | (1ULL << (MySqlParser::SOUNDEX - 775))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
        | (1ULL << (MySqlParser::SQRT - 775))
        | (1ULL << (MySqlParser::SRID - 775))
        | (1ULL << (MySqlParser::STARTPOINT - 775))
        | (1ULL << (MySqlParser::STRCMP - 775))
        | (1ULL << (MySqlParser::STR_TO_DATE - 775))
        | (1ULL << (MySqlParser::ST_AREA - 775))
        | (1ULL << (MySqlParser::ST_ASBINARY - 775))
        | (1ULL << (MySqlParser::ST_ASTEXT - 775))
        | (1ULL << (MySqlParser::ST_ASWKB - 775))
        | (1ULL << (MySqlParser::ST_ASWKT - 775))
        | (1ULL << (MySqlParser::ST_BUFFER - 775))
        | (1ULL << (MySqlParser::ST_CENTROID - 775))
        | (1ULL << (MySqlParser::ST_CONTAINS - 775))
        | (1ULL << (MySqlParser::ST_CROSSES - 775))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
        | (1ULL << (MySqlParser::ST_DIMENSION - 775))
        | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
        | (1ULL << (MySqlParser::ST_EQUALS - 839))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POINTN - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_SRID - 839))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
        | (1ULL << (MySqlParser::ST_TOUCHES - 839))
        | (1ULL << (MySqlParser::ST_UNION - 839))
        | (1ULL << (MySqlParser::ST_WITHIN - 839))
        | (1ULL << (MySqlParser::ST_X - 839))
        | (1ULL << (MySqlParser::ST_Y - 839))
        | (1ULL << (MySqlParser::SUBDATE - 839))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
        | (1ULL << (MySqlParser::SUBTIME - 839))
        | (1ULL << (MySqlParser::SYSTEM_USER - 839))
        | (1ULL << (MySqlParser::TAN - 839))
        | (1ULL << (MySqlParser::TIMEDIFF - 839))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
        | (1ULL << (MySqlParser::TIME_FORMAT - 839))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
        | (1ULL << (MySqlParser::TOUCHES - 839))
        | (1ULL << (MySqlParser::TO_BASE64 - 839))
        | (1ULL << (MySqlParser::TO_DAYS - 839))
        | (1ULL << (MySqlParser::TO_SECONDS - 839))
        | (1ULL << (MySqlParser::UCASE - 839))
        | (1ULL << (MySqlParser::UNCOMPRESS - 839))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
        | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
        | (1ULL << (MySqlParser::UPDATEXML - 903))
        | (1ULL << (MySqlParser::UPPER - 903))
        | (1ULL << (MySqlParser::UUID - 903))
        | (1ULL << (MySqlParser::UUID_SHORT - 903))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
        | (1ULL << (MySqlParser::VERSION - 903))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
        | (1ULL << (MySqlParser::WEEKDAY - 903))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
        | (1ULL << (MySqlParser::WITHIN - 903))
        | (1ULL << (MySqlParser::YEARWEEK - 903))
        | (1ULL << (MySqlParser::Y_FUNCTION - 903))
        | (1ULL << (MySqlParser::X_FUNCTION - 903))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
        | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
        setState(2158);
        id_();
      }
      setState(2161);
      index_colname_list();
      setState(2165);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::USING

      || _la == MySqlParser::WITH || _la == MySqlParser::COMMENT || _la == MySqlParser::KEY_BLOCK_SIZE) {
        setState(2162);
        index_option();
        setState(2167);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 8: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblAddFKContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(2168);
      match(MySqlParser::ADD);
      setState(2173);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CONSTRAINT) {
        setState(2169);
        match(MySqlParser::CONSTRAINT);
        setState(2171);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
          | (1ULL << (MySqlParser::TIME - 181))
          | (1ULL << (MySqlParser::TIMESTAMP - 181))
          | (1ULL << (MySqlParser::DATETIME - 181))
          | (1ULL << (MySqlParser::YEAR - 181))
          | (1ULL << (MySqlParser::TEXT - 181))
          | (1ULL << (MySqlParser::ENUM - 181))
          | (1ULL << (MySqlParser::COUNT - 181))
          | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
          | (1ULL << (MySqlParser::AFTER - 246))
          | (1ULL << (MySqlParser::ALGORITHM - 246))
          | (1ULL << (MySqlParser::ANY - 246))
          | (1ULL << (MySqlParser::AT - 246))
          | (1ULL << (MySqlParser::AUTHORS - 246))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
          | (1ULL << (MySqlParser::BEGIN - 246))
          | (1ULL << (MySqlParser::BINLOG - 246))
          | (1ULL << (MySqlParser::BIT - 246))
          | (1ULL << (MySqlParser::BTREE - 246))
          | (1ULL << (MySqlParser::CASCADED - 246))
          | (1ULL << (MySqlParser::CHAIN - 246))
          | (1ULL << (MySqlParser::CHECKSUM - 246))
          | (1ULL << (MySqlParser::CIPHER - 246))
          | (1ULL << (MySqlParser::CLIENT - 246))
          | (1ULL << (MySqlParser::COALESCE - 246))
          | (1ULL << (MySqlParser::CODE - 246))
          | (1ULL << (MySqlParser::COLUMNS - 246))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
          | (1ULL << (MySqlParser::COMMENT - 246))
          | (1ULL << (MySqlParser::COMMIT - 246))
          | (1ULL << (MySqlParser::COMPACT - 246))
          | (1ULL << (MySqlParser::COMPLETION - 246))
          | (1ULL << (MySqlParser::COMPRESSED - 246))
          | (1ULL << (MySqlParser::CONCURRENT - 246))
          | (1ULL << (MySqlParser::CONNECTION - 246))
          | (1ULL << (MySqlParser::CONSISTENT - 246))
          | (1ULL << (MySqlParser::CONTAINS - 246))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
          | (1ULL << (MySqlParser::COPY - 246))
          | (1ULL << (MySqlParser::DATA - 246))
          | (1ULL << (MySqlParser::DATAFILE - 246))
          | (1ULL << (MySqlParser::DEFINER - 246))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
          | (1ULL << (MySqlParser::DIRECTORY - 246))
          | (1ULL << (MySqlParser::DISABLE - 246))
          | (1ULL << (MySqlParser::DISCARD - 246))
          | (1ULL << (MySqlParser::DISK - 246))
          | (1ULL << (MySqlParser::DO - 246))
          | (1ULL << (MySqlParser::DUMPFILE - 246))
          | (1ULL << (MySqlParser::DUPLICATE - 246))
          | (1ULL << (MySqlParser::DYNAMIC - 246))
          | (1ULL << (MySqlParser::ENABLE - 246))
          | (1ULL << (MySqlParser::ENDS - 246))
          | (1ULL << (MySqlParser::ENGINE - 246))
          | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
          | (1ULL << (MySqlParser::ESCAPE - 311))
          | (1ULL << (MySqlParser::EVEN - 311))
          | (1ULL << (MySqlParser::EVENT - 311))
          | (1ULL << (MySqlParser::EVENTS - 311))
          | (1ULL << (MySqlParser::EVERY - 311))
          | (1ULL << (MySqlParser::EXCHANGE - 311))
          | (1ULL << (MySqlParser::EXCLUSIVE - 311))
          | (1ULL << (MySqlParser::EXPIRE - 311))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
          | (1ULL << (MySqlParser::FIELDS - 311))
          | (1ULL << (MySqlParser::FIRST - 311))
          | (1ULL << (MySqlParser::FIXED - 311))
          | (1ULL << (MySqlParser::FULL - 311))
          | (1ULL << (MySqlParser::FUNCTION - 311))
          | (1ULL << (MySqlParser::GLOBAL - 311))
          | (1ULL << (MySqlParser::GRANTS - 311))
          | (1ULL << (MySqlParser::HASH - 311))
          | (1ULL << (MySqlParser::HOST - 311))
          | (1ULL << (MySqlParser::IDENTIFIED - 311))
          | (1ULL << (MySqlParser::IMPORT - 311))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
          | (1ULL << (MySqlParser::INPLACE - 311))
          | (1ULL << (MySqlParser::INSERT_METHOD - 311))
          | (1ULL << (MySqlParser::INVOKER - 311))
          | (1ULL << (MySqlParser::ISOLATION - 311))
          | (1ULL << (MySqlParser::ISSUER - 311))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
          | (1ULL << (MySqlParser::LANGUAGE - 311))
          | (1ULL << (MySqlParser::LAST - 311))
          | (1ULL << (MySqlParser::LESS - 311))
          | (1ULL << (MySqlParser::LEVEL - 311))
          | (1ULL << (MySqlParser::LIST - 311))
          | (1ULL << (MySqlParser::LOCAL - 311))
          | (1ULL << (MySqlParser::LOGFILE - 311))
          | (1ULL << (MySqlParser::LOGS - 311))
          | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_ROWS - 391))
          | (1ULL << (MySqlParser::MAX_SIZE - 391))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
          | (1ULL << (MySqlParser::MERGE - 391))
          | (1ULL << (MySqlParser::MID - 391))
          | (1ULL << (MySqlParser::MIN_ROWS - 391))
          | (1ULL << (MySqlParser::MODIFY - 391))
          | (1ULL << (MySqlParser::MUTEX - 391))
          | (1ULL << (MySqlParser::MYSQL - 391))
          | (1ULL << (MySqlParser::NAME - 391))
          | (1ULL << (MySqlParser::NAMES - 391))
          | (1ULL << (MySqlParser::NCHAR - 391))
          | (1ULL << (MySqlParser::NO - 391))
          | (1ULL << (MySqlParser::NODEGROUP - 391))
          | (1ULL << (MySqlParser::NONE - 391))
          | (1ULL << (MySqlParser::OFFLINE - 391))
          | (1ULL << (MySqlParser::OFFSET - 391))
          | (1ULL << (MySqlParser::OJ - 391))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
          | (1ULL << (MySqlParser::ONLINE - 391))
          | (1ULL << (MySqlParser::ONLY - 391))
          | (1ULL << (MySqlParser::OPTIONS - 391))
          | (1ULL << (MySqlParser::OWNER - 391))
          | (1ULL << (MySqlParser::PACK_KEYS - 391))
          | (1ULL << (MySqlParser::PARSER - 391))
          | (1ULL << (MySqlParser::PARTIAL - 391))
          | (1ULL << (MySqlParser::PARTITIONING - 391))
          | (1ULL << (MySqlParser::PARTITIONS - 391))
          | (1ULL << (MySqlParser::PASSWORD - 391))
          | (1ULL << (MySqlParser::PLUGINS - 391))
          | (1ULL << (MySqlParser::PORT - 391))
          | (1ULL << (MySqlParser::PRESERVE - 391))
          | (1ULL << (MySqlParser::PROCESSLIST - 391))
          | (1ULL << (MySqlParser::PROFILE - 391))
          | (1ULL << (MySqlParser::PROFILES - 391))
          | (1ULL << (MySqlParser::PROXY - 391))
          | (1ULL << (MySqlParser::QUERY - 391))
          | (1ULL << (MySqlParser::QUICK - 391))
          | (1ULL << (MySqlParser::REBUILD - 391))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
          | (1ULL << (MySqlParser::REDUNDANT - 391))
          | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
          | (1ULL << (MySqlParser::REORGANIZE - 455))
          | (1ULL << (MySqlParser::REPAIR - 455))
          | (1ULL << (MySqlParser::REPLICATION - 455))
          | (1ULL << (MySqlParser::RETURNS - 455))
          | (1ULL << (MySqlParser::ROLLBACK - 455))
          | (1ULL << (MySqlParser::ROLLUP - 455))
          | (1ULL << (MySqlParser::ROW - 455))
          | (1ULL << (MySqlParser::ROWS - 455))
          | (1ULL << (MySqlParser::ROW_FORMAT - 455))
          | (1ULL << (MySqlParser::SAVEPOINT - 455))
          | (1ULL << (MySqlParser::SCHEDULE - 455))
          | (1ULL << (MySqlParser::SECURITY - 455))
          | (1ULL << (MySqlParser::SERVER - 455))
          | (1ULL << (MySqlParser::SESSION - 455))
          | (1ULL << (MySqlParser::SHARE - 455))
          | (1ULL << (MySqlParser::SHARED - 455))
          | (1ULL << (MySqlParser::SIGNED - 455))
          | (1ULL << (MySqlParser::SIMPLE - 455))
          | (1ULL << (MySqlParser::SLAVE - 455))
          | (1ULL << (MySqlParser::SNAPSHOT - 455))
          | (1ULL << (MySqlParser::SOCKET - 455))
          | (1ULL << (MySqlParser::SOME - 455))
          | (1ULL << (MySqlParser::SOUNDS - 455))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
          | (1ULL << (MySqlParser::SQL_CACHE - 455))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
          | (1ULL << (MySqlParser::START - 455))
          | (1ULL << (MySqlParser::STARTS - 455))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
          | (1ULL << (MySqlParser::STATUS - 455))
          | (1ULL << (MySqlParser::STORAGE - 455))
          | (1ULL << (MySqlParser::SUBJECT - 455))
          | (1ULL << (MySqlParser::SUBPARTITION - 455))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
          | (1ULL << (MySqlParser::TABLESPACE - 455))
          | (1ULL << (MySqlParser::TEMPORARY - 455))
          | (1ULL << (MySqlParser::TEMPTABLE - 455))
          | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
          | (1ULL << (MySqlParser::TRUNCATE - 519))
          | (1ULL << (MySqlParser::UNDEFINED - 519))
          | (1ULL << (MySqlParser::UNDOFILE - 519))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
          | (1ULL << (MySqlParser::UNKNOWN - 519))
          | (1ULL << (MySqlParser::UPGRADE - 519))
          | (1ULL << (MySqlParser::USER - 519))
          | (1ULL << (MySqlParser::VALUE - 519))
          | (1ULL << (MySqlParser::VARIABLES - 519))
          | (1ULL << (MySqlParser::VIEW - 519))
          | (1ULL << (MySqlParser::WAIT - 519))
          | (1ULL << (MySqlParser::WARNINGS - 519))
          | (1ULL << (MySqlParser::WORK - 519))
          | (1ULL << (MySqlParser::WRAPPER - 519))
          | (1ULL << (MySqlParser::X509 - 519))
          | (1ULL << (MySqlParser::XML - 519))
          | (1ULL << (MySqlParser::QUARTER - 519))
          | (1ULL << (MySqlParser::MONTH - 519))
          | (1ULL << (MySqlParser::DAY - 519))
          | (1ULL << (MySqlParser::HOUR - 519))
          | (1ULL << (MySqlParser::MINUTE - 519))
          | (1ULL << (MySqlParser::WEEK - 519))
          | (1ULL << (MySqlParser::SECOND - 519))
          | (1ULL << (MySqlParser::MICROSECOND - 519))
          | (1ULL << (MySqlParser::TABLES - 519))
          | (1ULL << (MySqlParser::ROUTINE - 519))
          | (1ULL << (MySqlParser::EXECUTE - 519))
          | (1ULL << (MySqlParser::FILE - 519))
          | (1ULL << (MySqlParser::PROCESS - 519))
          | (1ULL << (MySqlParser::RELOAD - 519))
          | (1ULL << (MySqlParser::SHUTDOWN - 519))
          | (1ULL << (MySqlParser::SUPER - 519))
          | (1ULL << (MySqlParser::PRIVILEGES - 519))
          | (1ULL << (MySqlParser::ARMSCII8 - 519))
          | (1ULL << (MySqlParser::ASCII - 519))
          | (1ULL << (MySqlParser::BIG5 - 519))
          | (1ULL << (MySqlParser::CP1250 - 519))
          | (1ULL << (MySqlParser::CP1251 - 519))
          | (1ULL << (MySqlParser::CP1256 - 519))
          | (1ULL << (MySqlParser::CP1257 - 519))
          | (1ULL << (MySqlParser::CP850 - 519))
          | (1ULL << (MySqlParser::CP852 - 519))
          | (1ULL << (MySqlParser::CP866 - 519))
          | (1ULL << (MySqlParser::CP932 - 519))
          | (1ULL << (MySqlParser::DEC8 - 519))
          | (1ULL << (MySqlParser::EUCJPMS - 519))
          | (1ULL << (MySqlParser::EUCKR - 519))
          | (1ULL << (MySqlParser::GB2312 - 519))
          | (1ULL << (MySqlParser::GBK - 519))
          | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
          | (1ULL << (MySqlParser::HEBREW - 583))
          | (1ULL << (MySqlParser::HP8 - 583))
          | (1ULL << (MySqlParser::KEYBCS2 - 583))
          | (1ULL << (MySqlParser::KOI8R - 583))
          | (1ULL << (MySqlParser::KOI8U - 583))
          | (1ULL << (MySqlParser::LATIN1 - 583))
          | (1ULL << (MySqlParser::LATIN2 - 583))
          | (1ULL << (MySqlParser::LATIN5 - 583))
          | (1ULL << (MySqlParser::LATIN7 - 583))
          | (1ULL << (MySqlParser::MACCE - 583))
          | (1ULL << (MySqlParser::MACROMAN - 583))
          | (1ULL << (MySqlParser::SJIS - 583))
          | (1ULL << (MySqlParser::SWE7 - 583))
          | (1ULL << (MySqlParser::TIS620 - 583))
          | (1ULL << (MySqlParser::UCS2 - 583))
          | (1ULL << (MySqlParser::UJIS - 583))
          | (1ULL << (MySqlParser::UTF16 - 583))
          | (1ULL << (MySqlParser::UTF16LE - 583))
          | (1ULL << (MySqlParser::UTF32 - 583))
          | (1ULL << (MySqlParser::UTF8 - 583))
          | (1ULL << (MySqlParser::UTF8MB3 - 583))
          | (1ULL << (MySqlParser::UTF8MB4 - 583))
          | (1ULL << (MySqlParser::ARCHIVE - 583))
          | (1ULL << (MySqlParser::BLACKHOLE - 583))
          | (1ULL << (MySqlParser::CSV - 583))
          | (1ULL << (MySqlParser::FEDERATED - 583))
          | (1ULL << (MySqlParser::INNODB - 583))
          | (1ULL << (MySqlParser::MEMORY - 583))
          | (1ULL << (MySqlParser::MRG_MYISAM - 583))
          | (1ULL << (MySqlParser::MYISAM - 583))
          | (1ULL << (MySqlParser::NDB - 583))
          | (1ULL << (MySqlParser::NDBCLUSTER - 583))
          | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
          | (1ULL << (MySqlParser::REPEATABLE - 583))
          | (1ULL << (MySqlParser::COMMITTED - 583))
          | (1ULL << (MySqlParser::UNCOMMITTED - 583))
          | (1ULL << (MySqlParser::SERIALIZABLE - 583))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
          | (1ULL << (MySqlParser::LINESTRING - 583))
          | (1ULL << (MySqlParser::MULTILINESTRING - 583))
          | (1ULL << (MySqlParser::MULTIPOINT - 583))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
          | (1ULL << (MySqlParser::POINT - 583))
          | (1ULL << (MySqlParser::POLYGON - 583))
          | (1ULL << (MySqlParser::ABS - 583))
          | (1ULL << (MySqlParser::ACOS - 583))
          | (1ULL << (MySqlParser::ADDDATE - 583))
          | (1ULL << (MySqlParser::ADDTIME - 583))
          | (1ULL << (MySqlParser::AES_DECRYPT - 583))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
          | (1ULL << (MySqlParser::AREA - 583))
          | (1ULL << (MySqlParser::ASBINARY - 583))
          | (1ULL << (MySqlParser::ASIN - 583))
          | (1ULL << (MySqlParser::ASTEXT - 583))
          | (1ULL << (MySqlParser::ASWKB - 583))
          | (1ULL << (MySqlParser::ASWKT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
          | (1ULL << (MySqlParser::ATAN - 583))
          | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
          | (1ULL << (MySqlParser::BIN - 647))
          | (1ULL << (MySqlParser::BIT_COUNT - 647))
          | (1ULL << (MySqlParser::BIT_LENGTH - 647))
          | (1ULL << (MySqlParser::BUFFER - 647))
          | (1ULL << (MySqlParser::CEIL - 647))
          | (1ULL << (MySqlParser::CEILING - 647))
          | (1ULL << (MySqlParser::CENTROID - 647))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
          | (1ULL << (MySqlParser::CHARSET - 647))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
          | (1ULL << (MySqlParser::COERCIBILITY - 647))
          | (1ULL << (MySqlParser::COLLATION - 647))
          | (1ULL << (MySqlParser::COMPRESS - 647))
          | (1ULL << (MySqlParser::CONCAT - 647))
          | (1ULL << (MySqlParser::CONCAT_WS - 647))
          | (1ULL << (MySqlParser::CONNECTION_ID - 647))
          | (1ULL << (MySqlParser::CONV - 647))
          | (1ULL << (MySqlParser::CONVERT_TZ - 647))
          | (1ULL << (MySqlParser::COS - 647))
          | (1ULL << (MySqlParser::COT - 647))
          | (1ULL << (MySqlParser::CRC32 - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
          | (1ULL << (MySqlParser::CROSSES - 647))
          | (1ULL << (MySqlParser::DATEDIFF - 647))
          | (1ULL << (MySqlParser::DATE_FORMAT - 647))
          | (1ULL << (MySqlParser::DAYNAME - 647))
          | (1ULL << (MySqlParser::DAYOFMONTH - 647))
          | (1ULL << (MySqlParser::DAYOFWEEK - 647))
          | (1ULL << (MySqlParser::DAYOFYEAR - 647))
          | (1ULL << (MySqlParser::DECODE - 647))
          | (1ULL << (MySqlParser::DEGREES - 647))
          | (1ULL << (MySqlParser::DES_DECRYPT - 647))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
          | (1ULL << (MySqlParser::DIMENSION - 647))
          | (1ULL << (MySqlParser::DISJOINT - 647))
          | (1ULL << (MySqlParser::ELT - 647))
          | (1ULL << (MySqlParser::ENCODE - 647))
          | (1ULL << (MySqlParser::ENCRYPT - 647))
          | (1ULL << (MySqlParser::ENDPOINT - 647))
          | (1ULL << (MySqlParser::ENVELOPE - 647))
          | (1ULL << (MySqlParser::EQUALS - 647))
          | (1ULL << (MySqlParser::EXP - 647))
          | (1ULL << (MySqlParser::EXPORT_SET - 647))
          | (1ULL << (MySqlParser::EXTERIORRING - 647))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
          | (1ULL << (MySqlParser::FIELD - 647))
          | (1ULL << (MySqlParser::FIND_IN_SET - 647))
          | (1ULL << (MySqlParser::FLOOR - 647))
          | (1ULL << (MySqlParser::FORMAT - 647))
          | (1ULL << (MySqlParser::FOUND_ROWS - 647))
          | (1ULL << (MySqlParser::FROM_BASE64 - 647))
          | (1ULL << (MySqlParser::FROM_DAYS - 647))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
          | (1ULL << (MySqlParser::GET_FORMAT - 711))
          | (1ULL << (MySqlParser::GET_LOCK - 711))
          | (1ULL << (MySqlParser::GLENGTH - 711))
          | (1ULL << (MySqlParser::GREATEST - 711))
          | (1ULL << (MySqlParser::GTID_SUBSET - 711))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
          | (1ULL << (MySqlParser::HEX - 711))
          | (1ULL << (MySqlParser::IFNULL - 711))
          | (1ULL << (MySqlParser::INET6_ATON - 711))
          | (1ULL << (MySqlParser::INET6_NTOA - 711))
          | (1ULL << (MySqlParser::INET_ATON - 711))
          | (1ULL << (MySqlParser::INET_NTOA - 711))
          | (1ULL << (MySqlParser::INSTR - 711))
          | (1ULL << (MySqlParser::INTERIORRINGN - 711))
          | (1ULL << (MySqlParser::INTERSECTS - 711))
          | (1ULL << (MySqlParser::ISCLOSED - 711))
          | (1ULL << (MySqlParser::ISEMPTY - 711))
          | (1ULL << (MySqlParser::ISNULL - 711))
          | (1ULL << (MySqlParser::ISSIMPLE - 711))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
          | (1ULL << (MySqlParser::IS_IPV4 - 711))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
          | (1ULL << (MySqlParser::IS_IPV6 - 711))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
          | (1ULL << (MySqlParser::LCASE - 711))
          | (1ULL << (MySqlParser::LEAST - 711))
          | (1ULL << (MySqlParser::LENGTH - 711))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINEFROMWKB - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
          | (1ULL << (MySqlParser::LN - 711))
          | (1ULL << (MySqlParser::LOAD_FILE - 711))
          | (1ULL << (MySqlParser::LOCATE - 711))
          | (1ULL << (MySqlParser::LOG - 711))
          | (1ULL << (MySqlParser::LOG10 - 711))
          | (1ULL << (MySqlParser::LOG2 - 711))
          | (1ULL << (MySqlParser::LOWER - 711))
          | (1ULL << (MySqlParser::LPAD - 711))
          | (1ULL << (MySqlParser::LTRIM - 711))
          | (1ULL << (MySqlParser::MAKEDATE - 711))
          | (1ULL << (MySqlParser::MAKETIME - 711))
          | (1ULL << (MySqlParser::MAKE_SET - 711))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
          | (1ULL << (MySqlParser::MBRCONTAINS - 711))
          | (1ULL << (MySqlParser::MBRDISJOINT - 711))
          | (1ULL << (MySqlParser::MBREQUAL - 711))
          | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
          | (1ULL << (MySqlParser::MBROVERLAPS - 711))
          | (1ULL << (MySqlParser::MBRTOUCHES - 711))
          | (1ULL << (MySqlParser::MBRWITHIN - 711))
          | (1ULL << (MySqlParser::MD5 - 711))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
          | (1ULL << (MySqlParser::MONTHNAME - 711))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::NAME_CONST - 775))
          | (1ULL << (MySqlParser::NULLIF - 775))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
          | (1ULL << (MySqlParser::NUMPOINTS - 775))
          | (1ULL << (MySqlParser::OCT - 775))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
          | (1ULL << (MySqlParser::ORD - 775))
          | (1ULL << (MySqlParser::OVERLAPS - 775))
          | (1ULL << (MySqlParser::PERIOD_ADD - 775))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
          | (1ULL << (MySqlParser::PI - 775))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::POINTFROMWKB - 775))
          | (1ULL << (MySqlParser::POINTN - 775))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYFROMWKB - 775))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::POW - 775))
          | (1ULL << (MySqlParser::POWER - 775))
          | (1ULL << (MySqlParser::QUOTE - 775))
          | (1ULL << (MySqlParser::RADIANS - 775))
          | (1ULL << (MySqlParser::RAND - 775))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
          | (1ULL << (MySqlParser::REVERSE - 775))
          | (1ULL << (MySqlParser::ROUND - 775))
          | (1ULL << (MySqlParser::ROW_COUNT - 775))
          | (1ULL << (MySqlParser::RPAD - 775))
          | (1ULL << (MySqlParser::RTRIM - 775))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
          | (1ULL << (MySqlParser::SESSION_USER - 775))
          | (1ULL << (MySqlParser::SHA - 775))
          | (1ULL << (MySqlParser::SHA1 - 775))
          | (1ULL << (MySqlParser::SHA2 - 775))
          | (1ULL << (MySqlParser::SIGN - 775))
          | (1ULL << (MySqlParser::SIN - 775))
          | (1ULL << (MySqlParser::SLEEP - 775))
          | (1ULL << (MySqlParser::SOUNDEX - 775))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
          | (1ULL << (MySqlParser::SQRT - 775))
          | (1ULL << (MySqlParser::SRID - 775))
          | (1ULL << (MySqlParser::STARTPOINT - 775))
          | (1ULL << (MySqlParser::STRCMP - 775))
          | (1ULL << (MySqlParser::STR_TO_DATE - 775))
          | (1ULL << (MySqlParser::ST_AREA - 775))
          | (1ULL << (MySqlParser::ST_ASBINARY - 775))
          | (1ULL << (MySqlParser::ST_ASTEXT - 775))
          | (1ULL << (MySqlParser::ST_ASWKB - 775))
          | (1ULL << (MySqlParser::ST_ASWKT - 775))
          | (1ULL << (MySqlParser::ST_BUFFER - 775))
          | (1ULL << (MySqlParser::ST_CENTROID - 775))
          | (1ULL << (MySqlParser::ST_CONTAINS - 775))
          | (1ULL << (MySqlParser::ST_CROSSES - 775))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
          | (1ULL << (MySqlParser::ST_DIMENSION - 775))
          | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
          | (1ULL << (MySqlParser::ST_EQUALS - 839))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POINTN - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_SRID - 839))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
          | (1ULL << (MySqlParser::ST_TOUCHES - 839))
          | (1ULL << (MySqlParser::ST_UNION - 839))
          | (1ULL << (MySqlParser::ST_WITHIN - 839))
          | (1ULL << (MySqlParser::ST_X - 839))
          | (1ULL << (MySqlParser::ST_Y - 839))
          | (1ULL << (MySqlParser::SUBDATE - 839))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
          | (1ULL << (MySqlParser::SUBTIME - 839))
          | (1ULL << (MySqlParser::SYSTEM_USER - 839))
          | (1ULL << (MySqlParser::TAN - 839))
          | (1ULL << (MySqlParser::TIMEDIFF - 839))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
          | (1ULL << (MySqlParser::TIME_FORMAT - 839))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
          | (1ULL << (MySqlParser::TOUCHES - 839))
          | (1ULL << (MySqlParser::TO_BASE64 - 839))
          | (1ULL << (MySqlParser::TO_DAYS - 839))
          | (1ULL << (MySqlParser::TO_SECONDS - 839))
          | (1ULL << (MySqlParser::UCASE - 839))
          | (1ULL << (MySqlParser::UNCOMPRESS - 839))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
          | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
          | (1ULL << (MySqlParser::UPDATEXML - 903))
          | (1ULL << (MySqlParser::UPPER - 903))
          | (1ULL << (MySqlParser::UUID - 903))
          | (1ULL << (MySqlParser::UUID_SHORT - 903))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
          | (1ULL << (MySqlParser::VERSION - 903))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
          | (1ULL << (MySqlParser::WEEKDAY - 903))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
          | (1ULL << (MySqlParser::WITHIN - 903))
          | (1ULL << (MySqlParser::YEARWEEK - 903))
          | (1ULL << (MySqlParser::Y_FUNCTION - 903))
          | (1ULL << (MySqlParser::X_FUNCTION - 903))
          | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
          | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
          setState(2170);
          id_();
        }
      }
      setState(2175);
      match(MySqlParser::FOREIGN);
      setState(2176);
      match(MySqlParser::KEY);
      setState(2178);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LEFT

      || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
        | (1ULL << (MySqlParser::TIME - 181))
        | (1ULL << (MySqlParser::TIMESTAMP - 181))
        | (1ULL << (MySqlParser::DATETIME - 181))
        | (1ULL << (MySqlParser::YEAR - 181))
        | (1ULL << (MySqlParser::TEXT - 181))
        | (1ULL << (MySqlParser::ENUM - 181))
        | (1ULL << (MySqlParser::COUNT - 181))
        | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
        | (1ULL << (MySqlParser::AFTER - 246))
        | (1ULL << (MySqlParser::ALGORITHM - 246))
        | (1ULL << (MySqlParser::ANY - 246))
        | (1ULL << (MySqlParser::AT - 246))
        | (1ULL << (MySqlParser::AUTHORS - 246))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
        | (1ULL << (MySqlParser::BEGIN - 246))
        | (1ULL << (MySqlParser::BINLOG - 246))
        | (1ULL << (MySqlParser::BIT - 246))
        | (1ULL << (MySqlParser::BTREE - 246))
        | (1ULL << (MySqlParser::CASCADED - 246))
        | (1ULL << (MySqlParser::CHAIN - 246))
        | (1ULL << (MySqlParser::CHECKSUM - 246))
        | (1ULL << (MySqlParser::CIPHER - 246))
        | (1ULL << (MySqlParser::CLIENT - 246))
        | (1ULL << (MySqlParser::COALESCE - 246))
        | (1ULL << (MySqlParser::CODE - 246))
        | (1ULL << (MySqlParser::COLUMNS - 246))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
        | (1ULL << (MySqlParser::COMMENT - 246))
        | (1ULL << (MySqlParser::COMMIT - 246))
        | (1ULL << (MySqlParser::COMPACT - 246))
        | (1ULL << (MySqlParser::COMPLETION - 246))
        | (1ULL << (MySqlParser::COMPRESSED - 246))
        | (1ULL << (MySqlParser::CONCURRENT - 246))
        | (1ULL << (MySqlParser::CONNECTION - 246))
        | (1ULL << (MySqlParser::CONSISTENT - 246))
        | (1ULL << (MySqlParser::CONTAINS - 246))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
        | (1ULL << (MySqlParser::COPY - 246))
        | (1ULL << (MySqlParser::DATA - 246))
        | (1ULL << (MySqlParser::DATAFILE - 246))
        | (1ULL << (MySqlParser::DEFINER - 246))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
        | (1ULL << (MySqlParser::DIRECTORY - 246))
        | (1ULL << (MySqlParser::DISABLE - 246))
        | (1ULL << (MySqlParser::DISCARD - 246))
        | (1ULL << (MySqlParser::DISK - 246))
        | (1ULL << (MySqlParser::DO - 246))
        | (1ULL << (MySqlParser::DUMPFILE - 246))
        | (1ULL << (MySqlParser::DUPLICATE - 246))
        | (1ULL << (MySqlParser::DYNAMIC - 246))
        | (1ULL << (MySqlParser::ENABLE - 246))
        | (1ULL << (MySqlParser::ENDS - 246))
        | (1ULL << (MySqlParser::ENGINE - 246))
        | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
        | (1ULL << (MySqlParser::ESCAPE - 311))
        | (1ULL << (MySqlParser::EVEN - 311))
        | (1ULL << (MySqlParser::EVENT - 311))
        | (1ULL << (MySqlParser::EVENTS - 311))
        | (1ULL << (MySqlParser::EVERY - 311))
        | (1ULL << (MySqlParser::EXCHANGE - 311))
        | (1ULL << (MySqlParser::EXCLUSIVE - 311))
        | (1ULL << (MySqlParser::EXPIRE - 311))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
        | (1ULL << (MySqlParser::FIELDS - 311))
        | (1ULL << (MySqlParser::FIRST - 311))
        | (1ULL << (MySqlParser::FIXED - 311))
        | (1ULL << (MySqlParser::FULL - 311))
        | (1ULL << (MySqlParser::FUNCTION - 311))
        | (1ULL << (MySqlParser::GLOBAL - 311))
        | (1ULL << (MySqlParser::GRANTS - 311))
        | (1ULL << (MySqlParser::HASH - 311))
        | (1ULL << (MySqlParser::HOST - 311))
        | (1ULL << (MySqlParser::IDENTIFIED - 311))
        | (1ULL << (MySqlParser::IMPORT - 311))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
        | (1ULL << (MySqlParser::INPLACE - 311))
        | (1ULL << (MySqlParser::INSERT_METHOD - 311))
        | (1ULL << (MySqlParser::INVOKER - 311))
        | (1ULL << (MySqlParser::ISOLATION - 311))
        | (1ULL << (MySqlParser::ISSUER - 311))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
        | (1ULL << (MySqlParser::LANGUAGE - 311))
        | (1ULL << (MySqlParser::LAST - 311))
        | (1ULL << (MySqlParser::LESS - 311))
        | (1ULL << (MySqlParser::LEVEL - 311))
        | (1ULL << (MySqlParser::LIST - 311))
        | (1ULL << (MySqlParser::LOCAL - 311))
        | (1ULL << (MySqlParser::LOGFILE - 311))
        | (1ULL << (MySqlParser::LOGS - 311))
        | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_ROWS - 391))
        | (1ULL << (MySqlParser::MAX_SIZE - 391))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
        | (1ULL << (MySqlParser::MERGE - 391))
        | (1ULL << (MySqlParser::MID - 391))
        | (1ULL << (MySqlParser::MIN_ROWS - 391))
        | (1ULL << (MySqlParser::MODIFY - 391))
        | (1ULL << (MySqlParser::MUTEX - 391))
        | (1ULL << (MySqlParser::MYSQL - 391))
        | (1ULL << (MySqlParser::NAME - 391))
        | (1ULL << (MySqlParser::NAMES - 391))
        | (1ULL << (MySqlParser::NCHAR - 391))
        | (1ULL << (MySqlParser::NO - 391))
        | (1ULL << (MySqlParser::NODEGROUP - 391))
        | (1ULL << (MySqlParser::NONE - 391))
        | (1ULL << (MySqlParser::OFFLINE - 391))
        | (1ULL << (MySqlParser::OFFSET - 391))
        | (1ULL << (MySqlParser::OJ - 391))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
        | (1ULL << (MySqlParser::ONLINE - 391))
        | (1ULL << (MySqlParser::ONLY - 391))
        | (1ULL << (MySqlParser::OPTIONS - 391))
        | (1ULL << (MySqlParser::OWNER - 391))
        | (1ULL << (MySqlParser::PACK_KEYS - 391))
        | (1ULL << (MySqlParser::PARSER - 391))
        | (1ULL << (MySqlParser::PARTIAL - 391))
        | (1ULL << (MySqlParser::PARTITIONING - 391))
        | (1ULL << (MySqlParser::PARTITIONS - 391))
        | (1ULL << (MySqlParser::PASSWORD - 391))
        | (1ULL << (MySqlParser::PLUGINS - 391))
        | (1ULL << (MySqlParser::PORT - 391))
        | (1ULL << (MySqlParser::PRESERVE - 391))
        | (1ULL << (MySqlParser::PROCESSLIST - 391))
        | (1ULL << (MySqlParser::PROFILE - 391))
        | (1ULL << (MySqlParser::PROFILES - 391))
        | (1ULL << (MySqlParser::PROXY - 391))
        | (1ULL << (MySqlParser::QUERY - 391))
        | (1ULL << (MySqlParser::QUICK - 391))
        | (1ULL << (MySqlParser::REBUILD - 391))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
        | (1ULL << (MySqlParser::REDUNDANT - 391))
        | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
        | (1ULL << (MySqlParser::REORGANIZE - 455))
        | (1ULL << (MySqlParser::REPAIR - 455))
        | (1ULL << (MySqlParser::REPLICATION - 455))
        | (1ULL << (MySqlParser::RETURNS - 455))
        | (1ULL << (MySqlParser::ROLLBACK - 455))
        | (1ULL << (MySqlParser::ROLLUP - 455))
        | (1ULL << (MySqlParser::ROW - 455))
        | (1ULL << (MySqlParser::ROWS - 455))
        | (1ULL << (MySqlParser::ROW_FORMAT - 455))
        | (1ULL << (MySqlParser::SAVEPOINT - 455))
        | (1ULL << (MySqlParser::SCHEDULE - 455))
        | (1ULL << (MySqlParser::SECURITY - 455))
        | (1ULL << (MySqlParser::SERVER - 455))
        | (1ULL << (MySqlParser::SESSION - 455))
        | (1ULL << (MySqlParser::SHARE - 455))
        | (1ULL << (MySqlParser::SHARED - 455))
        | (1ULL << (MySqlParser::SIGNED - 455))
        | (1ULL << (MySqlParser::SIMPLE - 455))
        | (1ULL << (MySqlParser::SLAVE - 455))
        | (1ULL << (MySqlParser::SNAPSHOT - 455))
        | (1ULL << (MySqlParser::SOCKET - 455))
        | (1ULL << (MySqlParser::SOME - 455))
        | (1ULL << (MySqlParser::SOUNDS - 455))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
        | (1ULL << (MySqlParser::SQL_CACHE - 455))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
        | (1ULL << (MySqlParser::START - 455))
        | (1ULL << (MySqlParser::STARTS - 455))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
        | (1ULL << (MySqlParser::STATUS - 455))
        | (1ULL << (MySqlParser::STORAGE - 455))
        | (1ULL << (MySqlParser::SUBJECT - 455))
        | (1ULL << (MySqlParser::SUBPARTITION - 455))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
        | (1ULL << (MySqlParser::TABLESPACE - 455))
        | (1ULL << (MySqlParser::TEMPORARY - 455))
        | (1ULL << (MySqlParser::TEMPTABLE - 455))
        | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
        | (1ULL << (MySqlParser::TRUNCATE - 519))
        | (1ULL << (MySqlParser::UNDEFINED - 519))
        | (1ULL << (MySqlParser::UNDOFILE - 519))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
        | (1ULL << (MySqlParser::UNKNOWN - 519))
        | (1ULL << (MySqlParser::UPGRADE - 519))
        | (1ULL << (MySqlParser::USER - 519))
        | (1ULL << (MySqlParser::VALUE - 519))
        | (1ULL << (MySqlParser::VARIABLES - 519))
        | (1ULL << (MySqlParser::VIEW - 519))
        | (1ULL << (MySqlParser::WAIT - 519))
        | (1ULL << (MySqlParser::WARNINGS - 519))
        | (1ULL << (MySqlParser::WORK - 519))
        | (1ULL << (MySqlParser::WRAPPER - 519))
        | (1ULL << (MySqlParser::X509 - 519))
        | (1ULL << (MySqlParser::XML - 519))
        | (1ULL << (MySqlParser::QUARTER - 519))
        | (1ULL << (MySqlParser::MONTH - 519))
        | (1ULL << (MySqlParser::DAY - 519))
        | (1ULL << (MySqlParser::HOUR - 519))
        | (1ULL << (MySqlParser::MINUTE - 519))
        | (1ULL << (MySqlParser::WEEK - 519))
        | (1ULL << (MySqlParser::SECOND - 519))
        | (1ULL << (MySqlParser::MICROSECOND - 519))
        | (1ULL << (MySqlParser::TABLES - 519))
        | (1ULL << (MySqlParser::ROUTINE - 519))
        | (1ULL << (MySqlParser::EXECUTE - 519))
        | (1ULL << (MySqlParser::FILE - 519))
        | (1ULL << (MySqlParser::PROCESS - 519))
        | (1ULL << (MySqlParser::RELOAD - 519))
        | (1ULL << (MySqlParser::SHUTDOWN - 519))
        | (1ULL << (MySqlParser::SUPER - 519))
        | (1ULL << (MySqlParser::PRIVILEGES - 519))
        | (1ULL << (MySqlParser::ARMSCII8 - 519))
        | (1ULL << (MySqlParser::ASCII - 519))
        | (1ULL << (MySqlParser::BIG5 - 519))
        | (1ULL << (MySqlParser::CP1250 - 519))
        | (1ULL << (MySqlParser::CP1251 - 519))
        | (1ULL << (MySqlParser::CP1256 - 519))
        | (1ULL << (MySqlParser::CP1257 - 519))
        | (1ULL << (MySqlParser::CP850 - 519))
        | (1ULL << (MySqlParser::CP852 - 519))
        | (1ULL << (MySqlParser::CP866 - 519))
        | (1ULL << (MySqlParser::CP932 - 519))
        | (1ULL << (MySqlParser::DEC8 - 519))
        | (1ULL << (MySqlParser::EUCJPMS - 519))
        | (1ULL << (MySqlParser::EUCKR - 519))
        | (1ULL << (MySqlParser::GB2312 - 519))
        | (1ULL << (MySqlParser::GBK - 519))
        | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
        | (1ULL << (MySqlParser::HEBREW - 583))
        | (1ULL << (MySqlParser::HP8 - 583))
        | (1ULL << (MySqlParser::KEYBCS2 - 583))
        | (1ULL << (MySqlParser::KOI8R - 583))
        | (1ULL << (MySqlParser::KOI8U - 583))
        | (1ULL << (MySqlParser::LATIN1 - 583))
        | (1ULL << (MySqlParser::LATIN2 - 583))
        | (1ULL << (MySqlParser::LATIN5 - 583))
        | (1ULL << (MySqlParser::LATIN7 - 583))
        | (1ULL << (MySqlParser::MACCE - 583))
        | (1ULL << (MySqlParser::MACROMAN - 583))
        | (1ULL << (MySqlParser::SJIS - 583))
        | (1ULL << (MySqlParser::SWE7 - 583))
        | (1ULL << (MySqlParser::TIS620 - 583))
        | (1ULL << (MySqlParser::UCS2 - 583))
        | (1ULL << (MySqlParser::UJIS - 583))
        | (1ULL << (MySqlParser::UTF16 - 583))
        | (1ULL << (MySqlParser::UTF16LE - 583))
        | (1ULL << (MySqlParser::UTF32 - 583))
        | (1ULL << (MySqlParser::UTF8 - 583))
        | (1ULL << (MySqlParser::UTF8MB3 - 583))
        | (1ULL << (MySqlParser::UTF8MB4 - 583))
        | (1ULL << (MySqlParser::ARCHIVE - 583))
        | (1ULL << (MySqlParser::BLACKHOLE - 583))
        | (1ULL << (MySqlParser::CSV - 583))
        | (1ULL << (MySqlParser::FEDERATED - 583))
        | (1ULL << (MySqlParser::INNODB - 583))
        | (1ULL << (MySqlParser::MEMORY - 583))
        | (1ULL << (MySqlParser::MRG_MYISAM - 583))
        | (1ULL << (MySqlParser::MYISAM - 583))
        | (1ULL << (MySqlParser::NDB - 583))
        | (1ULL << (MySqlParser::NDBCLUSTER - 583))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
        | (1ULL << (MySqlParser::REPEATABLE - 583))
        | (1ULL << (MySqlParser::COMMITTED - 583))
        | (1ULL << (MySqlParser::UNCOMMITTED - 583))
        | (1ULL << (MySqlParser::SERIALIZABLE - 583))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
        | (1ULL << (MySqlParser::LINESTRING - 583))
        | (1ULL << (MySqlParser::MULTILINESTRING - 583))
        | (1ULL << (MySqlParser::MULTIPOINT - 583))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
        | (1ULL << (MySqlParser::POINT - 583))
        | (1ULL << (MySqlParser::POLYGON - 583))
        | (1ULL << (MySqlParser::ABS - 583))
        | (1ULL << (MySqlParser::ACOS - 583))
        | (1ULL << (MySqlParser::ADDDATE - 583))
        | (1ULL << (MySqlParser::ADDTIME - 583))
        | (1ULL << (MySqlParser::AES_DECRYPT - 583))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
        | (1ULL << (MySqlParser::AREA - 583))
        | (1ULL << (MySqlParser::ASBINARY - 583))
        | (1ULL << (MySqlParser::ASIN - 583))
        | (1ULL << (MySqlParser::ASTEXT - 583))
        | (1ULL << (MySqlParser::ASWKB - 583))
        | (1ULL << (MySqlParser::ASWKT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
        | (1ULL << (MySqlParser::ATAN - 583))
        | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
        | (1ULL << (MySqlParser::BIN - 647))
        | (1ULL << (MySqlParser::BIT_COUNT - 647))
        | (1ULL << (MySqlParser::BIT_LENGTH - 647))
        | (1ULL << (MySqlParser::BUFFER - 647))
        | (1ULL << (MySqlParser::CEIL - 647))
        | (1ULL << (MySqlParser::CEILING - 647))
        | (1ULL << (MySqlParser::CENTROID - 647))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
        | (1ULL << (MySqlParser::CHARSET - 647))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
        | (1ULL << (MySqlParser::COERCIBILITY - 647))
        | (1ULL << (MySqlParser::COLLATION - 647))
        | (1ULL << (MySqlParser::COMPRESS - 647))
        | (1ULL << (MySqlParser::CONCAT - 647))
        | (1ULL << (MySqlParser::CONCAT_WS - 647))
        | (1ULL << (MySqlParser::CONNECTION_ID - 647))
        | (1ULL << (MySqlParser::CONV - 647))
        | (1ULL << (MySqlParser::CONVERT_TZ - 647))
        | (1ULL << (MySqlParser::COS - 647))
        | (1ULL << (MySqlParser::COT - 647))
        | (1ULL << (MySqlParser::CRC32 - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
        | (1ULL << (MySqlParser::CROSSES - 647))
        | (1ULL << (MySqlParser::DATEDIFF - 647))
        | (1ULL << (MySqlParser::DATE_FORMAT - 647))
        | (1ULL << (MySqlParser::DAYNAME - 647))
        | (1ULL << (MySqlParser::DAYOFMONTH - 647))
        | (1ULL << (MySqlParser::DAYOFWEEK - 647))
        | (1ULL << (MySqlParser::DAYOFYEAR - 647))
        | (1ULL << (MySqlParser::DECODE - 647))
        | (1ULL << (MySqlParser::DEGREES - 647))
        | (1ULL << (MySqlParser::DES_DECRYPT - 647))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
        | (1ULL << (MySqlParser::DIMENSION - 647))
        | (1ULL << (MySqlParser::DISJOINT - 647))
        | (1ULL << (MySqlParser::ELT - 647))
        | (1ULL << (MySqlParser::ENCODE - 647))
        | (1ULL << (MySqlParser::ENCRYPT - 647))
        | (1ULL << (MySqlParser::ENDPOINT - 647))
        | (1ULL << (MySqlParser::ENVELOPE - 647))
        | (1ULL << (MySqlParser::EQUALS - 647))
        | (1ULL << (MySqlParser::EXP - 647))
        | (1ULL << (MySqlParser::EXPORT_SET - 647))
        | (1ULL << (MySqlParser::EXTERIORRING - 647))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
        | (1ULL << (MySqlParser::FIELD - 647))
        | (1ULL << (MySqlParser::FIND_IN_SET - 647))
        | (1ULL << (MySqlParser::FLOOR - 647))
        | (1ULL << (MySqlParser::FORMAT - 647))
        | (1ULL << (MySqlParser::FOUND_ROWS - 647))
        | (1ULL << (MySqlParser::FROM_BASE64 - 647))
        | (1ULL << (MySqlParser::FROM_DAYS - 647))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
        | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
        | (1ULL << (MySqlParser::GET_FORMAT - 711))
        | (1ULL << (MySqlParser::GET_LOCK - 711))
        | (1ULL << (MySqlParser::GLENGTH - 711))
        | (1ULL << (MySqlParser::GREATEST - 711))
        | (1ULL << (MySqlParser::GTID_SUBSET - 711))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
        | (1ULL << (MySqlParser::HEX - 711))
        | (1ULL << (MySqlParser::IFNULL - 711))
        | (1ULL << (MySqlParser::INET6_ATON - 711))
        | (1ULL << (MySqlParser::INET6_NTOA - 711))
        | (1ULL << (MySqlParser::INET_ATON - 711))
        | (1ULL << (MySqlParser::INET_NTOA - 711))
        | (1ULL << (MySqlParser::INSTR - 711))
        | (1ULL << (MySqlParser::INTERIORRINGN - 711))
        | (1ULL << (MySqlParser::INTERSECTS - 711))
        | (1ULL << (MySqlParser::ISCLOSED - 711))
        | (1ULL << (MySqlParser::ISEMPTY - 711))
        | (1ULL << (MySqlParser::ISNULL - 711))
        | (1ULL << (MySqlParser::ISSIMPLE - 711))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
        | (1ULL << (MySqlParser::IS_IPV4 - 711))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
        | (1ULL << (MySqlParser::IS_IPV6 - 711))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
        | (1ULL << (MySqlParser::LCASE - 711))
        | (1ULL << (MySqlParser::LEAST - 711))
        | (1ULL << (MySqlParser::LENGTH - 711))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINEFROMWKB - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
        | (1ULL << (MySqlParser::LN - 711))
        | (1ULL << (MySqlParser::LOAD_FILE - 711))
        | (1ULL << (MySqlParser::LOCATE - 711))
        | (1ULL << (MySqlParser::LOG - 711))
        | (1ULL << (MySqlParser::LOG10 - 711))
        | (1ULL << (MySqlParser::LOG2 - 711))
        | (1ULL << (MySqlParser::LOWER - 711))
        | (1ULL << (MySqlParser::LPAD - 711))
        | (1ULL << (MySqlParser::LTRIM - 711))
        | (1ULL << (MySqlParser::MAKEDATE - 711))
        | (1ULL << (MySqlParser::MAKETIME - 711))
        | (1ULL << (MySqlParser::MAKE_SET - 711))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
        | (1ULL << (MySqlParser::MBRCONTAINS - 711))
        | (1ULL << (MySqlParser::MBRDISJOINT - 711))
        | (1ULL << (MySqlParser::MBREQUAL - 711))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
        | (1ULL << (MySqlParser::MBROVERLAPS - 711))
        | (1ULL << (MySqlParser::MBRTOUCHES - 711))
        | (1ULL << (MySqlParser::MBRWITHIN - 711))
        | (1ULL << (MySqlParser::MD5 - 711))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
        | (1ULL << (MySqlParser::MONTHNAME - 711))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::NAME_CONST - 775))
        | (1ULL << (MySqlParser::NULLIF - 775))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
        | (1ULL << (MySqlParser::NUMPOINTS - 775))
        | (1ULL << (MySqlParser::OCT - 775))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
        | (1ULL << (MySqlParser::ORD - 775))
        | (1ULL << (MySqlParser::OVERLAPS - 775))
        | (1ULL << (MySqlParser::PERIOD_ADD - 775))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
        | (1ULL << (MySqlParser::PI - 775))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
        | (1ULL << (MySqlParser::POINTFROMWKB - 775))
        | (1ULL << (MySqlParser::POINTN - 775))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYFROMWKB - 775))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
        | (1ULL << (MySqlParser::POW - 775))
        | (1ULL << (MySqlParser::POWER - 775))
        | (1ULL << (MySqlParser::QUOTE - 775))
        | (1ULL << (MySqlParser::RADIANS - 775))
        | (1ULL << (MySqlParser::RAND - 775))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
        | (1ULL << (MySqlParser::REVERSE - 775))
        | (1ULL << (MySqlParser::ROUND - 775))
        | (1ULL << (MySqlParser::ROW_COUNT - 775))
        | (1ULL << (MySqlParser::RPAD - 775))
        | (1ULL << (MySqlParser::RTRIM - 775))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
        | (1ULL << (MySqlParser::SESSION_USER - 775))
        | (1ULL << (MySqlParser::SHA - 775))
        | (1ULL << (MySqlParser::SHA1 - 775))
        | (1ULL << (MySqlParser::SHA2 - 775))
        | (1ULL << (MySqlParser::SIGN - 775))
        | (1ULL << (MySqlParser::SIN - 775))
        | (1ULL << (MySqlParser::SLEEP - 775))
        | (1ULL << (MySqlParser::SOUNDEX - 775))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
        | (1ULL << (MySqlParser::SQRT - 775))
        | (1ULL << (MySqlParser::SRID - 775))
        | (1ULL << (MySqlParser::STARTPOINT - 775))
        | (1ULL << (MySqlParser::STRCMP - 775))
        | (1ULL << (MySqlParser::STR_TO_DATE - 775))
        | (1ULL << (MySqlParser::ST_AREA - 775))
        | (1ULL << (MySqlParser::ST_ASBINARY - 775))
        | (1ULL << (MySqlParser::ST_ASTEXT - 775))
        | (1ULL << (MySqlParser::ST_ASWKB - 775))
        | (1ULL << (MySqlParser::ST_ASWKT - 775))
        | (1ULL << (MySqlParser::ST_BUFFER - 775))
        | (1ULL << (MySqlParser::ST_CENTROID - 775))
        | (1ULL << (MySqlParser::ST_CONTAINS - 775))
        | (1ULL << (MySqlParser::ST_CROSSES - 775))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
        | (1ULL << (MySqlParser::ST_DIMENSION - 775))
        | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
        | (1ULL << (MySqlParser::ST_EQUALS - 839))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POINTN - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
        | (1ULL << (MySqlParser::ST_SRID - 839))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
        | (1ULL << (MySqlParser::ST_TOUCHES - 839))
        | (1ULL << (MySqlParser::ST_UNION - 839))
        | (1ULL << (MySqlParser::ST_WITHIN - 839))
        | (1ULL << (MySqlParser::ST_X - 839))
        | (1ULL << (MySqlParser::ST_Y - 839))
        | (1ULL << (MySqlParser::SUBDATE - 839))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
        | (1ULL << (MySqlParser::SUBTIME - 839))
        | (1ULL << (MySqlParser::SYSTEM_USER - 839))
        | (1ULL << (MySqlParser::TAN - 839))
        | (1ULL << (MySqlParser::TIMEDIFF - 839))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
        | (1ULL << (MySqlParser::TIME_FORMAT - 839))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
        | (1ULL << (MySqlParser::TOUCHES - 839))
        | (1ULL << (MySqlParser::TO_BASE64 - 839))
        | (1ULL << (MySqlParser::TO_DAYS - 839))
        | (1ULL << (MySqlParser::TO_SECONDS - 839))
        | (1ULL << (MySqlParser::UCASE - 839))
        | (1ULL << (MySqlParser::UNCOMPRESS - 839))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
        | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
        | (1ULL << (MySqlParser::UPDATEXML - 903))
        | (1ULL << (MySqlParser::UPPER - 903))
        | (1ULL << (MySqlParser::UUID - 903))
        | (1ULL << (MySqlParser::UUID_SHORT - 903))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
        | (1ULL << (MySqlParser::VERSION - 903))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
        | (1ULL << (MySqlParser::WEEKDAY - 903))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
        | (1ULL << (MySqlParser::WITHIN - 903))
        | (1ULL << (MySqlParser::YEARWEEK - 903))
        | (1ULL << (MySqlParser::Y_FUNCTION - 903))
        | (1ULL << (MySqlParser::X_FUNCTION - 903))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
        | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
        setState(2177);
        id_();
      }
      setState(2180);
      index_colname_list();
      setState(2181);
      reference_definition();
      break;
    }

    case 9: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblAlgContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(2183);
      match(MySqlParser::ALGORITHM);
      setState(2185);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(2184);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(2187);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::COPY

      || _la == MySqlParser::INPLACE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 10: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblColDefContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(2188);
      match(MySqlParser::ALTER);
      setState(2190);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2189);
        match(MySqlParser::COLUMN);
      }
      setState(2192);
      id_();
      setState(2198);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::SET: {
          setState(2193);
          match(MySqlParser::SET);
          setState(2194);
          match(MySqlParser::DEFAULT);
          setState(2195);
          default_value();
          break;
        }

        case MySqlParser::DROP: {
          setState(2196);
          match(MySqlParser::DROP);
          setState(2197);
          match(MySqlParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 11: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblColChangeContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(2200);
      match(MySqlParser::CHANGE);
      setState(2202);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2201);
        match(MySqlParser::COLUMN);
      }
      setState(2204);
      id_();
      setState(2205);
      id_();
      setState(2206);
      column_definition();
      setState(2210);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::FIRST: {
          setState(2207);
          match(MySqlParser::FIRST);
          break;
        }

        case MySqlParser::AFTER: {
          setState(2208);
          match(MySqlParser::AFTER);
          setState(2209);
          id_();
          break;
        }

        case MySqlParser::EOF:
        case MySqlParser::PARTITION:
        case MySqlParser::MINUS:
        case MySqlParser::COMMA:
        case MySqlParser::SEMI: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 12: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblLockContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(2212);
      match(MySqlParser::LOCK);
      setState(2214);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(2213);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(2216);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::EXCLUSIVE || _la == MySqlParser::NONE || _la == MySqlParser::SHARED)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 13: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblColModContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(2217);
      match(MySqlParser::MODIFY);
      setState(2219);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2218);
        match(MySqlParser::COLUMN);
      }
      setState(2221);
      id_();
      setState(2222);
      column_definition();
      setState(2226);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::FIRST: {
          setState(2223);
          match(MySqlParser::FIRST);
          break;
        }

        case MySqlParser::AFTER: {
          setState(2224);
          match(MySqlParser::AFTER);
          setState(2225);
          id_();
          break;
        }

        case MySqlParser::EOF:
        case MySqlParser::PARTITION:
        case MySqlParser::MINUS:
        case MySqlParser::COMMA:
        case MySqlParser::SEMI: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 14: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblColDropContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(2228);
      match(MySqlParser::DROP);
      setState(2230);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLUMN) {
        setState(2229);
        match(MySqlParser::COLUMN);
      }
      setState(2232);
      id_();
      break;
    }

    case 15: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblDropPKContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(2233);
      match(MySqlParser::DROP);
      setState(2234);
      match(MySqlParser::PRIMARY);
      setState(2235);
      match(MySqlParser::KEY);
      break;
    }

    case 16: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblDropIndexContext>(_localctx));
      enterOuterAlt(_localctx, 16);
      setState(2236);
      match(MySqlParser::DROP);
      setState(2237);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2238);
      id_();
      break;
    }

    case 17: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblDropFKContext>(_localctx));
      enterOuterAlt(_localctx, 17);
      setState(2239);
      match(MySqlParser::DROP);
      setState(2240);
      match(MySqlParser::FOREIGN);
      setState(2241);
      match(MySqlParser::KEY);
      setState(2242);
      id_();
      break;
    }

    case 18: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblDisKeyContext>(_localctx));
      enterOuterAlt(_localctx, 18);
      setState(2243);
      match(MySqlParser::DISABLE);
      setState(2244);
      match(MySqlParser::KEYS);
      break;
    }

    case 19: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblEnKeyContext>(_localctx));
      enterOuterAlt(_localctx, 19);
      setState(2245);
      match(MySqlParser::ENABLE);
      setState(2246);
      match(MySqlParser::KEYS);
      break;
    }

    case 20: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblRenameTblContext>(_localctx));
      enterOuterAlt(_localctx, 20);
      setState(2247);
      match(MySqlParser::RENAME);
      setState(2249);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS || _la == MySqlParser::TO) {
        setState(2248);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::AS || _la == MySqlParser::TO)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(2251);
      id_();
      break;
    }

    case 21: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblResortContext>(_localctx));
      enterOuterAlt(_localctx, 21);
      setState(2252);
      match(MySqlParser::ORDER);
      setState(2253);
      match(MySqlParser::BY);
      setState(2254);
      id_list();
      break;
    }

    case 22: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblConvertContext>(_localctx));
      enterOuterAlt(_localctx, 22);
      setState(2255);
      match(MySqlParser::CONVERT);
      setState(2256);
      match(MySqlParser::TO);
      setState(2257);
      match(MySqlParser::CHARACTER);
      setState(2258);
      match(MySqlParser::SET);
      setState(2259);
      charset_name();
      setState(2262);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLLATE) {
        setState(2260);
        match(MySqlParser::COLLATE);
        setState(2261);
        collation_name();
      }
      break;
    }

    case 23: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblDefCharsetContext>(_localctx));
      enterOuterAlt(_localctx, 23);
      setState(2265);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DEFAULT) {
        setState(2264);
        match(MySqlParser::DEFAULT);
      }
      setState(2267);
      match(MySqlParser::CHARACTER);
      setState(2268);
      match(MySqlParser::SET);
      setState(2269);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(2270);
      charset_name();
      setState(2274);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COLLATE) {
        setState(2271);
        match(MySqlParser::COLLATE);
        setState(2272);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(2273);
        collation_name();
      }
      break;
    }

    case 24: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblDisTblspaceContext>(_localctx));
      enterOuterAlt(_localctx, 24);
      setState(2276);
      match(MySqlParser::DISCARD);
      setState(2277);
      match(MySqlParser::TABLESPACE);
      break;
    }

    case 25: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblImpTblSpaceContext>(_localctx));
      enterOuterAlt(_localctx, 25);
      setState(2278);
      match(MySqlParser::IMPORT);
      setState(2279);
      match(MySqlParser::TABLESPACE);
      break;
    }

    case 26: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblForceContext>(_localctx));
      enterOuterAlt(_localctx, 26);
      setState(2280);
      match(MySqlParser::FORCE);
      break;
    }

    case 27: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblValidContext>(_localctx));
      enterOuterAlt(_localctx, 27);
      setState(2281);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::WITH || _la == MySqlParser::WITHOUT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2282);
      match(MySqlParser::VALIDATION);
      break;
    }

    case 28: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblAddPartContext>(_localctx));
      enterOuterAlt(_localctx, 28);
      setState(2283);
      match(MySqlParser::ADD);
      setState(2284);
      match(MySqlParser::PARTITION);
      setState(2285);
      partition_def();
      break;
    }

    case 29: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblDropPartContext>(_localctx));
      enterOuterAlt(_localctx, 29);
      setState(2286);
      match(MySqlParser::DROP);
      setState(2287);
      match(MySqlParser::PARTITION);
      setState(2288);
      id_list();
      break;
    }

    case 30: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblDiscartPartContext>(_localctx));
      enterOuterAlt(_localctx, 30);
      setState(2289);
      match(MySqlParser::DISCARD);
      setState(2290);
      match(MySqlParser::PARTITION);
      setState(2293);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LEFT:
        case MySqlParser::RIGHT:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2291);
          id_list();
          break;
        }

        case MySqlParser::ALL: {
          setState(2292);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2295);
      match(MySqlParser::TABLESPACE);
      break;
    }

    case 31: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblImportPartContext>(_localctx));
      enterOuterAlt(_localctx, 31);
      setState(2296);
      match(MySqlParser::IMPORT);
      setState(2297);
      match(MySqlParser::PARTITION);
      setState(2300);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LEFT:
        case MySqlParser::RIGHT:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2298);
          id_list();
          break;
        }

        case MySqlParser::ALL: {
          setState(2299);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2302);
      match(MySqlParser::TABLESPACE);
      break;
    }

    case 32: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblTruncPartContext>(_localctx));
      enterOuterAlt(_localctx, 32);
      setState(2303);
      match(MySqlParser::TRUNCATE);
      setState(2304);
      match(MySqlParser::PARTITION);
      setState(2307);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LEFT:
        case MySqlParser::RIGHT:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2305);
          id_list();
          break;
        }

        case MySqlParser::ALL: {
          setState(2306);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 33: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblCoalPartContext>(_localctx));
      enterOuterAlt(_localctx, 33);
      setState(2309);
      match(MySqlParser::COALESCE);
      setState(2310);
      match(MySqlParser::PARTITION);
      setState(2311);
      decimal_literal();
      break;
    }

    case 34: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblReorgPartContext>(_localctx));
      enterOuterAlt(_localctx, 34);
      setState(2312);
      match(MySqlParser::REORGANIZE);
      setState(2313);
      match(MySqlParser::PARTITION);
      setState(2314);
      id_list();
      setState(2315);
      match(MySqlParser::INTO);
      setState(2316);
      match(MySqlParser::LR_BRACKET);
      setState(2317);
      partition_def();
      setState(2322);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2318);
        match(MySqlParser::COMMA);
        setState(2319);
        partition_def();
        setState(2324);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2325);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 35: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblExchPartContext>(_localctx));
      enterOuterAlt(_localctx, 35);
      setState(2327);
      match(MySqlParser::EXCHANGE);
      setState(2328);
      match(MySqlParser::PARTITION);
      setState(2329);
      id_();
      setState(2330);
      match(MySqlParser::WITH);
      setState(2331);
      match(MySqlParser::TABLE);
      setState(2332);
      table_name();
      setState(2335);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::WITH || _la == MySqlParser::WITHOUT) {
        setState(2333);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::WITH || _la == MySqlParser::WITHOUT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2334);
        match(MySqlParser::VALIDATION);
      }
      break;
    }

    case 36: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblAnalPartContext>(_localctx));
      enterOuterAlt(_localctx, 36);
      setState(2337);
      match(MySqlParser::ANALYZE);
      setState(2338);
      match(MySqlParser::PARTITION);
      setState(2341);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LEFT:
        case MySqlParser::RIGHT:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2339);
          id_list();
          break;
        }

        case MySqlParser::ALL: {
          setState(2340);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 37: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblCheckPartContext>(_localctx));
      enterOuterAlt(_localctx, 37);
      setState(2343);
      match(MySqlParser::CHECK);
      setState(2344);
      match(MySqlParser::PARTITION);
      setState(2347);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LEFT:
        case MySqlParser::RIGHT:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2345);
          id_list();
          break;
        }

        case MySqlParser::ALL: {
          setState(2346);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 38: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblOptimPartContext>(_localctx));
      enterOuterAlt(_localctx, 38);
      setState(2349);
      match(MySqlParser::OPTIMIZE);
      setState(2350);
      match(MySqlParser::PARTITION);
      setState(2353);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LEFT:
        case MySqlParser::RIGHT:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2351);
          id_list();
          break;
        }

        case MySqlParser::ALL: {
          setState(2352);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 39: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblRebuildPartContext>(_localctx));
      enterOuterAlt(_localctx, 39);
      setState(2355);
      match(MySqlParser::REBUILD);
      setState(2356);
      match(MySqlParser::PARTITION);
      setState(2359);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LEFT:
        case MySqlParser::RIGHT:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2357);
          id_list();
          break;
        }

        case MySqlParser::ALL: {
          setState(2358);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 40: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblRepairPartContext>(_localctx));
      enterOuterAlt(_localctx, 40);
      setState(2361);
      match(MySqlParser::REPAIR);
      setState(2362);
      match(MySqlParser::PARTITION);
      setState(2365);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LEFT:
        case MySqlParser::RIGHT:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(2363);
          id_list();
          break;
        }

        case MySqlParser::ALL: {
          setState(2364);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 41: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblRemovePartContext>(_localctx));
      enterOuterAlt(_localctx, 41);
      setState(2367);
      match(MySqlParser::REMOVE);
      setState(2368);
      match(MySqlParser::PARTITIONING);
      break;
    }

    case 42: {
      _localctx = dynamic_cast<Alter_table_specContext *>(_tracker.createInstance<MySqlParser::AltblUpgrPartContext>(_localctx));
      enterOuterAlt(_localctx, 42);
      setState(2369);
      match(MySqlParser::UPGRADE);
      setState(2370);
      match(MySqlParser::PARTITIONING);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_databaseContext ------------------------------------------------------------------

MySqlParser::Drop_databaseContext::Drop_databaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_databaseContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

MySqlParser::Id_Context* MySqlParser::Drop_databaseContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Drop_databaseContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::Drop_databaseContext::SCHEMA() {
  return getToken(MySqlParser::SCHEMA, 0);
}

MySqlParser::If_existsContext* MySqlParser::Drop_databaseContext::if_exists() {
  return getRuleContext<MySqlParser::If_existsContext>(0);
}


size_t MySqlParser::Drop_databaseContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_database;
}

void MySqlParser::Drop_databaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_database(this);
}

void MySqlParser::Drop_databaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_database(this);
}

MySqlParser::Drop_databaseContext* MySqlParser::drop_database() {
  Drop_databaseContext *_localctx = _tracker.createInstance<Drop_databaseContext>(_ctx, getState());
  enterRule(_localctx, 126, MySqlParser::RuleDrop_database);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2373);
    match(MySqlParser::DROP);
    setState(2374);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::DATABASE || _la == MySqlParser::SCHEMA)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2375);
      if_exists();
    }
    setState(2378);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_eventContext ------------------------------------------------------------------

MySqlParser::Drop_eventContext::Drop_eventContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_eventContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Drop_eventContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

MySqlParser::Full_idContext* MySqlParser::Drop_eventContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

MySqlParser::If_existsContext* MySqlParser::Drop_eventContext::if_exists() {
  return getRuleContext<MySqlParser::If_existsContext>(0);
}


size_t MySqlParser::Drop_eventContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_event;
}

void MySqlParser::Drop_eventContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_event(this);
}

void MySqlParser::Drop_eventContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_event(this);
}

MySqlParser::Drop_eventContext* MySqlParser::drop_event() {
  Drop_eventContext *_localctx = _tracker.createInstance<Drop_eventContext>(_ctx, getState());
  enterRule(_localctx, 128, MySqlParser::RuleDrop_event);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2380);
    match(MySqlParser::DROP);
    setState(2381);
    match(MySqlParser::EVENT);
    setState(2383);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2382);
      if_exists();
    }
    setState(2385);
    full_id();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_indexContext ------------------------------------------------------------------

MySqlParser::Drop_indexContext::Drop_indexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_indexContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

MySqlParser::Id_Context* MySqlParser::Drop_indexContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Drop_indexContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::ONLINE() {
  return getToken(MySqlParser::ONLINE, 0);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::OFFLINE() {
  return getToken(MySqlParser::OFFLINE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Drop_indexContext::DEFAULT() {
  return getTokens(MySqlParser::DEFAULT);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::DEFAULT(size_t i) {
  return getToken(MySqlParser::DEFAULT, i);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::INPLACE() {
  return getToken(MySqlParser::INPLACE, 0);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::COPY() {
  return getToken(MySqlParser::COPY, 0);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::SHARED() {
  return getToken(MySqlParser::SHARED, 0);
}

tree::TerminalNode* MySqlParser::Drop_indexContext::EXCLUSIVE() {
  return getToken(MySqlParser::EXCLUSIVE, 0);
}


size_t MySqlParser::Drop_indexContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_index;
}

void MySqlParser::Drop_indexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_index(this);
}

void MySqlParser::Drop_indexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_index(this);
}

MySqlParser::Drop_indexContext* MySqlParser::drop_index() {
  Drop_indexContext *_localctx = _tracker.createInstance<Drop_indexContext>(_ctx, getState());
  enterRule(_localctx, 130, MySqlParser::RuleDrop_index);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2387);
    match(MySqlParser::DROP);
    setState(2388);
    match(MySqlParser::INDEX);
    setState(2390);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
    case 1: {
      setState(2389);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::OFFLINE

      || _la == MySqlParser::ONLINE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
    setState(2392);
    id_();
    setState(2393);
    match(MySqlParser::ON);
    setState(2394);
    table_name();
    setState(2400);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ALGORITHM) {
      setState(2395);
      match(MySqlParser::ALGORITHM);
      setState(2397);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(2396);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(2399);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::COPY

      || _la == MySqlParser::INPLACE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2407);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOCK) {
      setState(2402);
      match(MySqlParser::LOCK);
      setState(2404);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(2403);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(2406);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DEFAULT || _la == MySqlParser::EXCLUSIVE || _la == MySqlParser::NONE || _la == MySqlParser::SHARED)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_logfile_groupContext ------------------------------------------------------------------

MySqlParser::Drop_logfile_groupContext::Drop_logfile_groupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_logfile_groupContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Drop_logfile_groupContext::LOGFILE() {
  return getToken(MySqlParser::LOGFILE, 0);
}

tree::TerminalNode* MySqlParser::Drop_logfile_groupContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}

MySqlParser::Id_Context* MySqlParser::Drop_logfile_groupContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Drop_logfile_groupContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::Engine_nameContext* MySqlParser::Drop_logfile_groupContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}


size_t MySqlParser::Drop_logfile_groupContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_logfile_group;
}

void MySqlParser::Drop_logfile_groupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_logfile_group(this);
}

void MySqlParser::Drop_logfile_groupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_logfile_group(this);
}

MySqlParser::Drop_logfile_groupContext* MySqlParser::drop_logfile_group() {
  Drop_logfile_groupContext *_localctx = _tracker.createInstance<Drop_logfile_groupContext>(_ctx, getState());
  enterRule(_localctx, 132, MySqlParser::RuleDrop_logfile_group);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2409);
    match(MySqlParser::DROP);
    setState(2410);
    match(MySqlParser::LOGFILE);
    setState(2411);
    match(MySqlParser::GROUP);
    setState(2412);
    id_();
    setState(2413);
    match(MySqlParser::ENGINE);
    setState(2414);
    match(MySqlParser::EQUAL_SYMBOL);
    setState(2415);
    engine_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_procedureContext ------------------------------------------------------------------

MySqlParser::Drop_procedureContext::Drop_procedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_procedureContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Drop_procedureContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

MySqlParser::Full_idContext* MySqlParser::Drop_procedureContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

MySqlParser::If_existsContext* MySqlParser::Drop_procedureContext::if_exists() {
  return getRuleContext<MySqlParser::If_existsContext>(0);
}


size_t MySqlParser::Drop_procedureContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_procedure;
}

void MySqlParser::Drop_procedureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_procedure(this);
}

void MySqlParser::Drop_procedureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_procedure(this);
}

MySqlParser::Drop_procedureContext* MySqlParser::drop_procedure() {
  Drop_procedureContext *_localctx = _tracker.createInstance<Drop_procedureContext>(_ctx, getState());
  enterRule(_localctx, 134, MySqlParser::RuleDrop_procedure);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2417);
    match(MySqlParser::DROP);
    setState(2418);
    match(MySqlParser::PROCEDURE);
    setState(2420);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2419);
      if_exists();
    }
    setState(2422);
    full_id();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_functionContext ------------------------------------------------------------------

MySqlParser::Drop_functionContext::Drop_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_functionContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Drop_functionContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

MySqlParser::Full_idContext* MySqlParser::Drop_functionContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

MySqlParser::If_existsContext* MySqlParser::Drop_functionContext::if_exists() {
  return getRuleContext<MySqlParser::If_existsContext>(0);
}


size_t MySqlParser::Drop_functionContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_function;
}

void MySqlParser::Drop_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_function(this);
}

void MySqlParser::Drop_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_function(this);
}

MySqlParser::Drop_functionContext* MySqlParser::drop_function() {
  Drop_functionContext *_localctx = _tracker.createInstance<Drop_functionContext>(_ctx, getState());
  enterRule(_localctx, 136, MySqlParser::RuleDrop_function);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2424);
    match(MySqlParser::DROP);
    setState(2425);
    match(MySqlParser::FUNCTION);
    setState(2427);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2426);
      if_exists();
    }
    setState(2429);
    full_id();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_serverContext ------------------------------------------------------------------

MySqlParser::Drop_serverContext::Drop_serverContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_serverContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Drop_serverContext::SERVER() {
  return getToken(MySqlParser::SERVER, 0);
}

MySqlParser::Id_Context* MySqlParser::Drop_serverContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::If_existsContext* MySqlParser::Drop_serverContext::if_exists() {
  return getRuleContext<MySqlParser::If_existsContext>(0);
}


size_t MySqlParser::Drop_serverContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_server;
}

void MySqlParser::Drop_serverContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_server(this);
}

void MySqlParser::Drop_serverContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_server(this);
}

MySqlParser::Drop_serverContext* MySqlParser::drop_server() {
  Drop_serverContext *_localctx = _tracker.createInstance<Drop_serverContext>(_ctx, getState());
  enterRule(_localctx, 138, MySqlParser::RuleDrop_server);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2431);
    match(MySqlParser::DROP);
    setState(2432);
    match(MySqlParser::SERVER);
    setState(2434);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2433);
      if_exists();
    }
    setState(2436);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_tableContext ------------------------------------------------------------------

MySqlParser::Drop_tableContext::Drop_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_tableContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Drop_tableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_listContext* MySqlParser::Drop_tableContext::table_list() {
  return getRuleContext<MySqlParser::Table_listContext>(0);
}

tree::TerminalNode* MySqlParser::Drop_tableContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

MySqlParser::If_existsContext* MySqlParser::Drop_tableContext::if_exists() {
  return getRuleContext<MySqlParser::If_existsContext>(0);
}

tree::TerminalNode* MySqlParser::Drop_tableContext::RESTRICT() {
  return getToken(MySqlParser::RESTRICT, 0);
}

tree::TerminalNode* MySqlParser::Drop_tableContext::CASCADE() {
  return getToken(MySqlParser::CASCADE, 0);
}


size_t MySqlParser::Drop_tableContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_table;
}

void MySqlParser::Drop_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_table(this);
}

void MySqlParser::Drop_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_table(this);
}

MySqlParser::Drop_tableContext* MySqlParser::drop_table() {
  Drop_tableContext *_localctx = _tracker.createInstance<Drop_tableContext>(_ctx, getState());
  enterRule(_localctx, 140, MySqlParser::RuleDrop_table);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2438);
    match(MySqlParser::DROP);
    setState(2440);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::TEMPORARY) {
      setState(2439);
      match(MySqlParser::TEMPORARY);
    }
    setState(2442);
    match(MySqlParser::TABLE);
    setState(2444);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2443);
      if_exists();
    }
    setState(2446);
    table_list();
    setState(2448);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CASCADE || _la == MySqlParser::RESTRICT) {
      setState(2447);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CASCADE || _la == MySqlParser::RESTRICT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_tablespaceContext ------------------------------------------------------------------

MySqlParser::Drop_tablespaceContext::Drop_tablespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_tablespaceContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Drop_tablespaceContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

MySqlParser::Id_Context* MySqlParser::Drop_tablespaceContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Drop_tablespaceContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::Engine_nameContext* MySqlParser::Drop_tablespaceContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}


size_t MySqlParser::Drop_tablespaceContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_tablespace;
}

void MySqlParser::Drop_tablespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_tablespace(this);
}

void MySqlParser::Drop_tablespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_tablespace(this);
}

MySqlParser::Drop_tablespaceContext* MySqlParser::drop_tablespace() {
  Drop_tablespaceContext *_localctx = _tracker.createInstance<Drop_tablespaceContext>(_ctx, getState());
  enterRule(_localctx, 142, MySqlParser::RuleDrop_tablespace);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2450);
    match(MySqlParser::DROP);
    setState(2451);
    match(MySqlParser::TABLESPACE);
    setState(2452);
    id_();
    setState(2458);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ENGINE) {
      setState(2453);
      match(MySqlParser::ENGINE);
      setState(2455);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EQUAL_SYMBOL) {
        setState(2454);
        match(MySqlParser::EQUAL_SYMBOL);
      }
      setState(2457);
      engine_name();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_triggerContext ------------------------------------------------------------------

MySqlParser::Drop_triggerContext::Drop_triggerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_triggerContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Drop_triggerContext::TRIGGER() {
  return getToken(MySqlParser::TRIGGER, 0);
}

MySqlParser::Full_idContext* MySqlParser::Drop_triggerContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

MySqlParser::If_existsContext* MySqlParser::Drop_triggerContext::if_exists() {
  return getRuleContext<MySqlParser::If_existsContext>(0);
}


size_t MySqlParser::Drop_triggerContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_trigger;
}

void MySqlParser::Drop_triggerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_trigger(this);
}

void MySqlParser::Drop_triggerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_trigger(this);
}

MySqlParser::Drop_triggerContext* MySqlParser::drop_trigger() {
  Drop_triggerContext *_localctx = _tracker.createInstance<Drop_triggerContext>(_ctx, getState());
  enterRule(_localctx, 144, MySqlParser::RuleDrop_trigger);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2460);
    match(MySqlParser::DROP);
    setState(2461);
    match(MySqlParser::TRIGGER);
    setState(2463);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2462);
      if_exists();
    }
    setState(2465);
    full_id();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_viewContext ------------------------------------------------------------------

MySqlParser::Drop_viewContext::Drop_viewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_viewContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Drop_viewContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

std::vector<MySqlParser::Full_idContext *> MySqlParser::Drop_viewContext::full_id() {
  return getRuleContexts<MySqlParser::Full_idContext>();
}

MySqlParser::Full_idContext* MySqlParser::Drop_viewContext::full_id(size_t i) {
  return getRuleContext<MySqlParser::Full_idContext>(i);
}

MySqlParser::If_existsContext* MySqlParser::Drop_viewContext::if_exists() {
  return getRuleContext<MySqlParser::If_existsContext>(0);
}

tree::TerminalNode* MySqlParser::Drop_viewContext::RESTRICT() {
  return getToken(MySqlParser::RESTRICT, 0);
}

tree::TerminalNode* MySqlParser::Drop_viewContext::CASCADE() {
  return getToken(MySqlParser::CASCADE, 0);
}


size_t MySqlParser::Drop_viewContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_view;
}

void MySqlParser::Drop_viewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_view(this);
}

void MySqlParser::Drop_viewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_view(this);
}

MySqlParser::Drop_viewContext* MySqlParser::drop_view() {
  Drop_viewContext *_localctx = _tracker.createInstance<Drop_viewContext>(_ctx, getState());
  enterRule(_localctx, 146, MySqlParser::RuleDrop_view);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2467);
    match(MySqlParser::DROP);
    setState(2468);
    match(MySqlParser::VIEW);
    setState(2470);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(2469);
      if_exists();
    }
    setState(2472);
    full_id();
    setState(2477);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(2473);
      match(MySqlParser::COMMA);
      setState(2474);
      full_id();
      setState(2479);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2481);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CASCADE || _la == MySqlParser::RESTRICT) {
      setState(2480);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CASCADE || _la == MySqlParser::RESTRICT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rename_tableContext ------------------------------------------------------------------

MySqlParser::Rename_tableContext::Rename_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Rename_tableContext::RENAME() {
  return getToken(MySqlParser::RENAME, 0);
}

tree::TerminalNode* MySqlParser::Rename_tableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

std::vector<MySqlParser::Table_nameContext *> MySqlParser::Rename_tableContext::table_name() {
  return getRuleContexts<MySqlParser::Table_nameContext>();
}

MySqlParser::Table_nameContext* MySqlParser::Rename_tableContext::table_name(size_t i) {
  return getRuleContext<MySqlParser::Table_nameContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::Rename_tableContext::TO() {
  return getTokens(MySqlParser::TO);
}

tree::TerminalNode* MySqlParser::Rename_tableContext::TO(size_t i) {
  return getToken(MySqlParser::TO, i);
}


size_t MySqlParser::Rename_tableContext::getRuleIndex() const {
  return MySqlParser::RuleRename_table;
}

void MySqlParser::Rename_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRename_table(this);
}

void MySqlParser::Rename_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRename_table(this);
}

MySqlParser::Rename_tableContext* MySqlParser::rename_table() {
  Rename_tableContext *_localctx = _tracker.createInstance<Rename_tableContext>(_ctx, getState());
  enterRule(_localctx, 148, MySqlParser::RuleRename_table);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2483);
    match(MySqlParser::RENAME);
    setState(2484);
    match(MySqlParser::TABLE);
    setState(2485);
    table_name();
    setState(2486);
    match(MySqlParser::TO);
    setState(2487);
    table_name();
    setState(2495);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(2488);
      match(MySqlParser::COMMA);
      setState(2489);
      table_name();
      setState(2490);
      match(MySqlParser::TO);
      setState(2491);
      table_name();
      setState(2497);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Truncate_tableContext ------------------------------------------------------------------

MySqlParser::Truncate_tableContext::Truncate_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Truncate_tableContext::TRUNCATE() {
  return getToken(MySqlParser::TRUNCATE, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Truncate_tableContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Truncate_tableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}


size_t MySqlParser::Truncate_tableContext::getRuleIndex() const {
  return MySqlParser::RuleTruncate_table;
}

void MySqlParser::Truncate_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTruncate_table(this);
}

void MySqlParser::Truncate_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTruncate_table(this);
}

MySqlParser::Truncate_tableContext* MySqlParser::truncate_table() {
  Truncate_tableContext *_localctx = _tracker.createInstance<Truncate_tableContext>(_ctx, getState());
  enterRule(_localctx, 150, MySqlParser::RuleTruncate_table);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2498);
    match(MySqlParser::TRUNCATE);
    setState(2500);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::TABLE) {
      setState(2499);
      match(MySqlParser::TABLE);
    }
    setState(2502);
    table_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_statementContext ------------------------------------------------------------------

MySqlParser::Call_statementContext::Call_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Call_statementContext::CALL() {
  return getToken(MySqlParser::CALL, 0);
}

MySqlParser::Full_idContext* MySqlParser::Call_statementContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

MySqlParser::Constant_listContext* MySqlParser::Call_statementContext::constant_list() {
  return getRuleContext<MySqlParser::Constant_listContext>(0);
}

MySqlParser::Expression_listContext* MySqlParser::Call_statementContext::expression_list() {
  return getRuleContext<MySqlParser::Expression_listContext>(0);
}


size_t MySqlParser::Call_statementContext::getRuleIndex() const {
  return MySqlParser::RuleCall_statement;
}

void MySqlParser::Call_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_statement(this);
}

void MySqlParser::Call_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_statement(this);
}

MySqlParser::Call_statementContext* MySqlParser::call_statement() {
  Call_statementContext *_localctx = _tracker.createInstance<Call_statementContext>(_ctx, getState());
  enterRule(_localctx, 152, MySqlParser::RuleCall_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2504);
    match(MySqlParser::CALL);
    setState(2505);
    full_id();
    setState(2512);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LR_BRACKET) {
      setState(2506);
      match(MySqlParser::LR_BRACKET);
      setState(2509);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
      case 1: {
        setState(2507);
        constant_list();
        break;
      }

      case 2: {
        setState(2508);
        expression_list();
        break;
      }

      }
      setState(2511);
      match(MySqlParser::RR_BRACKET);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delete_statementContext ------------------------------------------------------------------

MySqlParser::Delete_statementContext::Delete_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Single_delete_statementContext* MySqlParser::Delete_statementContext::single_delete_statement() {
  return getRuleContext<MySqlParser::Single_delete_statementContext>(0);
}

MySqlParser::Multiple_delete_statementContext* MySqlParser::Delete_statementContext::multiple_delete_statement() {
  return getRuleContext<MySqlParser::Multiple_delete_statementContext>(0);
}


size_t MySqlParser::Delete_statementContext::getRuleIndex() const {
  return MySqlParser::RuleDelete_statement;
}

void MySqlParser::Delete_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelete_statement(this);
}

void MySqlParser::Delete_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelete_statement(this);
}

MySqlParser::Delete_statementContext* MySqlParser::delete_statement() {
  Delete_statementContext *_localctx = _tracker.createInstance<Delete_statementContext>(_ctx, getState());
  enterRule(_localctx, 154, MySqlParser::RuleDelete_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2516);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2514);
      single_delete_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2515);
      multiple_delete_statement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Do_statementContext ------------------------------------------------------------------

MySqlParser::Do_statementContext::Do_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Do_statementContext::DO() {
  return getToken(MySqlParser::DO, 0);
}

MySqlParser::Expression_listContext* MySqlParser::Do_statementContext::expression_list() {
  return getRuleContext<MySqlParser::Expression_listContext>(0);
}


size_t MySqlParser::Do_statementContext::getRuleIndex() const {
  return MySqlParser::RuleDo_statement;
}

void MySqlParser::Do_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDo_statement(this);
}

void MySqlParser::Do_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDo_statement(this);
}

MySqlParser::Do_statementContext* MySqlParser::do_statement() {
  Do_statementContext *_localctx = _tracker.createInstance<Do_statementContext>(_ctx, getState());
  enterRule(_localctx, 156, MySqlParser::RuleDo_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2518);
    match(MySqlParser::DO);
    setState(2519);
    expression_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_statementContext ------------------------------------------------------------------

MySqlParser::Handler_statementContext::Handler_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Handler_open_statementContext* MySqlParser::Handler_statementContext::handler_open_statement() {
  return getRuleContext<MySqlParser::Handler_open_statementContext>(0);
}

MySqlParser::Handler_read_index_statementContext* MySqlParser::Handler_statementContext::handler_read_index_statement() {
  return getRuleContext<MySqlParser::Handler_read_index_statementContext>(0);
}

MySqlParser::Handler_read_statementContext* MySqlParser::Handler_statementContext::handler_read_statement() {
  return getRuleContext<MySqlParser::Handler_read_statementContext>(0);
}

MySqlParser::Handler_close_statementContext* MySqlParser::Handler_statementContext::handler_close_statement() {
  return getRuleContext<MySqlParser::Handler_close_statementContext>(0);
}


size_t MySqlParser::Handler_statementContext::getRuleIndex() const {
  return MySqlParser::RuleHandler_statement;
}

void MySqlParser::Handler_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_statement(this);
}

void MySqlParser::Handler_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_statement(this);
}

MySqlParser::Handler_statementContext* MySqlParser::handler_statement() {
  Handler_statementContext *_localctx = _tracker.createInstance<Handler_statementContext>(_ctx, getState());
  enterRule(_localctx, 158, MySqlParser::RuleHandler_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2525);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2521);
      handler_open_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2522);
      handler_read_index_statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2523);
      handler_read_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2524);
      handler_close_statement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_statementContext ------------------------------------------------------------------

MySqlParser::Insert_statementContext::Insert_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Insert_statementContext::INSERT() {
  return getToken(MySqlParser::INSERT, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Insert_statementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

MySqlParser::Insert_statement_valueContext* MySqlParser::Insert_statementContext::insert_statement_value() {
  return getRuleContext<MySqlParser::Insert_statement_valueContext>(0);
}

tree::TerminalNode* MySqlParser::Insert_statementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::Insert_statementContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::Insert_statementContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::Insert_statementContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

std::vector<MySqlParser::Id_listContext *> MySqlParser::Insert_statementContext::id_list() {
  return getRuleContexts<MySqlParser::Id_listContext>();
}

MySqlParser::Id_listContext* MySqlParser::Insert_statementContext::id_list(size_t i) {
  return getRuleContext<MySqlParser::Id_listContext>(i);
}

std::vector<MySqlParser::Update_elemContext *> MySqlParser::Insert_statementContext::update_elem() {
  return getRuleContexts<MySqlParser::Update_elemContext>();
}

MySqlParser::Update_elemContext* MySqlParser::Insert_statementContext::update_elem(size_t i) {
  return getRuleContext<MySqlParser::Update_elemContext>(i);
}

tree::TerminalNode* MySqlParser::Insert_statementContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

tree::TerminalNode* MySqlParser::Insert_statementContext::DUPLICATE() {
  return getToken(MySqlParser::DUPLICATE, 0);
}

tree::TerminalNode* MySqlParser::Insert_statementContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

tree::TerminalNode* MySqlParser::Insert_statementContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

tree::TerminalNode* MySqlParser::Insert_statementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::Insert_statementContext::DELAYED() {
  return getToken(MySqlParser::DELAYED, 0);
}

tree::TerminalNode* MySqlParser::Insert_statementContext::HIGH_PRIORITY() {
  return getToken(MySqlParser::HIGH_PRIORITY, 0);
}


size_t MySqlParser::Insert_statementContext::getRuleIndex() const {
  return MySqlParser::RuleInsert_statement;
}

void MySqlParser::Insert_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_statement(this);
}

void MySqlParser::Insert_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_statement(this);
}

MySqlParser::Insert_statementContext* MySqlParser::insert_statement() {
  Insert_statementContext *_localctx = _tracker.createInstance<Insert_statementContext>(_ctx, getState());
  enterRule(_localctx, 160, MySqlParser::RuleInsert_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2527);
    match(MySqlParser::INSERT);
    setState(2529);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 37) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 37)) & ((1ULL << (MySqlParser::DELAYED - 37))
      | (1ULL << (MySqlParser::HIGH_PRIORITY - 37))
      | (1ULL << (MySqlParser::LOW_PRIORITY - 37)))) != 0)) {
      setState(2528);
      _la = _input->LA(1);
      if (!(((((_la - 37) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 37)) & ((1ULL << (MySqlParser::DELAYED - 37))
        | (1ULL << (MySqlParser::HIGH_PRIORITY - 37))
        | (1ULL << (MySqlParser::LOW_PRIORITY - 37)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2532);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(2531);
      match(MySqlParser::IGNORE);
    }
    setState(2535);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INTO) {
      setState(2534);
      match(MySqlParser::INTO);
    }
    setState(2537);
    table_name();
    setState(2543);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(2538);
      match(MySqlParser::PARTITION);
      setState(2539);
      match(MySqlParser::LR_BRACKET);
      setState(2540);
      id_list();
      setState(2541);
      match(MySqlParser::RR_BRACKET);
    }
    setState(2561);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SELECT:
      case MySqlParser::VALUES:
      case MySqlParser::VALUE:
      case MySqlParser::LR_BRACKET: {
        setState(2549);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
        case 1: {
          setState(2545);
          match(MySqlParser::LR_BRACKET);
          setState(2546);
          id_list();
          setState(2547);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        }
        setState(2551);
        insert_statement_value();
        break;
      }

      case MySqlParser::SET: {
        setState(2552);
        match(MySqlParser::SET);
        setState(2553);
        dynamic_cast<Insert_statementContext *>(_localctx)->set_firstelem = update_elem();
        setState(2558);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(2554);
          match(MySqlParser::COMMA);
          setState(2555);
          dynamic_cast<Insert_statementContext *>(_localctx)->update_elemContext = update_elem();
          dynamic_cast<Insert_statementContext *>(_localctx)->set_elem.push_back(dynamic_cast<Insert_statementContext *>(_localctx)->update_elemContext);
          setState(2560);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2575);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ON) {
      setState(2563);
      match(MySqlParser::ON);
      setState(2564);
      match(MySqlParser::DUPLICATE);
      setState(2565);
      match(MySqlParser::KEY);
      setState(2566);
      match(MySqlParser::UPDATE);
      setState(2567);
      dynamic_cast<Insert_statementContext *>(_localctx)->duplicate_firstelem = update_elem();
      setState(2572);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2568);
        match(MySqlParser::COMMA);
        setState(2569);
        dynamic_cast<Insert_statementContext *>(_localctx)->update_elemContext = update_elem();
        dynamic_cast<Insert_statementContext *>(_localctx)->duplicate_elem.push_back(dynamic_cast<Insert_statementContext *>(_localctx)->update_elemContext);
        setState(2574);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Load_data_statementContext ------------------------------------------------------------------

MySqlParser::Load_data_statementContext::Load_data_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::LOAD() {
  return getToken(MySqlParser::LOAD, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::INFILE() {
  return getToken(MySqlParser::INFILE, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Load_data_statementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::Load_data_statementContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::Load_data_statementContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Load_data_statementContext::SET() {
  return getTokens(MySqlParser::SET);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::SET(size_t i) {
  return getToken(MySqlParser::SET, i);
}

std::vector<tree::TerminalNode *> MySqlParser::Load_data_statementContext::LINES() {
  return getTokens(MySqlParser::LINES);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::LINES(size_t i) {
  return getToken(MySqlParser::LINES, i);
}

std::vector<tree::TerminalNode *> MySqlParser::Load_data_statementContext::IGNORE() {
  return getTokens(MySqlParser::IGNORE);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::IGNORE(size_t i) {
  return getToken(MySqlParser::IGNORE, i);
}

MySqlParser::Decimal_literalContext* MySqlParser::Load_data_statementContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

std::vector<MySqlParser::Col_or_uservarContext *> MySqlParser::Load_data_statementContext::col_or_uservar() {
  return getRuleContexts<MySqlParser::Col_or_uservarContext>();
}

MySqlParser::Col_or_uservarContext* MySqlParser::Load_data_statementContext::col_or_uservar(size_t i) {
  return getRuleContext<MySqlParser::Col_or_uservarContext>(i);
}

std::vector<MySqlParser::Update_elemContext *> MySqlParser::Load_data_statementContext::update_elem() {
  return getRuleContexts<MySqlParser::Update_elemContext>();
}

MySqlParser::Update_elemContext* MySqlParser::Load_data_statementContext::update_elem(size_t i) {
  return getRuleContext<MySqlParser::Update_elemContext>(i);
}

MySqlParser::Charset_nameContext* MySqlParser::Load_data_statementContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::FIELDS() {
  return getToken(MySqlParser::FIELDS, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::COLUMNS() {
  return getToken(MySqlParser::COLUMNS, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::ROWS() {
  return getToken(MySqlParser::ROWS, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::CONCURRENT() {
  return getToken(MySqlParser::CONCURRENT, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Load_data_statementContext::TERMINATED() {
  return getTokens(MySqlParser::TERMINATED);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::TERMINATED(size_t i) {
  return getToken(MySqlParser::TERMINATED, i);
}

std::vector<tree::TerminalNode *> MySqlParser::Load_data_statementContext::BY() {
  return getTokens(MySqlParser::BY);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::BY(size_t i) {
  return getToken(MySqlParser::BY, i);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::ENCLOSED() {
  return getToken(MySqlParser::ENCLOSED, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::ESCAPED() {
  return getToken(MySqlParser::ESCAPED, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::STARTING() {
  return getToken(MySqlParser::STARTING, 0);
}

tree::TerminalNode* MySqlParser::Load_data_statementContext::OPTIONALLY() {
  return getToken(MySqlParser::OPTIONALLY, 0);
}


size_t MySqlParser::Load_data_statementContext::getRuleIndex() const {
  return MySqlParser::RuleLoad_data_statement;
}

void MySqlParser::Load_data_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoad_data_statement(this);
}

void MySqlParser::Load_data_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoad_data_statement(this);
}

MySqlParser::Load_data_statementContext* MySqlParser::load_data_statement() {
  Load_data_statementContext *_localctx = _tracker.createInstance<Load_data_statementContext>(_ctx, getState());
  enterRule(_localctx, 162, MySqlParser::RuleLoad_data_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2577);
    match(MySqlParser::LOAD);
    setState(2578);
    match(MySqlParser::DATA);
    setState(2580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY || _la == MySqlParser::CONCURRENT) {
      setState(2579);
      dynamic_cast<Load_data_statementContext *>(_localctx)->priority = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::LOW_PRIORITY || _la == MySqlParser::CONCURRENT)) {
        dynamic_cast<Load_data_statementContext *>(_localctx)->priority = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2583);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOCAL) {
      setState(2582);
      match(MySqlParser::LOCAL);
    }
    setState(2585);
    match(MySqlParser::INFILE);
    setState(2586);
    dynamic_cast<Load_data_statementContext *>(_localctx)->filename = match(MySqlParser::STRING_LITERAL);
    setState(2588);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE

    || _la == MySqlParser::REPLACE) {
      setState(2587);
      dynamic_cast<Load_data_statementContext *>(_localctx)->replaceignore = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::IGNORE

      || _la == MySqlParser::REPLACE)) {
        dynamic_cast<Load_data_statementContext *>(_localctx)->replaceignore = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2590);
    match(MySqlParser::INTO);
    setState(2591);
    match(MySqlParser::TABLE);
    setState(2592);
    table_name();
    setState(2598);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(2593);
      match(MySqlParser::PARTITION);
      setState(2594);
      match(MySqlParser::LR_BRACKET);
      setState(2595);
      id_list();
      setState(2596);
      match(MySqlParser::RR_BRACKET);
    }
    setState(2603);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CHARACTER) {
      setState(2600);
      match(MySqlParser::CHARACTER);
      setState(2601);
      match(MySqlParser::SET);
      setState(2602);
      dynamic_cast<Load_data_statementContext *>(_localctx)->charset = charset_name();
    }
    setState(2624);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COLUMNS

    || _la == MySqlParser::FIELDS) {
      setState(2605);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::COLUMNS

      || _la == MySqlParser::FIELDS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2609);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::TERMINATED) {
        setState(2606);
        match(MySqlParser::TERMINATED);
        setState(2607);
        match(MySqlParser::BY);
        setState(2608);
        dynamic_cast<Load_data_statementContext *>(_localctx)->terminatefieldsymb = match(MySqlParser::STRING_LITERAL);
      }
      setState(2617);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ENCLOSED

      || _la == MySqlParser::OPTIONALLY) {
        setState(2612);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::OPTIONALLY) {
          setState(2611);
          match(MySqlParser::OPTIONALLY);
        }
        setState(2614);
        match(MySqlParser::ENCLOSED);
        setState(2615);
        match(MySqlParser::BY);
        setState(2616);
        dynamic_cast<Load_data_statementContext *>(_localctx)->enclosedsymb = match(MySqlParser::STRING_LITERAL);
      }
      setState(2622);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ESCAPED) {
        setState(2619);
        match(MySqlParser::ESCAPED);
        setState(2620);
        match(MySqlParser::BY);
        setState(2621);
        dynamic_cast<Load_data_statementContext *>(_localctx)->escapesymb = match(MySqlParser::STRING_LITERAL);
      }
    }
    setState(2637);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LINES) {
      setState(2626);
      match(MySqlParser::LINES);
      setState(2630);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::STARTING) {
        setState(2627);
        match(MySqlParser::STARTING);
        setState(2628);
        match(MySqlParser::BY);
        setState(2629);
        dynamic_cast<Load_data_statementContext *>(_localctx)->startingsymb = match(MySqlParser::STRING_LITERAL);
      }
      setState(2635);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::TERMINATED) {
        setState(2632);
        match(MySqlParser::TERMINATED);
        setState(2633);
        match(MySqlParser::BY);
        setState(2634);
        dynamic_cast<Load_data_statementContext *>(_localctx)->terminatelinesymb = match(MySqlParser::STRING_LITERAL);
      }
    }
    setState(2643);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(2639);
      match(MySqlParser::IGNORE);
      setState(2640);
      decimal_literal();
      setState(2641);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::LINES || _la == MySqlParser::ROWS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2656);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LR_BRACKET) {
      setState(2645);
      match(MySqlParser::LR_BRACKET);
      setState(2646);
      col_or_uservar();
      setState(2651);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2647);
        match(MySqlParser::COMMA);
        setState(2648);
        col_or_uservar();
        setState(2653);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2654);
      match(MySqlParser::RR_BRACKET);
    }
    setState(2667);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::SET) {
      setState(2658);
      match(MySqlParser::SET);
      setState(2659);
      update_elem();
      setState(2664);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2660);
        match(MySqlParser::COMMA);
        setState(2661);
        update_elem();
        setState(2666);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Load_xml_statementContext ------------------------------------------------------------------

MySqlParser::Load_xml_statementContext::Load_xml_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::LOAD() {
  return getToken(MySqlParser::LOAD, 0);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::XML() {
  return getToken(MySqlParser::XML, 0);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::INFILE() {
  return getToken(MySqlParser::INFILE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Load_xml_statementContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Load_xml_statementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Load_xml_statementContext::SET() {
  return getTokens(MySqlParser::SET);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::SET(size_t i) {
  return getToken(MySqlParser::SET, i);
}

MySqlParser::Charset_nameContext* MySqlParser::Load_xml_statementContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

std::vector<tree::TerminalNode *> MySqlParser::Load_xml_statementContext::ROWS() {
  return getTokens(MySqlParser::ROWS);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::ROWS(size_t i) {
  return getToken(MySqlParser::ROWS, i);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::IDENTIFIED() {
  return getToken(MySqlParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Load_xml_statementContext::IGNORE() {
  return getTokens(MySqlParser::IGNORE);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::IGNORE(size_t i) {
  return getToken(MySqlParser::IGNORE, i);
}

MySqlParser::Decimal_literalContext* MySqlParser::Load_xml_statementContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

std::vector<MySqlParser::Col_or_uservarContext *> MySqlParser::Load_xml_statementContext::col_or_uservar() {
  return getRuleContexts<MySqlParser::Col_or_uservarContext>();
}

MySqlParser::Col_or_uservarContext* MySqlParser::Load_xml_statementContext::col_or_uservar(size_t i) {
  return getRuleContext<MySqlParser::Col_or_uservarContext>(i);
}

std::vector<MySqlParser::Update_elemContext *> MySqlParser::Load_xml_statementContext::update_elem() {
  return getRuleContexts<MySqlParser::Update_elemContext>();
}

MySqlParser::Update_elemContext* MySqlParser::Load_xml_statementContext::update_elem(size_t i) {
  return getRuleContext<MySqlParser::Update_elemContext>(i);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::LINES() {
  return getToken(MySqlParser::LINES, 0);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::Load_xml_statementContext::CONCURRENT() {
  return getToken(MySqlParser::CONCURRENT, 0);
}


size_t MySqlParser::Load_xml_statementContext::getRuleIndex() const {
  return MySqlParser::RuleLoad_xml_statement;
}

void MySqlParser::Load_xml_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoad_xml_statement(this);
}

void MySqlParser::Load_xml_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoad_xml_statement(this);
}

MySqlParser::Load_xml_statementContext* MySqlParser::load_xml_statement() {
  Load_xml_statementContext *_localctx = _tracker.createInstance<Load_xml_statementContext>(_ctx, getState());
  enterRule(_localctx, 164, MySqlParser::RuleLoad_xml_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2669);
    match(MySqlParser::LOAD);
    setState(2670);
    match(MySqlParser::XML);
    setState(2672);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY || _la == MySqlParser::CONCURRENT) {
      setState(2671);
      dynamic_cast<Load_xml_statementContext *>(_localctx)->priority = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::LOW_PRIORITY || _la == MySqlParser::CONCURRENT)) {
        dynamic_cast<Load_xml_statementContext *>(_localctx)->priority = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2675);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOCAL) {
      setState(2674);
      match(MySqlParser::LOCAL);
    }
    setState(2677);
    match(MySqlParser::INFILE);
    setState(2678);
    match(MySqlParser::STRING_LITERAL);
    setState(2680);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE

    || _la == MySqlParser::REPLACE) {
      setState(2679);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::IGNORE

      || _la == MySqlParser::REPLACE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2682);
    match(MySqlParser::INTO);
    setState(2683);
    match(MySqlParser::TABLE);
    setState(2684);
    table_name();
    setState(2688);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CHARACTER) {
      setState(2685);
      match(MySqlParser::CHARACTER);
      setState(2686);
      match(MySqlParser::SET);
      setState(2687);
      charset_name();
    }
    setState(2696);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ROWS) {
      setState(2690);
      match(MySqlParser::ROWS);
      setState(2691);
      match(MySqlParser::IDENTIFIED);
      setState(2692);
      match(MySqlParser::BY);
      setState(2693);
      match(MySqlParser::LESS_SYMBOL);
      setState(2694);
      match(MySqlParser::STRING_LITERAL);
      setState(2695);
      match(MySqlParser::GREATER_SYMBOL);
    }
    setState(2702);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(2698);
      match(MySqlParser::IGNORE);
      setState(2699);
      decimal_literal();
      setState(2700);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::LINES || _la == MySqlParser::ROWS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2715);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LR_BRACKET) {
      setState(2704);
      match(MySqlParser::LR_BRACKET);
      setState(2705);
      col_or_uservar();
      setState(2710);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2706);
        match(MySqlParser::COMMA);
        setState(2707);
        col_or_uservar();
        setState(2712);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2713);
      match(MySqlParser::RR_BRACKET);
    }
    setState(2726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::SET) {
      setState(2717);
      match(MySqlParser::SET);
      setState(2718);
      update_elem();
      setState(2723);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(2719);
        match(MySqlParser::COMMA);
        setState(2720);
        update_elem();
        setState(2725);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Replace_statementContext ------------------------------------------------------------------

MySqlParser::Replace_statementContext::Replace_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Replace_statementContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Replace_statementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

MySqlParser::Insert_statement_valueContext* MySqlParser::Replace_statementContext::insert_statement_value() {
  return getRuleContext<MySqlParser::Insert_statement_valueContext>(0);
}

tree::TerminalNode* MySqlParser::Replace_statementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::Replace_statementContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::Replace_statementContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

std::vector<MySqlParser::Id_listContext *> MySqlParser::Replace_statementContext::id_list() {
  return getRuleContexts<MySqlParser::Id_listContext>();
}

MySqlParser::Id_listContext* MySqlParser::Replace_statementContext::id_list(size_t i) {
  return getRuleContext<MySqlParser::Id_listContext>(i);
}

std::vector<MySqlParser::Update_elemContext *> MySqlParser::Replace_statementContext::update_elem() {
  return getRuleContexts<MySqlParser::Update_elemContext>();
}

MySqlParser::Update_elemContext* MySqlParser::Replace_statementContext::update_elem(size_t i) {
  return getRuleContext<MySqlParser::Update_elemContext>(i);
}

tree::TerminalNode* MySqlParser::Replace_statementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::Replace_statementContext::DELAYED() {
  return getToken(MySqlParser::DELAYED, 0);
}


size_t MySqlParser::Replace_statementContext::getRuleIndex() const {
  return MySqlParser::RuleReplace_statement;
}

void MySqlParser::Replace_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReplace_statement(this);
}

void MySqlParser::Replace_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReplace_statement(this);
}

MySqlParser::Replace_statementContext* MySqlParser::replace_statement() {
  Replace_statementContext *_localctx = _tracker.createInstance<Replace_statementContext>(_ctx, getState());
  enterRule(_localctx, 166, MySqlParser::RuleReplace_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2728);
    match(MySqlParser::REPLACE);
    setState(2730);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DELAYED

    || _la == MySqlParser::LOW_PRIORITY) {
      setState(2729);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DELAYED

      || _la == MySqlParser::LOW_PRIORITY)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2733);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INTO) {
      setState(2732);
      match(MySqlParser::INTO);
    }
    setState(2735);
    table_name();
    setState(2741);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(2736);
      match(MySqlParser::PARTITION);
      setState(2737);
      match(MySqlParser::LR_BRACKET);
      setState(2738);
      id_list();
      setState(2739);
      match(MySqlParser::RR_BRACKET);
    }
    setState(2759);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SELECT:
      case MySqlParser::VALUES:
      case MySqlParser::VALUE:
      case MySqlParser::LR_BRACKET: {
        setState(2747);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx)) {
        case 1: {
          setState(2743);
          match(MySqlParser::LR_BRACKET);
          setState(2744);
          id_list();
          setState(2745);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        }
        setState(2749);
        insert_statement_value();
        break;
      }

      case MySqlParser::SET: {
        setState(2750);
        match(MySqlParser::SET);
        setState(2751);
        dynamic_cast<Replace_statementContext *>(_localctx)->set_firstelem = update_elem();
        setState(2756);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(2752);
          match(MySqlParser::COMMA);
          setState(2753);
          dynamic_cast<Replace_statementContext *>(_localctx)->update_elemContext = update_elem();
          dynamic_cast<Replace_statementContext *>(_localctx)->set_elem.push_back(dynamic_cast<Replace_statementContext *>(_localctx)->update_elemContext);
          setState(2758);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_statementContext ------------------------------------------------------------------

MySqlParser::Select_statementContext::Select_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Select_statementContext::getRuleIndex() const {
  return MySqlParser::RuleSelect_statement;
}

void MySqlParser::Select_statementContext::copyFrom(Select_statementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnionSelectContext ------------------------------------------------------------------

MySqlParser::Query_specification_nointoContext* MySqlParser::UnionSelectContext::query_specification_nointo() {
  return getRuleContext<MySqlParser::Query_specification_nointoContext>(0);
}

std::vector<MySqlParser::Union_statementContext *> MySqlParser::UnionSelectContext::union_statement() {
  return getRuleContexts<MySqlParser::Union_statementContext>();
}

MySqlParser::Union_statementContext* MySqlParser::UnionSelectContext::union_statement(size_t i) {
  return getRuleContext<MySqlParser::Union_statementContext>(i);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::UNION() {
  return getToken(MySqlParser::UNION, 0);
}

MySqlParser::Order_by_clauseContext* MySqlParser::UnionSelectContext::order_by_clause() {
  return getRuleContext<MySqlParser::Order_by_clauseContext>(0);
}

MySqlParser::Limit_clauseContext* MySqlParser::UnionSelectContext::limit_clause() {
  return getRuleContext<MySqlParser::Limit_clauseContext>(0);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::SHARE() {
  return getToken(MySqlParser::SHARE, 0);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::MODE() {
  return getToken(MySqlParser::MODE, 0);
}

MySqlParser::Query_specificationContext* MySqlParser::UnionSelectContext::query_specification() {
  return getRuleContext<MySqlParser::Query_specificationContext>(0);
}

MySqlParser::Query_expressionContext* MySqlParser::UnionSelectContext::query_expression() {
  return getRuleContext<MySqlParser::Query_expressionContext>(0);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::UnionSelectContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}

MySqlParser::UnionSelectContext::UnionSelectContext(Select_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::UnionSelectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnionSelect(this);
}
void MySqlParser::UnionSelectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnionSelect(this);
}
//----------------- ParenSelectContext ------------------------------------------------------------------

MySqlParser::Query_expressionContext* MySqlParser::ParenSelectContext::query_expression() {
  return getRuleContext<MySqlParser::Query_expressionContext>(0);
}

tree::TerminalNode* MySqlParser::ParenSelectContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::ParenSelectContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

tree::TerminalNode* MySqlParser::ParenSelectContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::ParenSelectContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::ParenSelectContext::SHARE() {
  return getToken(MySqlParser::SHARE, 0);
}

tree::TerminalNode* MySqlParser::ParenSelectContext::MODE() {
  return getToken(MySqlParser::MODE, 0);
}

MySqlParser::ParenSelectContext::ParenSelectContext(Select_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ParenSelectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenSelect(this);
}
void MySqlParser::ParenSelectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenSelect(this);
}
//----------------- SimpleSelectContext ------------------------------------------------------------------

MySqlParser::Query_specificationContext* MySqlParser::SimpleSelectContext::query_specification() {
  return getRuleContext<MySqlParser::Query_specificationContext>(0);
}

tree::TerminalNode* MySqlParser::SimpleSelectContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::SimpleSelectContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

tree::TerminalNode* MySqlParser::SimpleSelectContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::SimpleSelectContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::SimpleSelectContext::SHARE() {
  return getToken(MySqlParser::SHARE, 0);
}

tree::TerminalNode* MySqlParser::SimpleSelectContext::MODE() {
  return getToken(MySqlParser::MODE, 0);
}

MySqlParser::SimpleSelectContext::SimpleSelectContext(Select_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::SimpleSelectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleSelect(this);
}
void MySqlParser::SimpleSelectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleSelect(this);
}
//----------------- UnionParenSelectContext ------------------------------------------------------------------

MySqlParser::Query_expression_nointoContext* MySqlParser::UnionParenSelectContext::query_expression_nointo() {
  return getRuleContext<MySqlParser::Query_expression_nointoContext>(0);
}

std::vector<MySqlParser::Union_parenthContext *> MySqlParser::UnionParenSelectContext::union_parenth() {
  return getRuleContexts<MySqlParser::Union_parenthContext>();
}

MySqlParser::Union_parenthContext* MySqlParser::UnionParenSelectContext::union_parenth(size_t i) {
  return getRuleContext<MySqlParser::Union_parenthContext>(i);
}

tree::TerminalNode* MySqlParser::UnionParenSelectContext::UNION() {
  return getToken(MySqlParser::UNION, 0);
}

MySqlParser::Query_expressionContext* MySqlParser::UnionParenSelectContext::query_expression() {
  return getRuleContext<MySqlParser::Query_expressionContext>(0);
}

MySqlParser::Order_by_clauseContext* MySqlParser::UnionParenSelectContext::order_by_clause() {
  return getRuleContext<MySqlParser::Order_by_clauseContext>(0);
}

MySqlParser::Limit_clauseContext* MySqlParser::UnionParenSelectContext::limit_clause() {
  return getRuleContext<MySqlParser::Limit_clauseContext>(0);
}

tree::TerminalNode* MySqlParser::UnionParenSelectContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::UnionParenSelectContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

tree::TerminalNode* MySqlParser::UnionParenSelectContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::UnionParenSelectContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::UnionParenSelectContext::SHARE() {
  return getToken(MySqlParser::SHARE, 0);
}

tree::TerminalNode* MySqlParser::UnionParenSelectContext::MODE() {
  return getToken(MySqlParser::MODE, 0);
}

tree::TerminalNode* MySqlParser::UnionParenSelectContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::UnionParenSelectContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}

MySqlParser::UnionParenSelectContext::UnionParenSelectContext(Select_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::UnionParenSelectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnionParenSelect(this);
}
void MySqlParser::UnionParenSelectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnionParenSelect(this);
}
MySqlParser::Select_statementContext* MySqlParser::select_statement() {
  Select_statementContext *_localctx = _tracker.createInstance<Select_statementContext>(_ctx, getState());
  enterRule(_localctx, 168, MySqlParser::RuleSelect_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(2836);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 395, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Select_statementContext *>(_tracker.createInstance<MySqlParser::SimpleSelectContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(2761);
      query_specification();
      setState(2768);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::FOR: {
          setState(2762);
          match(MySqlParser::FOR);
          setState(2763);
          match(MySqlParser::UPDATE);
          break;
        }

        case MySqlParser::LOCK: {
          setState(2764);
          match(MySqlParser::LOCK);
          setState(2765);
          match(MySqlParser::IN);
          setState(2766);
          match(MySqlParser::SHARE);
          setState(2767);
          match(MySqlParser::MODE);
          break;
        }

        case MySqlParser::EOF:
        case MySqlParser::AS:
        case MySqlParser::LEFT:
        case MySqlParser::ON:
        case MySqlParser::RIGHT:
        case MySqlParser::WITH:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MINUS:
        case MySqlParser::RR_BRACKET:
        case MySqlParser::SEMI:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Select_statementContext *>(_tracker.createInstance<MySqlParser::ParenSelectContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(2770);
      query_expression();
      setState(2777);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::FOR: {
          setState(2771);
          match(MySqlParser::FOR);
          setState(2772);
          match(MySqlParser::UPDATE);
          break;
        }

        case MySqlParser::LOCK: {
          setState(2773);
          match(MySqlParser::LOCK);
          setState(2774);
          match(MySqlParser::IN);
          setState(2775);
          match(MySqlParser::SHARE);
          setState(2776);
          match(MySqlParser::MODE);
          break;
        }

        case MySqlParser::EOF:
        case MySqlParser::AS:
        case MySqlParser::LEFT:
        case MySqlParser::ON:
        case MySqlParser::RIGHT:
        case MySqlParser::WITH:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MINUS:
        case MySqlParser::RR_BRACKET:
        case MySqlParser::SEMI:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Select_statementContext *>(_tracker.createInstance<MySqlParser::UnionSelectContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(2779);
      query_specification_nointo();
      setState(2781); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2780);
                union_statement();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2783); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(2793);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::UNION) {
        setState(2785);
        match(MySqlParser::UNION);
        setState(2787);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ALL

        || _la == MySqlParser::DISTINCT) {
          setState(2786);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::ALL

          || _la == MySqlParser::DISTINCT)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(2791);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::SELECT: {
            setState(2789);
            query_specification();
            break;
          }

          case MySqlParser::LR_BRACKET: {
            setState(2790);
            query_expression();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      setState(2796);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ORDER) {
        setState(2795);
        order_by_clause();
      }
      setState(2799);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIMIT) {
        setState(2798);
        limit_clause();
      }
      setState(2807);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::FOR: {
          setState(2801);
          match(MySqlParser::FOR);
          setState(2802);
          match(MySqlParser::UPDATE);
          break;
        }

        case MySqlParser::LOCK: {
          setState(2803);
          match(MySqlParser::LOCK);
          setState(2804);
          match(MySqlParser::IN);
          setState(2805);
          match(MySqlParser::SHARE);
          setState(2806);
          match(MySqlParser::MODE);
          break;
        }

        case MySqlParser::EOF:
        case MySqlParser::AS:
        case MySqlParser::LEFT:
        case MySqlParser::ON:
        case MySqlParser::RIGHT:
        case MySqlParser::WITH:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MINUS:
        case MySqlParser::RR_BRACKET:
        case MySqlParser::SEMI:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          break;
        }

      default:
        break;
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Select_statementContext *>(_tracker.createInstance<MySqlParser::UnionParenSelectContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(2809);
      query_expression_nointo();
      setState(2811); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2810);
                union_parenth();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2813); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 389, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(2820);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::UNION) {
        setState(2815);
        match(MySqlParser::UNION);
        setState(2817);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ALL

        || _la == MySqlParser::DISTINCT) {
          setState(2816);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::ALL

          || _la == MySqlParser::DISTINCT)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(2819);
        query_expression();
      }
      setState(2823);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ORDER) {
        setState(2822);
        order_by_clause();
      }
      setState(2826);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIMIT) {
        setState(2825);
        limit_clause();
      }
      setState(2834);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::FOR: {
          setState(2828);
          match(MySqlParser::FOR);
          setState(2829);
          match(MySqlParser::UPDATE);
          break;
        }

        case MySqlParser::LOCK: {
          setState(2830);
          match(MySqlParser::LOCK);
          setState(2831);
          match(MySqlParser::IN);
          setState(2832);
          match(MySqlParser::SHARE);
          setState(2833);
          match(MySqlParser::MODE);
          break;
        }

        case MySqlParser::EOF:
        case MySqlParser::AS:
        case MySqlParser::LEFT:
        case MySqlParser::ON:
        case MySqlParser::RIGHT:
        case MySqlParser::WITH:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::MINUS:
        case MySqlParser::RR_BRACKET:
        case MySqlParser::SEMI:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          break;
        }

      default:
        break;
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Update_statementContext ------------------------------------------------------------------

MySqlParser::Update_statementContext::Update_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Single_update_statementContext* MySqlParser::Update_statementContext::single_update_statement() {
  return getRuleContext<MySqlParser::Single_update_statementContext>(0);
}

MySqlParser::Multiple_update_statementContext* MySqlParser::Update_statementContext::multiple_update_statement() {
  return getRuleContext<MySqlParser::Multiple_update_statementContext>(0);
}


size_t MySqlParser::Update_statementContext::getRuleIndex() const {
  return MySqlParser::RuleUpdate_statement;
}

void MySqlParser::Update_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdate_statement(this);
}

void MySqlParser::Update_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdate_statement(this);
}

MySqlParser::Update_statementContext* MySqlParser::update_statement() {
  Update_statementContext *_localctx = _tracker.createInstance<Update_statementContext>(_ctx, getState());
  enterRule(_localctx, 170, MySqlParser::RuleUpdate_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2840);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 396, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2838);
      single_update_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2839);
      multiple_update_statement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_statement_valueContext ------------------------------------------------------------------

MySqlParser::Insert_statement_valueContext::Insert_statement_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Select_statementContext* MySqlParser::Insert_statement_valueContext::select_statement() {
  return getRuleContext<MySqlParser::Select_statementContext>(0);
}

std::vector<MySqlParser::Expression_listContext *> MySqlParser::Insert_statement_valueContext::expression_list() {
  return getRuleContexts<MySqlParser::Expression_listContext>();
}

MySqlParser::Expression_listContext* MySqlParser::Insert_statement_valueContext::expression_list(size_t i) {
  return getRuleContext<MySqlParser::Expression_listContext>(i);
}

tree::TerminalNode* MySqlParser::Insert_statement_valueContext::VALUES() {
  return getToken(MySqlParser::VALUES, 0);
}

tree::TerminalNode* MySqlParser::Insert_statement_valueContext::VALUE() {
  return getToken(MySqlParser::VALUE, 0);
}


size_t MySqlParser::Insert_statement_valueContext::getRuleIndex() const {
  return MySqlParser::RuleInsert_statement_value;
}

void MySqlParser::Insert_statement_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_statement_value(this);
}

void MySqlParser::Insert_statement_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_statement_value(this);
}

MySqlParser::Insert_statement_valueContext* MySqlParser::insert_statement_value() {
  Insert_statement_valueContext *_localctx = _tracker.createInstance<Insert_statement_valueContext>(_ctx, getState());
  enterRule(_localctx, 172, MySqlParser::RuleInsert_statement_value);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2857);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SELECT:
      case MySqlParser::LR_BRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(2842);
        select_statement();
        break;
      }

      case MySqlParser::VALUES:
      case MySqlParser::VALUE: {
        enterOuterAlt(_localctx, 2);
        setState(2843);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::VALUES || _la == MySqlParser::VALUE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2844);
        match(MySqlParser::LR_BRACKET);
        setState(2845);
        expression_list();
        setState(2846);
        match(MySqlParser::RR_BRACKET);
        setState(2854);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(2847);
          match(MySqlParser::COMMA);
          setState(2848);
          match(MySqlParser::LR_BRACKET);
          setState(2849);
          expression_list();
          setState(2850);
          match(MySqlParser::RR_BRACKET);
          setState(2856);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Update_elemContext ------------------------------------------------------------------

MySqlParser::Update_elemContext::Update_elemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Full_column_nameContext* MySqlParser::Update_elemContext::full_column_name() {
  return getRuleContext<MySqlParser::Full_column_nameContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::Update_elemContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::Update_elemContext::getRuleIndex() const {
  return MySqlParser::RuleUpdate_elem;
}

void MySqlParser::Update_elemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdate_elem(this);
}

void MySqlParser::Update_elemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdate_elem(this);
}

MySqlParser::Update_elemContext* MySqlParser::update_elem() {
  Update_elemContext *_localctx = _tracker.createInstance<Update_elemContext>(_ctx, getState());
  enterRule(_localctx, 174, MySqlParser::RuleUpdate_elem);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2859);
    full_column_name();
    setState(2860);
    match(MySqlParser::EQUAL_SYMBOL);
    setState(2861);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Col_or_uservarContext ------------------------------------------------------------------

MySqlParser::Col_or_uservarContext::Col_or_uservarContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Id_Context* MySqlParser::Col_or_uservarContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Col_or_uservarContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}


size_t MySqlParser::Col_or_uservarContext::getRuleIndex() const {
  return MySqlParser::RuleCol_or_uservar;
}

void MySqlParser::Col_or_uservarContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCol_or_uservar(this);
}

void MySqlParser::Col_or_uservarContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCol_or_uservar(this);
}

MySqlParser::Col_or_uservarContext* MySqlParser::col_or_uservar() {
  Col_or_uservarContext *_localctx = _tracker.createInstance<Col_or_uservarContext>(_ctx, getState());
  enterRule(_localctx, 176, MySqlParser::RuleCol_or_uservar);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(2865);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LEFT:
      case MySqlParser::RIGHT:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::COUNT:
      case MySqlParser::POSITION:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BTREE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLIENT:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FIELDS:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::HASH:
      case MySqlParser::HOST:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IMPORT:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INVOKER:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MERGE:
      case MySqlParser::MID:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRESERVE:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATION:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STORAGE:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XML:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFOMANCE_SCHEMA:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        enterOuterAlt(_localctx, 1);
        setState(2863);
        id_();
        break;
      }

      case MySqlParser::LOCAL_ID: {
        enterOuterAlt(_localctx, 2);
        setState(2864);
        match(MySqlParser::LOCAL_ID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_delete_statementContext ------------------------------------------------------------------

MySqlParser::Single_delete_statementContext::Single_delete_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Single_delete_statementContext::DELETE() {
  return getToken(MySqlParser::DELETE, 0);
}

tree::TerminalNode* MySqlParser::Single_delete_statementContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Single_delete_statementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Single_delete_statementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::Single_delete_statementContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::Single_delete_statementContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::Single_delete_statementContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::Single_delete_statementContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::Single_delete_statementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Single_delete_statementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::Order_by_clauseContext* MySqlParser::Single_delete_statementContext::order_by_clause() {
  return getRuleContext<MySqlParser::Order_by_clauseContext>(0);
}

tree::TerminalNode* MySqlParser::Single_delete_statementContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::Single_delete_statementContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}


size_t MySqlParser::Single_delete_statementContext::getRuleIndex() const {
  return MySqlParser::RuleSingle_delete_statement;
}

void MySqlParser::Single_delete_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingle_delete_statement(this);
}

void MySqlParser::Single_delete_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingle_delete_statement(this);
}

MySqlParser::Single_delete_statementContext* MySqlParser::single_delete_statement() {
  Single_delete_statementContext *_localctx = _tracker.createInstance<Single_delete_statementContext>(_ctx, getState());
  enterRule(_localctx, 178, MySqlParser::RuleSingle_delete_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2867);
    match(MySqlParser::DELETE);
    setState(2869);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY) {
      setState(2868);
      match(MySqlParser::LOW_PRIORITY);
    }
    setState(2872);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::QUICK) {
      setState(2871);
      match(MySqlParser::QUICK);
    }
    setState(2875);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(2874);
      match(MySqlParser::IGNORE);
    }
    setState(2877);
    match(MySqlParser::FROM);
    setState(2878);
    table_name();
    setState(2884);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(2879);
      match(MySqlParser::PARTITION);
      setState(2880);
      match(MySqlParser::LR_BRACKET);
      setState(2881);
      id_list();
      setState(2882);
      match(MySqlParser::RR_BRACKET);
    }
    setState(2888);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(2886);
      match(MySqlParser::WHERE);
      setState(2887);
      expression(0);
    }
    setState(2891);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ORDER) {
      setState(2890);
      order_by_clause();
    }
    setState(2895);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LIMIT) {
      setState(2893);
      match(MySqlParser::LIMIT);
      setState(2894);
      decimal_literal();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiple_delete_statementContext ------------------------------------------------------------------

MySqlParser::Multiple_delete_statementContext::Multiple_delete_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Multiple_delete_statementContext::DELETE() {
  return getToken(MySqlParser::DELETE, 0);
}

std::vector<MySqlParser::Table_nameContext *> MySqlParser::Multiple_delete_statementContext::table_name() {
  return getRuleContexts<MySqlParser::Table_nameContext>();
}

MySqlParser::Table_nameContext* MySqlParser::Multiple_delete_statementContext::table_name(size_t i) {
  return getRuleContext<MySqlParser::Table_nameContext>(i);
}

tree::TerminalNode* MySqlParser::Multiple_delete_statementContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

MySqlParser::Table_sourcesContext* MySqlParser::Multiple_delete_statementContext::table_sources() {
  return getRuleContext<MySqlParser::Table_sourcesContext>(0);
}

tree::TerminalNode* MySqlParser::Multiple_delete_statementContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

tree::TerminalNode* MySqlParser::Multiple_delete_statementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::Multiple_delete_statementContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::Multiple_delete_statementContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::Multiple_delete_statementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Multiple_delete_statementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::Multiple_delete_statementContext::getRuleIndex() const {
  return MySqlParser::RuleMultiple_delete_statement;
}

void MySqlParser::Multiple_delete_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiple_delete_statement(this);
}

void MySqlParser::Multiple_delete_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiple_delete_statement(this);
}

MySqlParser::Multiple_delete_statementContext* MySqlParser::multiple_delete_statement() {
  Multiple_delete_statementContext *_localctx = _tracker.createInstance<Multiple_delete_statementContext>(_ctx, getState());
  enterRule(_localctx, 180, MySqlParser::RuleMultiple_delete_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2897);
    match(MySqlParser::DELETE);
    setState(2899);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY) {
      setState(2898);
      match(MySqlParser::LOW_PRIORITY);
    }
    setState(2902);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 408, _ctx)) {
    case 1: {
      setState(2901);
      match(MySqlParser::QUICK);
      break;
    }

    }
    setState(2905);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(2904);
      match(MySqlParser::IGNORE);
    }
    setState(2946);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LEFT:
      case MySqlParser::RIGHT:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::COUNT:
      case MySqlParser::POSITION:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BTREE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLIENT:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FIELDS:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::HASH:
      case MySqlParser::HOST:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IMPORT:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INVOKER:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MERGE:
      case MySqlParser::MID:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRESERVE:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATION:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STORAGE:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XML:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFOMANCE_SCHEMA:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        setState(2907);
        table_name();
        setState(2910);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::DOT) {
          setState(2908);
          match(MySqlParser::DOT);
          setState(2909);
          match(MySqlParser::STAR);
        }
        setState(2920);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(2912);
          match(MySqlParser::COMMA);
          setState(2913);
          table_name();
          setState(2916);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::DOT) {
            setState(2914);
            match(MySqlParser::DOT);
            setState(2915);
            match(MySqlParser::STAR);
          }
          setState(2922);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2923);
        match(MySqlParser::FROM);
        setState(2924);
        table_sources();
        break;
      }

      case MySqlParser::FROM: {
        setState(2926);
        match(MySqlParser::FROM);
        setState(2927);
        table_name();
        setState(2930);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::DOT) {
          setState(2928);
          match(MySqlParser::DOT);
          setState(2929);
          match(MySqlParser::STAR);
        }
        setState(2940);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(2932);
          match(MySqlParser::COMMA);
          setState(2933);
          table_name();
          setState(2936);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::DOT) {
            setState(2934);
            match(MySqlParser::DOT);
            setState(2935);
            match(MySqlParser::STAR);
          }
          setState(2942);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2943);
        match(MySqlParser::USING);
        setState(2944);
        table_sources();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2950);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(2948);
      match(MySqlParser::WHERE);
      setState(2949);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_open_statementContext ------------------------------------------------------------------

MySqlParser::Handler_open_statementContext::Handler_open_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Handler_open_statementContext::HANDLER() {
  return getToken(MySqlParser::HANDLER, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Handler_open_statementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Handler_open_statementContext::OPEN() {
  return getToken(MySqlParser::OPEN, 0);
}

MySqlParser::Id_Context* MySqlParser::Handler_open_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Handler_open_statementContext::AS() {
  return getToken(MySqlParser::AS, 0);
}


size_t MySqlParser::Handler_open_statementContext::getRuleIndex() const {
  return MySqlParser::RuleHandler_open_statement;
}

void MySqlParser::Handler_open_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_open_statement(this);
}

void MySqlParser::Handler_open_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_open_statement(this);
}

MySqlParser::Handler_open_statementContext* MySqlParser::handler_open_statement() {
  Handler_open_statementContext *_localctx = _tracker.createInstance<Handler_open_statementContext>(_ctx, getState());
  enterRule(_localctx, 182, MySqlParser::RuleHandler_open_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2952);
    match(MySqlParser::HANDLER);
    setState(2953);
    table_name();
    setState(2954);
    match(MySqlParser::OPEN);
    setState(2959);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::AS || _la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519))
      | (1ULL << (MySqlParser::QUARTER - 519))
      | (1ULL << (MySqlParser::MONTH - 519))
      | (1ULL << (MySqlParser::DAY - 519))
      | (1ULL << (MySqlParser::HOUR - 519))
      | (1ULL << (MySqlParser::MINUTE - 519))
      | (1ULL << (MySqlParser::WEEK - 519))
      | (1ULL << (MySqlParser::SECOND - 519))
      | (1ULL << (MySqlParser::MICROSECOND - 519))
      | (1ULL << (MySqlParser::TABLES - 519))
      | (1ULL << (MySqlParser::ROUTINE - 519))
      | (1ULL << (MySqlParser::EXECUTE - 519))
      | (1ULL << (MySqlParser::FILE - 519))
      | (1ULL << (MySqlParser::PROCESS - 519))
      | (1ULL << (MySqlParser::RELOAD - 519))
      | (1ULL << (MySqlParser::SHUTDOWN - 519))
      | (1ULL << (MySqlParser::SUPER - 519))
      | (1ULL << (MySqlParser::PRIVILEGES - 519))
      | (1ULL << (MySqlParser::ARMSCII8 - 519))
      | (1ULL << (MySqlParser::ASCII - 519))
      | (1ULL << (MySqlParser::BIG5 - 519))
      | (1ULL << (MySqlParser::CP1250 - 519))
      | (1ULL << (MySqlParser::CP1251 - 519))
      | (1ULL << (MySqlParser::CP1256 - 519))
      | (1ULL << (MySqlParser::CP1257 - 519))
      | (1ULL << (MySqlParser::CP850 - 519))
      | (1ULL << (MySqlParser::CP852 - 519))
      | (1ULL << (MySqlParser::CP866 - 519))
      | (1ULL << (MySqlParser::CP932 - 519))
      | (1ULL << (MySqlParser::DEC8 - 519))
      | (1ULL << (MySqlParser::EUCJPMS - 519))
      | (1ULL << (MySqlParser::EUCKR - 519))
      | (1ULL << (MySqlParser::GB2312 - 519))
      | (1ULL << (MySqlParser::GBK - 519))
      | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
      | (1ULL << (MySqlParser::HEBREW - 583))
      | (1ULL << (MySqlParser::HP8 - 583))
      | (1ULL << (MySqlParser::KEYBCS2 - 583))
      | (1ULL << (MySqlParser::KOI8R - 583))
      | (1ULL << (MySqlParser::KOI8U - 583))
      | (1ULL << (MySqlParser::LATIN1 - 583))
      | (1ULL << (MySqlParser::LATIN2 - 583))
      | (1ULL << (MySqlParser::LATIN5 - 583))
      | (1ULL << (MySqlParser::LATIN7 - 583))
      | (1ULL << (MySqlParser::MACCE - 583))
      | (1ULL << (MySqlParser::MACROMAN - 583))
      | (1ULL << (MySqlParser::SJIS - 583))
      | (1ULL << (MySqlParser::SWE7 - 583))
      | (1ULL << (MySqlParser::TIS620 - 583))
      | (1ULL << (MySqlParser::UCS2 - 583))
      | (1ULL << (MySqlParser::UJIS - 583))
      | (1ULL << (MySqlParser::UTF16 - 583))
      | (1ULL << (MySqlParser::UTF16LE - 583))
      | (1ULL << (MySqlParser::UTF32 - 583))
      | (1ULL << (MySqlParser::UTF8 - 583))
      | (1ULL << (MySqlParser::UTF8MB3 - 583))
      | (1ULL << (MySqlParser::UTF8MB4 - 583))
      | (1ULL << (MySqlParser::ARCHIVE - 583))
      | (1ULL << (MySqlParser::BLACKHOLE - 583))
      | (1ULL << (MySqlParser::CSV - 583))
      | (1ULL << (MySqlParser::FEDERATED - 583))
      | (1ULL << (MySqlParser::INNODB - 583))
      | (1ULL << (MySqlParser::MEMORY - 583))
      | (1ULL << (MySqlParser::MRG_MYISAM - 583))
      | (1ULL << (MySqlParser::MYISAM - 583))
      | (1ULL << (MySqlParser::NDB - 583))
      | (1ULL << (MySqlParser::NDBCLUSTER - 583))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
      | (1ULL << (MySqlParser::REPEATABLE - 583))
      | (1ULL << (MySqlParser::COMMITTED - 583))
      | (1ULL << (MySqlParser::UNCOMMITTED - 583))
      | (1ULL << (MySqlParser::SERIALIZABLE - 583))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
      | (1ULL << (MySqlParser::LINESTRING - 583))
      | (1ULL << (MySqlParser::MULTILINESTRING - 583))
      | (1ULL << (MySqlParser::MULTIPOINT - 583))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
      | (1ULL << (MySqlParser::POINT - 583))
      | (1ULL << (MySqlParser::POLYGON - 583))
      | (1ULL << (MySqlParser::ABS - 583))
      | (1ULL << (MySqlParser::ACOS - 583))
      | (1ULL << (MySqlParser::ADDDATE - 583))
      | (1ULL << (MySqlParser::ADDTIME - 583))
      | (1ULL << (MySqlParser::AES_DECRYPT - 583))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
      | (1ULL << (MySqlParser::AREA - 583))
      | (1ULL << (MySqlParser::ASBINARY - 583))
      | (1ULL << (MySqlParser::ASIN - 583))
      | (1ULL << (MySqlParser::ASTEXT - 583))
      | (1ULL << (MySqlParser::ASWKB - 583))
      | (1ULL << (MySqlParser::ASWKT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
      | (1ULL << (MySqlParser::ATAN - 583))
      | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
      | (1ULL << (MySqlParser::BIN - 647))
      | (1ULL << (MySqlParser::BIT_COUNT - 647))
      | (1ULL << (MySqlParser::BIT_LENGTH - 647))
      | (1ULL << (MySqlParser::BUFFER - 647))
      | (1ULL << (MySqlParser::CEIL - 647))
      | (1ULL << (MySqlParser::CEILING - 647))
      | (1ULL << (MySqlParser::CENTROID - 647))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
      | (1ULL << (MySqlParser::CHARSET - 647))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
      | (1ULL << (MySqlParser::COERCIBILITY - 647))
      | (1ULL << (MySqlParser::COLLATION - 647))
      | (1ULL << (MySqlParser::COMPRESS - 647))
      | (1ULL << (MySqlParser::CONCAT - 647))
      | (1ULL << (MySqlParser::CONCAT_WS - 647))
      | (1ULL << (MySqlParser::CONNECTION_ID - 647))
      | (1ULL << (MySqlParser::CONV - 647))
      | (1ULL << (MySqlParser::CONVERT_TZ - 647))
      | (1ULL << (MySqlParser::COS - 647))
      | (1ULL << (MySqlParser::COT - 647))
      | (1ULL << (MySqlParser::CRC32 - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
      | (1ULL << (MySqlParser::CROSSES - 647))
      | (1ULL << (MySqlParser::DATEDIFF - 647))
      | (1ULL << (MySqlParser::DATE_FORMAT - 647))
      | (1ULL << (MySqlParser::DAYNAME - 647))
      | (1ULL << (MySqlParser::DAYOFMONTH - 647))
      | (1ULL << (MySqlParser::DAYOFWEEK - 647))
      | (1ULL << (MySqlParser::DAYOFYEAR - 647))
      | (1ULL << (MySqlParser::DECODE - 647))
      | (1ULL << (MySqlParser::DEGREES - 647))
      | (1ULL << (MySqlParser::DES_DECRYPT - 647))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
      | (1ULL << (MySqlParser::DIMENSION - 647))
      | (1ULL << (MySqlParser::DISJOINT - 647))
      | (1ULL << (MySqlParser::ELT - 647))
      | (1ULL << (MySqlParser::ENCODE - 647))
      | (1ULL << (MySqlParser::ENCRYPT - 647))
      | (1ULL << (MySqlParser::ENDPOINT - 647))
      | (1ULL << (MySqlParser::ENVELOPE - 647))
      | (1ULL << (MySqlParser::EQUALS - 647))
      | (1ULL << (MySqlParser::EXP - 647))
      | (1ULL << (MySqlParser::EXPORT_SET - 647))
      | (1ULL << (MySqlParser::EXTERIORRING - 647))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
      | (1ULL << (MySqlParser::FIELD - 647))
      | (1ULL << (MySqlParser::FIND_IN_SET - 647))
      | (1ULL << (MySqlParser::FLOOR - 647))
      | (1ULL << (MySqlParser::FORMAT - 647))
      | (1ULL << (MySqlParser::FOUND_ROWS - 647))
      | (1ULL << (MySqlParser::FROM_BASE64 - 647))
      | (1ULL << (MySqlParser::FROM_DAYS - 647))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
      | (1ULL << (MySqlParser::GET_FORMAT - 711))
      | (1ULL << (MySqlParser::GET_LOCK - 711))
      | (1ULL << (MySqlParser::GLENGTH - 711))
      | (1ULL << (MySqlParser::GREATEST - 711))
      | (1ULL << (MySqlParser::GTID_SUBSET - 711))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
      | (1ULL << (MySqlParser::HEX - 711))
      | (1ULL << (MySqlParser::IFNULL - 711))
      | (1ULL << (MySqlParser::INET6_ATON - 711))
      | (1ULL << (MySqlParser::INET6_NTOA - 711))
      | (1ULL << (MySqlParser::INET_ATON - 711))
      | (1ULL << (MySqlParser::INET_NTOA - 711))
      | (1ULL << (MySqlParser::INSTR - 711))
      | (1ULL << (MySqlParser::INTERIORRINGN - 711))
      | (1ULL << (MySqlParser::INTERSECTS - 711))
      | (1ULL << (MySqlParser::ISCLOSED - 711))
      | (1ULL << (MySqlParser::ISEMPTY - 711))
      | (1ULL << (MySqlParser::ISNULL - 711))
      | (1ULL << (MySqlParser::ISSIMPLE - 711))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
      | (1ULL << (MySqlParser::IS_IPV4 - 711))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
      | (1ULL << (MySqlParser::IS_IPV6 - 711))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
      | (1ULL << (MySqlParser::LCASE - 711))
      | (1ULL << (MySqlParser::LEAST - 711))
      | (1ULL << (MySqlParser::LENGTH - 711))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINEFROMWKB - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
      | (1ULL << (MySqlParser::LN - 711))
      | (1ULL << (MySqlParser::LOAD_FILE - 711))
      | (1ULL << (MySqlParser::LOCATE - 711))
      | (1ULL << (MySqlParser::LOG - 711))
      | (1ULL << (MySqlParser::LOG10 - 711))
      | (1ULL << (MySqlParser::LOG2 - 711))
      | (1ULL << (MySqlParser::LOWER - 711))
      | (1ULL << (MySqlParser::LPAD - 711))
      | (1ULL << (MySqlParser::LTRIM - 711))
      | (1ULL << (MySqlParser::MAKEDATE - 711))
      | (1ULL << (MySqlParser::MAKETIME - 711))
      | (1ULL << (MySqlParser::MAKE_SET - 711))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
      | (1ULL << (MySqlParser::MBRCONTAINS - 711))
      | (1ULL << (MySqlParser::MBRDISJOINT - 711))
      | (1ULL << (MySqlParser::MBREQUAL - 711))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
      | (1ULL << (MySqlParser::MBROVERLAPS - 711))
      | (1ULL << (MySqlParser::MBRTOUCHES - 711))
      | (1ULL << (MySqlParser::MBRWITHIN - 711))
      | (1ULL << (MySqlParser::MD5 - 711))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
      | (1ULL << (MySqlParser::MONTHNAME - 711))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::NAME_CONST - 775))
      | (1ULL << (MySqlParser::NULLIF - 775))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
      | (1ULL << (MySqlParser::NUMPOINTS - 775))
      | (1ULL << (MySqlParser::OCT - 775))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
      | (1ULL << (MySqlParser::ORD - 775))
      | (1ULL << (MySqlParser::OVERLAPS - 775))
      | (1ULL << (MySqlParser::PERIOD_ADD - 775))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
      | (1ULL << (MySqlParser::PI - 775))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::POINTFROMWKB - 775))
      | (1ULL << (MySqlParser::POINTN - 775))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYFROMWKB - 775))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::POW - 775))
      | (1ULL << (MySqlParser::POWER - 775))
      | (1ULL << (MySqlParser::QUOTE - 775))
      | (1ULL << (MySqlParser::RADIANS - 775))
      | (1ULL << (MySqlParser::RAND - 775))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
      | (1ULL << (MySqlParser::REVERSE - 775))
      | (1ULL << (MySqlParser::ROUND - 775))
      | (1ULL << (MySqlParser::ROW_COUNT - 775))
      | (1ULL << (MySqlParser::RPAD - 775))
      | (1ULL << (MySqlParser::RTRIM - 775))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
      | (1ULL << (MySqlParser::SESSION_USER - 775))
      | (1ULL << (MySqlParser::SHA - 775))
      | (1ULL << (MySqlParser::SHA1 - 775))
      | (1ULL << (MySqlParser::SHA2 - 775))
      | (1ULL << (MySqlParser::SIGN - 775))
      | (1ULL << (MySqlParser::SIN - 775))
      | (1ULL << (MySqlParser::SLEEP - 775))
      | (1ULL << (MySqlParser::SOUNDEX - 775))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
      | (1ULL << (MySqlParser::SQRT - 775))
      | (1ULL << (MySqlParser::SRID - 775))
      | (1ULL << (MySqlParser::STARTPOINT - 775))
      | (1ULL << (MySqlParser::STRCMP - 775))
      | (1ULL << (MySqlParser::STR_TO_DATE - 775))
      | (1ULL << (MySqlParser::ST_AREA - 775))
      | (1ULL << (MySqlParser::ST_ASBINARY - 775))
      | (1ULL << (MySqlParser::ST_ASTEXT - 775))
      | (1ULL << (MySqlParser::ST_ASWKB - 775))
      | (1ULL << (MySqlParser::ST_ASWKT - 775))
      | (1ULL << (MySqlParser::ST_BUFFER - 775))
      | (1ULL << (MySqlParser::ST_CENTROID - 775))
      | (1ULL << (MySqlParser::ST_CONTAINS - 775))
      | (1ULL << (MySqlParser::ST_CROSSES - 775))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
      | (1ULL << (MySqlParser::ST_DIMENSION - 775))
      | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
      | (1ULL << (MySqlParser::ST_EQUALS - 839))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POINTN - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_SRID - 839))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
      | (1ULL << (MySqlParser::ST_TOUCHES - 839))
      | (1ULL << (MySqlParser::ST_UNION - 839))
      | (1ULL << (MySqlParser::ST_WITHIN - 839))
      | (1ULL << (MySqlParser::ST_X - 839))
      | (1ULL << (MySqlParser::ST_Y - 839))
      | (1ULL << (MySqlParser::SUBDATE - 839))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
      | (1ULL << (MySqlParser::SUBTIME - 839))
      | (1ULL << (MySqlParser::SYSTEM_USER - 839))
      | (1ULL << (MySqlParser::TAN - 839))
      | (1ULL << (MySqlParser::TIMEDIFF - 839))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
      | (1ULL << (MySqlParser::TIME_FORMAT - 839))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
      | (1ULL << (MySqlParser::TOUCHES - 839))
      | (1ULL << (MySqlParser::TO_BASE64 - 839))
      | (1ULL << (MySqlParser::TO_DAYS - 839))
      | (1ULL << (MySqlParser::TO_SECONDS - 839))
      | (1ULL << (MySqlParser::UCASE - 839))
      | (1ULL << (MySqlParser::UNCOMPRESS - 839))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
      | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
      | (1ULL << (MySqlParser::UPDATEXML - 903))
      | (1ULL << (MySqlParser::UPPER - 903))
      | (1ULL << (MySqlParser::UUID - 903))
      | (1ULL << (MySqlParser::UUID_SHORT - 903))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
      | (1ULL << (MySqlParser::VERSION - 903))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
      | (1ULL << (MySqlParser::WEEKDAY - 903))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
      | (1ULL << (MySqlParser::WITHIN - 903))
      | (1ULL << (MySqlParser::YEARWEEK - 903))
      | (1ULL << (MySqlParser::Y_FUNCTION - 903))
      | (1ULL << (MySqlParser::X_FUNCTION - 903))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
      | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
      setState(2956);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(2955);
        match(MySqlParser::AS);
      }
      setState(2958);
      id_();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_read_index_statementContext ------------------------------------------------------------------

MySqlParser::Handler_read_index_statementContext::Handler_read_index_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Handler_read_index_statementContext::HANDLER() {
  return getToken(MySqlParser::HANDLER, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Handler_read_index_statementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Handler_read_index_statementContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

MySqlParser::Full_idContext* MySqlParser::Handler_read_index_statementContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

MySqlParser::Comparison_operatorContext* MySqlParser::Handler_read_index_statementContext::comparison_operator() {
  return getRuleContext<MySqlParser::Comparison_operatorContext>(0);
}

MySqlParser::Constant_listContext* MySqlParser::Handler_read_index_statementContext::constant_list() {
  return getRuleContext<MySqlParser::Constant_listContext>(0);
}

tree::TerminalNode* MySqlParser::Handler_read_index_statementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Handler_read_index_statementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::Handler_read_index_statementContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::Handler_read_index_statementContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

tree::TerminalNode* MySqlParser::Handler_read_index_statementContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::Handler_read_index_statementContext::NEXT() {
  return getToken(MySqlParser::NEXT, 0);
}

tree::TerminalNode* MySqlParser::Handler_read_index_statementContext::PREV() {
  return getToken(MySqlParser::PREV, 0);
}

tree::TerminalNode* MySqlParser::Handler_read_index_statementContext::LAST() {
  return getToken(MySqlParser::LAST, 0);
}


size_t MySqlParser::Handler_read_index_statementContext::getRuleIndex() const {
  return MySqlParser::RuleHandler_read_index_statement;
}

void MySqlParser::Handler_read_index_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_read_index_statement(this);
}

void MySqlParser::Handler_read_index_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_read_index_statement(this);
}

MySqlParser::Handler_read_index_statementContext* MySqlParser::handler_read_index_statement() {
  Handler_read_index_statementContext *_localctx = _tracker.createInstance<Handler_read_index_statementContext>(_ctx, getState());
  enterRule(_localctx, 184, MySqlParser::RuleHandler_read_index_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2961);
    match(MySqlParser::HANDLER);
    setState(2962);
    table_name();
    setState(2963);
    match(MySqlParser::READ);
    setState(2964);
    dynamic_cast<Handler_read_index_statementContext *>(_localctx)->index = full_id();
    setState(2971);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::EQUAL_SYMBOL:
      case MySqlParser::GREATER_SYMBOL:
      case MySqlParser::LESS_SYMBOL:
      case MySqlParser::EXCLAMATION_SYMBOL: {
        setState(2965);
        comparison_operator();
        setState(2966);
        match(MySqlParser::LR_BRACKET);
        setState(2967);
        constant_list();
        setState(2968);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::FIRST:
      case MySqlParser::LAST:
      case MySqlParser::NEXT:
      case MySqlParser::PREV: {
        setState(2970);
        dynamic_cast<Handler_read_index_statementContext *>(_localctx)->move_order = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FIRST

        || _la == MySqlParser::LAST || _la == MySqlParser::NEXT

        || _la == MySqlParser::PREV)) {
          dynamic_cast<Handler_read_index_statementContext *>(_localctx)->move_order = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2975);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(2973);
      match(MySqlParser::WHERE);
      setState(2974);
      expression(0);
    }
    setState(2979);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LIMIT) {
      setState(2977);
      match(MySqlParser::LIMIT);
      setState(2978);
      decimal_literal();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_read_statementContext ------------------------------------------------------------------

MySqlParser::Handler_read_statementContext::Handler_read_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Handler_read_statementContext::HANDLER() {
  return getToken(MySqlParser::HANDLER, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Handler_read_statementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Handler_read_statementContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::Handler_read_statementContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::Handler_read_statementContext::NEXT() {
  return getToken(MySqlParser::NEXT, 0);
}

tree::TerminalNode* MySqlParser::Handler_read_statementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Handler_read_statementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::Handler_read_statementContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::Handler_read_statementContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}


size_t MySqlParser::Handler_read_statementContext::getRuleIndex() const {
  return MySqlParser::RuleHandler_read_statement;
}

void MySqlParser::Handler_read_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_read_statement(this);
}

void MySqlParser::Handler_read_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_read_statement(this);
}

MySqlParser::Handler_read_statementContext* MySqlParser::handler_read_statement() {
  Handler_read_statementContext *_localctx = _tracker.createInstance<Handler_read_statementContext>(_ctx, getState());
  enterRule(_localctx, 186, MySqlParser::RuleHandler_read_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2981);
    match(MySqlParser::HANDLER);
    setState(2982);
    table_name();
    setState(2983);
    match(MySqlParser::READ);
    setState(2984);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::FIRST || _la == MySqlParser::NEXT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2987);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(2985);
      match(MySqlParser::WHERE);
      setState(2986);
      expression(0);
    }
    setState(2991);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LIMIT) {
      setState(2989);
      match(MySqlParser::LIMIT);
      setState(2990);
      decimal_literal();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_close_statementContext ------------------------------------------------------------------

MySqlParser::Handler_close_statementContext::Handler_close_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Handler_close_statementContext::HANDLER() {
  return getToken(MySqlParser::HANDLER, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Handler_close_statementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Handler_close_statementContext::CLOSE() {
  return getToken(MySqlParser::CLOSE, 0);
}


size_t MySqlParser::Handler_close_statementContext::getRuleIndex() const {
  return MySqlParser::RuleHandler_close_statement;
}

void MySqlParser::Handler_close_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_close_statement(this);
}

void MySqlParser::Handler_close_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_close_statement(this);
}

MySqlParser::Handler_close_statementContext* MySqlParser::handler_close_statement() {
  Handler_close_statementContext *_localctx = _tracker.createInstance<Handler_close_statementContext>(_ctx, getState());
  enterRule(_localctx, 188, MySqlParser::RuleHandler_close_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2993);
    match(MySqlParser::HANDLER);
    setState(2994);
    table_name();
    setState(2995);
    match(MySqlParser::CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_update_statementContext ------------------------------------------------------------------

MySqlParser::Single_update_statementContext::Single_update_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Single_update_statementContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

MySqlParser::Table_nameContext* MySqlParser::Single_update_statementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Single_update_statementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

std::vector<MySqlParser::Update_elemContext *> MySqlParser::Single_update_statementContext::update_elem() {
  return getRuleContexts<MySqlParser::Update_elemContext>();
}

MySqlParser::Update_elemContext* MySqlParser::Single_update_statementContext::update_elem(size_t i) {
  return getRuleContext<MySqlParser::Update_elemContext>(i);
}

tree::TerminalNode* MySqlParser::Single_update_statementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::Single_update_statementContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

MySqlParser::Id_Context* MySqlParser::Single_update_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Single_update_statementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Single_update_statementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::Order_by_clauseContext* MySqlParser::Single_update_statementContext::order_by_clause() {
  return getRuleContext<MySqlParser::Order_by_clauseContext>(0);
}

MySqlParser::Limit_clauseContext* MySqlParser::Single_update_statementContext::limit_clause() {
  return getRuleContext<MySqlParser::Limit_clauseContext>(0);
}

tree::TerminalNode* MySqlParser::Single_update_statementContext::AS() {
  return getToken(MySqlParser::AS, 0);
}


size_t MySqlParser::Single_update_statementContext::getRuleIndex() const {
  return MySqlParser::RuleSingle_update_statement;
}

void MySqlParser::Single_update_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingle_update_statement(this);
}

void MySqlParser::Single_update_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingle_update_statement(this);
}

MySqlParser::Single_update_statementContext* MySqlParser::single_update_statement() {
  Single_update_statementContext *_localctx = _tracker.createInstance<Single_update_statementContext>(_ctx, getState());
  enterRule(_localctx, 190, MySqlParser::RuleSingle_update_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2997);
    match(MySqlParser::UPDATE);
    setState(2999);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY) {
      setState(2998);
      match(MySqlParser::LOW_PRIORITY);
    }
    setState(3002);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(3001);
      match(MySqlParser::IGNORE);
    }
    setState(3004);
    table_name();
    setState(3009);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::AS || _la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519))
      | (1ULL << (MySqlParser::QUARTER - 519))
      | (1ULL << (MySqlParser::MONTH - 519))
      | (1ULL << (MySqlParser::DAY - 519))
      | (1ULL << (MySqlParser::HOUR - 519))
      | (1ULL << (MySqlParser::MINUTE - 519))
      | (1ULL << (MySqlParser::WEEK - 519))
      | (1ULL << (MySqlParser::SECOND - 519))
      | (1ULL << (MySqlParser::MICROSECOND - 519))
      | (1ULL << (MySqlParser::TABLES - 519))
      | (1ULL << (MySqlParser::ROUTINE - 519))
      | (1ULL << (MySqlParser::EXECUTE - 519))
      | (1ULL << (MySqlParser::FILE - 519))
      | (1ULL << (MySqlParser::PROCESS - 519))
      | (1ULL << (MySqlParser::RELOAD - 519))
      | (1ULL << (MySqlParser::SHUTDOWN - 519))
      | (1ULL << (MySqlParser::SUPER - 519))
      | (1ULL << (MySqlParser::PRIVILEGES - 519))
      | (1ULL << (MySqlParser::ARMSCII8 - 519))
      | (1ULL << (MySqlParser::ASCII - 519))
      | (1ULL << (MySqlParser::BIG5 - 519))
      | (1ULL << (MySqlParser::CP1250 - 519))
      | (1ULL << (MySqlParser::CP1251 - 519))
      | (1ULL << (MySqlParser::CP1256 - 519))
      | (1ULL << (MySqlParser::CP1257 - 519))
      | (1ULL << (MySqlParser::CP850 - 519))
      | (1ULL << (MySqlParser::CP852 - 519))
      | (1ULL << (MySqlParser::CP866 - 519))
      | (1ULL << (MySqlParser::CP932 - 519))
      | (1ULL << (MySqlParser::DEC8 - 519))
      | (1ULL << (MySqlParser::EUCJPMS - 519))
      | (1ULL << (MySqlParser::EUCKR - 519))
      | (1ULL << (MySqlParser::GB2312 - 519))
      | (1ULL << (MySqlParser::GBK - 519))
      | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
      | (1ULL << (MySqlParser::HEBREW - 583))
      | (1ULL << (MySqlParser::HP8 - 583))
      | (1ULL << (MySqlParser::KEYBCS2 - 583))
      | (1ULL << (MySqlParser::KOI8R - 583))
      | (1ULL << (MySqlParser::KOI8U - 583))
      | (1ULL << (MySqlParser::LATIN1 - 583))
      | (1ULL << (MySqlParser::LATIN2 - 583))
      | (1ULL << (MySqlParser::LATIN5 - 583))
      | (1ULL << (MySqlParser::LATIN7 - 583))
      | (1ULL << (MySqlParser::MACCE - 583))
      | (1ULL << (MySqlParser::MACROMAN - 583))
      | (1ULL << (MySqlParser::SJIS - 583))
      | (1ULL << (MySqlParser::SWE7 - 583))
      | (1ULL << (MySqlParser::TIS620 - 583))
      | (1ULL << (MySqlParser::UCS2 - 583))
      | (1ULL << (MySqlParser::UJIS - 583))
      | (1ULL << (MySqlParser::UTF16 - 583))
      | (1ULL << (MySqlParser::UTF16LE - 583))
      | (1ULL << (MySqlParser::UTF32 - 583))
      | (1ULL << (MySqlParser::UTF8 - 583))
      | (1ULL << (MySqlParser::UTF8MB3 - 583))
      | (1ULL << (MySqlParser::UTF8MB4 - 583))
      | (1ULL << (MySqlParser::ARCHIVE - 583))
      | (1ULL << (MySqlParser::BLACKHOLE - 583))
      | (1ULL << (MySqlParser::CSV - 583))
      | (1ULL << (MySqlParser::FEDERATED - 583))
      | (1ULL << (MySqlParser::INNODB - 583))
      | (1ULL << (MySqlParser::MEMORY - 583))
      | (1ULL << (MySqlParser::MRG_MYISAM - 583))
      | (1ULL << (MySqlParser::MYISAM - 583))
      | (1ULL << (MySqlParser::NDB - 583))
      | (1ULL << (MySqlParser::NDBCLUSTER - 583))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
      | (1ULL << (MySqlParser::REPEATABLE - 583))
      | (1ULL << (MySqlParser::COMMITTED - 583))
      | (1ULL << (MySqlParser::UNCOMMITTED - 583))
      | (1ULL << (MySqlParser::SERIALIZABLE - 583))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
      | (1ULL << (MySqlParser::LINESTRING - 583))
      | (1ULL << (MySqlParser::MULTILINESTRING - 583))
      | (1ULL << (MySqlParser::MULTIPOINT - 583))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
      | (1ULL << (MySqlParser::POINT - 583))
      | (1ULL << (MySqlParser::POLYGON - 583))
      | (1ULL << (MySqlParser::ABS - 583))
      | (1ULL << (MySqlParser::ACOS - 583))
      | (1ULL << (MySqlParser::ADDDATE - 583))
      | (1ULL << (MySqlParser::ADDTIME - 583))
      | (1ULL << (MySqlParser::AES_DECRYPT - 583))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
      | (1ULL << (MySqlParser::AREA - 583))
      | (1ULL << (MySqlParser::ASBINARY - 583))
      | (1ULL << (MySqlParser::ASIN - 583))
      | (1ULL << (MySqlParser::ASTEXT - 583))
      | (1ULL << (MySqlParser::ASWKB - 583))
      | (1ULL << (MySqlParser::ASWKT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
      | (1ULL << (MySqlParser::ATAN - 583))
      | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
      | (1ULL << (MySqlParser::BIN - 647))
      | (1ULL << (MySqlParser::BIT_COUNT - 647))
      | (1ULL << (MySqlParser::BIT_LENGTH - 647))
      | (1ULL << (MySqlParser::BUFFER - 647))
      | (1ULL << (MySqlParser::CEIL - 647))
      | (1ULL << (MySqlParser::CEILING - 647))
      | (1ULL << (MySqlParser::CENTROID - 647))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
      | (1ULL << (MySqlParser::CHARSET - 647))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
      | (1ULL << (MySqlParser::COERCIBILITY - 647))
      | (1ULL << (MySqlParser::COLLATION - 647))
      | (1ULL << (MySqlParser::COMPRESS - 647))
      | (1ULL << (MySqlParser::CONCAT - 647))
      | (1ULL << (MySqlParser::CONCAT_WS - 647))
      | (1ULL << (MySqlParser::CONNECTION_ID - 647))
      | (1ULL << (MySqlParser::CONV - 647))
      | (1ULL << (MySqlParser::CONVERT_TZ - 647))
      | (1ULL << (MySqlParser::COS - 647))
      | (1ULL << (MySqlParser::COT - 647))
      | (1ULL << (MySqlParser::CRC32 - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
      | (1ULL << (MySqlParser::CROSSES - 647))
      | (1ULL << (MySqlParser::DATEDIFF - 647))
      | (1ULL << (MySqlParser::DATE_FORMAT - 647))
      | (1ULL << (MySqlParser::DAYNAME - 647))
      | (1ULL << (MySqlParser::DAYOFMONTH - 647))
      | (1ULL << (MySqlParser::DAYOFWEEK - 647))
      | (1ULL << (MySqlParser::DAYOFYEAR - 647))
      | (1ULL << (MySqlParser::DECODE - 647))
      | (1ULL << (MySqlParser::DEGREES - 647))
      | (1ULL << (MySqlParser::DES_DECRYPT - 647))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
      | (1ULL << (MySqlParser::DIMENSION - 647))
      | (1ULL << (MySqlParser::DISJOINT - 647))
      | (1ULL << (MySqlParser::ELT - 647))
      | (1ULL << (MySqlParser::ENCODE - 647))
      | (1ULL << (MySqlParser::ENCRYPT - 647))
      | (1ULL << (MySqlParser::ENDPOINT - 647))
      | (1ULL << (MySqlParser::ENVELOPE - 647))
      | (1ULL << (MySqlParser::EQUALS - 647))
      | (1ULL << (MySqlParser::EXP - 647))
      | (1ULL << (MySqlParser::EXPORT_SET - 647))
      | (1ULL << (MySqlParser::EXTERIORRING - 647))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
      | (1ULL << (MySqlParser::FIELD - 647))
      | (1ULL << (MySqlParser::FIND_IN_SET - 647))
      | (1ULL << (MySqlParser::FLOOR - 647))
      | (1ULL << (MySqlParser::FORMAT - 647))
      | (1ULL << (MySqlParser::FOUND_ROWS - 647))
      | (1ULL << (MySqlParser::FROM_BASE64 - 647))
      | (1ULL << (MySqlParser::FROM_DAYS - 647))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
      | (1ULL << (MySqlParser::GET_FORMAT - 711))
      | (1ULL << (MySqlParser::GET_LOCK - 711))
      | (1ULL << (MySqlParser::GLENGTH - 711))
      | (1ULL << (MySqlParser::GREATEST - 711))
      | (1ULL << (MySqlParser::GTID_SUBSET - 711))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
      | (1ULL << (MySqlParser::HEX - 711))
      | (1ULL << (MySqlParser::IFNULL - 711))
      | (1ULL << (MySqlParser::INET6_ATON - 711))
      | (1ULL << (MySqlParser::INET6_NTOA - 711))
      | (1ULL << (MySqlParser::INET_ATON - 711))
      | (1ULL << (MySqlParser::INET_NTOA - 711))
      | (1ULL << (MySqlParser::INSTR - 711))
      | (1ULL << (MySqlParser::INTERIORRINGN - 711))
      | (1ULL << (MySqlParser::INTERSECTS - 711))
      | (1ULL << (MySqlParser::ISCLOSED - 711))
      | (1ULL << (MySqlParser::ISEMPTY - 711))
      | (1ULL << (MySqlParser::ISNULL - 711))
      | (1ULL << (MySqlParser::ISSIMPLE - 711))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
      | (1ULL << (MySqlParser::IS_IPV4 - 711))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
      | (1ULL << (MySqlParser::IS_IPV6 - 711))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
      | (1ULL << (MySqlParser::LCASE - 711))
      | (1ULL << (MySqlParser::LEAST - 711))
      | (1ULL << (MySqlParser::LENGTH - 711))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINEFROMWKB - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
      | (1ULL << (MySqlParser::LN - 711))
      | (1ULL << (MySqlParser::LOAD_FILE - 711))
      | (1ULL << (MySqlParser::LOCATE - 711))
      | (1ULL << (MySqlParser::LOG - 711))
      | (1ULL << (MySqlParser::LOG10 - 711))
      | (1ULL << (MySqlParser::LOG2 - 711))
      | (1ULL << (MySqlParser::LOWER - 711))
      | (1ULL << (MySqlParser::LPAD - 711))
      | (1ULL << (MySqlParser::LTRIM - 711))
      | (1ULL << (MySqlParser::MAKEDATE - 711))
      | (1ULL << (MySqlParser::MAKETIME - 711))
      | (1ULL << (MySqlParser::MAKE_SET - 711))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
      | (1ULL << (MySqlParser::MBRCONTAINS - 711))
      | (1ULL << (MySqlParser::MBRDISJOINT - 711))
      | (1ULL << (MySqlParser::MBREQUAL - 711))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
      | (1ULL << (MySqlParser::MBROVERLAPS - 711))
      | (1ULL << (MySqlParser::MBRTOUCHES - 711))
      | (1ULL << (MySqlParser::MBRWITHIN - 711))
      | (1ULL << (MySqlParser::MD5 - 711))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
      | (1ULL << (MySqlParser::MONTHNAME - 711))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::NAME_CONST - 775))
      | (1ULL << (MySqlParser::NULLIF - 775))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
      | (1ULL << (MySqlParser::NUMPOINTS - 775))
      | (1ULL << (MySqlParser::OCT - 775))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
      | (1ULL << (MySqlParser::ORD - 775))
      | (1ULL << (MySqlParser::OVERLAPS - 775))
      | (1ULL << (MySqlParser::PERIOD_ADD - 775))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
      | (1ULL << (MySqlParser::PI - 775))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::POINTFROMWKB - 775))
      | (1ULL << (MySqlParser::POINTN - 775))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYFROMWKB - 775))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::POW - 775))
      | (1ULL << (MySqlParser::POWER - 775))
      | (1ULL << (MySqlParser::QUOTE - 775))
      | (1ULL << (MySqlParser::RADIANS - 775))
      | (1ULL << (MySqlParser::RAND - 775))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
      | (1ULL << (MySqlParser::REVERSE - 775))
      | (1ULL << (MySqlParser::ROUND - 775))
      | (1ULL << (MySqlParser::ROW_COUNT - 775))
      | (1ULL << (MySqlParser::RPAD - 775))
      | (1ULL << (MySqlParser::RTRIM - 775))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
      | (1ULL << (MySqlParser::SESSION_USER - 775))
      | (1ULL << (MySqlParser::SHA - 775))
      | (1ULL << (MySqlParser::SHA1 - 775))
      | (1ULL << (MySqlParser::SHA2 - 775))
      | (1ULL << (MySqlParser::SIGN - 775))
      | (1ULL << (MySqlParser::SIN - 775))
      | (1ULL << (MySqlParser::SLEEP - 775))
      | (1ULL << (MySqlParser::SOUNDEX - 775))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
      | (1ULL << (MySqlParser::SQRT - 775))
      | (1ULL << (MySqlParser::SRID - 775))
      | (1ULL << (MySqlParser::STARTPOINT - 775))
      | (1ULL << (MySqlParser::STRCMP - 775))
      | (1ULL << (MySqlParser::STR_TO_DATE - 775))
      | (1ULL << (MySqlParser::ST_AREA - 775))
      | (1ULL << (MySqlParser::ST_ASBINARY - 775))
      | (1ULL << (MySqlParser::ST_ASTEXT - 775))
      | (1ULL << (MySqlParser::ST_ASWKB - 775))
      | (1ULL << (MySqlParser::ST_ASWKT - 775))
      | (1ULL << (MySqlParser::ST_BUFFER - 775))
      | (1ULL << (MySqlParser::ST_CENTROID - 775))
      | (1ULL << (MySqlParser::ST_CONTAINS - 775))
      | (1ULL << (MySqlParser::ST_CROSSES - 775))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
      | (1ULL << (MySqlParser::ST_DIMENSION - 775))
      | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
      | (1ULL << (MySqlParser::ST_EQUALS - 839))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POINTN - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_SRID - 839))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
      | (1ULL << (MySqlParser::ST_TOUCHES - 839))
      | (1ULL << (MySqlParser::ST_UNION - 839))
      | (1ULL << (MySqlParser::ST_WITHIN - 839))
      | (1ULL << (MySqlParser::ST_X - 839))
      | (1ULL << (MySqlParser::ST_Y - 839))
      | (1ULL << (MySqlParser::SUBDATE - 839))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
      | (1ULL << (MySqlParser::SUBTIME - 839))
      | (1ULL << (MySqlParser::SYSTEM_USER - 839))
      | (1ULL << (MySqlParser::TAN - 839))
      | (1ULL << (MySqlParser::TIMEDIFF - 839))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
      | (1ULL << (MySqlParser::TIME_FORMAT - 839))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
      | (1ULL << (MySqlParser::TOUCHES - 839))
      | (1ULL << (MySqlParser::TO_BASE64 - 839))
      | (1ULL << (MySqlParser::TO_DAYS - 839))
      | (1ULL << (MySqlParser::TO_SECONDS - 839))
      | (1ULL << (MySqlParser::UCASE - 839))
      | (1ULL << (MySqlParser::UNCOMPRESS - 839))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
      | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
      | (1ULL << (MySqlParser::UPDATEXML - 903))
      | (1ULL << (MySqlParser::UPPER - 903))
      | (1ULL << (MySqlParser::UUID - 903))
      | (1ULL << (MySqlParser::UUID_SHORT - 903))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
      | (1ULL << (MySqlParser::VERSION - 903))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
      | (1ULL << (MySqlParser::WEEKDAY - 903))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
      | (1ULL << (MySqlParser::WITHIN - 903))
      | (1ULL << (MySqlParser::YEARWEEK - 903))
      | (1ULL << (MySqlParser::Y_FUNCTION - 903))
      | (1ULL << (MySqlParser::X_FUNCTION - 903))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
      | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
      setState(3006);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(3005);
        match(MySqlParser::AS);
      }
      setState(3008);
      id_();
    }
    setState(3011);
    match(MySqlParser::SET);
    setState(3012);
    update_elem();
    setState(3017);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3013);
      match(MySqlParser::COMMA);
      setState(3014);
      update_elem();
      setState(3019);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3022);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(3020);
      match(MySqlParser::WHERE);
      setState(3021);
      expression(0);
    }
    setState(3025);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ORDER) {
      setState(3024);
      order_by_clause();
    }
    setState(3028);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LIMIT) {
      setState(3027);
      limit_clause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiple_update_statementContext ------------------------------------------------------------------

MySqlParser::Multiple_update_statementContext::Multiple_update_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Multiple_update_statementContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

MySqlParser::Table_sourcesContext* MySqlParser::Multiple_update_statementContext::table_sources() {
  return getRuleContext<MySqlParser::Table_sourcesContext>(0);
}

tree::TerminalNode* MySqlParser::Multiple_update_statementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

std::vector<MySqlParser::Update_elemContext *> MySqlParser::Multiple_update_statementContext::update_elem() {
  return getRuleContexts<MySqlParser::Update_elemContext>();
}

MySqlParser::Update_elemContext* MySqlParser::Multiple_update_statementContext::update_elem(size_t i) {
  return getRuleContext<MySqlParser::Update_elemContext>(i);
}

tree::TerminalNode* MySqlParser::Multiple_update_statementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::Multiple_update_statementContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::Multiple_update_statementContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Multiple_update_statementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::Multiple_update_statementContext::getRuleIndex() const {
  return MySqlParser::RuleMultiple_update_statement;
}

void MySqlParser::Multiple_update_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiple_update_statement(this);
}

void MySqlParser::Multiple_update_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiple_update_statement(this);
}

MySqlParser::Multiple_update_statementContext* MySqlParser::multiple_update_statement() {
  Multiple_update_statementContext *_localctx = _tracker.createInstance<Multiple_update_statementContext>(_ctx, getState());
  enterRule(_localctx, 192, MySqlParser::RuleMultiple_update_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3030);
    match(MySqlParser::UPDATE);
    setState(3032);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LOW_PRIORITY) {
      setState(3031);
      match(MySqlParser::LOW_PRIORITY);
    }
    setState(3035);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(3034);
      match(MySqlParser::IGNORE);
    }
    setState(3037);
    table_sources();
    setState(3038);
    match(MySqlParser::SET);
    setState(3039);
    update_elem();
    setState(3044);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3040);
      match(MySqlParser::COMMA);
      setState(3041);
      update_elem();
      setState(3046);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3049);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(3047);
      match(MySqlParser::WHERE);
      setState(3048);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Order_by_clauseContext ------------------------------------------------------------------

MySqlParser::Order_by_clauseContext::Order_by_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Order_by_clauseContext::ORDER() {
  return getToken(MySqlParser::ORDER, 0);
}

tree::TerminalNode* MySqlParser::Order_by_clauseContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

std::vector<MySqlParser::Order_by_expressionContext *> MySqlParser::Order_by_clauseContext::order_by_expression() {
  return getRuleContexts<MySqlParser::Order_by_expressionContext>();
}

MySqlParser::Order_by_expressionContext* MySqlParser::Order_by_clauseContext::order_by_expression(size_t i) {
  return getRuleContext<MySqlParser::Order_by_expressionContext>(i);
}


size_t MySqlParser::Order_by_clauseContext::getRuleIndex() const {
  return MySqlParser::RuleOrder_by_clause;
}

void MySqlParser::Order_by_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrder_by_clause(this);
}

void MySqlParser::Order_by_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrder_by_clause(this);
}

MySqlParser::Order_by_clauseContext* MySqlParser::order_by_clause() {
  Order_by_clauseContext *_localctx = _tracker.createInstance<Order_by_clauseContext>(_ctx, getState());
  enterRule(_localctx, 194, MySqlParser::RuleOrder_by_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3051);
    match(MySqlParser::ORDER);
    setState(3052);
    match(MySqlParser::BY);
    setState(3053);
    order_by_expression();
    setState(3058);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3054);
      match(MySqlParser::COMMA);
      setState(3055);
      order_by_expression();
      setState(3060);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Order_by_expressionContext ------------------------------------------------------------------

MySqlParser::Order_by_expressionContext::Order_by_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::ExpressionContext* MySqlParser::Order_by_expressionContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::Order_by_expressionContext::ASC() {
  return getToken(MySqlParser::ASC, 0);
}

tree::TerminalNode* MySqlParser::Order_by_expressionContext::DESC() {
  return getToken(MySqlParser::DESC, 0);
}


size_t MySqlParser::Order_by_expressionContext::getRuleIndex() const {
  return MySqlParser::RuleOrder_by_expression;
}

void MySqlParser::Order_by_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrder_by_expression(this);
}

void MySqlParser::Order_by_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrder_by_expression(this);
}

MySqlParser::Order_by_expressionContext* MySqlParser::order_by_expression() {
  Order_by_expressionContext *_localctx = _tracker.createInstance<Order_by_expressionContext>(_ctx, getState());
  enterRule(_localctx, 196, MySqlParser::RuleOrder_by_expression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3061);
    expression(0);
    setState(3063);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ASC

    || _la == MySqlParser::DESC) {
      setState(3062);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ASC

      || _la == MySqlParser::DESC)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_sourcesContext ------------------------------------------------------------------

MySqlParser::Table_sourcesContext::Table_sourcesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Table_sourceContext *> MySqlParser::Table_sourcesContext::table_source() {
  return getRuleContexts<MySqlParser::Table_sourceContext>();
}

MySqlParser::Table_sourceContext* MySqlParser::Table_sourcesContext::table_source(size_t i) {
  return getRuleContext<MySqlParser::Table_sourceContext>(i);
}


size_t MySqlParser::Table_sourcesContext::getRuleIndex() const {
  return MySqlParser::RuleTable_sources;
}

void MySqlParser::Table_sourcesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_sources(this);
}

void MySqlParser::Table_sourcesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_sources(this);
}

MySqlParser::Table_sourcesContext* MySqlParser::table_sources() {
  Table_sourcesContext *_localctx = _tracker.createInstance<Table_sourcesContext>(_ctx, getState());
  enterRule(_localctx, 198, MySqlParser::RuleTable_sources);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3065);
    table_source();
    setState(3070);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3066);
      match(MySqlParser::COMMA);
      setState(3067);
      table_source();
      setState(3072);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_sourceContext ------------------------------------------------------------------

MySqlParser::Table_sourceContext::Table_sourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Table_source_itemContext* MySqlParser::Table_sourceContext::table_source_item() {
  return getRuleContext<MySqlParser::Table_source_itemContext>(0);
}

std::vector<MySqlParser::Join_partContext *> MySqlParser::Table_sourceContext::join_part() {
  return getRuleContexts<MySqlParser::Join_partContext>();
}

MySqlParser::Join_partContext* MySqlParser::Table_sourceContext::join_part(size_t i) {
  return getRuleContext<MySqlParser::Join_partContext>(i);
}


size_t MySqlParser::Table_sourceContext::getRuleIndex() const {
  return MySqlParser::RuleTable_source;
}

void MySqlParser::Table_sourceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_source(this);
}

void MySqlParser::Table_sourceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_source(this);
}

MySqlParser::Table_sourceContext* MySqlParser::table_source() {
  Table_sourceContext *_localctx = _tracker.createInstance<Table_sourceContext>(_ctx, getState());
  enterRule(_localctx, 200, MySqlParser::RuleTable_source);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3090);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 442, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3073);
      table_source_item();
      setState(3077);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 440, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3074);
          join_part(); 
        }
        setState(3079);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 440, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3080);
      match(MySqlParser::LR_BRACKET);
      setState(3081);
      table_source_item();
      setState(3085);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 30) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 30)) & ((1ULL << (MySqlParser::CROSS - 30))
        | (1ULL << (MySqlParser::INNER - 30))
        | (1ULL << (MySqlParser::JOIN - 30))
        | (1ULL << (MySqlParser::LEFT - 30)))) != 0) || ((((_la - 96) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 96)) & ((1ULL << (MySqlParser::NATURAL - 96))
        | (1ULL << (MySqlParser::RIGHT - 96))
        | (1ULL << (MySqlParser::STRAIGHT_JOIN - 96)))) != 0)) {
        setState(3082);
        join_part();
        setState(3087);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3088);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_source_itemContext ------------------------------------------------------------------

MySqlParser::Table_source_itemContext::Table_source_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Table_source_itemContext::getRuleIndex() const {
  return MySqlParser::RuleTable_source_item;
}

void MySqlParser::Table_source_itemContext::copyFrom(Table_source_itemContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SubqueryTableItemContext ------------------------------------------------------------------

MySqlParser::Id_Context* MySqlParser::SubqueryTableItemContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::SubqueryContext* MySqlParser::SubqueryTableItemContext::subquery() {
  return getRuleContext<MySqlParser::SubqueryContext>(0);
}

tree::TerminalNode* MySqlParser::SubqueryTableItemContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::SubqueryTableItemContext::SubqueryTableItemContext(Table_source_itemContext *ctx) { copyFrom(ctx); }

void MySqlParser::SubqueryTableItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubqueryTableItem(this);
}
void MySqlParser::SubqueryTableItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubqueryTableItem(this);
}
//----------------- AtomTableItemContext ------------------------------------------------------------------

MySqlParser::Table_nameContext* MySqlParser::AtomTableItemContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::AtomTableItemContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::AtomTableItemContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

std::vector<MySqlParser::Index_hintContext *> MySqlParser::AtomTableItemContext::index_hint() {
  return getRuleContexts<MySqlParser::Index_hintContext>();
}

MySqlParser::Index_hintContext* MySqlParser::AtomTableItemContext::index_hint(size_t i) {
  return getRuleContext<MySqlParser::Index_hintContext>(i);
}

MySqlParser::Id_Context* MySqlParser::AtomTableItemContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::AtomTableItemContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::AtomTableItemContext::AtomTableItemContext(Table_source_itemContext *ctx) { copyFrom(ctx); }

void MySqlParser::AtomTableItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtomTableItem(this);
}
void MySqlParser::AtomTableItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtomTableItem(this);
}
//----------------- TableSourcesItemContext ------------------------------------------------------------------

MySqlParser::Table_sourcesContext* MySqlParser::TableSourcesItemContext::table_sources() {
  return getRuleContext<MySqlParser::Table_sourcesContext>(0);
}

MySqlParser::TableSourcesItemContext::TableSourcesItemContext(Table_source_itemContext *ctx) { copyFrom(ctx); }

void MySqlParser::TableSourcesItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableSourcesItem(this);
}
void MySqlParser::TableSourcesItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableSourcesItem(this);
}
MySqlParser::Table_source_itemContext* MySqlParser::table_source_item() {
  Table_source_itemContext *_localctx = _tracker.createInstance<Table_source_itemContext>(_ctx, getState());
  enterRule(_localctx, 202, MySqlParser::RuleTable_source_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(3132);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 450, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Table_source_itemContext *>(_tracker.createInstance<MySqlParser::AtomTableItemContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3092);
      table_name();
      setState(3098);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::PARTITION) {
        setState(3093);
        match(MySqlParser::PARTITION);
        setState(3094);
        match(MySqlParser::LR_BRACKET);
        setState(3095);
        id_list();
        setState(3096);
        match(MySqlParser::RR_BRACKET);
      }
      setState(3104);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 445, _ctx)) {
      case 1: {
        setState(3101);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::AS) {
          setState(3100);
          match(MySqlParser::AS);
        }
        setState(3103);
        dynamic_cast<AtomTableItemContext *>(_localctx)->alias = id_();
        break;
      }

      }
      setState(3114);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FORCE

      || _la == MySqlParser::IGNORE || _la == MySqlParser::USE) {
        setState(3106);
        index_hint();
        setState(3111);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 446, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(3107);
            match(MySqlParser::COMMA);
            setState(3108);
            index_hint(); 
          }
          setState(3113);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 446, _ctx);
        }
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Table_source_itemContext *>(_tracker.createInstance<MySqlParser::SubqueryTableItemContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3121);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 448, _ctx)) {
      case 1: {
        setState(3116);
        subquery();
        break;
      }

      case 2: {
        setState(3117);
        match(MySqlParser::LR_BRACKET);
        setState(3118);
        subquery();
        setState(3119);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      }
      setState(3124);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(3123);
        match(MySqlParser::AS);
      }
      setState(3126);
      dynamic_cast<SubqueryTableItemContext *>(_localctx)->alias = id_();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Table_source_itemContext *>(_tracker.createInstance<MySqlParser::TableSourcesItemContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(3128);
      match(MySqlParser::LR_BRACKET);
      setState(3129);
      table_sources();
      setState(3130);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_hintContext ------------------------------------------------------------------

MySqlParser::Index_hintContext::Index_hintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Id_listContext* MySqlParser::Index_hintContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::Index_hintContext::USE() {
  return getToken(MySqlParser::USE, 0);
}

tree::TerminalNode* MySqlParser::Index_hintContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::Index_hintContext::FORCE() {
  return getToken(MySqlParser::FORCE, 0);
}

tree::TerminalNode* MySqlParser::Index_hintContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::Index_hintContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}

tree::TerminalNode* MySqlParser::Index_hintContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::Index_hintContext::JOIN() {
  return getToken(MySqlParser::JOIN, 0);
}

tree::TerminalNode* MySqlParser::Index_hintContext::ORDER() {
  return getToken(MySqlParser::ORDER, 0);
}

tree::TerminalNode* MySqlParser::Index_hintContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

tree::TerminalNode* MySqlParser::Index_hintContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}


size_t MySqlParser::Index_hintContext::getRuleIndex() const {
  return MySqlParser::RuleIndex_hint;
}

void MySqlParser::Index_hintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_hint(this);
}

void MySqlParser::Index_hintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_hint(this);
}

MySqlParser::Index_hintContext* MySqlParser::index_hint() {
  Index_hintContext *_localctx = _tracker.createInstance<Index_hintContext>(_ctx, getState());
  enterRule(_localctx, 204, MySqlParser::RuleIndex_hint);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3134);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::FORCE

    || _la == MySqlParser::IGNORE || _la == MySqlParser::USE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3135);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::INDEX

    || _la == MySqlParser::KEY)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3144);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FOR) {
      setState(3136);
      match(MySqlParser::FOR);
      setState(3142);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::JOIN: {
          setState(3137);
          match(MySqlParser::JOIN);
          break;
        }

        case MySqlParser::ORDER: {
          setState(3138);
          match(MySqlParser::ORDER);
          setState(3139);
          match(MySqlParser::BY);
          break;
        }

        case MySqlParser::GROUP: {
          setState(3140);
          match(MySqlParser::GROUP);
          setState(3141);
          match(MySqlParser::BY);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
    }
    setState(3146);
    match(MySqlParser::LR_BRACKET);
    setState(3147);
    id_list();
    setState(3148);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Join_partContext ------------------------------------------------------------------

MySqlParser::Join_partContext::Join_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Join_partContext::getRuleIndex() const {
  return MySqlParser::RuleJoin_part;
}

void MySqlParser::Join_partContext::copyFrom(Join_partContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- InnerJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::InnerJoinContext::JOIN() {
  return getToken(MySqlParser::JOIN, 0);
}

MySqlParser::Table_source_itemContext* MySqlParser::InnerJoinContext::table_source_item() {
  return getRuleContext<MySqlParser::Table_source_itemContext>(0);
}

tree::TerminalNode* MySqlParser::InnerJoinContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::ExpressionContext* MySqlParser::InnerJoinContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::InnerJoinContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

MySqlParser::Id_listContext* MySqlParser::InnerJoinContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::InnerJoinContext::INNER() {
  return getToken(MySqlParser::INNER, 0);
}

tree::TerminalNode* MySqlParser::InnerJoinContext::CROSS() {
  return getToken(MySqlParser::CROSS, 0);
}

MySqlParser::InnerJoinContext::InnerJoinContext(Join_partContext *ctx) { copyFrom(ctx); }

void MySqlParser::InnerJoinContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInnerJoin(this);
}
void MySqlParser::InnerJoinContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInnerJoin(this);
}
//----------------- NaturalJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::NaturalJoinContext::NATURAL() {
  return getToken(MySqlParser::NATURAL, 0);
}

tree::TerminalNode* MySqlParser::NaturalJoinContext::JOIN() {
  return getToken(MySqlParser::JOIN, 0);
}

MySqlParser::Table_source_itemContext* MySqlParser::NaturalJoinContext::table_source_item() {
  return getRuleContext<MySqlParser::Table_source_itemContext>(0);
}

tree::TerminalNode* MySqlParser::NaturalJoinContext::LEFT() {
  return getToken(MySqlParser::LEFT, 0);
}

tree::TerminalNode* MySqlParser::NaturalJoinContext::RIGHT() {
  return getToken(MySqlParser::RIGHT, 0);
}

tree::TerminalNode* MySqlParser::NaturalJoinContext::OUTER() {
  return getToken(MySqlParser::OUTER, 0);
}

MySqlParser::NaturalJoinContext::NaturalJoinContext(Join_partContext *ctx) { copyFrom(ctx); }

void MySqlParser::NaturalJoinContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNaturalJoin(this);
}
void MySqlParser::NaturalJoinContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNaturalJoin(this);
}
//----------------- OuterJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::OuterJoinContext::JOIN() {
  return getToken(MySqlParser::JOIN, 0);
}

MySqlParser::Table_source_itemContext* MySqlParser::OuterJoinContext::table_source_item() {
  return getRuleContext<MySqlParser::Table_source_itemContext>(0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::LEFT() {
  return getToken(MySqlParser::LEFT, 0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::RIGHT() {
  return getToken(MySqlParser::RIGHT, 0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::ExpressionContext* MySqlParser::OuterJoinContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

MySqlParser::Id_listContext* MySqlParser::OuterJoinContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::OuterJoinContext::OUTER() {
  return getToken(MySqlParser::OUTER, 0);
}

MySqlParser::OuterJoinContext::OuterJoinContext(Join_partContext *ctx) { copyFrom(ctx); }

void MySqlParser::OuterJoinContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOuterJoin(this);
}
void MySqlParser::OuterJoinContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOuterJoin(this);
}
//----------------- StraightJoinContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::StraightJoinContext::STRAIGHT_JOIN() {
  return getToken(MySqlParser::STRAIGHT_JOIN, 0);
}

MySqlParser::Table_source_itemContext* MySqlParser::StraightJoinContext::table_source_item() {
  return getRuleContext<MySqlParser::Table_source_itemContext>(0);
}

tree::TerminalNode* MySqlParser::StraightJoinContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::ExpressionContext* MySqlParser::StraightJoinContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::StraightJoinContext::StraightJoinContext(Join_partContext *ctx) { copyFrom(ctx); }

void MySqlParser::StraightJoinContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStraightJoin(this);
}
void MySqlParser::StraightJoinContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStraightJoin(this);
}
MySqlParser::Join_partContext* MySqlParser::join_part() {
  Join_partContext *_localctx = _tracker.createInstance<Join_partContext>(_ctx, getState());
  enterRule(_localctx, 206, MySqlParser::RuleJoin_part);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3194);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::CROSS:
      case MySqlParser::INNER:
      case MySqlParser::JOIN: {
        _localctx = dynamic_cast<Join_partContext *>(_tracker.createInstance<MySqlParser::InnerJoinContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(3151);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::CROSS

        || _la == MySqlParser::INNER) {
          setState(3150);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::CROSS

          || _la == MySqlParser::INNER)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(3153);
        match(MySqlParser::JOIN);
        setState(3154);
        table_source_item();
        setState(3162);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 454, _ctx)) {
        case 1: {
          setState(3155);
          match(MySqlParser::ON);
          setState(3156);
          expression(0);
          break;
        }

        case 2: {
          setState(3157);
          match(MySqlParser::USING);
          setState(3158);
          match(MySqlParser::LR_BRACKET);
          setState(3159);
          id_list();
          setState(3160);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        }
        break;
      }

      case MySqlParser::STRAIGHT_JOIN: {
        _localctx = dynamic_cast<Join_partContext *>(_tracker.createInstance<MySqlParser::StraightJoinContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(3164);
        match(MySqlParser::STRAIGHT_JOIN);
        setState(3165);
        table_source_item();
        setState(3168);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 455, _ctx)) {
        case 1: {
          setState(3166);
          match(MySqlParser::ON);
          setState(3167);
          expression(0);
          break;
        }

        }
        break;
      }

      case MySqlParser::LEFT:
      case MySqlParser::RIGHT: {
        _localctx = dynamic_cast<Join_partContext *>(_tracker.createInstance<MySqlParser::OuterJoinContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(3170);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3172);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::OUTER) {
          setState(3171);
          match(MySqlParser::OUTER);
        }
        setState(3174);
        match(MySqlParser::JOIN);
        setState(3175);
        table_source_item();
        setState(3183);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::ON: {
            setState(3176);
            match(MySqlParser::ON);
            setState(3177);
            expression(0);
            break;
          }

          case MySqlParser::USING: {
            setState(3178);
            match(MySqlParser::USING);
            setState(3179);
            match(MySqlParser::LR_BRACKET);
            setState(3180);
            id_list();
            setState(3181);
            match(MySqlParser::RR_BRACKET);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case MySqlParser::NATURAL: {
        _localctx = dynamic_cast<Join_partContext *>(_tracker.createInstance<MySqlParser::NaturalJoinContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(3185);
        match(MySqlParser::NATURAL);
        setState(3190);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT) {
          setState(3186);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::LEFT

          || _la == MySqlParser::RIGHT)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3188);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::OUTER) {
            setState(3187);
            match(MySqlParser::OUTER);
          }
        }
        setState(3192);
        match(MySqlParser::JOIN);
        setState(3193);
        table_source_item();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubqueryContext ------------------------------------------------------------------

MySqlParser::SubqueryContext::SubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Select_statementContext* MySqlParser::SubqueryContext::select_statement() {
  return getRuleContext<MySqlParser::Select_statementContext>(0);
}


size_t MySqlParser::SubqueryContext::getRuleIndex() const {
  return MySqlParser::RuleSubquery;
}

void MySqlParser::SubqueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubquery(this);
}

void MySqlParser::SubqueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubquery(this);
}

MySqlParser::SubqueryContext* MySqlParser::subquery() {
  SubqueryContext *_localctx = _tracker.createInstance<SubqueryContext>(_ctx, getState());
  enterRule(_localctx, 208, MySqlParser::RuleSubquery);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3196);
    select_statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_expressionContext ------------------------------------------------------------------

MySqlParser::Query_expressionContext::Query_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Query_specificationContext* MySqlParser::Query_expressionContext::query_specification() {
  return getRuleContext<MySqlParser::Query_specificationContext>(0);
}

MySqlParser::Query_expressionContext* MySqlParser::Query_expressionContext::query_expression() {
  return getRuleContext<MySqlParser::Query_expressionContext>(0);
}


size_t MySqlParser::Query_expressionContext::getRuleIndex() const {
  return MySqlParser::RuleQuery_expression;
}

void MySqlParser::Query_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_expression(this);
}

void MySqlParser::Query_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_expression(this);
}

MySqlParser::Query_expressionContext* MySqlParser::query_expression() {
  Query_expressionContext *_localctx = _tracker.createInstance<Query_expressionContext>(_ctx, getState());
  enterRule(_localctx, 210, MySqlParser::RuleQuery_expression);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3206);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 461, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3198);
      match(MySqlParser::LR_BRACKET);
      setState(3199);
      query_specification();
      setState(3200);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3202);
      match(MySqlParser::LR_BRACKET);
      setState(3203);
      query_expression();
      setState(3204);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_expression_nointoContext ------------------------------------------------------------------

MySqlParser::Query_expression_nointoContext::Query_expression_nointoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Query_specification_nointoContext* MySqlParser::Query_expression_nointoContext::query_specification_nointo() {
  return getRuleContext<MySqlParser::Query_specification_nointoContext>(0);
}

MySqlParser::Query_expression_nointoContext* MySqlParser::Query_expression_nointoContext::query_expression_nointo() {
  return getRuleContext<MySqlParser::Query_expression_nointoContext>(0);
}


size_t MySqlParser::Query_expression_nointoContext::getRuleIndex() const {
  return MySqlParser::RuleQuery_expression_nointo;
}

void MySqlParser::Query_expression_nointoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_expression_nointo(this);
}

void MySqlParser::Query_expression_nointoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_expression_nointo(this);
}

MySqlParser::Query_expression_nointoContext* MySqlParser::query_expression_nointo() {
  Query_expression_nointoContext *_localctx = _tracker.createInstance<Query_expression_nointoContext>(_ctx, getState());
  enterRule(_localctx, 212, MySqlParser::RuleQuery_expression_nointo);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3216);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 462, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3208);
      match(MySqlParser::LR_BRACKET);
      setState(3209);
      query_specification_nointo();
      setState(3210);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3212);
      match(MySqlParser::LR_BRACKET);
      setState(3213);
      query_expression_nointo();
      setState(3214);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_specificationContext ------------------------------------------------------------------

MySqlParser::Query_specificationContext::Query_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Query_specificationContext::SELECT() {
  return getToken(MySqlParser::SELECT, 0);
}

MySqlParser::Select_listContext* MySqlParser::Query_specificationContext::select_list() {
  return getRuleContext<MySqlParser::Select_listContext>(0);
}

std::vector<MySqlParser::Select_specContext *> MySqlParser::Query_specificationContext::select_spec() {
  return getRuleContexts<MySqlParser::Select_specContext>();
}

MySqlParser::Select_specContext* MySqlParser::Query_specificationContext::select_spec(size_t i) {
  return getRuleContext<MySqlParser::Select_specContext>(i);
}

MySqlParser::Select_into_expressionContext* MySqlParser::Query_specificationContext::select_into_expression() {
  return getRuleContext<MySqlParser::Select_into_expressionContext>(0);
}

MySqlParser::From_clauseContext* MySqlParser::Query_specificationContext::from_clause() {
  return getRuleContext<MySqlParser::From_clauseContext>(0);
}

MySqlParser::Order_by_clauseContext* MySqlParser::Query_specificationContext::order_by_clause() {
  return getRuleContext<MySqlParser::Order_by_clauseContext>(0);
}

MySqlParser::Limit_clauseContext* MySqlParser::Query_specificationContext::limit_clause() {
  return getRuleContext<MySqlParser::Limit_clauseContext>(0);
}


size_t MySqlParser::Query_specificationContext::getRuleIndex() const {
  return MySqlParser::RuleQuery_specification;
}

void MySqlParser::Query_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_specification(this);
}

void MySqlParser::Query_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_specification(this);
}

MySqlParser::Query_specificationContext* MySqlParser::query_specification() {
  Query_specificationContext *_localctx = _tracker.createInstance<Query_specificationContext>(_ctx, getState());
  enterRule(_localctx, 214, MySqlParser::RuleQuery_specification);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3218);
    match(MySqlParser::SELECT);
    setState(3222);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 463, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3219);
        select_spec(); 
      }
      setState(3224);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 463, _ctx);
    }
    setState(3225);
    select_list();
    setState(3227);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INTO) {
      setState(3226);
      select_into_expression();
    }
    setState(3230);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FROM) {
      setState(3229);
      from_clause();
    }
    setState(3233);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 466, _ctx)) {
    case 1: {
      setState(3232);
      order_by_clause();
      break;
    }

    }
    setState(3236);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 467, _ctx)) {
    case 1: {
      setState(3235);
      limit_clause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_specification_nointoContext ------------------------------------------------------------------

MySqlParser::Query_specification_nointoContext::Query_specification_nointoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Query_specification_nointoContext::SELECT() {
  return getToken(MySqlParser::SELECT, 0);
}

MySqlParser::Select_listContext* MySqlParser::Query_specification_nointoContext::select_list() {
  return getRuleContext<MySqlParser::Select_listContext>(0);
}

std::vector<MySqlParser::Select_specContext *> MySqlParser::Query_specification_nointoContext::select_spec() {
  return getRuleContexts<MySqlParser::Select_specContext>();
}

MySqlParser::Select_specContext* MySqlParser::Query_specification_nointoContext::select_spec(size_t i) {
  return getRuleContext<MySqlParser::Select_specContext>(i);
}

MySqlParser::From_clauseContext* MySqlParser::Query_specification_nointoContext::from_clause() {
  return getRuleContext<MySqlParser::From_clauseContext>(0);
}

MySqlParser::Order_by_clauseContext* MySqlParser::Query_specification_nointoContext::order_by_clause() {
  return getRuleContext<MySqlParser::Order_by_clauseContext>(0);
}

MySqlParser::Limit_clauseContext* MySqlParser::Query_specification_nointoContext::limit_clause() {
  return getRuleContext<MySqlParser::Limit_clauseContext>(0);
}


size_t MySqlParser::Query_specification_nointoContext::getRuleIndex() const {
  return MySqlParser::RuleQuery_specification_nointo;
}

void MySqlParser::Query_specification_nointoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_specification_nointo(this);
}

void MySqlParser::Query_specification_nointoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_specification_nointo(this);
}

MySqlParser::Query_specification_nointoContext* MySqlParser::query_specification_nointo() {
  Query_specification_nointoContext *_localctx = _tracker.createInstance<Query_specification_nointoContext>(_ctx, getState());
  enterRule(_localctx, 216, MySqlParser::RuleQuery_specification_nointo);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3238);
    match(MySqlParser::SELECT);
    setState(3242);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 468, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3239);
        select_spec(); 
      }
      setState(3244);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 468, _ctx);
    }
    setState(3245);
    select_list();
    setState(3247);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FROM) {
      setState(3246);
      from_clause();
    }
    setState(3250);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 470, _ctx)) {
    case 1: {
      setState(3249);
      order_by_clause();
      break;
    }

    }
    setState(3253);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 471, _ctx)) {
    case 1: {
      setState(3252);
      limit_clause();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Union_parenthContext ------------------------------------------------------------------

MySqlParser::Union_parenthContext::Union_parenthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Union_parenthContext::UNION() {
  return getToken(MySqlParser::UNION, 0);
}

MySqlParser::Query_expression_nointoContext* MySqlParser::Union_parenthContext::query_expression_nointo() {
  return getRuleContext<MySqlParser::Query_expression_nointoContext>(0);
}

tree::TerminalNode* MySqlParser::Union_parenthContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::Union_parenthContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}


size_t MySqlParser::Union_parenthContext::getRuleIndex() const {
  return MySqlParser::RuleUnion_parenth;
}

void MySqlParser::Union_parenthContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnion_parenth(this);
}

void MySqlParser::Union_parenthContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnion_parenth(this);
}

MySqlParser::Union_parenthContext* MySqlParser::union_parenth() {
  Union_parenthContext *_localctx = _tracker.createInstance<Union_parenthContext>(_ctx, getState());
  enterRule(_localctx, 218, MySqlParser::RuleUnion_parenth);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3255);
    match(MySqlParser::UNION);
    setState(3257);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ALL

    || _la == MySqlParser::DISTINCT) {
      setState(3256);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ALL

      || _la == MySqlParser::DISTINCT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3259);
    query_expression_nointo();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Union_statementContext ------------------------------------------------------------------

MySqlParser::Union_statementContext::Union_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Union_statementContext::UNION() {
  return getToken(MySqlParser::UNION, 0);
}

MySqlParser::Query_specification_nointoContext* MySqlParser::Union_statementContext::query_specification_nointo() {
  return getRuleContext<MySqlParser::Query_specification_nointoContext>(0);
}

MySqlParser::Query_expression_nointoContext* MySqlParser::Union_statementContext::query_expression_nointo() {
  return getRuleContext<MySqlParser::Query_expression_nointoContext>(0);
}

tree::TerminalNode* MySqlParser::Union_statementContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::Union_statementContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}


size_t MySqlParser::Union_statementContext::getRuleIndex() const {
  return MySqlParser::RuleUnion_statement;
}

void MySqlParser::Union_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnion_statement(this);
}

void MySqlParser::Union_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnion_statement(this);
}

MySqlParser::Union_statementContext* MySqlParser::union_statement() {
  Union_statementContext *_localctx = _tracker.createInstance<Union_statementContext>(_ctx, getState());
  enterRule(_localctx, 220, MySqlParser::RuleUnion_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3261);
    match(MySqlParser::UNION);
    setState(3263);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ALL

    || _la == MySqlParser::DISTINCT) {
      setState(3262);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ALL

      || _la == MySqlParser::DISTINCT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3267);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SELECT: {
        setState(3265);
        query_specification_nointo();
        break;
      }

      case MySqlParser::LR_BRACKET: {
        setState(3266);
        query_expression_nointo();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_specContext ------------------------------------------------------------------

MySqlParser::Select_specContext::Select_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Select_specContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::Select_specContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}

tree::TerminalNode* MySqlParser::Select_specContext::DISTINCTROW() {
  return getToken(MySqlParser::DISTINCTROW, 0);
}

tree::TerminalNode* MySqlParser::Select_specContext::HIGH_PRIORITY() {
  return getToken(MySqlParser::HIGH_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::Select_specContext::STRAIGHT_JOIN() {
  return getToken(MySqlParser::STRAIGHT_JOIN, 0);
}

tree::TerminalNode* MySqlParser::Select_specContext::SQL_SMALL_RESULT() {
  return getToken(MySqlParser::SQL_SMALL_RESULT, 0);
}

tree::TerminalNode* MySqlParser::Select_specContext::SQL_BIG_RESULT() {
  return getToken(MySqlParser::SQL_BIG_RESULT, 0);
}

tree::TerminalNode* MySqlParser::Select_specContext::SQL_BUFFER_RESULT() {
  return getToken(MySqlParser::SQL_BUFFER_RESULT, 0);
}

tree::TerminalNode* MySqlParser::Select_specContext::SQL_CACHE() {
  return getToken(MySqlParser::SQL_CACHE, 0);
}

tree::TerminalNode* MySqlParser::Select_specContext::SQL_NO_CACHE() {
  return getToken(MySqlParser::SQL_NO_CACHE, 0);
}

tree::TerminalNode* MySqlParser::Select_specContext::SQL_CALC_FOUND_ROWS() {
  return getToken(MySqlParser::SQL_CALC_FOUND_ROWS, 0);
}


size_t MySqlParser::Select_specContext::getRuleIndex() const {
  return MySqlParser::RuleSelect_spec;
}

void MySqlParser::Select_specContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_spec(this);
}

void MySqlParser::Select_specContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_spec(this);
}

MySqlParser::Select_specContext* MySqlParser::select_spec() {
  Select_specContext *_localctx = _tracker.createInstance<Select_specContext>(_ctx, getState());
  enterRule(_localctx, 222, MySqlParser::RuleSelect_spec);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3277);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ALL:
      case MySqlParser::DISTINCT:
      case MySqlParser::DISTINCTROW: {
        enterOuterAlt(_localctx, 1);
        setState(3269);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << MySqlParser::ALL)
          | (1ULL << MySqlParser::DISTINCT)
          | (1ULL << MySqlParser::DISTINCTROW))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::HIGH_PRIORITY: {
        enterOuterAlt(_localctx, 2);
        setState(3270);
        match(MySqlParser::HIGH_PRIORITY);
        break;
      }

      case MySqlParser::STRAIGHT_JOIN: {
        enterOuterAlt(_localctx, 3);
        setState(3271);
        match(MySqlParser::STRAIGHT_JOIN);
        break;
      }

      case MySqlParser::SQL_SMALL_RESULT: {
        enterOuterAlt(_localctx, 4);
        setState(3272);
        match(MySqlParser::SQL_SMALL_RESULT);
        break;
      }

      case MySqlParser::SQL_BIG_RESULT: {
        enterOuterAlt(_localctx, 5);
        setState(3273);
        match(MySqlParser::SQL_BIG_RESULT);
        break;
      }

      case MySqlParser::SQL_BUFFER_RESULT: {
        enterOuterAlt(_localctx, 6);
        setState(3274);
        match(MySqlParser::SQL_BUFFER_RESULT);
        break;
      }

      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE: {
        enterOuterAlt(_localctx, 7);
        setState(3275);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::SQL_CACHE

        || _la == MySqlParser::SQL_NO_CACHE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::SQL_CALC_FOUND_ROWS: {
        enterOuterAlt(_localctx, 8);
        setState(3276);
        match(MySqlParser::SQL_CALC_FOUND_ROWS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_listContext ------------------------------------------------------------------

MySqlParser::Select_listContext::Select_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Select_list_elemContext *> MySqlParser::Select_listContext::select_list_elem() {
  return getRuleContexts<MySqlParser::Select_list_elemContext>();
}

MySqlParser::Select_list_elemContext* MySqlParser::Select_listContext::select_list_elem(size_t i) {
  return getRuleContext<MySqlParser::Select_list_elemContext>(i);
}


size_t MySqlParser::Select_listContext::getRuleIndex() const {
  return MySqlParser::RuleSelect_list;
}

void MySqlParser::Select_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_list(this);
}

void MySqlParser::Select_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_list(this);
}

MySqlParser::Select_listContext* MySqlParser::select_list() {
  Select_listContext *_localctx = _tracker.createInstance<Select_listContext>(_ctx, getState());
  enterRule(_localctx, 224, MySqlParser::RuleSelect_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3281);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::STAR: {
        setState(3279);
        match(MySqlParser::STAR);
        break;
      }

      case MySqlParser::CASE:
      case MySqlParser::CAST:
      case MySqlParser::CONVERT:
      case MySqlParser::CURRENT_USER:
      case MySqlParser::DEFAULT:
      case MySqlParser::EXISTS:
      case MySqlParser::FALSE:
      case MySqlParser::IF:
      case MySqlParser::INTERVAL:
      case MySqlParser::LEFT:
      case MySqlParser::NOTNULL:
      case MySqlParser::NOT:
      case MySqlParser::NULL_LITERAL:
      case MySqlParser::REPLACE:
      case MySqlParser::RIGHT:
      case MySqlParser::TRUE:
      case MySqlParser::VALUES:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::CHAR:
      case MySqlParser::BINARY:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::AVG:
      case MySqlParser::BIT_AND:
      case MySqlParser::BIT_OR:
      case MySqlParser::BIT_XOR:
      case MySqlParser::COUNT:
      case MySqlParser::GROUP_CONCAT:
      case MySqlParser::MAX:
      case MySqlParser::MIN:
      case MySqlParser::STD:
      case MySqlParser::STDDEV:
      case MySqlParser::STDDEV_POP:
      case MySqlParser::STDDEV_SAMP:
      case MySqlParser::SUM:
      case MySqlParser::VAR_POP:
      case MySqlParser::VAR_SAMP:
      case MySqlParser::VARIANCE:
      case MySqlParser::CURRENT_DATE:
      case MySqlParser::CURRENT_TIME:
      case MySqlParser::CURRENT_TIMESTAMP:
      case MySqlParser::LOCALTIME:
      case MySqlParser::CURDATE:
      case MySqlParser::CURTIME:
      case MySqlParser::DATE_ADD:
      case MySqlParser::DATE_SUB:
      case MySqlParser::EXTRACT:
      case MySqlParser::LOCALTIMESTAMP:
      case MySqlParser::NOW:
      case MySqlParser::POSITION:
      case MySqlParser::SUBSTR:
      case MySqlParser::SUBSTRING:
      case MySqlParser::SYSDATE:
      case MySqlParser::TRIM:
      case MySqlParser::UTC_DATE:
      case MySqlParser::UTC_TIME:
      case MySqlParser::UTC_TIMESTAMP:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BTREE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLIENT:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FIELDS:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::HASH:
      case MySqlParser::HOST:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IMPORT:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INVOKER:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MERGE:
      case MySqlParser::MID:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRESERVE:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATION:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STORAGE:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XML:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFOMANCE_SCHEMA:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::PLUS:
      case MySqlParser::MINUS:
      case MySqlParser::EXCLAMATION_SYMBOL:
      case MySqlParser::BIT_NOT_OP:
      case MySqlParser::LR_BRACKET:
      case MySqlParser::ZERO_DECIMAL:
      case MySqlParser::ONE_DECIMAL:
      case MySqlParser::TWO_DECIMAL:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::START_NATIONAL_STRING_LITERAL:
      case MySqlParser::STRING_LITERAL:
      case MySqlParser::DECIMAL_LITERAL:
      case MySqlParser::HEXADECIMAL_LITERAL:
      case MySqlParser::REAL_LITERAL:
      case MySqlParser::NULL_SPEC_LITERAL:
      case MySqlParser::BIT_STRING:
      case MySqlParser::STRING_CHARSET_NAME:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID:
      case MySqlParser::LOCAL_ID:
      case MySqlParser::GLOBAL_ID: {
        setState(3280);
        select_list_elem();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3287);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3283);
      match(MySqlParser::COMMA);
      setState(3284);
      select_list_elem();
      setState(3289);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_list_elemContext ------------------------------------------------------------------

MySqlParser::Select_list_elemContext::Select_list_elemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Select_list_elemContext::getRuleIndex() const {
  return MySqlParser::RuleSelect_list_elem;
}

void MySqlParser::Select_list_elemContext::copyFrom(Select_list_elemContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SellistelFuncContext ------------------------------------------------------------------

MySqlParser::Function_callContext* MySqlParser::SellistelFuncContext::function_call() {
  return getRuleContext<MySqlParser::Function_callContext>(0);
}

MySqlParser::Id_Context* MySqlParser::SellistelFuncContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::SellistelFuncContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::SellistelFuncContext::SellistelFuncContext(Select_list_elemContext *ctx) { copyFrom(ctx); }

void MySqlParser::SellistelFuncContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSellistelFunc(this);
}
void MySqlParser::SellistelFuncContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSellistelFunc(this);
}
//----------------- SellistelAllColContext ------------------------------------------------------------------

MySqlParser::Full_idContext* MySqlParser::SellistelAllColContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

MySqlParser::SellistelAllColContext::SellistelAllColContext(Select_list_elemContext *ctx) { copyFrom(ctx); }

void MySqlParser::SellistelAllColContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSellistelAllCol(this);
}
void MySqlParser::SellistelAllColContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSellistelAllCol(this);
}
//----------------- SellistelExprContext ------------------------------------------------------------------

MySqlParser::ExpressionContext* MySqlParser::SellistelExprContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::SellistelExprContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySqlParser::SellistelExprContext::VAR_ASSIGN() {
  return getToken(MySqlParser::VAR_ASSIGN, 0);
}

MySqlParser::Id_Context* MySqlParser::SellistelExprContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::SellistelExprContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::SellistelExprContext::SellistelExprContext(Select_list_elemContext *ctx) { copyFrom(ctx); }

void MySqlParser::SellistelExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSellistelExpr(this);
}
void MySqlParser::SellistelExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSellistelExpr(this);
}
//----------------- SellistelColContext ------------------------------------------------------------------

MySqlParser::Full_column_nameContext* MySqlParser::SellistelColContext::full_column_name() {
  return getRuleContext<MySqlParser::Full_column_nameContext>(0);
}

MySqlParser::Id_Context* MySqlParser::SellistelColContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::SellistelColContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::SellistelColContext::SellistelColContext(Select_list_elemContext *ctx) { copyFrom(ctx); }

void MySqlParser::SellistelColContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSellistelCol(this);
}
void MySqlParser::SellistelColContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSellistelCol(this);
}
MySqlParser::Select_list_elemContext* MySqlParser::select_list_elem() {
  Select_list_elemContext *_localctx = _tracker.createInstance<Select_list_elemContext>(_ctx, getState());
  enterRule(_localctx, 226, MySqlParser::RuleSelect_list_elem);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3319);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 485, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Select_list_elemContext *>(_tracker.createInstance<MySqlParser::SellistelAllColContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3290);
      full_id();
      setState(3291);
      match(MySqlParser::DOT);
      setState(3292);
      match(MySqlParser::STAR);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Select_list_elemContext *>(_tracker.createInstance<MySqlParser::SellistelColContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3294);
      full_column_name();
      setState(3299);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 479, _ctx)) {
      case 1: {
        setState(3296);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::AS) {
          setState(3295);
          match(MySqlParser::AS);
        }
        setState(3298);
        id_();
        break;
      }

      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Select_list_elemContext *>(_tracker.createInstance<MySqlParser::SellistelFuncContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(3301);
      function_call();
      setState(3306);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 481, _ctx)) {
      case 1: {
        setState(3303);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::AS) {
          setState(3302);
          match(MySqlParser::AS);
        }
        setState(3305);
        id_();
        break;
      }

      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Select_list_elemContext *>(_tracker.createInstance<MySqlParser::SellistelExprContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(3310);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 482, _ctx)) {
      case 1: {
        setState(3308);
        match(MySqlParser::LOCAL_ID);
        setState(3309);
        match(MySqlParser::VAR_ASSIGN);
        break;
      }

      }
      setState(3312);
      expression(0);
      setState(3317);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 484, _ctx)) {
      case 1: {
        setState(3314);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::AS) {
          setState(3313);
          match(MySqlParser::AS);
        }
        setState(3316);
        id_();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_into_expressionContext ------------------------------------------------------------------

MySqlParser::Select_into_expressionContext::Select_into_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Select_into_expressionContext::getRuleIndex() const {
  return MySqlParser::RuleSelect_into_expression;
}

void MySqlParser::Select_into_expressionContext::copyFrom(Select_into_expressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SelectIntoOutfileContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::OUTFILE() {
  return getToken(MySqlParser::OUTFILE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::SelectIntoOutfileContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::LINES() {
  return getToken(MySqlParser::LINES, 0);
}

MySqlParser::Charset_nameContext* MySqlParser::SelectIntoOutfileContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::FIELDS() {
  return getToken(MySqlParser::FIELDS, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::COLUMNS() {
  return getToken(MySqlParser::COLUMNS, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::SelectIntoOutfileContext::TERMINATED() {
  return getTokens(MySqlParser::TERMINATED);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::TERMINATED(size_t i) {
  return getToken(MySqlParser::TERMINATED, i);
}

std::vector<tree::TerminalNode *> MySqlParser::SelectIntoOutfileContext::BY() {
  return getTokens(MySqlParser::BY);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::BY(size_t i) {
  return getToken(MySqlParser::BY, i);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::ENCLOSED() {
  return getToken(MySqlParser::ENCLOSED, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::ESCAPED() {
  return getToken(MySqlParser::ESCAPED, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::STARTING() {
  return getToken(MySqlParser::STARTING, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoOutfileContext::OPTIONALLY() {
  return getToken(MySqlParser::OPTIONALLY, 0);
}

MySqlParser::SelectIntoOutfileContext::SelectIntoOutfileContext(Select_into_expressionContext *ctx) { copyFrom(ctx); }

void MySqlParser::SelectIntoOutfileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectIntoOutfile(this);
}
void MySqlParser::SelectIntoOutfileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectIntoOutfile(this);
}
//----------------- SelectIntoVarsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SelectIntoVarsContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::SelectIntoVarsContext::LOCAL_ID() {
  return getTokens(MySqlParser::LOCAL_ID);
}

tree::TerminalNode* MySqlParser::SelectIntoVarsContext::LOCAL_ID(size_t i) {
  return getToken(MySqlParser::LOCAL_ID, i);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::SelectIntoVarsContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::SelectIntoVarsContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

MySqlParser::SelectIntoVarsContext::SelectIntoVarsContext(Select_into_expressionContext *ctx) { copyFrom(ctx); }

void MySqlParser::SelectIntoVarsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectIntoVars(this);
}
void MySqlParser::SelectIntoVarsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectIntoVars(this);
}
//----------------- SelectIntoDumpContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SelectIntoDumpContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoDumpContext::DUMPFILE() {
  return getToken(MySqlParser::DUMPFILE, 0);
}

tree::TerminalNode* MySqlParser::SelectIntoDumpContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::SelectIntoDumpContext::SelectIntoDumpContext(Select_into_expressionContext *ctx) { copyFrom(ctx); }

void MySqlParser::SelectIntoDumpContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectIntoDump(this);
}
void MySqlParser::SelectIntoDumpContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectIntoDump(this);
}
MySqlParser::Select_into_expressionContext* MySqlParser::select_into_expression() {
  Select_into_expressionContext *_localctx = _tracker.createInstance<Select_into_expressionContext>(_ctx, getState());
  enterRule(_localctx, 228, MySqlParser::RuleSelect_into_expression);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3381);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 498, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Select_into_expressionContext *>(_tracker.createInstance<MySqlParser::SelectIntoVarsContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(3321);
      match(MySqlParser::INTO);
      setState(3324);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LOCAL_ID: {
          setState(3322);
          match(MySqlParser::LOCAL_ID);
          break;
        }

        case MySqlParser::LEFT:
        case MySqlParser::RIGHT:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(3323);
          id_();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3333);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(3326);
        match(MySqlParser::COMMA);
        setState(3329);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::LOCAL_ID: {
            setState(3327);
            match(MySqlParser::LOCAL_ID);
            break;
          }

          case MySqlParser::LEFT:
          case MySqlParser::RIGHT:
          case MySqlParser::DATE:
          case MySqlParser::TIME:
          case MySqlParser::TIMESTAMP:
          case MySqlParser::DATETIME:
          case MySqlParser::YEAR:
          case MySqlParser::TEXT:
          case MySqlParser::ENUM:
          case MySqlParser::COUNT:
          case MySqlParser::POSITION:
          case MySqlParser::ACTION:
          case MySqlParser::AFTER:
          case MySqlParser::ALGORITHM:
          case MySqlParser::ANY:
          case MySqlParser::AT:
          case MySqlParser::AUTHORS:
          case MySqlParser::AUTOCOMMIT:
          case MySqlParser::AUTOEXTEND_SIZE:
          case MySqlParser::AUTO_INCREMENT:
          case MySqlParser::AVG_ROW_LENGTH:
          case MySqlParser::BEGIN:
          case MySqlParser::BINLOG:
          case MySqlParser::BIT:
          case MySqlParser::BTREE:
          case MySqlParser::CASCADED:
          case MySqlParser::CHAIN:
          case MySqlParser::CHECKSUM:
          case MySqlParser::CIPHER:
          case MySqlParser::CLIENT:
          case MySqlParser::COALESCE:
          case MySqlParser::CODE:
          case MySqlParser::COLUMNS:
          case MySqlParser::COLUMN_FORMAT:
          case MySqlParser::COMMENT:
          case MySqlParser::COMMIT:
          case MySqlParser::COMPACT:
          case MySqlParser::COMPLETION:
          case MySqlParser::COMPRESSED:
          case MySqlParser::CONCURRENT:
          case MySqlParser::CONNECTION:
          case MySqlParser::CONSISTENT:
          case MySqlParser::CONTAINS:
          case MySqlParser::CONTRIBUTORS:
          case MySqlParser::COPY:
          case MySqlParser::DATA:
          case MySqlParser::DATAFILE:
          case MySqlParser::DEFINER:
          case MySqlParser::DELAY_KEY_WRITE:
          case MySqlParser::DIRECTORY:
          case MySqlParser::DISABLE:
          case MySqlParser::DISCARD:
          case MySqlParser::DISK:
          case MySqlParser::DO:
          case MySqlParser::DUMPFILE:
          case MySqlParser::DUPLICATE:
          case MySqlParser::DYNAMIC:
          case MySqlParser::ENABLE:
          case MySqlParser::ENDS:
          case MySqlParser::ENGINE:
          case MySqlParser::ENGINES:
          case MySqlParser::ERRORS:
          case MySqlParser::ESCAPE:
          case MySqlParser::EVEN:
          case MySqlParser::EVENT:
          case MySqlParser::EVENTS:
          case MySqlParser::EVERY:
          case MySqlParser::EXCHANGE:
          case MySqlParser::EXCLUSIVE:
          case MySqlParser::EXPIRE:
          case MySqlParser::EXTENT_SIZE:
          case MySqlParser::FIELDS:
          case MySqlParser::FIRST:
          case MySqlParser::FIXED:
          case MySqlParser::FULL:
          case MySqlParser::FUNCTION:
          case MySqlParser::GLOBAL:
          case MySqlParser::GRANTS:
          case MySqlParser::HASH:
          case MySqlParser::HOST:
          case MySqlParser::IDENTIFIED:
          case MySqlParser::IMPORT:
          case MySqlParser::INITIAL_SIZE:
          case MySqlParser::INPLACE:
          case MySqlParser::INSERT_METHOD:
          case MySqlParser::INVOKER:
          case MySqlParser::ISOLATION:
          case MySqlParser::ISSUER:
          case MySqlParser::KEY_BLOCK_SIZE:
          case MySqlParser::LANGUAGE:
          case MySqlParser::LAST:
          case MySqlParser::LESS:
          case MySqlParser::LEVEL:
          case MySqlParser::LIST:
          case MySqlParser::LOCAL:
          case MySqlParser::LOGFILE:
          case MySqlParser::LOGS:
          case MySqlParser::MASTER:
          case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
          case MySqlParser::MAX_QUERIES_PER_HOUR:
          case MySqlParser::MAX_ROWS:
          case MySqlParser::MAX_SIZE:
          case MySqlParser::MAX_UPDATES_PER_HOUR:
          case MySqlParser::MAX_USER_CONNECTIONS:
          case MySqlParser::MERGE:
          case MySqlParser::MID:
          case MySqlParser::MIN_ROWS:
          case MySqlParser::MODIFY:
          case MySqlParser::MUTEX:
          case MySqlParser::MYSQL:
          case MySqlParser::NAME:
          case MySqlParser::NAMES:
          case MySqlParser::NCHAR:
          case MySqlParser::NO:
          case MySqlParser::NODEGROUP:
          case MySqlParser::NONE:
          case MySqlParser::OFFLINE:
          case MySqlParser::OFFSET:
          case MySqlParser::OJ:
          case MySqlParser::OLD_PASSWORD:
          case MySqlParser::ONLINE:
          case MySqlParser::ONLY:
          case MySqlParser::OPTIONS:
          case MySqlParser::OWNER:
          case MySqlParser::PACK_KEYS:
          case MySqlParser::PARSER:
          case MySqlParser::PARTIAL:
          case MySqlParser::PARTITIONING:
          case MySqlParser::PARTITIONS:
          case MySqlParser::PASSWORD:
          case MySqlParser::PLUGINS:
          case MySqlParser::PORT:
          case MySqlParser::PRESERVE:
          case MySqlParser::PROCESSLIST:
          case MySqlParser::PROFILE:
          case MySqlParser::PROFILES:
          case MySqlParser::PROXY:
          case MySqlParser::QUERY:
          case MySqlParser::QUICK:
          case MySqlParser::REBUILD:
          case MySqlParser::REDO_BUFFER_SIZE:
          case MySqlParser::REDUNDANT:
          case MySqlParser::RELAYLOG:
          case MySqlParser::REMOVE:
          case MySqlParser::REORGANIZE:
          case MySqlParser::REPAIR:
          case MySqlParser::REPLICATION:
          case MySqlParser::RETURNS:
          case MySqlParser::ROLLBACK:
          case MySqlParser::ROLLUP:
          case MySqlParser::ROW:
          case MySqlParser::ROWS:
          case MySqlParser::ROW_FORMAT:
          case MySqlParser::SAVEPOINT:
          case MySqlParser::SCHEDULE:
          case MySqlParser::SECURITY:
          case MySqlParser::SERVER:
          case MySqlParser::SESSION:
          case MySqlParser::SHARE:
          case MySqlParser::SHARED:
          case MySqlParser::SIGNED:
          case MySqlParser::SIMPLE:
          case MySqlParser::SLAVE:
          case MySqlParser::SNAPSHOT:
          case MySqlParser::SOCKET:
          case MySqlParser::SOME:
          case MySqlParser::SOUNDS:
          case MySqlParser::SQL_BUFFER_RESULT:
          case MySqlParser::SQL_CACHE:
          case MySqlParser::SQL_NO_CACHE:
          case MySqlParser::START:
          case MySqlParser::STARTS:
          case MySqlParser::STATS_AUTO_RECALC:
          case MySqlParser::STATS_PERSISTENT:
          case MySqlParser::STATS_SAMPLE_PAGES:
          case MySqlParser::STATUS:
          case MySqlParser::STORAGE:
          case MySqlParser::SUBJECT:
          case MySqlParser::SUBPARTITION:
          case MySqlParser::SUBPARTITIONS:
          case MySqlParser::TABLESPACE:
          case MySqlParser::TEMPORARY:
          case MySqlParser::TEMPTABLE:
          case MySqlParser::THAN:
          case MySqlParser::TRANSACTION:
          case MySqlParser::TRUNCATE:
          case MySqlParser::UNDEFINED:
          case MySqlParser::UNDOFILE:
          case MySqlParser::UNDO_BUFFER_SIZE:
          case MySqlParser::UNKNOWN:
          case MySqlParser::UPGRADE:
          case MySqlParser::USER:
          case MySqlParser::VALUE:
          case MySqlParser::VARIABLES:
          case MySqlParser::VIEW:
          case MySqlParser::WAIT:
          case MySqlParser::WARNINGS:
          case MySqlParser::WORK:
          case MySqlParser::WRAPPER:
          case MySqlParser::X509:
          case MySqlParser::XML:
          case MySqlParser::QUARTER:
          case MySqlParser::MONTH:
          case MySqlParser::DAY:
          case MySqlParser::HOUR:
          case MySqlParser::MINUTE:
          case MySqlParser::WEEK:
          case MySqlParser::SECOND:
          case MySqlParser::MICROSECOND:
          case MySqlParser::TABLES:
          case MySqlParser::ROUTINE:
          case MySqlParser::EXECUTE:
          case MySqlParser::FILE:
          case MySqlParser::PROCESS:
          case MySqlParser::RELOAD:
          case MySqlParser::SHUTDOWN:
          case MySqlParser::SUPER:
          case MySqlParser::PRIVILEGES:
          case MySqlParser::ARMSCII8:
          case MySqlParser::ASCII:
          case MySqlParser::BIG5:
          case MySqlParser::CP1250:
          case MySqlParser::CP1251:
          case MySqlParser::CP1256:
          case MySqlParser::CP1257:
          case MySqlParser::CP850:
          case MySqlParser::CP852:
          case MySqlParser::CP866:
          case MySqlParser::CP932:
          case MySqlParser::DEC8:
          case MySqlParser::EUCJPMS:
          case MySqlParser::EUCKR:
          case MySqlParser::GB2312:
          case MySqlParser::GBK:
          case MySqlParser::GEOSTD8:
          case MySqlParser::GREEK:
          case MySqlParser::HEBREW:
          case MySqlParser::HP8:
          case MySqlParser::KEYBCS2:
          case MySqlParser::KOI8R:
          case MySqlParser::KOI8U:
          case MySqlParser::LATIN1:
          case MySqlParser::LATIN2:
          case MySqlParser::LATIN5:
          case MySqlParser::LATIN7:
          case MySqlParser::MACCE:
          case MySqlParser::MACROMAN:
          case MySqlParser::SJIS:
          case MySqlParser::SWE7:
          case MySqlParser::TIS620:
          case MySqlParser::UCS2:
          case MySqlParser::UJIS:
          case MySqlParser::UTF16:
          case MySqlParser::UTF16LE:
          case MySqlParser::UTF32:
          case MySqlParser::UTF8:
          case MySqlParser::UTF8MB3:
          case MySqlParser::UTF8MB4:
          case MySqlParser::ARCHIVE:
          case MySqlParser::BLACKHOLE:
          case MySqlParser::CSV:
          case MySqlParser::FEDERATED:
          case MySqlParser::INNODB:
          case MySqlParser::MEMORY:
          case MySqlParser::MRG_MYISAM:
          case MySqlParser::MYISAM:
          case MySqlParser::NDB:
          case MySqlParser::NDBCLUSTER:
          case MySqlParser::PERFOMANCE_SCHEMA:
          case MySqlParser::REPEATABLE:
          case MySqlParser::COMMITTED:
          case MySqlParser::UNCOMMITTED:
          case MySqlParser::SERIALIZABLE:
          case MySqlParser::GEOMETRYCOLLECTION:
          case MySqlParser::LINESTRING:
          case MySqlParser::MULTILINESTRING:
          case MySqlParser::MULTIPOINT:
          case MySqlParser::MULTIPOLYGON:
          case MySqlParser::POINT:
          case MySqlParser::POLYGON:
          case MySqlParser::ABS:
          case MySqlParser::ACOS:
          case MySqlParser::ADDDATE:
          case MySqlParser::ADDTIME:
          case MySqlParser::AES_DECRYPT:
          case MySqlParser::AES_ENCRYPT:
          case MySqlParser::AREA:
          case MySqlParser::ASBINARY:
          case MySqlParser::ASIN:
          case MySqlParser::ASTEXT:
          case MySqlParser::ASWKB:
          case MySqlParser::ASWKT:
          case MySqlParser::ASYMMETRIC_DECRYPT:
          case MySqlParser::ASYMMETRIC_DERIVE:
          case MySqlParser::ASYMMETRIC_ENCRYPT:
          case MySqlParser::ASYMMETRIC_SIGN:
          case MySqlParser::ASYMMETRIC_VERIFY:
          case MySqlParser::ATAN:
          case MySqlParser::ATAN2:
          case MySqlParser::BENCHMARK:
          case MySqlParser::BIN:
          case MySqlParser::BIT_COUNT:
          case MySqlParser::BIT_LENGTH:
          case MySqlParser::BUFFER:
          case MySqlParser::CEIL:
          case MySqlParser::CEILING:
          case MySqlParser::CENTROID:
          case MySqlParser::CHARACTER_LENGTH:
          case MySqlParser::CHARSET:
          case MySqlParser::CHAR_LENGTH:
          case MySqlParser::COERCIBILITY:
          case MySqlParser::COLLATION:
          case MySqlParser::COMPRESS:
          case MySqlParser::CONCAT:
          case MySqlParser::CONCAT_WS:
          case MySqlParser::CONNECTION_ID:
          case MySqlParser::CONV:
          case MySqlParser::CONVERT_TZ:
          case MySqlParser::COS:
          case MySqlParser::COT:
          case MySqlParser::CRC32:
          case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
          case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
          case MySqlParser::CREATE_DH_PARAMETERS:
          case MySqlParser::CREATE_DIGEST:
          case MySqlParser::CROSSES:
          case MySqlParser::DATEDIFF:
          case MySqlParser::DATE_FORMAT:
          case MySqlParser::DAYNAME:
          case MySqlParser::DAYOFMONTH:
          case MySqlParser::DAYOFWEEK:
          case MySqlParser::DAYOFYEAR:
          case MySqlParser::DECODE:
          case MySqlParser::DEGREES:
          case MySqlParser::DES_DECRYPT:
          case MySqlParser::DES_ENCRYPT:
          case MySqlParser::DIMENSION:
          case MySqlParser::DISJOINT:
          case MySqlParser::ELT:
          case MySqlParser::ENCODE:
          case MySqlParser::ENCRYPT:
          case MySqlParser::ENDPOINT:
          case MySqlParser::ENVELOPE:
          case MySqlParser::EQUALS:
          case MySqlParser::EXP:
          case MySqlParser::EXPORT_SET:
          case MySqlParser::EXTERIORRING:
          case MySqlParser::EXTRACTVALUE:
          case MySqlParser::FIELD:
          case MySqlParser::FIND_IN_SET:
          case MySqlParser::FLOOR:
          case MySqlParser::FORMAT:
          case MySqlParser::FOUND_ROWS:
          case MySqlParser::FROM_BASE64:
          case MySqlParser::FROM_DAYS:
          case MySqlParser::FROM_UNIXTIME:
          case MySqlParser::GEOMCOLLFROMTEXT:
          case MySqlParser::GEOMCOLLFROMWKB:
          case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
          case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
          case MySqlParser::GEOMETRYFROMTEXT:
          case MySqlParser::GEOMETRYFROMWKB:
          case MySqlParser::GEOMETRYN:
          case MySqlParser::GEOMETRYTYPE:
          case MySqlParser::GEOMFROMTEXT:
          case MySqlParser::GEOMFROMWKB:
          case MySqlParser::GET_FORMAT:
          case MySqlParser::GET_LOCK:
          case MySqlParser::GLENGTH:
          case MySqlParser::GREATEST:
          case MySqlParser::GTID_SUBSET:
          case MySqlParser::GTID_SUBTRACT:
          case MySqlParser::HEX:
          case MySqlParser::IFNULL:
          case MySqlParser::INET6_ATON:
          case MySqlParser::INET6_NTOA:
          case MySqlParser::INET_ATON:
          case MySqlParser::INET_NTOA:
          case MySqlParser::INSTR:
          case MySqlParser::INTERIORRINGN:
          case MySqlParser::INTERSECTS:
          case MySqlParser::ISCLOSED:
          case MySqlParser::ISEMPTY:
          case MySqlParser::ISNULL:
          case MySqlParser::ISSIMPLE:
          case MySqlParser::IS_FREE_LOCK:
          case MySqlParser::IS_IPV4:
          case MySqlParser::IS_IPV4_COMPAT:
          case MySqlParser::IS_IPV4_MAPPED:
          case MySqlParser::IS_IPV6:
          case MySqlParser::IS_USED_LOCK:
          case MySqlParser::LAST_INSERT_ID:
          case MySqlParser::LCASE:
          case MySqlParser::LEAST:
          case MySqlParser::LENGTH:
          case MySqlParser::LINEFROMTEXT:
          case MySqlParser::LINEFROMWKB:
          case MySqlParser::LINESTRINGFROMTEXT:
          case MySqlParser::LINESTRINGFROMWKB:
          case MySqlParser::LN:
          case MySqlParser::LOAD_FILE:
          case MySqlParser::LOCATE:
          case MySqlParser::LOG:
          case MySqlParser::LOG10:
          case MySqlParser::LOG2:
          case MySqlParser::LOWER:
          case MySqlParser::LPAD:
          case MySqlParser::LTRIM:
          case MySqlParser::MAKEDATE:
          case MySqlParser::MAKETIME:
          case MySqlParser::MAKE_SET:
          case MySqlParser::MASTER_POS_WAIT:
          case MySqlParser::MBRCONTAINS:
          case MySqlParser::MBRDISJOINT:
          case MySqlParser::MBREQUAL:
          case MySqlParser::MBRINTERSECTS:
          case MySqlParser::MBROVERLAPS:
          case MySqlParser::MBRTOUCHES:
          case MySqlParser::MBRWITHIN:
          case MySqlParser::MD5:
          case MySqlParser::MLINEFROMTEXT:
          case MySqlParser::MLINEFROMWKB:
          case MySqlParser::MONTHNAME:
          case MySqlParser::MPOINTFROMTEXT:
          case MySqlParser::MPOINTFROMWKB:
          case MySqlParser::MPOLYFROMTEXT:
          case MySqlParser::MPOLYFROMWKB:
          case MySqlParser::MULTILINESTRINGFROMTEXT:
          case MySqlParser::MULTILINESTRINGFROMWKB:
          case MySqlParser::MULTIPOINTFROMTEXT:
          case MySqlParser::MULTIPOINTFROMWKB:
          case MySqlParser::MULTIPOLYGONFROMTEXT:
          case MySqlParser::MULTIPOLYGONFROMWKB:
          case MySqlParser::NAME_CONST:
          case MySqlParser::NULLIF:
          case MySqlParser::NUMGEOMETRIES:
          case MySqlParser::NUMINTERIORRINGS:
          case MySqlParser::NUMPOINTS:
          case MySqlParser::OCT:
          case MySqlParser::OCTET_LENGTH:
          case MySqlParser::ORD:
          case MySqlParser::OVERLAPS:
          case MySqlParser::PERIOD_ADD:
          case MySqlParser::PERIOD_DIFF:
          case MySqlParser::PI:
          case MySqlParser::POINTFROMTEXT:
          case MySqlParser::POINTFROMWKB:
          case MySqlParser::POINTN:
          case MySqlParser::POLYFROMTEXT:
          case MySqlParser::POLYFROMWKB:
          case MySqlParser::POLYGONFROMTEXT:
          case MySqlParser::POLYGONFROMWKB:
          case MySqlParser::POW:
          case MySqlParser::POWER:
          case MySqlParser::QUOTE:
          case MySqlParser::RADIANS:
          case MySqlParser::RAND:
          case MySqlParser::RANDOM_BYTES:
          case MySqlParser::RELEASE_LOCK:
          case MySqlParser::REVERSE:
          case MySqlParser::ROUND:
          case MySqlParser::ROW_COUNT:
          case MySqlParser::RPAD:
          case MySqlParser::RTRIM:
          case MySqlParser::SEC_TO_TIME:
          case MySqlParser::SESSION_USER:
          case MySqlParser::SHA:
          case MySqlParser::SHA1:
          case MySqlParser::SHA2:
          case MySqlParser::SIGN:
          case MySqlParser::SIN:
          case MySqlParser::SLEEP:
          case MySqlParser::SOUNDEX:
          case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
          case MySqlParser::SQRT:
          case MySqlParser::SRID:
          case MySqlParser::STARTPOINT:
          case MySqlParser::STRCMP:
          case MySqlParser::STR_TO_DATE:
          case MySqlParser::ST_AREA:
          case MySqlParser::ST_ASBINARY:
          case MySqlParser::ST_ASTEXT:
          case MySqlParser::ST_ASWKB:
          case MySqlParser::ST_ASWKT:
          case MySqlParser::ST_BUFFER:
          case MySqlParser::ST_CENTROID:
          case MySqlParser::ST_CONTAINS:
          case MySqlParser::ST_CROSSES:
          case MySqlParser::ST_DIFFERENCE:
          case MySqlParser::ST_DIMENSION:
          case MySqlParser::ST_DISJOINT:
          case MySqlParser::ST_DISTANCE:
          case MySqlParser::ST_ENDPOINT:
          case MySqlParser::ST_ENVELOPE:
          case MySqlParser::ST_EQUALS:
          case MySqlParser::ST_EXTERIORRING:
          case MySqlParser::ST_GEOMCOLLFROMTEXT:
          case MySqlParser::ST_GEOMCOLLFROMTXT:
          case MySqlParser::ST_GEOMCOLLFROMWKB:
          case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
          case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
          case MySqlParser::ST_GEOMETRYFROMTEXT:
          case MySqlParser::ST_GEOMETRYFROMWKB:
          case MySqlParser::ST_GEOMETRYN:
          case MySqlParser::ST_GEOMETRYTYPE:
          case MySqlParser::ST_GEOMFROMTEXT:
          case MySqlParser::ST_GEOMFROMWKB:
          case MySqlParser::ST_INTERIORRINGN:
          case MySqlParser::ST_INTERSECTION:
          case MySqlParser::ST_INTERSECTS:
          case MySqlParser::ST_ISCLOSED:
          case MySqlParser::ST_ISEMPTY:
          case MySqlParser::ST_ISSIMPLE:
          case MySqlParser::ST_LINEFROMTEXT:
          case MySqlParser::ST_LINEFROMWKB:
          case MySqlParser::ST_LINESTRINGFROMTEXT:
          case MySqlParser::ST_LINESTRINGFROMWKB:
          case MySqlParser::ST_NUMGEOMETRIES:
          case MySqlParser::ST_NUMINTERIORRING:
          case MySqlParser::ST_NUMINTERIORRINGS:
          case MySqlParser::ST_NUMPOINTS:
          case MySqlParser::ST_OVERLAPS:
          case MySqlParser::ST_POINTFROMTEXT:
          case MySqlParser::ST_POINTFROMWKB:
          case MySqlParser::ST_POINTN:
          case MySqlParser::ST_POLYFROMTEXT:
          case MySqlParser::ST_POLYFROMWKB:
          case MySqlParser::ST_POLYGONFROMTEXT:
          case MySqlParser::ST_POLYGONFROMWKB:
          case MySqlParser::ST_SRID:
          case MySqlParser::ST_STARTPOINT:
          case MySqlParser::ST_SYMDIFFERENCE:
          case MySqlParser::ST_TOUCHES:
          case MySqlParser::ST_UNION:
          case MySqlParser::ST_WITHIN:
          case MySqlParser::ST_X:
          case MySqlParser::ST_Y:
          case MySqlParser::SUBDATE:
          case MySqlParser::SUBSTRING_INDEX:
          case MySqlParser::SUBTIME:
          case MySqlParser::SYSTEM_USER:
          case MySqlParser::TAN:
          case MySqlParser::TIMEDIFF:
          case MySqlParser::TIMESTAMPADD:
          case MySqlParser::TIMESTAMPDIFF:
          case MySqlParser::TIME_FORMAT:
          case MySqlParser::TIME_TO_SEC:
          case MySqlParser::TOUCHES:
          case MySqlParser::TO_BASE64:
          case MySqlParser::TO_DAYS:
          case MySqlParser::TO_SECONDS:
          case MySqlParser::UCASE:
          case MySqlParser::UNCOMPRESS:
          case MySqlParser::UNCOMPRESSED_LENGTH:
          case MySqlParser::UNHEX:
          case MySqlParser::UNIX_TIMESTAMP:
          case MySqlParser::UPDATEXML:
          case MySqlParser::UPPER:
          case MySqlParser::UUID:
          case MySqlParser::UUID_SHORT:
          case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
          case MySqlParser::VERSION:
          case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
          case MySqlParser::WEEKDAY:
          case MySqlParser::WEEKOFYEAR:
          case MySqlParser::WEIGHT_STRING:
          case MySqlParser::WITHIN:
          case MySqlParser::YEARWEEK:
          case MySqlParser::Y_FUNCTION:
          case MySqlParser::X_FUNCTION:
          case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
          case MySqlParser::ID:
          case MySqlParser::REVERSE_QUOTE_ID: {
            setState(3328);
            id_();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(3335);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Select_into_expressionContext *>(_tracker.createInstance<MySqlParser::SelectIntoDumpContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(3336);
      match(MySqlParser::INTO);
      setState(3337);
      match(MySqlParser::DUMPFILE);
      setState(3338);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Select_into_expressionContext *>(_tracker.createInstance<MySqlParser::SelectIntoOutfileContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(3339);
      match(MySqlParser::INTO);
      setState(3340);
      match(MySqlParser::OUTFILE);
      setState(3341);
      dynamic_cast<SelectIntoOutfileContext *>(_localctx)->filename = match(MySqlParser::STRING_LITERAL);
      setState(3345);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::CHARACTER) {
        setState(3342);
        match(MySqlParser::CHARACTER);
        setState(3343);
        match(MySqlParser::SET);
        setState(3344);
        dynamic_cast<SelectIntoOutfileContext *>(_localctx)->charset = charset_name();
      }
      setState(3366);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 494, _ctx)) {
      case 1: {
        setState(3347);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::COLUMNS

        || _la == MySqlParser::FIELDS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3351);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::TERMINATED) {
          setState(3348);
          match(MySqlParser::TERMINATED);
          setState(3349);
          match(MySqlParser::BY);
          setState(3350);
          dynamic_cast<SelectIntoOutfileContext *>(_localctx)->terminatefieldsymb = match(MySqlParser::STRING_LITERAL);
        }
        setState(3359);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ENCLOSED

        || _la == MySqlParser::OPTIONALLY) {
          setState(3354);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::OPTIONALLY) {
            setState(3353);
            match(MySqlParser::OPTIONALLY);
          }
          setState(3356);
          match(MySqlParser::ENCLOSED);
          setState(3357);
          match(MySqlParser::BY);
          setState(3358);
          dynamic_cast<SelectIntoOutfileContext *>(_localctx)->enclosedsymb = match(MySqlParser::STRING_LITERAL);
        }
        setState(3364);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ESCAPED) {
          setState(3361);
          match(MySqlParser::ESCAPED);
          setState(3362);
          match(MySqlParser::BY);
          setState(3363);
          dynamic_cast<SelectIntoOutfileContext *>(_localctx)->escapesymb = match(MySqlParser::STRING_LITERAL);
        }
        break;
      }

      }
      setState(3379);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LINES) {
        setState(3368);
        match(MySqlParser::LINES);
        setState(3372);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::STARTING) {
          setState(3369);
          match(MySqlParser::STARTING);
          setState(3370);
          match(MySqlParser::BY);
          setState(3371);
          dynamic_cast<SelectIntoOutfileContext *>(_localctx)->startingsymb = match(MySqlParser::STRING_LITERAL);
        }
        setState(3377);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::TERMINATED) {
          setState(3374);
          match(MySqlParser::TERMINATED);
          setState(3375);
          match(MySqlParser::BY);
          setState(3376);
          dynamic_cast<SelectIntoOutfileContext *>(_localctx)->terminatelinesymb = match(MySqlParser::STRING_LITERAL);
        }
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_clauseContext ------------------------------------------------------------------

MySqlParser::From_clauseContext::From_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::From_clauseContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

MySqlParser::Table_sourcesContext* MySqlParser::From_clauseContext::table_sources() {
  return getRuleContext<MySqlParser::Table_sourcesContext>(0);
}

tree::TerminalNode* MySqlParser::From_clauseContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::From_clauseContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::From_clauseContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

tree::TerminalNode* MySqlParser::From_clauseContext::GROUP() {
  return getToken(MySqlParser::GROUP, 0);
}

tree::TerminalNode* MySqlParser::From_clauseContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

std::vector<MySqlParser::Group_by_itemContext *> MySqlParser::From_clauseContext::group_by_item() {
  return getRuleContexts<MySqlParser::Group_by_itemContext>();
}

MySqlParser::Group_by_itemContext* MySqlParser::From_clauseContext::group_by_item(size_t i) {
  return getRuleContext<MySqlParser::Group_by_itemContext>(i);
}

tree::TerminalNode* MySqlParser::From_clauseContext::HAVING() {
  return getToken(MySqlParser::HAVING, 0);
}

tree::TerminalNode* MySqlParser::From_clauseContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::From_clauseContext::ROLLUP() {
  return getToken(MySqlParser::ROLLUP, 0);
}


size_t MySqlParser::From_clauseContext::getRuleIndex() const {
  return MySqlParser::RuleFrom_clause;
}

void MySqlParser::From_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_clause(this);
}

void MySqlParser::From_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_clause(this);
}

MySqlParser::From_clauseContext* MySqlParser::from_clause() {
  From_clauseContext *_localctx = _tracker.createInstance<From_clauseContext>(_ctx, getState());
  enterRule(_localctx, 230, MySqlParser::RuleFrom_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3383);
    match(MySqlParser::FROM);
    setState(3384);
    table_sources();
    setState(3387);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WHERE) {
      setState(3385);
      match(MySqlParser::WHERE);
      setState(3386);
      expression(0);
    }
    setState(3403);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::GROUP) {
      setState(3389);
      match(MySqlParser::GROUP);
      setState(3390);
      match(MySqlParser::BY);
      setState(3391);
      group_by_item();
      setState(3396);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(3392);
        match(MySqlParser::COMMA);
        setState(3393);
        group_by_item();
        setState(3398);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3401);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 501, _ctx)) {
      case 1: {
        setState(3399);
        match(MySqlParser::WITH);
        setState(3400);
        match(MySqlParser::ROLLUP);
        break;
      }

      }
    }
    setState(3407);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::HAVING) {
      setState(3405);
      match(MySqlParser::HAVING);
      setState(3406);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Group_by_itemContext ------------------------------------------------------------------

MySqlParser::Group_by_itemContext::Group_by_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::ExpressionContext* MySqlParser::Group_by_itemContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::Group_by_itemContext::ASC() {
  return getToken(MySqlParser::ASC, 0);
}

tree::TerminalNode* MySqlParser::Group_by_itemContext::DESC() {
  return getToken(MySqlParser::DESC, 0);
}


size_t MySqlParser::Group_by_itemContext::getRuleIndex() const {
  return MySqlParser::RuleGroup_by_item;
}

void MySqlParser::Group_by_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroup_by_item(this);
}

void MySqlParser::Group_by_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroup_by_item(this);
}

MySqlParser::Group_by_itemContext* MySqlParser::group_by_item() {
  Group_by_itemContext *_localctx = _tracker.createInstance<Group_by_itemContext>(_ctx, getState());
  enterRule(_localctx, 232, MySqlParser::RuleGroup_by_item);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3409);
    expression(0);
    setState(3411);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ASC

    || _la == MySqlParser::DESC) {
      setState(3410);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ASC

      || _la == MySqlParser::DESC)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Limit_clauseContext ------------------------------------------------------------------

MySqlParser::Limit_clauseContext::Limit_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Limit_clauseContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::Limit_clauseContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::Limit_clauseContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}

tree::TerminalNode* MySqlParser::Limit_clauseContext::OFFSET() {
  return getToken(MySqlParser::OFFSET, 0);
}


size_t MySqlParser::Limit_clauseContext::getRuleIndex() const {
  return MySqlParser::RuleLimit_clause;
}

void MySqlParser::Limit_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLimit_clause(this);
}

void MySqlParser::Limit_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLimit_clause(this);
}

MySqlParser::Limit_clauseContext* MySqlParser::limit_clause() {
  Limit_clauseContext *_localctx = _tracker.createInstance<Limit_clauseContext>(_ctx, getState());
  enterRule(_localctx, 234, MySqlParser::RuleLimit_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3413);
    match(MySqlParser::LIMIT);
    setState(3424);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 506, _ctx)) {
    case 1: {
      setState(3417);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 505, _ctx)) {
      case 1: {
        setState(3414);
        decimal_literal();
        setState(3415);
        match(MySqlParser::COMMA);
        break;
      }

      }
      setState(3419);
      decimal_literal();
      break;
    }

    case 2: {
      setState(3420);
      decimal_literal();
      setState(3421);
      match(MySqlParser::OFFSET);
      setState(3422);
      decimal_literal();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_transactionContext ------------------------------------------------------------------

MySqlParser::Start_transactionContext::Start_transactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Start_transactionContext::START() {
  return getToken(MySqlParser::START, 0);
}

tree::TerminalNode* MySqlParser::Start_transactionContext::TRANSACTION() {
  return getToken(MySqlParser::TRANSACTION, 0);
}

std::vector<MySqlParser::Transact_optionContext *> MySqlParser::Start_transactionContext::transact_option() {
  return getRuleContexts<MySqlParser::Transact_optionContext>();
}

MySqlParser::Transact_optionContext* MySqlParser::Start_transactionContext::transact_option(size_t i) {
  return getRuleContext<MySqlParser::Transact_optionContext>(i);
}


size_t MySqlParser::Start_transactionContext::getRuleIndex() const {
  return MySqlParser::RuleStart_transaction;
}

void MySqlParser::Start_transactionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_transaction(this);
}

void MySqlParser::Start_transactionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_transaction(this);
}

MySqlParser::Start_transactionContext* MySqlParser::start_transaction() {
  Start_transactionContext *_localctx = _tracker.createInstance<Start_transactionContext>(_ctx, getState());
  enterRule(_localctx, 236, MySqlParser::RuleStart_transaction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3426);
    match(MySqlParser::START);
    setState(3427);
    match(MySqlParser::TRANSACTION);
    setState(3436);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::READ

    || _la == MySqlParser::WITH) {
      setState(3428);
      transact_option();
      setState(3433);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(3429);
        match(MySqlParser::COMMA);
        setState(3430);
        transact_option();
        setState(3435);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Begin_workContext ------------------------------------------------------------------

MySqlParser::Begin_workContext::Begin_workContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Begin_workContext::BEGIN() {
  return getToken(MySqlParser::BEGIN, 0);
}

tree::TerminalNode* MySqlParser::Begin_workContext::WORK() {
  return getToken(MySqlParser::WORK, 0);
}


size_t MySqlParser::Begin_workContext::getRuleIndex() const {
  return MySqlParser::RuleBegin_work;
}

void MySqlParser::Begin_workContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBegin_work(this);
}

void MySqlParser::Begin_workContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBegin_work(this);
}

MySqlParser::Begin_workContext* MySqlParser::begin_work() {
  Begin_workContext *_localctx = _tracker.createInstance<Begin_workContext>(_ctx, getState());
  enterRule(_localctx, 238, MySqlParser::RuleBegin_work);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3438);
    match(MySqlParser::BEGIN);
    setState(3440);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WORK) {
      setState(3439);
      match(MySqlParser::WORK);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Commit_workContext ------------------------------------------------------------------

MySqlParser::Commit_workContext::Commit_workContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Commit_workContext::COMMIT() {
  return getToken(MySqlParser::COMMIT, 0);
}

tree::TerminalNode* MySqlParser::Commit_workContext::WORK() {
  return getToken(MySqlParser::WORK, 0);
}

tree::TerminalNode* MySqlParser::Commit_workContext::AND() {
  return getToken(MySqlParser::AND, 0);
}

tree::TerminalNode* MySqlParser::Commit_workContext::CHAIN() {
  return getToken(MySqlParser::CHAIN, 0);
}

tree::TerminalNode* MySqlParser::Commit_workContext::RELEASE() {
  return getToken(MySqlParser::RELEASE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Commit_workContext::NO() {
  return getTokens(MySqlParser::NO);
}

tree::TerminalNode* MySqlParser::Commit_workContext::NO(size_t i) {
  return getToken(MySqlParser::NO, i);
}


size_t MySqlParser::Commit_workContext::getRuleIndex() const {
  return MySqlParser::RuleCommit_work;
}

void MySqlParser::Commit_workContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommit_work(this);
}

void MySqlParser::Commit_workContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommit_work(this);
}

MySqlParser::Commit_workContext* MySqlParser::commit_work() {
  Commit_workContext *_localctx = _tracker.createInstance<Commit_workContext>(_ctx, getState());
  enterRule(_localctx, 240, MySqlParser::RuleCommit_work);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3442);
    match(MySqlParser::COMMIT);
    setState(3444);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WORK) {
      setState(3443);
      match(MySqlParser::WORK);
    }
    setState(3451);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::AND) {
      setState(3446);
      match(MySqlParser::AND);
      setState(3448);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NO) {
        setState(3447);
        match(MySqlParser::NO);
      }
      setState(3450);
      match(MySqlParser::CHAIN);
    }
    setState(3457);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::RELEASE || _la == MySqlParser::NO) {
      setState(3454);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NO) {
        setState(3453);
        match(MySqlParser::NO);
      }
      setState(3456);
      match(MySqlParser::RELEASE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rollback_workContext ------------------------------------------------------------------

MySqlParser::Rollback_workContext::Rollback_workContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Rollback_workContext::ROLLBACK() {
  return getToken(MySqlParser::ROLLBACK, 0);
}

tree::TerminalNode* MySqlParser::Rollback_workContext::WORK() {
  return getToken(MySqlParser::WORK, 0);
}

tree::TerminalNode* MySqlParser::Rollback_workContext::AND() {
  return getToken(MySqlParser::AND, 0);
}

tree::TerminalNode* MySqlParser::Rollback_workContext::CHAIN() {
  return getToken(MySqlParser::CHAIN, 0);
}

tree::TerminalNode* MySqlParser::Rollback_workContext::RELEASE() {
  return getToken(MySqlParser::RELEASE, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Rollback_workContext::NO() {
  return getTokens(MySqlParser::NO);
}

tree::TerminalNode* MySqlParser::Rollback_workContext::NO(size_t i) {
  return getToken(MySqlParser::NO, i);
}


size_t MySqlParser::Rollback_workContext::getRuleIndex() const {
  return MySqlParser::RuleRollback_work;
}

void MySqlParser::Rollback_workContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRollback_work(this);
}

void MySqlParser::Rollback_workContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRollback_work(this);
}

MySqlParser::Rollback_workContext* MySqlParser::rollback_work() {
  Rollback_workContext *_localctx = _tracker.createInstance<Rollback_workContext>(_ctx, getState());
  enterRule(_localctx, 242, MySqlParser::RuleRollback_work);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3459);
    match(MySqlParser::ROLLBACK);
    setState(3461);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WORK) {
      setState(3460);
      match(MySqlParser::WORK);
    }
    setState(3468);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::AND) {
      setState(3463);
      match(MySqlParser::AND);
      setState(3465);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NO) {
        setState(3464);
        match(MySqlParser::NO);
      }
      setState(3467);
      match(MySqlParser::CHAIN);
    }
    setState(3474);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::RELEASE || _la == MySqlParser::NO) {
      setState(3471);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NO) {
        setState(3470);
        match(MySqlParser::NO);
      }
      setState(3473);
      match(MySqlParser::RELEASE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Savepoint_statementContext ------------------------------------------------------------------

MySqlParser::Savepoint_statementContext::Savepoint_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Savepoint_statementContext::SAVEPOINT() {
  return getToken(MySqlParser::SAVEPOINT, 0);
}

MySqlParser::Id_Context* MySqlParser::Savepoint_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}


size_t MySqlParser::Savepoint_statementContext::getRuleIndex() const {
  return MySqlParser::RuleSavepoint_statement;
}

void MySqlParser::Savepoint_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSavepoint_statement(this);
}

void MySqlParser::Savepoint_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSavepoint_statement(this);
}

MySqlParser::Savepoint_statementContext* MySqlParser::savepoint_statement() {
  Savepoint_statementContext *_localctx = _tracker.createInstance<Savepoint_statementContext>(_ctx, getState());
  enterRule(_localctx, 244, MySqlParser::RuleSavepoint_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3476);
    match(MySqlParser::SAVEPOINT);
    setState(3477);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rollback_statementContext ------------------------------------------------------------------

MySqlParser::Rollback_statementContext::Rollback_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Rollback_statementContext::ROLLBACK() {
  return getToken(MySqlParser::ROLLBACK, 0);
}

tree::TerminalNode* MySqlParser::Rollback_statementContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

MySqlParser::Id_Context* MySqlParser::Rollback_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Rollback_statementContext::WORK() {
  return getToken(MySqlParser::WORK, 0);
}

tree::TerminalNode* MySqlParser::Rollback_statementContext::SAVEPOINT() {
  return getToken(MySqlParser::SAVEPOINT, 0);
}


size_t MySqlParser::Rollback_statementContext::getRuleIndex() const {
  return MySqlParser::RuleRollback_statement;
}

void MySqlParser::Rollback_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRollback_statement(this);
}

void MySqlParser::Rollback_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRollback_statement(this);
}

MySqlParser::Rollback_statementContext* MySqlParser::rollback_statement() {
  Rollback_statementContext *_localctx = _tracker.createInstance<Rollback_statementContext>(_ctx, getState());
  enterRule(_localctx, 246, MySqlParser::RuleRollback_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3479);
    match(MySqlParser::ROLLBACK);
    setState(3481);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WORK) {
      setState(3480);
      match(MySqlParser::WORK);
    }
    setState(3483);
    match(MySqlParser::TO);
    setState(3485);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 521, _ctx)) {
    case 1: {
      setState(3484);
      match(MySqlParser::SAVEPOINT);
      break;
    }

    }
    setState(3487);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Release_statementContext ------------------------------------------------------------------

MySqlParser::Release_statementContext::Release_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Release_statementContext::RELEASE() {
  return getToken(MySqlParser::RELEASE, 0);
}

tree::TerminalNode* MySqlParser::Release_statementContext::SAVEPOINT() {
  return getToken(MySqlParser::SAVEPOINT, 0);
}

MySqlParser::Id_Context* MySqlParser::Release_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}


size_t MySqlParser::Release_statementContext::getRuleIndex() const {
  return MySqlParser::RuleRelease_statement;
}

void MySqlParser::Release_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelease_statement(this);
}

void MySqlParser::Release_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelease_statement(this);
}

MySqlParser::Release_statementContext* MySqlParser::release_statement() {
  Release_statementContext *_localctx = _tracker.createInstance<Release_statementContext>(_ctx, getState());
  enterRule(_localctx, 248, MySqlParser::RuleRelease_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3489);
    match(MySqlParser::RELEASE);
    setState(3490);
    match(MySqlParser::SAVEPOINT);
    setState(3491);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lock_tablesContext ------------------------------------------------------------------

MySqlParser::Lock_tablesContext::Lock_tablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Lock_tablesContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::Lock_tablesContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

std::vector<MySqlParser::Lock_table_elementContext *> MySqlParser::Lock_tablesContext::lock_table_element() {
  return getRuleContexts<MySqlParser::Lock_table_elementContext>();
}

MySqlParser::Lock_table_elementContext* MySqlParser::Lock_tablesContext::lock_table_element(size_t i) {
  return getRuleContext<MySqlParser::Lock_table_elementContext>(i);
}


size_t MySqlParser::Lock_tablesContext::getRuleIndex() const {
  return MySqlParser::RuleLock_tables;
}

void MySqlParser::Lock_tablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLock_tables(this);
}

void MySqlParser::Lock_tablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLock_tables(this);
}

MySqlParser::Lock_tablesContext* MySqlParser::lock_tables() {
  Lock_tablesContext *_localctx = _tracker.createInstance<Lock_tablesContext>(_ctx, getState());
  enterRule(_localctx, 250, MySqlParser::RuleLock_tables);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3493);
    match(MySqlParser::LOCK);
    setState(3494);
    match(MySqlParser::TABLES);
    setState(3495);
    lock_table_element();
    setState(3500);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3496);
      match(MySqlParser::COMMA);
      setState(3497);
      lock_table_element();
      setState(3502);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unlock_tablesContext ------------------------------------------------------------------

MySqlParser::Unlock_tablesContext::Unlock_tablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Unlock_tablesContext::UNLOCK() {
  return getToken(MySqlParser::UNLOCK, 0);
}

tree::TerminalNode* MySqlParser::Unlock_tablesContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}


size_t MySqlParser::Unlock_tablesContext::getRuleIndex() const {
  return MySqlParser::RuleUnlock_tables;
}

void MySqlParser::Unlock_tablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnlock_tables(this);
}

void MySqlParser::Unlock_tablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnlock_tables(this);
}

MySqlParser::Unlock_tablesContext* MySqlParser::unlock_tables() {
  Unlock_tablesContext *_localctx = _tracker.createInstance<Unlock_tablesContext>(_ctx, getState());
  enterRule(_localctx, 252, MySqlParser::RuleUnlock_tables);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3503);
    match(MySqlParser::UNLOCK);
    setState(3504);
    match(MySqlParser::TABLES);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_autocommit_statementContext ------------------------------------------------------------------

MySqlParser::Set_autocommit_statementContext::Set_autocommit_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Set_autocommit_statementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::Set_autocommit_statementContext::AUTOCOMMIT() {
  return getToken(MySqlParser::AUTOCOMMIT, 0);
}


size_t MySqlParser::Set_autocommit_statementContext::getRuleIndex() const {
  return MySqlParser::RuleSet_autocommit_statement;
}

void MySqlParser::Set_autocommit_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_autocommit_statement(this);
}

void MySqlParser::Set_autocommit_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_autocommit_statement(this);
}

MySqlParser::Set_autocommit_statementContext* MySqlParser::set_autocommit_statement() {
  Set_autocommit_statementContext *_localctx = _tracker.createInstance<Set_autocommit_statementContext>(_ctx, getState());
  enterRule(_localctx, 254, MySqlParser::RuleSet_autocommit_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3506);
    match(MySqlParser::SET);
    setState(3507);
    match(MySqlParser::AUTOCOMMIT);
    setState(3508);
    match(MySqlParser::EQUAL_SYMBOL);
    setState(3509);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::ZERO_DECIMAL

    || _la == MySqlParser::ONE_DECIMAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_transaction_statementContext ------------------------------------------------------------------

MySqlParser::Set_transaction_statementContext::Set_transaction_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Set_transaction_statementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::Set_transaction_statementContext::TRANSACTION() {
  return getToken(MySqlParser::TRANSACTION, 0);
}

std::vector<MySqlParser::Trans_characteristicContext *> MySqlParser::Set_transaction_statementContext::trans_characteristic() {
  return getRuleContexts<MySqlParser::Trans_characteristicContext>();
}

MySqlParser::Trans_characteristicContext* MySqlParser::Set_transaction_statementContext::trans_characteristic(size_t i) {
  return getRuleContext<MySqlParser::Trans_characteristicContext>(i);
}

tree::TerminalNode* MySqlParser::Set_transaction_statementContext::GLOBAL() {
  return getToken(MySqlParser::GLOBAL, 0);
}

tree::TerminalNode* MySqlParser::Set_transaction_statementContext::SESSION() {
  return getToken(MySqlParser::SESSION, 0);
}


size_t MySqlParser::Set_transaction_statementContext::getRuleIndex() const {
  return MySqlParser::RuleSet_transaction_statement;
}

void MySqlParser::Set_transaction_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_transaction_statement(this);
}

void MySqlParser::Set_transaction_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_transaction_statement(this);
}

MySqlParser::Set_transaction_statementContext* MySqlParser::set_transaction_statement() {
  Set_transaction_statementContext *_localctx = _tracker.createInstance<Set_transaction_statementContext>(_ctx, getState());
  enterRule(_localctx, 256, MySqlParser::RuleSet_transaction_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3511);
    match(MySqlParser::SET);
    setState(3513);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::GLOBAL || _la == MySqlParser::SESSION) {
      setState(3512);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::GLOBAL || _la == MySqlParser::SESSION)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3515);
    match(MySqlParser::TRANSACTION);
    setState(3516);
    trans_characteristic();
    setState(3521);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3517);
      match(MySqlParser::COMMA);
      setState(3518);
      trans_characteristic();
      setState(3523);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transact_optionContext ------------------------------------------------------------------

MySqlParser::Transact_optionContext::Transact_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Transact_optionContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::Transact_optionContext::CONSISTENT() {
  return getToken(MySqlParser::CONSISTENT, 0);
}

tree::TerminalNode* MySqlParser::Transact_optionContext::SNAPSHOT() {
  return getToken(MySqlParser::SNAPSHOT, 0);
}

tree::TerminalNode* MySqlParser::Transact_optionContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::Transact_optionContext::WRITE() {
  return getToken(MySqlParser::WRITE, 0);
}

tree::TerminalNode* MySqlParser::Transact_optionContext::ONLY() {
  return getToken(MySqlParser::ONLY, 0);
}


size_t MySqlParser::Transact_optionContext::getRuleIndex() const {
  return MySqlParser::RuleTransact_option;
}

void MySqlParser::Transact_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransact_option(this);
}

void MySqlParser::Transact_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransact_option(this);
}

MySqlParser::Transact_optionContext* MySqlParser::transact_option() {
  Transact_optionContext *_localctx = _tracker.createInstance<Transact_optionContext>(_ctx, getState());
  enterRule(_localctx, 258, MySqlParser::RuleTransact_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3531);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 525, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3524);
      match(MySqlParser::WITH);
      setState(3525);
      match(MySqlParser::CONSISTENT);
      setState(3526);
      match(MySqlParser::SNAPSHOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3527);
      match(MySqlParser::READ);
      setState(3528);
      match(MySqlParser::WRITE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3529);
      match(MySqlParser::READ);
      setState(3530);
      match(MySqlParser::ONLY);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lock_table_elementContext ------------------------------------------------------------------

MySqlParser::Lock_table_elementContext::Lock_table_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Table_nameContext* MySqlParser::Lock_table_elementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Lock_table_elementContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::Lock_table_elementContext::WRITE() {
  return getToken(MySqlParser::WRITE, 0);
}

MySqlParser::Id_Context* MySqlParser::Lock_table_elementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Lock_table_elementContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}

tree::TerminalNode* MySqlParser::Lock_table_elementContext::LOW_PRIORITY() {
  return getToken(MySqlParser::LOW_PRIORITY, 0);
}

tree::TerminalNode* MySqlParser::Lock_table_elementContext::AS() {
  return getToken(MySqlParser::AS, 0);
}


size_t MySqlParser::Lock_table_elementContext::getRuleIndex() const {
  return MySqlParser::RuleLock_table_element;
}

void MySqlParser::Lock_table_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLock_table_element(this);
}

void MySqlParser::Lock_table_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLock_table_element(this);
}

MySqlParser::Lock_table_elementContext* MySqlParser::lock_table_element() {
  Lock_table_elementContext *_localctx = _tracker.createInstance<Lock_table_elementContext>(_ctx, getState());
  enterRule(_localctx, 260, MySqlParser::RuleLock_table_element);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3533);
    table_name();
    setState(3538);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::AS || _la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519))
      | (1ULL << (MySqlParser::QUARTER - 519))
      | (1ULL << (MySqlParser::MONTH - 519))
      | (1ULL << (MySqlParser::DAY - 519))
      | (1ULL << (MySqlParser::HOUR - 519))
      | (1ULL << (MySqlParser::MINUTE - 519))
      | (1ULL << (MySqlParser::WEEK - 519))
      | (1ULL << (MySqlParser::SECOND - 519))
      | (1ULL << (MySqlParser::MICROSECOND - 519))
      | (1ULL << (MySqlParser::TABLES - 519))
      | (1ULL << (MySqlParser::ROUTINE - 519))
      | (1ULL << (MySqlParser::EXECUTE - 519))
      | (1ULL << (MySqlParser::FILE - 519))
      | (1ULL << (MySqlParser::PROCESS - 519))
      | (1ULL << (MySqlParser::RELOAD - 519))
      | (1ULL << (MySqlParser::SHUTDOWN - 519))
      | (1ULL << (MySqlParser::SUPER - 519))
      | (1ULL << (MySqlParser::PRIVILEGES - 519))
      | (1ULL << (MySqlParser::ARMSCII8 - 519))
      | (1ULL << (MySqlParser::ASCII - 519))
      | (1ULL << (MySqlParser::BIG5 - 519))
      | (1ULL << (MySqlParser::CP1250 - 519))
      | (1ULL << (MySqlParser::CP1251 - 519))
      | (1ULL << (MySqlParser::CP1256 - 519))
      | (1ULL << (MySqlParser::CP1257 - 519))
      | (1ULL << (MySqlParser::CP850 - 519))
      | (1ULL << (MySqlParser::CP852 - 519))
      | (1ULL << (MySqlParser::CP866 - 519))
      | (1ULL << (MySqlParser::CP932 - 519))
      | (1ULL << (MySqlParser::DEC8 - 519))
      | (1ULL << (MySqlParser::EUCJPMS - 519))
      | (1ULL << (MySqlParser::EUCKR - 519))
      | (1ULL << (MySqlParser::GB2312 - 519))
      | (1ULL << (MySqlParser::GBK - 519))
      | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
      | (1ULL << (MySqlParser::HEBREW - 583))
      | (1ULL << (MySqlParser::HP8 - 583))
      | (1ULL << (MySqlParser::KEYBCS2 - 583))
      | (1ULL << (MySqlParser::KOI8R - 583))
      | (1ULL << (MySqlParser::KOI8U - 583))
      | (1ULL << (MySqlParser::LATIN1 - 583))
      | (1ULL << (MySqlParser::LATIN2 - 583))
      | (1ULL << (MySqlParser::LATIN5 - 583))
      | (1ULL << (MySqlParser::LATIN7 - 583))
      | (1ULL << (MySqlParser::MACCE - 583))
      | (1ULL << (MySqlParser::MACROMAN - 583))
      | (1ULL << (MySqlParser::SJIS - 583))
      | (1ULL << (MySqlParser::SWE7 - 583))
      | (1ULL << (MySqlParser::TIS620 - 583))
      | (1ULL << (MySqlParser::UCS2 - 583))
      | (1ULL << (MySqlParser::UJIS - 583))
      | (1ULL << (MySqlParser::UTF16 - 583))
      | (1ULL << (MySqlParser::UTF16LE - 583))
      | (1ULL << (MySqlParser::UTF32 - 583))
      | (1ULL << (MySqlParser::UTF8 - 583))
      | (1ULL << (MySqlParser::UTF8MB3 - 583))
      | (1ULL << (MySqlParser::UTF8MB4 - 583))
      | (1ULL << (MySqlParser::ARCHIVE - 583))
      | (1ULL << (MySqlParser::BLACKHOLE - 583))
      | (1ULL << (MySqlParser::CSV - 583))
      | (1ULL << (MySqlParser::FEDERATED - 583))
      | (1ULL << (MySqlParser::INNODB - 583))
      | (1ULL << (MySqlParser::MEMORY - 583))
      | (1ULL << (MySqlParser::MRG_MYISAM - 583))
      | (1ULL << (MySqlParser::MYISAM - 583))
      | (1ULL << (MySqlParser::NDB - 583))
      | (1ULL << (MySqlParser::NDBCLUSTER - 583))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
      | (1ULL << (MySqlParser::REPEATABLE - 583))
      | (1ULL << (MySqlParser::COMMITTED - 583))
      | (1ULL << (MySqlParser::UNCOMMITTED - 583))
      | (1ULL << (MySqlParser::SERIALIZABLE - 583))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
      | (1ULL << (MySqlParser::LINESTRING - 583))
      | (1ULL << (MySqlParser::MULTILINESTRING - 583))
      | (1ULL << (MySqlParser::MULTIPOINT - 583))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
      | (1ULL << (MySqlParser::POINT - 583))
      | (1ULL << (MySqlParser::POLYGON - 583))
      | (1ULL << (MySqlParser::ABS - 583))
      | (1ULL << (MySqlParser::ACOS - 583))
      | (1ULL << (MySqlParser::ADDDATE - 583))
      | (1ULL << (MySqlParser::ADDTIME - 583))
      | (1ULL << (MySqlParser::AES_DECRYPT - 583))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
      | (1ULL << (MySqlParser::AREA - 583))
      | (1ULL << (MySqlParser::ASBINARY - 583))
      | (1ULL << (MySqlParser::ASIN - 583))
      | (1ULL << (MySqlParser::ASTEXT - 583))
      | (1ULL << (MySqlParser::ASWKB - 583))
      | (1ULL << (MySqlParser::ASWKT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
      | (1ULL << (MySqlParser::ATAN - 583))
      | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
      | (1ULL << (MySqlParser::BIN - 647))
      | (1ULL << (MySqlParser::BIT_COUNT - 647))
      | (1ULL << (MySqlParser::BIT_LENGTH - 647))
      | (1ULL << (MySqlParser::BUFFER - 647))
      | (1ULL << (MySqlParser::CEIL - 647))
      | (1ULL << (MySqlParser::CEILING - 647))
      | (1ULL << (MySqlParser::CENTROID - 647))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
      | (1ULL << (MySqlParser::CHARSET - 647))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
      | (1ULL << (MySqlParser::COERCIBILITY - 647))
      | (1ULL << (MySqlParser::COLLATION - 647))
      | (1ULL << (MySqlParser::COMPRESS - 647))
      | (1ULL << (MySqlParser::CONCAT - 647))
      | (1ULL << (MySqlParser::CONCAT_WS - 647))
      | (1ULL << (MySqlParser::CONNECTION_ID - 647))
      | (1ULL << (MySqlParser::CONV - 647))
      | (1ULL << (MySqlParser::CONVERT_TZ - 647))
      | (1ULL << (MySqlParser::COS - 647))
      | (1ULL << (MySqlParser::COT - 647))
      | (1ULL << (MySqlParser::CRC32 - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
      | (1ULL << (MySqlParser::CROSSES - 647))
      | (1ULL << (MySqlParser::DATEDIFF - 647))
      | (1ULL << (MySqlParser::DATE_FORMAT - 647))
      | (1ULL << (MySqlParser::DAYNAME - 647))
      | (1ULL << (MySqlParser::DAYOFMONTH - 647))
      | (1ULL << (MySqlParser::DAYOFWEEK - 647))
      | (1ULL << (MySqlParser::DAYOFYEAR - 647))
      | (1ULL << (MySqlParser::DECODE - 647))
      | (1ULL << (MySqlParser::DEGREES - 647))
      | (1ULL << (MySqlParser::DES_DECRYPT - 647))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
      | (1ULL << (MySqlParser::DIMENSION - 647))
      | (1ULL << (MySqlParser::DISJOINT - 647))
      | (1ULL << (MySqlParser::ELT - 647))
      | (1ULL << (MySqlParser::ENCODE - 647))
      | (1ULL << (MySqlParser::ENCRYPT - 647))
      | (1ULL << (MySqlParser::ENDPOINT - 647))
      | (1ULL << (MySqlParser::ENVELOPE - 647))
      | (1ULL << (MySqlParser::EQUALS - 647))
      | (1ULL << (MySqlParser::EXP - 647))
      | (1ULL << (MySqlParser::EXPORT_SET - 647))
      | (1ULL << (MySqlParser::EXTERIORRING - 647))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
      | (1ULL << (MySqlParser::FIELD - 647))
      | (1ULL << (MySqlParser::FIND_IN_SET - 647))
      | (1ULL << (MySqlParser::FLOOR - 647))
      | (1ULL << (MySqlParser::FORMAT - 647))
      | (1ULL << (MySqlParser::FOUND_ROWS - 647))
      | (1ULL << (MySqlParser::FROM_BASE64 - 647))
      | (1ULL << (MySqlParser::FROM_DAYS - 647))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
      | (1ULL << (MySqlParser::GET_FORMAT - 711))
      | (1ULL << (MySqlParser::GET_LOCK - 711))
      | (1ULL << (MySqlParser::GLENGTH - 711))
      | (1ULL << (MySqlParser::GREATEST - 711))
      | (1ULL << (MySqlParser::GTID_SUBSET - 711))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
      | (1ULL << (MySqlParser::HEX - 711))
      | (1ULL << (MySqlParser::IFNULL - 711))
      | (1ULL << (MySqlParser::INET6_ATON - 711))
      | (1ULL << (MySqlParser::INET6_NTOA - 711))
      | (1ULL << (MySqlParser::INET_ATON - 711))
      | (1ULL << (MySqlParser::INET_NTOA - 711))
      | (1ULL << (MySqlParser::INSTR - 711))
      | (1ULL << (MySqlParser::INTERIORRINGN - 711))
      | (1ULL << (MySqlParser::INTERSECTS - 711))
      | (1ULL << (MySqlParser::ISCLOSED - 711))
      | (1ULL << (MySqlParser::ISEMPTY - 711))
      | (1ULL << (MySqlParser::ISNULL - 711))
      | (1ULL << (MySqlParser::ISSIMPLE - 711))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
      | (1ULL << (MySqlParser::IS_IPV4 - 711))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
      | (1ULL << (MySqlParser::IS_IPV6 - 711))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
      | (1ULL << (MySqlParser::LCASE - 711))
      | (1ULL << (MySqlParser::LEAST - 711))
      | (1ULL << (MySqlParser::LENGTH - 711))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINEFROMWKB - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
      | (1ULL << (MySqlParser::LN - 711))
      | (1ULL << (MySqlParser::LOAD_FILE - 711))
      | (1ULL << (MySqlParser::LOCATE - 711))
      | (1ULL << (MySqlParser::LOG - 711))
      | (1ULL << (MySqlParser::LOG10 - 711))
      | (1ULL << (MySqlParser::LOG2 - 711))
      | (1ULL << (MySqlParser::LOWER - 711))
      | (1ULL << (MySqlParser::LPAD - 711))
      | (1ULL << (MySqlParser::LTRIM - 711))
      | (1ULL << (MySqlParser::MAKEDATE - 711))
      | (1ULL << (MySqlParser::MAKETIME - 711))
      | (1ULL << (MySqlParser::MAKE_SET - 711))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
      | (1ULL << (MySqlParser::MBRCONTAINS - 711))
      | (1ULL << (MySqlParser::MBRDISJOINT - 711))
      | (1ULL << (MySqlParser::MBREQUAL - 711))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
      | (1ULL << (MySqlParser::MBROVERLAPS - 711))
      | (1ULL << (MySqlParser::MBRTOUCHES - 711))
      | (1ULL << (MySqlParser::MBRWITHIN - 711))
      | (1ULL << (MySqlParser::MD5 - 711))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
      | (1ULL << (MySqlParser::MONTHNAME - 711))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::NAME_CONST - 775))
      | (1ULL << (MySqlParser::NULLIF - 775))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
      | (1ULL << (MySqlParser::NUMPOINTS - 775))
      | (1ULL << (MySqlParser::OCT - 775))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
      | (1ULL << (MySqlParser::ORD - 775))
      | (1ULL << (MySqlParser::OVERLAPS - 775))
      | (1ULL << (MySqlParser::PERIOD_ADD - 775))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
      | (1ULL << (MySqlParser::PI - 775))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::POINTFROMWKB - 775))
      | (1ULL << (MySqlParser::POINTN - 775))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYFROMWKB - 775))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::POW - 775))
      | (1ULL << (MySqlParser::POWER - 775))
      | (1ULL << (MySqlParser::QUOTE - 775))
      | (1ULL << (MySqlParser::RADIANS - 775))
      | (1ULL << (MySqlParser::RAND - 775))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
      | (1ULL << (MySqlParser::REVERSE - 775))
      | (1ULL << (MySqlParser::ROUND - 775))
      | (1ULL << (MySqlParser::ROW_COUNT - 775))
      | (1ULL << (MySqlParser::RPAD - 775))
      | (1ULL << (MySqlParser::RTRIM - 775))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
      | (1ULL << (MySqlParser::SESSION_USER - 775))
      | (1ULL << (MySqlParser::SHA - 775))
      | (1ULL << (MySqlParser::SHA1 - 775))
      | (1ULL << (MySqlParser::SHA2 - 775))
      | (1ULL << (MySqlParser::SIGN - 775))
      | (1ULL << (MySqlParser::SIN - 775))
      | (1ULL << (MySqlParser::SLEEP - 775))
      | (1ULL << (MySqlParser::SOUNDEX - 775))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
      | (1ULL << (MySqlParser::SQRT - 775))
      | (1ULL << (MySqlParser::SRID - 775))
      | (1ULL << (MySqlParser::STARTPOINT - 775))
      | (1ULL << (MySqlParser::STRCMP - 775))
      | (1ULL << (MySqlParser::STR_TO_DATE - 775))
      | (1ULL << (MySqlParser::ST_AREA - 775))
      | (1ULL << (MySqlParser::ST_ASBINARY - 775))
      | (1ULL << (MySqlParser::ST_ASTEXT - 775))
      | (1ULL << (MySqlParser::ST_ASWKB - 775))
      | (1ULL << (MySqlParser::ST_ASWKT - 775))
      | (1ULL << (MySqlParser::ST_BUFFER - 775))
      | (1ULL << (MySqlParser::ST_CENTROID - 775))
      | (1ULL << (MySqlParser::ST_CONTAINS - 775))
      | (1ULL << (MySqlParser::ST_CROSSES - 775))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
      | (1ULL << (MySqlParser::ST_DIMENSION - 775))
      | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
      | (1ULL << (MySqlParser::ST_EQUALS - 839))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POINTN - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_SRID - 839))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
      | (1ULL << (MySqlParser::ST_TOUCHES - 839))
      | (1ULL << (MySqlParser::ST_UNION - 839))
      | (1ULL << (MySqlParser::ST_WITHIN - 839))
      | (1ULL << (MySqlParser::ST_X - 839))
      | (1ULL << (MySqlParser::ST_Y - 839))
      | (1ULL << (MySqlParser::SUBDATE - 839))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
      | (1ULL << (MySqlParser::SUBTIME - 839))
      | (1ULL << (MySqlParser::SYSTEM_USER - 839))
      | (1ULL << (MySqlParser::TAN - 839))
      | (1ULL << (MySqlParser::TIMEDIFF - 839))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
      | (1ULL << (MySqlParser::TIME_FORMAT - 839))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
      | (1ULL << (MySqlParser::TOUCHES - 839))
      | (1ULL << (MySqlParser::TO_BASE64 - 839))
      | (1ULL << (MySqlParser::TO_DAYS - 839))
      | (1ULL << (MySqlParser::TO_SECONDS - 839))
      | (1ULL << (MySqlParser::UCASE - 839))
      | (1ULL << (MySqlParser::UNCOMPRESS - 839))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
      | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
      | (1ULL << (MySqlParser::UPDATEXML - 903))
      | (1ULL << (MySqlParser::UPPER - 903))
      | (1ULL << (MySqlParser::UUID - 903))
      | (1ULL << (MySqlParser::UUID_SHORT - 903))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
      | (1ULL << (MySqlParser::VERSION - 903))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
      | (1ULL << (MySqlParser::WEEKDAY - 903))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
      | (1ULL << (MySqlParser::WITHIN - 903))
      | (1ULL << (MySqlParser::YEARWEEK - 903))
      | (1ULL << (MySqlParser::Y_FUNCTION - 903))
      | (1ULL << (MySqlParser::X_FUNCTION - 903))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
      | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
      setState(3535);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(3534);
        match(MySqlParser::AS);
      }
      setState(3537);
      id_();
    }
    setState(3548);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::READ: {
        setState(3540);
        match(MySqlParser::READ);
        setState(3542);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LOCAL) {
          setState(3541);
          match(MySqlParser::LOCAL);
        }
        break;
      }

      case MySqlParser::LOW_PRIORITY:
      case MySqlParser::WRITE: {
        setState(3545);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LOW_PRIORITY) {
          setState(3544);
          match(MySqlParser::LOW_PRIORITY);
        }
        setState(3547);
        match(MySqlParser::WRITE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Trans_characteristicContext ------------------------------------------------------------------

MySqlParser::Trans_characteristicContext::Trans_characteristicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Trans_characteristicContext::ISOLATION() {
  return getToken(MySqlParser::ISOLATION, 0);
}

tree::TerminalNode* MySqlParser::Trans_characteristicContext::LEVEL() {
  return getToken(MySqlParser::LEVEL, 0);
}

MySqlParser::Transaction_levelContext* MySqlParser::Trans_characteristicContext::transaction_level() {
  return getRuleContext<MySqlParser::Transaction_levelContext>(0);
}

tree::TerminalNode* MySqlParser::Trans_characteristicContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::Trans_characteristicContext::WRITE() {
  return getToken(MySqlParser::WRITE, 0);
}

tree::TerminalNode* MySqlParser::Trans_characteristicContext::ONLY() {
  return getToken(MySqlParser::ONLY, 0);
}


size_t MySqlParser::Trans_characteristicContext::getRuleIndex() const {
  return MySqlParser::RuleTrans_characteristic;
}

void MySqlParser::Trans_characteristicContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrans_characteristic(this);
}

void MySqlParser::Trans_characteristicContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrans_characteristic(this);
}

MySqlParser::Trans_characteristicContext* MySqlParser::trans_characteristic() {
  Trans_characteristicContext *_localctx = _tracker.createInstance<Trans_characteristicContext>(_ctx, getState());
  enterRule(_localctx, 262, MySqlParser::RuleTrans_characteristic);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3557);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 531, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3550);
      match(MySqlParser::ISOLATION);
      setState(3551);
      match(MySqlParser::LEVEL);
      setState(3552);
      transaction_level();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3553);
      match(MySqlParser::READ);
      setState(3554);
      match(MySqlParser::WRITE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3555);
      match(MySqlParser::READ);
      setState(3556);
      match(MySqlParser::ONLY);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transaction_levelContext ------------------------------------------------------------------

MySqlParser::Transaction_levelContext::Transaction_levelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Transaction_levelContext::REPEATABLE() {
  return getToken(MySqlParser::REPEATABLE, 0);
}

tree::TerminalNode* MySqlParser::Transaction_levelContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::Transaction_levelContext::COMMITTED() {
  return getToken(MySqlParser::COMMITTED, 0);
}

tree::TerminalNode* MySqlParser::Transaction_levelContext::UNCOMMITTED() {
  return getToken(MySqlParser::UNCOMMITTED, 0);
}

tree::TerminalNode* MySqlParser::Transaction_levelContext::SERIALIZABLE() {
  return getToken(MySqlParser::SERIALIZABLE, 0);
}


size_t MySqlParser::Transaction_levelContext::getRuleIndex() const {
  return MySqlParser::RuleTransaction_level;
}

void MySqlParser::Transaction_levelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransaction_level(this);
}

void MySqlParser::Transaction_levelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransaction_level(this);
}

MySqlParser::Transaction_levelContext* MySqlParser::transaction_level() {
  Transaction_levelContext *_localctx = _tracker.createInstance<Transaction_levelContext>(_ctx, getState());
  enterRule(_localctx, 264, MySqlParser::RuleTransaction_level);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3566);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 532, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3559);
      match(MySqlParser::REPEATABLE);
      setState(3560);
      match(MySqlParser::READ);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3561);
      match(MySqlParser::READ);
      setState(3562);
      match(MySqlParser::COMMITTED);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3563);
      match(MySqlParser::READ);
      setState(3564);
      match(MySqlParser::UNCOMMITTED);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3565);
      match(MySqlParser::SERIALIZABLE);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Change_masterContext ------------------------------------------------------------------

MySqlParser::Change_masterContext::Change_masterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Change_masterContext::CHANGE() {
  return getToken(MySqlParser::CHANGE, 0);
}

tree::TerminalNode* MySqlParser::Change_masterContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

tree::TerminalNode* MySqlParser::Change_masterContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

std::vector<MySqlParser::Master_optionContext *> MySqlParser::Change_masterContext::master_option() {
  return getRuleContexts<MySqlParser::Master_optionContext>();
}

MySqlParser::Master_optionContext* MySqlParser::Change_masterContext::master_option(size_t i) {
  return getRuleContext<MySqlParser::Master_optionContext>(i);
}

MySqlParser::Channel_optionContext* MySqlParser::Change_masterContext::channel_option() {
  return getRuleContext<MySqlParser::Channel_optionContext>(0);
}


size_t MySqlParser::Change_masterContext::getRuleIndex() const {
  return MySqlParser::RuleChange_master;
}

void MySqlParser::Change_masterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChange_master(this);
}

void MySqlParser::Change_masterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChange_master(this);
}

MySqlParser::Change_masterContext* MySqlParser::change_master() {
  Change_masterContext *_localctx = _tracker.createInstance<Change_masterContext>(_ctx, getState());
  enterRule(_localctx, 266, MySqlParser::RuleChange_master);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3568);
    match(MySqlParser::CHANGE);
    setState(3569);
    match(MySqlParser::MASTER);
    setState(3570);
    match(MySqlParser::TO);
    setState(3571);
    master_option();
    setState(3576);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3572);
      match(MySqlParser::COMMA);
      setState(3573);
      master_option();
      setState(3578);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FOR) {
      setState(3579);
      channel_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Change_repl_filterContext ------------------------------------------------------------------

MySqlParser::Change_repl_filterContext::Change_repl_filterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Change_repl_filterContext::CHANGE() {
  return getToken(MySqlParser::CHANGE, 0);
}

tree::TerminalNode* MySqlParser::Change_repl_filterContext::REPLICATION() {
  return getToken(MySqlParser::REPLICATION, 0);
}

tree::TerminalNode* MySqlParser::Change_repl_filterContext::FILTER() {
  return getToken(MySqlParser::FILTER, 0);
}

std::vector<MySqlParser::Repl_filterContext *> MySqlParser::Change_repl_filterContext::repl_filter() {
  return getRuleContexts<MySqlParser::Repl_filterContext>();
}

MySqlParser::Repl_filterContext* MySqlParser::Change_repl_filterContext::repl_filter(size_t i) {
  return getRuleContext<MySqlParser::Repl_filterContext>(i);
}


size_t MySqlParser::Change_repl_filterContext::getRuleIndex() const {
  return MySqlParser::RuleChange_repl_filter;
}

void MySqlParser::Change_repl_filterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChange_repl_filter(this);
}

void MySqlParser::Change_repl_filterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChange_repl_filter(this);
}

MySqlParser::Change_repl_filterContext* MySqlParser::change_repl_filter() {
  Change_repl_filterContext *_localctx = _tracker.createInstance<Change_repl_filterContext>(_ctx, getState());
  enterRule(_localctx, 268, MySqlParser::RuleChange_repl_filter);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3582);
    match(MySqlParser::CHANGE);
    setState(3583);
    match(MySqlParser::REPLICATION);
    setState(3584);
    match(MySqlParser::FILTER);
    setState(3585);
    repl_filter();
    setState(3590);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(3586);
      match(MySqlParser::COMMA);
      setState(3587);
      repl_filter();
      setState(3592);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Purge_binary_logsContext ------------------------------------------------------------------

MySqlParser::Purge_binary_logsContext::Purge_binary_logsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Purge_binary_logsContext::PURGE() {
  return getToken(MySqlParser::PURGE, 0);
}

tree::TerminalNode* MySqlParser::Purge_binary_logsContext::LOGS() {
  return getToken(MySqlParser::LOGS, 0);
}

tree::TerminalNode* MySqlParser::Purge_binary_logsContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Purge_binary_logsContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::Purge_binary_logsContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

tree::TerminalNode* MySqlParser::Purge_binary_logsContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

tree::TerminalNode* MySqlParser::Purge_binary_logsContext::BEFORE() {
  return getToken(MySqlParser::BEFORE, 0);
}


size_t MySqlParser::Purge_binary_logsContext::getRuleIndex() const {
  return MySqlParser::RulePurge_binary_logs;
}

void MySqlParser::Purge_binary_logsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPurge_binary_logs(this);
}

void MySqlParser::Purge_binary_logsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPurge_binary_logs(this);
}

MySqlParser::Purge_binary_logsContext* MySqlParser::purge_binary_logs() {
  Purge_binary_logsContext *_localctx = _tracker.createInstance<Purge_binary_logsContext>(_ctx, getState());
  enterRule(_localctx, 270, MySqlParser::RulePurge_binary_logs);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3593);
    match(MySqlParser::PURGE);
    setState(3594);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::BINARY || _la == MySqlParser::MASTER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3595);
    match(MySqlParser::LOGS);
    setState(3596);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::BEFORE || _la == MySqlParser::TO)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3597);
    match(MySqlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reset_masterContext ------------------------------------------------------------------

MySqlParser::Reset_masterContext::Reset_masterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Reset_masterContext::RESET() {
  return getToken(MySqlParser::RESET, 0);
}

tree::TerminalNode* MySqlParser::Reset_masterContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}


size_t MySqlParser::Reset_masterContext::getRuleIndex() const {
  return MySqlParser::RuleReset_master;
}

void MySqlParser::Reset_masterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReset_master(this);
}

void MySqlParser::Reset_masterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReset_master(this);
}

MySqlParser::Reset_masterContext* MySqlParser::reset_master() {
  Reset_masterContext *_localctx = _tracker.createInstance<Reset_masterContext>(_ctx, getState());
  enterRule(_localctx, 272, MySqlParser::RuleReset_master);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3599);
    match(MySqlParser::RESET);
    setState(3600);
    match(MySqlParser::MASTER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reset_slaveContext ------------------------------------------------------------------

MySqlParser::Reset_slaveContext::Reset_slaveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Reset_slaveContext::RESET() {
  return getToken(MySqlParser::RESET, 0);
}

tree::TerminalNode* MySqlParser::Reset_slaveContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::Reset_slaveContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

MySqlParser::Channel_optionContext* MySqlParser::Reset_slaveContext::channel_option() {
  return getRuleContext<MySqlParser::Channel_optionContext>(0);
}


size_t MySqlParser::Reset_slaveContext::getRuleIndex() const {
  return MySqlParser::RuleReset_slave;
}

void MySqlParser::Reset_slaveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReset_slave(this);
}

void MySqlParser::Reset_slaveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReset_slave(this);
}

MySqlParser::Reset_slaveContext* MySqlParser::reset_slave() {
  Reset_slaveContext *_localctx = _tracker.createInstance<Reset_slaveContext>(_ctx, getState());
  enterRule(_localctx, 274, MySqlParser::RuleReset_slave);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3602);
    match(MySqlParser::RESET);
    setState(3603);
    match(MySqlParser::SLAVE);
    setState(3605);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ALL) {
      setState(3604);
      match(MySqlParser::ALL);
    }
    setState(3608);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FOR) {
      setState(3607);
      channel_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_slaveContext ------------------------------------------------------------------

MySqlParser::Start_slaveContext::Start_slaveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Start_slaveContext::START() {
  return getToken(MySqlParser::START, 0);
}

tree::TerminalNode* MySqlParser::Start_slaveContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::Start_slaveContext::UNTIL() {
  return getToken(MySqlParser::UNTIL, 0);
}

std::vector<MySqlParser::Thread_typeContext *> MySqlParser::Start_slaveContext::thread_type() {
  return getRuleContexts<MySqlParser::Thread_typeContext>();
}

MySqlParser::Thread_typeContext* MySqlParser::Start_slaveContext::thread_type(size_t i) {
  return getRuleContext<MySqlParser::Thread_typeContext>(i);
}

MySqlParser::Until_optionContext* MySqlParser::Start_slaveContext::until_option() {
  return getRuleContext<MySqlParser::Until_optionContext>(0);
}

std::vector<MySqlParser::Start_slave_connection_optionContext *> MySqlParser::Start_slaveContext::start_slave_connection_option() {
  return getRuleContexts<MySqlParser::Start_slave_connection_optionContext>();
}

MySqlParser::Start_slave_connection_optionContext* MySqlParser::Start_slaveContext::start_slave_connection_option(size_t i) {
  return getRuleContext<MySqlParser::Start_slave_connection_optionContext>(i);
}

MySqlParser::Channel_optionContext* MySqlParser::Start_slaveContext::channel_option() {
  return getRuleContext<MySqlParser::Channel_optionContext>(0);
}


size_t MySqlParser::Start_slaveContext::getRuleIndex() const {
  return MySqlParser::RuleStart_slave;
}

void MySqlParser::Start_slaveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_slave(this);
}

void MySqlParser::Start_slaveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_slave(this);
}

MySqlParser::Start_slaveContext* MySqlParser::start_slave() {
  Start_slaveContext *_localctx = _tracker.createInstance<Start_slaveContext>(_ctx, getState());
  enterRule(_localctx, 276, MySqlParser::RuleStart_slave);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3610);
    match(MySqlParser::START);
    setState(3611);
    match(MySqlParser::SLAVE);
    setState(3620);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IO_THREAD || _la == MySqlParser::SQL_THREAD) {
      setState(3612);
      thread_type();
      setState(3617);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(3613);
        match(MySqlParser::COMMA);
        setState(3614);
        thread_type();
        setState(3619);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3622);
    match(MySqlParser::UNTIL);
    setState(3624);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::MASTER_LOG_FILE || ((((_la - 452) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 452)) & ((1ULL << (MySqlParser::RELAY_LOG_FILE - 452))
      | (1ULL << (MySqlParser::SQL_AFTER_GTIDS - 452))
      | (1ULL << (MySqlParser::SQL_AFTER_MTS_GAPS - 452))
      | (1ULL << (MySqlParser::SQL_BEFORE_GTIDS - 452)))) != 0)) {
      setState(3623);
      until_option();
    }
    setState(3629);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::DEFAULT_AUTH || _la == MySqlParser::PASSWORD

    || _la == MySqlParser::PLUGIN_DIR || _la == MySqlParser::USER) {
      setState(3626);
      start_slave_connection_option();
      setState(3631);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3633);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FOR) {
      setState(3632);
      channel_option();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stop_slaveContext ------------------------------------------------------------------

MySqlParser::Stop_slaveContext::Stop_slaveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Stop_slaveContext::STOP() {
  return getToken(MySqlParser::STOP, 0);
}

tree::TerminalNode* MySqlParser::Stop_slaveContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

std::vector<MySqlParser::Thread_typeContext *> MySqlParser::Stop_slaveContext::thread_type() {
  return getRuleContexts<MySqlParser::Thread_typeContext>();
}

MySqlParser::Thread_typeContext* MySqlParser::Stop_slaveContext::thread_type(size_t i) {
  return getRuleContext<MySqlParser::Thread_typeContext>(i);
}


size_t MySqlParser::Stop_slaveContext::getRuleIndex() const {
  return MySqlParser::RuleStop_slave;
}

void MySqlParser::Stop_slaveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStop_slave(this);
}

void MySqlParser::Stop_slaveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStop_slave(this);
}

MySqlParser::Stop_slaveContext* MySqlParser::stop_slave() {
  Stop_slaveContext *_localctx = _tracker.createInstance<Stop_slaveContext>(_ctx, getState());
  enterRule(_localctx, 278, MySqlParser::RuleStop_slave);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3635);
    match(MySqlParser::STOP);
    setState(3636);
    match(MySqlParser::SLAVE);
    setState(3645);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IO_THREAD || _la == MySqlParser::SQL_THREAD) {
      setState(3637);
      thread_type();
      setState(3642);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(3638);
        match(MySqlParser::COMMA);
        setState(3639);
        thread_type();
        setState(3644);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_group_replContext ------------------------------------------------------------------

MySqlParser::Start_group_replContext::Start_group_replContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Start_group_replContext::START() {
  return getToken(MySqlParser::START, 0);
}

tree::TerminalNode* MySqlParser::Start_group_replContext::GROUP_REPLICATION() {
  return getToken(MySqlParser::GROUP_REPLICATION, 0);
}


size_t MySqlParser::Start_group_replContext::getRuleIndex() const {
  return MySqlParser::RuleStart_group_repl;
}

void MySqlParser::Start_group_replContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_group_repl(this);
}

void MySqlParser::Start_group_replContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_group_repl(this);
}

MySqlParser::Start_group_replContext* MySqlParser::start_group_repl() {
  Start_group_replContext *_localctx = _tracker.createInstance<Start_group_replContext>(_ctx, getState());
  enterRule(_localctx, 280, MySqlParser::RuleStart_group_repl);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3647);
    match(MySqlParser::START);
    setState(3648);
    match(MySqlParser::GROUP_REPLICATION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stop_group_replContext ------------------------------------------------------------------

MySqlParser::Stop_group_replContext::Stop_group_replContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Stop_group_replContext::START() {
  return getToken(MySqlParser::START, 0);
}

tree::TerminalNode* MySqlParser::Stop_group_replContext::GROUP_REPLICATION() {
  return getToken(MySqlParser::GROUP_REPLICATION, 0);
}


size_t MySqlParser::Stop_group_replContext::getRuleIndex() const {
  return MySqlParser::RuleStop_group_repl;
}

void MySqlParser::Stop_group_replContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStop_group_repl(this);
}

void MySqlParser::Stop_group_replContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStop_group_repl(this);
}

MySqlParser::Stop_group_replContext* MySqlParser::stop_group_repl() {
  Stop_group_replContext *_localctx = _tracker.createInstance<Stop_group_replContext>(_ctx, getState());
  enterRule(_localctx, 282, MySqlParser::RuleStop_group_repl);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3650);
    match(MySqlParser::START);
    setState(3651);
    match(MySqlParser::GROUP_REPLICATION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Master_optionContext ------------------------------------------------------------------

MySqlParser::Master_optionContext::Master_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Master_optionContext::getRuleIndex() const {
  return MySqlParser::RuleMaster_option;
}

void MySqlParser::Master_optionContext::copyFrom(Master_optionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MasterOptIdListContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::MasterOptIdListContext::IGNORE_SERVER_IDS() {
  return getToken(MySqlParser::IGNORE_SERVER_IDS, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::MasterOptIdListContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::MasterOptIdListContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

MySqlParser::MasterOptIdListContext::MasterOptIdListContext(Master_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::MasterOptIdListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMasterOptIdList(this);
}
void MySqlParser::MasterOptIdListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMasterOptIdList(this);
}
//----------------- MasterOptDecimalContext ------------------------------------------------------------------

MySqlParser::Decimal_master_optionContext* MySqlParser::MasterOptDecimalContext::decimal_master_option() {
  return getRuleContext<MySqlParser::Decimal_master_optionContext>(0);
}

MySqlParser::Decimal_literalContext* MySqlParser::MasterOptDecimalContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::MasterOptDecimalContext::MasterOptDecimalContext(Master_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::MasterOptDecimalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMasterOptDecimal(this);
}
void MySqlParser::MasterOptDecimalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMasterOptDecimal(this);
}
//----------------- MasterOptRealContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::MasterOptRealContext::MASTER_HEARTBEAT_PERIOD() {
  return getToken(MySqlParser::MASTER_HEARTBEAT_PERIOD, 0);
}

tree::TerminalNode* MySqlParser::MasterOptRealContext::REAL_LITERAL() {
  return getToken(MySqlParser::REAL_LITERAL, 0);
}

MySqlParser::MasterOptRealContext::MasterOptRealContext(Master_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::MasterOptRealContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMasterOptReal(this);
}
void MySqlParser::MasterOptRealContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMasterOptReal(this);
}
//----------------- MasterOptBoolContext ------------------------------------------------------------------

MySqlParser::Bool_master_optionContext* MySqlParser::MasterOptBoolContext::bool_master_option() {
  return getRuleContext<MySqlParser::Bool_master_optionContext>(0);
}

MySqlParser::MasterOptBoolContext::MasterOptBoolContext(Master_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::MasterOptBoolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMasterOptBool(this);
}
void MySqlParser::MasterOptBoolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMasterOptBool(this);
}
//----------------- MasterOptStringContext ------------------------------------------------------------------

MySqlParser::String_master_optionContext* MySqlParser::MasterOptStringContext::string_master_option() {
  return getRuleContext<MySqlParser::String_master_optionContext>(0);
}

tree::TerminalNode* MySqlParser::MasterOptStringContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::MasterOptStringContext::MasterOptStringContext(Master_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::MasterOptStringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMasterOptString(this);
}
void MySqlParser::MasterOptStringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMasterOptString(this);
}
MySqlParser::Master_optionContext* MySqlParser::master_option() {
  Master_optionContext *_localctx = _tracker.createInstance<Master_optionContext>(_ctx, getState());
  enterRule(_localctx, 284, MySqlParser::RuleMaster_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3682);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::MASTER_BIND:
      case MySqlParser::MASTER_HOST:
      case MySqlParser::MASTER_LOG_FILE:
      case MySqlParser::MASTER_PASSWORD:
      case MySqlParser::MASTER_SSL_CA:
      case MySqlParser::MASTER_SSL_CAPATH:
      case MySqlParser::MASTER_SSL_CERT:
      case MySqlParser::MASTER_SSL_CIPHER:
      case MySqlParser::MASTER_SSL_CRL:
      case MySqlParser::MASTER_SSL_CRLPATH:
      case MySqlParser::MASTER_SSL_KEY:
      case MySqlParser::MASTER_TLS_VERSION:
      case MySqlParser::MASTER_USER:
      case MySqlParser::RELAY_LOG_FILE: {
        _localctx = dynamic_cast<Master_optionContext *>(_tracker.createInstance<MySqlParser::MasterOptStringContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(3653);
        string_master_option();
        setState(3654);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3655);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::MASTER_CONNECT_RETRY:
      case MySqlParser::MASTER_DELAY:
      case MySqlParser::MASTER_LOG_POS:
      case MySqlParser::MASTER_PORT:
      case MySqlParser::MASTER_RETRY_COUNT:
      case MySqlParser::RELAY_LOG_POS: {
        _localctx = dynamic_cast<Master_optionContext *>(_tracker.createInstance<MySqlParser::MasterOptDecimalContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(3657);
        decimal_master_option();
        setState(3658);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3659);
        decimal_literal();
        break;
      }

      case MySqlParser::MASTER_SSL_VERIFY_SERVER_CERT:
      case MySqlParser::MASTER_AUTO_POSITION:
      case MySqlParser::MASTER_SSL: {
        _localctx = dynamic_cast<Master_optionContext *>(_tracker.createInstance<MySqlParser::MasterOptBoolContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(3661);
        bool_master_option();
        setState(3662);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3663);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::ZERO_DECIMAL

        || _la == MySqlParser::ONE_DECIMAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::MASTER_HEARTBEAT_PERIOD: {
        _localctx = dynamic_cast<Master_optionContext *>(_tracker.createInstance<MySqlParser::MasterOptRealContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(3665);
        match(MySqlParser::MASTER_HEARTBEAT_PERIOD);
        setState(3666);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3667);
        match(MySqlParser::REAL_LITERAL);
        break;
      }

      case MySqlParser::IGNORE_SERVER_IDS: {
        _localctx = dynamic_cast<Master_optionContext *>(_tracker.createInstance<MySqlParser::MasterOptIdListContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(3668);
        match(MySqlParser::IGNORE_SERVER_IDS);
        setState(3669);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3670);
        match(MySqlParser::LR_BRACKET);
        setState(3679);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LEFT

        || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
          | (1ULL << (MySqlParser::TIME - 181))
          | (1ULL << (MySqlParser::TIMESTAMP - 181))
          | (1ULL << (MySqlParser::DATETIME - 181))
          | (1ULL << (MySqlParser::YEAR - 181))
          | (1ULL << (MySqlParser::TEXT - 181))
          | (1ULL << (MySqlParser::ENUM - 181))
          | (1ULL << (MySqlParser::COUNT - 181))
          | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
          | (1ULL << (MySqlParser::AFTER - 246))
          | (1ULL << (MySqlParser::ALGORITHM - 246))
          | (1ULL << (MySqlParser::ANY - 246))
          | (1ULL << (MySqlParser::AT - 246))
          | (1ULL << (MySqlParser::AUTHORS - 246))
          | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
          | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
          | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
          | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
          | (1ULL << (MySqlParser::BEGIN - 246))
          | (1ULL << (MySqlParser::BINLOG - 246))
          | (1ULL << (MySqlParser::BIT - 246))
          | (1ULL << (MySqlParser::BTREE - 246))
          | (1ULL << (MySqlParser::CASCADED - 246))
          | (1ULL << (MySqlParser::CHAIN - 246))
          | (1ULL << (MySqlParser::CHECKSUM - 246))
          | (1ULL << (MySqlParser::CIPHER - 246))
          | (1ULL << (MySqlParser::CLIENT - 246))
          | (1ULL << (MySqlParser::COALESCE - 246))
          | (1ULL << (MySqlParser::CODE - 246))
          | (1ULL << (MySqlParser::COLUMNS - 246))
          | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
          | (1ULL << (MySqlParser::COMMENT - 246))
          | (1ULL << (MySqlParser::COMMIT - 246))
          | (1ULL << (MySqlParser::COMPACT - 246))
          | (1ULL << (MySqlParser::COMPLETION - 246))
          | (1ULL << (MySqlParser::COMPRESSED - 246))
          | (1ULL << (MySqlParser::CONCURRENT - 246))
          | (1ULL << (MySqlParser::CONNECTION - 246))
          | (1ULL << (MySqlParser::CONSISTENT - 246))
          | (1ULL << (MySqlParser::CONTAINS - 246))
          | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
          | (1ULL << (MySqlParser::COPY - 246))
          | (1ULL << (MySqlParser::DATA - 246))
          | (1ULL << (MySqlParser::DATAFILE - 246))
          | (1ULL << (MySqlParser::DEFINER - 246))
          | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
          | (1ULL << (MySqlParser::DIRECTORY - 246))
          | (1ULL << (MySqlParser::DISABLE - 246))
          | (1ULL << (MySqlParser::DISCARD - 246))
          | (1ULL << (MySqlParser::DISK - 246))
          | (1ULL << (MySqlParser::DO - 246))
          | (1ULL << (MySqlParser::DUMPFILE - 246))
          | (1ULL << (MySqlParser::DUPLICATE - 246))
          | (1ULL << (MySqlParser::DYNAMIC - 246))
          | (1ULL << (MySqlParser::ENABLE - 246))
          | (1ULL << (MySqlParser::ENDS - 246))
          | (1ULL << (MySqlParser::ENGINE - 246))
          | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
          | (1ULL << (MySqlParser::ESCAPE - 311))
          | (1ULL << (MySqlParser::EVEN - 311))
          | (1ULL << (MySqlParser::EVENT - 311))
          | (1ULL << (MySqlParser::EVENTS - 311))
          | (1ULL << (MySqlParser::EVERY - 311))
          | (1ULL << (MySqlParser::EXCHANGE - 311))
          | (1ULL << (MySqlParser::EXCLUSIVE - 311))
          | (1ULL << (MySqlParser::EXPIRE - 311))
          | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
          | (1ULL << (MySqlParser::FIELDS - 311))
          | (1ULL << (MySqlParser::FIRST - 311))
          | (1ULL << (MySqlParser::FIXED - 311))
          | (1ULL << (MySqlParser::FULL - 311))
          | (1ULL << (MySqlParser::FUNCTION - 311))
          | (1ULL << (MySqlParser::GLOBAL - 311))
          | (1ULL << (MySqlParser::GRANTS - 311))
          | (1ULL << (MySqlParser::HASH - 311))
          | (1ULL << (MySqlParser::HOST - 311))
          | (1ULL << (MySqlParser::IDENTIFIED - 311))
          | (1ULL << (MySqlParser::IMPORT - 311))
          | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
          | (1ULL << (MySqlParser::INPLACE - 311))
          | (1ULL << (MySqlParser::INSERT_METHOD - 311))
          | (1ULL << (MySqlParser::INVOKER - 311))
          | (1ULL << (MySqlParser::ISOLATION - 311))
          | (1ULL << (MySqlParser::ISSUER - 311))
          | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
          | (1ULL << (MySqlParser::LANGUAGE - 311))
          | (1ULL << (MySqlParser::LAST - 311))
          | (1ULL << (MySqlParser::LESS - 311))
          | (1ULL << (MySqlParser::LEVEL - 311))
          | (1ULL << (MySqlParser::LIST - 311))
          | (1ULL << (MySqlParser::LOCAL - 311))
          | (1ULL << (MySqlParser::LOGFILE - 311))
          | (1ULL << (MySqlParser::LOGS - 311))
          | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_ROWS - 391))
          | (1ULL << (MySqlParser::MAX_SIZE - 391))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
          | (1ULL << (MySqlParser::MERGE - 391))
          | (1ULL << (MySqlParser::MID - 391))
          | (1ULL << (MySqlParser::MIN_ROWS - 391))
          | (1ULL << (MySqlParser::MODIFY - 391))
          | (1ULL << (MySqlParser::MUTEX - 391))
          | (1ULL << (MySqlParser::MYSQL - 391))
          | (1ULL << (MySqlParser::NAME - 391))
          | (1ULL << (MySqlParser::NAMES - 391))
          | (1ULL << (MySqlParser::NCHAR - 391))
          | (1ULL << (MySqlParser::NO - 391))
          | (1ULL << (MySqlParser::NODEGROUP - 391))
          | (1ULL << (MySqlParser::NONE - 391))
          | (1ULL << (MySqlParser::OFFLINE - 391))
          | (1ULL << (MySqlParser::OFFSET - 391))
          | (1ULL << (MySqlParser::OJ - 391))
          | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
          | (1ULL << (MySqlParser::ONLINE - 391))
          | (1ULL << (MySqlParser::ONLY - 391))
          | (1ULL << (MySqlParser::OPTIONS - 391))
          | (1ULL << (MySqlParser::OWNER - 391))
          | (1ULL << (MySqlParser::PACK_KEYS - 391))
          | (1ULL << (MySqlParser::PARSER - 391))
          | (1ULL << (MySqlParser::PARTIAL - 391))
          | (1ULL << (MySqlParser::PARTITIONING - 391))
          | (1ULL << (MySqlParser::PARTITIONS - 391))
          | (1ULL << (MySqlParser::PASSWORD - 391))
          | (1ULL << (MySqlParser::PLUGINS - 391))
          | (1ULL << (MySqlParser::PORT - 391))
          | (1ULL << (MySqlParser::PRESERVE - 391))
          | (1ULL << (MySqlParser::PROCESSLIST - 391))
          | (1ULL << (MySqlParser::PROFILE - 391))
          | (1ULL << (MySqlParser::PROFILES - 391))
          | (1ULL << (MySqlParser::PROXY - 391))
          | (1ULL << (MySqlParser::QUERY - 391))
          | (1ULL << (MySqlParser::QUICK - 391))
          | (1ULL << (MySqlParser::REBUILD - 391))
          | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
          | (1ULL << (MySqlParser::REDUNDANT - 391))
          | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
          | (1ULL << (MySqlParser::REORGANIZE - 455))
          | (1ULL << (MySqlParser::REPAIR - 455))
          | (1ULL << (MySqlParser::REPLICATION - 455))
          | (1ULL << (MySqlParser::RETURNS - 455))
          | (1ULL << (MySqlParser::ROLLBACK - 455))
          | (1ULL << (MySqlParser::ROLLUP - 455))
          | (1ULL << (MySqlParser::ROW - 455))
          | (1ULL << (MySqlParser::ROWS - 455))
          | (1ULL << (MySqlParser::ROW_FORMAT - 455))
          | (1ULL << (MySqlParser::SAVEPOINT - 455))
          | (1ULL << (MySqlParser::SCHEDULE - 455))
          | (1ULL << (MySqlParser::SECURITY - 455))
          | (1ULL << (MySqlParser::SERVER - 455))
          | (1ULL << (MySqlParser::SESSION - 455))
          | (1ULL << (MySqlParser::SHARE - 455))
          | (1ULL << (MySqlParser::SHARED - 455))
          | (1ULL << (MySqlParser::SIGNED - 455))
          | (1ULL << (MySqlParser::SIMPLE - 455))
          | (1ULL << (MySqlParser::SLAVE - 455))
          | (1ULL << (MySqlParser::SNAPSHOT - 455))
          | (1ULL << (MySqlParser::SOCKET - 455))
          | (1ULL << (MySqlParser::SOME - 455))
          | (1ULL << (MySqlParser::SOUNDS - 455))
          | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
          | (1ULL << (MySqlParser::SQL_CACHE - 455))
          | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
          | (1ULL << (MySqlParser::START - 455))
          | (1ULL << (MySqlParser::STARTS - 455))
          | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
          | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
          | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
          | (1ULL << (MySqlParser::STATUS - 455))
          | (1ULL << (MySqlParser::STORAGE - 455))
          | (1ULL << (MySqlParser::SUBJECT - 455))
          | (1ULL << (MySqlParser::SUBPARTITION - 455))
          | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
          | (1ULL << (MySqlParser::TABLESPACE - 455))
          | (1ULL << (MySqlParser::TEMPORARY - 455))
          | (1ULL << (MySqlParser::TEMPTABLE - 455))
          | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
          | (1ULL << (MySqlParser::TRUNCATE - 519))
          | (1ULL << (MySqlParser::UNDEFINED - 519))
          | (1ULL << (MySqlParser::UNDOFILE - 519))
          | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
          | (1ULL << (MySqlParser::UNKNOWN - 519))
          | (1ULL << (MySqlParser::UPGRADE - 519))
          | (1ULL << (MySqlParser::USER - 519))
          | (1ULL << (MySqlParser::VALUE - 519))
          | (1ULL << (MySqlParser::VARIABLES - 519))
          | (1ULL << (MySqlParser::VIEW - 519))
          | (1ULL << (MySqlParser::WAIT - 519))
          | (1ULL << (MySqlParser::WARNINGS - 519))
          | (1ULL << (MySqlParser::WORK - 519))
          | (1ULL << (MySqlParser::WRAPPER - 519))
          | (1ULL << (MySqlParser::X509 - 519))
          | (1ULL << (MySqlParser::XML - 519))
          | (1ULL << (MySqlParser::QUARTER - 519))
          | (1ULL << (MySqlParser::MONTH - 519))
          | (1ULL << (MySqlParser::DAY - 519))
          | (1ULL << (MySqlParser::HOUR - 519))
          | (1ULL << (MySqlParser::MINUTE - 519))
          | (1ULL << (MySqlParser::WEEK - 519))
          | (1ULL << (MySqlParser::SECOND - 519))
          | (1ULL << (MySqlParser::MICROSECOND - 519))
          | (1ULL << (MySqlParser::TABLES - 519))
          | (1ULL << (MySqlParser::ROUTINE - 519))
          | (1ULL << (MySqlParser::EXECUTE - 519))
          | (1ULL << (MySqlParser::FILE - 519))
          | (1ULL << (MySqlParser::PROCESS - 519))
          | (1ULL << (MySqlParser::RELOAD - 519))
          | (1ULL << (MySqlParser::SHUTDOWN - 519))
          | (1ULL << (MySqlParser::SUPER - 519))
          | (1ULL << (MySqlParser::PRIVILEGES - 519))
          | (1ULL << (MySqlParser::ARMSCII8 - 519))
          | (1ULL << (MySqlParser::ASCII - 519))
          | (1ULL << (MySqlParser::BIG5 - 519))
          | (1ULL << (MySqlParser::CP1250 - 519))
          | (1ULL << (MySqlParser::CP1251 - 519))
          | (1ULL << (MySqlParser::CP1256 - 519))
          | (1ULL << (MySqlParser::CP1257 - 519))
          | (1ULL << (MySqlParser::CP850 - 519))
          | (1ULL << (MySqlParser::CP852 - 519))
          | (1ULL << (MySqlParser::CP866 - 519))
          | (1ULL << (MySqlParser::CP932 - 519))
          | (1ULL << (MySqlParser::DEC8 - 519))
          | (1ULL << (MySqlParser::EUCJPMS - 519))
          | (1ULL << (MySqlParser::EUCKR - 519))
          | (1ULL << (MySqlParser::GB2312 - 519))
          | (1ULL << (MySqlParser::GBK - 519))
          | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
          | (1ULL << (MySqlParser::HEBREW - 583))
          | (1ULL << (MySqlParser::HP8 - 583))
          | (1ULL << (MySqlParser::KEYBCS2 - 583))
          | (1ULL << (MySqlParser::KOI8R - 583))
          | (1ULL << (MySqlParser::KOI8U - 583))
          | (1ULL << (MySqlParser::LATIN1 - 583))
          | (1ULL << (MySqlParser::LATIN2 - 583))
          | (1ULL << (MySqlParser::LATIN5 - 583))
          | (1ULL << (MySqlParser::LATIN7 - 583))
          | (1ULL << (MySqlParser::MACCE - 583))
          | (1ULL << (MySqlParser::MACROMAN - 583))
          | (1ULL << (MySqlParser::SJIS - 583))
          | (1ULL << (MySqlParser::SWE7 - 583))
          | (1ULL << (MySqlParser::TIS620 - 583))
          | (1ULL << (MySqlParser::UCS2 - 583))
          | (1ULL << (MySqlParser::UJIS - 583))
          | (1ULL << (MySqlParser::UTF16 - 583))
          | (1ULL << (MySqlParser::UTF16LE - 583))
          | (1ULL << (MySqlParser::UTF32 - 583))
          | (1ULL << (MySqlParser::UTF8 - 583))
          | (1ULL << (MySqlParser::UTF8MB3 - 583))
          | (1ULL << (MySqlParser::UTF8MB4 - 583))
          | (1ULL << (MySqlParser::ARCHIVE - 583))
          | (1ULL << (MySqlParser::BLACKHOLE - 583))
          | (1ULL << (MySqlParser::CSV - 583))
          | (1ULL << (MySqlParser::FEDERATED - 583))
          | (1ULL << (MySqlParser::INNODB - 583))
          | (1ULL << (MySqlParser::MEMORY - 583))
          | (1ULL << (MySqlParser::MRG_MYISAM - 583))
          | (1ULL << (MySqlParser::MYISAM - 583))
          | (1ULL << (MySqlParser::NDB - 583))
          | (1ULL << (MySqlParser::NDBCLUSTER - 583))
          | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
          | (1ULL << (MySqlParser::REPEATABLE - 583))
          | (1ULL << (MySqlParser::COMMITTED - 583))
          | (1ULL << (MySqlParser::UNCOMMITTED - 583))
          | (1ULL << (MySqlParser::SERIALIZABLE - 583))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
          | (1ULL << (MySqlParser::LINESTRING - 583))
          | (1ULL << (MySqlParser::MULTILINESTRING - 583))
          | (1ULL << (MySqlParser::MULTIPOINT - 583))
          | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
          | (1ULL << (MySqlParser::POINT - 583))
          | (1ULL << (MySqlParser::POLYGON - 583))
          | (1ULL << (MySqlParser::ABS - 583))
          | (1ULL << (MySqlParser::ACOS - 583))
          | (1ULL << (MySqlParser::ADDDATE - 583))
          | (1ULL << (MySqlParser::ADDTIME - 583))
          | (1ULL << (MySqlParser::AES_DECRYPT - 583))
          | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
          | (1ULL << (MySqlParser::AREA - 583))
          | (1ULL << (MySqlParser::ASBINARY - 583))
          | (1ULL << (MySqlParser::ASIN - 583))
          | (1ULL << (MySqlParser::ASTEXT - 583))
          | (1ULL << (MySqlParser::ASWKB - 583))
          | (1ULL << (MySqlParser::ASWKT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
          | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
          | (1ULL << (MySqlParser::ATAN - 583))
          | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
          | (1ULL << (MySqlParser::BIN - 647))
          | (1ULL << (MySqlParser::BIT_COUNT - 647))
          | (1ULL << (MySqlParser::BIT_LENGTH - 647))
          | (1ULL << (MySqlParser::BUFFER - 647))
          | (1ULL << (MySqlParser::CEIL - 647))
          | (1ULL << (MySqlParser::CEILING - 647))
          | (1ULL << (MySqlParser::CENTROID - 647))
          | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
          | (1ULL << (MySqlParser::CHARSET - 647))
          | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
          | (1ULL << (MySqlParser::COERCIBILITY - 647))
          | (1ULL << (MySqlParser::COLLATION - 647))
          | (1ULL << (MySqlParser::COMPRESS - 647))
          | (1ULL << (MySqlParser::CONCAT - 647))
          | (1ULL << (MySqlParser::CONCAT_WS - 647))
          | (1ULL << (MySqlParser::CONNECTION_ID - 647))
          | (1ULL << (MySqlParser::CONV - 647))
          | (1ULL << (MySqlParser::CONVERT_TZ - 647))
          | (1ULL << (MySqlParser::COS - 647))
          | (1ULL << (MySqlParser::COT - 647))
          | (1ULL << (MySqlParser::CRC32 - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
          | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
          | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
          | (1ULL << (MySqlParser::CROSSES - 647))
          | (1ULL << (MySqlParser::DATEDIFF - 647))
          | (1ULL << (MySqlParser::DATE_FORMAT - 647))
          | (1ULL << (MySqlParser::DAYNAME - 647))
          | (1ULL << (MySqlParser::DAYOFMONTH - 647))
          | (1ULL << (MySqlParser::DAYOFWEEK - 647))
          | (1ULL << (MySqlParser::DAYOFYEAR - 647))
          | (1ULL << (MySqlParser::DECODE - 647))
          | (1ULL << (MySqlParser::DEGREES - 647))
          | (1ULL << (MySqlParser::DES_DECRYPT - 647))
          | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
          | (1ULL << (MySqlParser::DIMENSION - 647))
          | (1ULL << (MySqlParser::DISJOINT - 647))
          | (1ULL << (MySqlParser::ELT - 647))
          | (1ULL << (MySqlParser::ENCODE - 647))
          | (1ULL << (MySqlParser::ENCRYPT - 647))
          | (1ULL << (MySqlParser::ENDPOINT - 647))
          | (1ULL << (MySqlParser::ENVELOPE - 647))
          | (1ULL << (MySqlParser::EQUALS - 647))
          | (1ULL << (MySqlParser::EXP - 647))
          | (1ULL << (MySqlParser::EXPORT_SET - 647))
          | (1ULL << (MySqlParser::EXTERIORRING - 647))
          | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
          | (1ULL << (MySqlParser::FIELD - 647))
          | (1ULL << (MySqlParser::FIND_IN_SET - 647))
          | (1ULL << (MySqlParser::FLOOR - 647))
          | (1ULL << (MySqlParser::FORMAT - 647))
          | (1ULL << (MySqlParser::FOUND_ROWS - 647))
          | (1ULL << (MySqlParser::FROM_BASE64 - 647))
          | (1ULL << (MySqlParser::FROM_DAYS - 647))
          | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
          | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
          | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
          | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
          | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
          | (1ULL << (MySqlParser::GET_FORMAT - 711))
          | (1ULL << (MySqlParser::GET_LOCK - 711))
          | (1ULL << (MySqlParser::GLENGTH - 711))
          | (1ULL << (MySqlParser::GREATEST - 711))
          | (1ULL << (MySqlParser::GTID_SUBSET - 711))
          | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
          | (1ULL << (MySqlParser::HEX - 711))
          | (1ULL << (MySqlParser::IFNULL - 711))
          | (1ULL << (MySqlParser::INET6_ATON - 711))
          | (1ULL << (MySqlParser::INET6_NTOA - 711))
          | (1ULL << (MySqlParser::INET_ATON - 711))
          | (1ULL << (MySqlParser::INET_NTOA - 711))
          | (1ULL << (MySqlParser::INSTR - 711))
          | (1ULL << (MySqlParser::INTERIORRINGN - 711))
          | (1ULL << (MySqlParser::INTERSECTS - 711))
          | (1ULL << (MySqlParser::ISCLOSED - 711))
          | (1ULL << (MySqlParser::ISEMPTY - 711))
          | (1ULL << (MySqlParser::ISNULL - 711))
          | (1ULL << (MySqlParser::ISSIMPLE - 711))
          | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
          | (1ULL << (MySqlParser::IS_IPV4 - 711))
          | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
          | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
          | (1ULL << (MySqlParser::IS_IPV6 - 711))
          | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
          | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
          | (1ULL << (MySqlParser::LCASE - 711))
          | (1ULL << (MySqlParser::LEAST - 711))
          | (1ULL << (MySqlParser::LENGTH - 711))
          | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINEFROMWKB - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
          | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
          | (1ULL << (MySqlParser::LN - 711))
          | (1ULL << (MySqlParser::LOAD_FILE - 711))
          | (1ULL << (MySqlParser::LOCATE - 711))
          | (1ULL << (MySqlParser::LOG - 711))
          | (1ULL << (MySqlParser::LOG10 - 711))
          | (1ULL << (MySqlParser::LOG2 - 711))
          | (1ULL << (MySqlParser::LOWER - 711))
          | (1ULL << (MySqlParser::LPAD - 711))
          | (1ULL << (MySqlParser::LTRIM - 711))
          | (1ULL << (MySqlParser::MAKEDATE - 711))
          | (1ULL << (MySqlParser::MAKETIME - 711))
          | (1ULL << (MySqlParser::MAKE_SET - 711))
          | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
          | (1ULL << (MySqlParser::MBRCONTAINS - 711))
          | (1ULL << (MySqlParser::MBRDISJOINT - 711))
          | (1ULL << (MySqlParser::MBREQUAL - 711))
          | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
          | (1ULL << (MySqlParser::MBROVERLAPS - 711))
          | (1ULL << (MySqlParser::MBRTOUCHES - 711))
          | (1ULL << (MySqlParser::MBRWITHIN - 711))
          | (1ULL << (MySqlParser::MD5 - 711))
          | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
          | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
          | (1ULL << (MySqlParser::MONTHNAME - 711))
          | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
          | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
          | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::NAME_CONST - 775))
          | (1ULL << (MySqlParser::NULLIF - 775))
          | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
          | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
          | (1ULL << (MySqlParser::NUMPOINTS - 775))
          | (1ULL << (MySqlParser::OCT - 775))
          | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
          | (1ULL << (MySqlParser::ORD - 775))
          | (1ULL << (MySqlParser::OVERLAPS - 775))
          | (1ULL << (MySqlParser::PERIOD_ADD - 775))
          | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
          | (1ULL << (MySqlParser::PI - 775))
          | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
          | (1ULL << (MySqlParser::POINTFROMWKB - 775))
          | (1ULL << (MySqlParser::POINTN - 775))
          | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYFROMWKB - 775))
          | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
          | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
          | (1ULL << (MySqlParser::POW - 775))
          | (1ULL << (MySqlParser::POWER - 775))
          | (1ULL << (MySqlParser::QUOTE - 775))
          | (1ULL << (MySqlParser::RADIANS - 775))
          | (1ULL << (MySqlParser::RAND - 775))
          | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
          | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
          | (1ULL << (MySqlParser::REVERSE - 775))
          | (1ULL << (MySqlParser::ROUND - 775))
          | (1ULL << (MySqlParser::ROW_COUNT - 775))
          | (1ULL << (MySqlParser::RPAD - 775))
          | (1ULL << (MySqlParser::RTRIM - 775))
          | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
          | (1ULL << (MySqlParser::SESSION_USER - 775))
          | (1ULL << (MySqlParser::SHA - 775))
          | (1ULL << (MySqlParser::SHA1 - 775))
          | (1ULL << (MySqlParser::SHA2 - 775))
          | (1ULL << (MySqlParser::SIGN - 775))
          | (1ULL << (MySqlParser::SIN - 775))
          | (1ULL << (MySqlParser::SLEEP - 775))
          | (1ULL << (MySqlParser::SOUNDEX - 775))
          | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
          | (1ULL << (MySqlParser::SQRT - 775))
          | (1ULL << (MySqlParser::SRID - 775))
          | (1ULL << (MySqlParser::STARTPOINT - 775))
          | (1ULL << (MySqlParser::STRCMP - 775))
          | (1ULL << (MySqlParser::STR_TO_DATE - 775))
          | (1ULL << (MySqlParser::ST_AREA - 775))
          | (1ULL << (MySqlParser::ST_ASBINARY - 775))
          | (1ULL << (MySqlParser::ST_ASTEXT - 775))
          | (1ULL << (MySqlParser::ST_ASWKB - 775))
          | (1ULL << (MySqlParser::ST_ASWKT - 775))
          | (1ULL << (MySqlParser::ST_BUFFER - 775))
          | (1ULL << (MySqlParser::ST_CENTROID - 775))
          | (1ULL << (MySqlParser::ST_CONTAINS - 775))
          | (1ULL << (MySqlParser::ST_CROSSES - 775))
          | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
          | (1ULL << (MySqlParser::ST_DIMENSION - 775))
          | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
          | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
          | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
          | (1ULL << (MySqlParser::ST_EQUALS - 839))
          | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
          | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
          | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
          | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
          | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
          | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
          | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
          | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
          | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POINTN - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
          | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
          | (1ULL << (MySqlParser::ST_SRID - 839))
          | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
          | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
          | (1ULL << (MySqlParser::ST_TOUCHES - 839))
          | (1ULL << (MySqlParser::ST_UNION - 839))
          | (1ULL << (MySqlParser::ST_WITHIN - 839))
          | (1ULL << (MySqlParser::ST_X - 839))
          | (1ULL << (MySqlParser::ST_Y - 839))
          | (1ULL << (MySqlParser::SUBDATE - 839))
          | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
          | (1ULL << (MySqlParser::SUBTIME - 839))
          | (1ULL << (MySqlParser::SYSTEM_USER - 839))
          | (1ULL << (MySqlParser::TAN - 839))
          | (1ULL << (MySqlParser::TIMEDIFF - 839))
          | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
          | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
          | (1ULL << (MySqlParser::TIME_FORMAT - 839))
          | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
          | (1ULL << (MySqlParser::TOUCHES - 839))
          | (1ULL << (MySqlParser::TO_BASE64 - 839))
          | (1ULL << (MySqlParser::TO_DAYS - 839))
          | (1ULL << (MySqlParser::TO_SECONDS - 839))
          | (1ULL << (MySqlParser::UCASE - 839))
          | (1ULL << (MySqlParser::UNCOMPRESS - 839))
          | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
          | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
          | (1ULL << (MySqlParser::UPDATEXML - 903))
          | (1ULL << (MySqlParser::UPPER - 903))
          | (1ULL << (MySqlParser::UUID - 903))
          | (1ULL << (MySqlParser::UUID_SHORT - 903))
          | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
          | (1ULL << (MySqlParser::VERSION - 903))
          | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
          | (1ULL << (MySqlParser::WEEKDAY - 903))
          | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
          | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
          | (1ULL << (MySqlParser::WITHIN - 903))
          | (1ULL << (MySqlParser::YEARWEEK - 903))
          | (1ULL << (MySqlParser::Y_FUNCTION - 903))
          | (1ULL << (MySqlParser::X_FUNCTION - 903))
          | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
          | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
          setState(3671);
          id_();
          setState(3676);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySqlParser::COMMA) {
            setState(3672);
            match(MySqlParser::COMMA);
            setState(3673);
            id_();
            setState(3678);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(3681);
        match(MySqlParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- String_master_optionContext ------------------------------------------------------------------

MySqlParser::String_master_optionContext::String_master_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_BIND() {
  return getToken(MySqlParser::MASTER_BIND, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_HOST() {
  return getToken(MySqlParser::MASTER_HOST, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_USER() {
  return getToken(MySqlParser::MASTER_USER, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_PASSWORD() {
  return getToken(MySqlParser::MASTER_PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_LOG_FILE() {
  return getToken(MySqlParser::MASTER_LOG_FILE, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::RELAY_LOG_FILE() {
  return getToken(MySqlParser::RELAY_LOG_FILE, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_SSL_CA() {
  return getToken(MySqlParser::MASTER_SSL_CA, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_SSL_CAPATH() {
  return getToken(MySqlParser::MASTER_SSL_CAPATH, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_SSL_CERT() {
  return getToken(MySqlParser::MASTER_SSL_CERT, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_SSL_CRL() {
  return getToken(MySqlParser::MASTER_SSL_CRL, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_SSL_CRLPATH() {
  return getToken(MySqlParser::MASTER_SSL_CRLPATH, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_SSL_KEY() {
  return getToken(MySqlParser::MASTER_SSL_KEY, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_SSL_CIPHER() {
  return getToken(MySqlParser::MASTER_SSL_CIPHER, 0);
}

tree::TerminalNode* MySqlParser::String_master_optionContext::MASTER_TLS_VERSION() {
  return getToken(MySqlParser::MASTER_TLS_VERSION, 0);
}


size_t MySqlParser::String_master_optionContext::getRuleIndex() const {
  return MySqlParser::RuleString_master_option;
}

void MySqlParser::String_master_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_master_option(this);
}

void MySqlParser::String_master_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_master_option(this);
}

MySqlParser::String_master_optionContext* MySqlParser::string_master_option() {
  String_master_optionContext *_localctx = _tracker.createInstance<String_master_optionContext>(_ctx, getState());
  enterRule(_localctx, 286, MySqlParser::RuleString_master_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3684);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::MASTER_BIND || ((((_la - 375) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 375)) & ((1ULL << (MySqlParser::MASTER_HOST - 375))
      | (1ULL << (MySqlParser::MASTER_LOG_FILE - 375))
      | (1ULL << (MySqlParser::MASTER_PASSWORD - 375))
      | (1ULL << (MySqlParser::MASTER_SSL_CA - 375))
      | (1ULL << (MySqlParser::MASTER_SSL_CAPATH - 375))
      | (1ULL << (MySqlParser::MASTER_SSL_CERT - 375))
      | (1ULL << (MySqlParser::MASTER_SSL_CIPHER - 375))
      | (1ULL << (MySqlParser::MASTER_SSL_CRL - 375))
      | (1ULL << (MySqlParser::MASTER_SSL_CRLPATH - 375))
      | (1ULL << (MySqlParser::MASTER_SSL_KEY - 375))
      | (1ULL << (MySqlParser::MASTER_TLS_VERSION - 375))
      | (1ULL << (MySqlParser::MASTER_USER - 375)))) != 0) || _la == MySqlParser::RELAY_LOG_FILE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decimal_master_optionContext ------------------------------------------------------------------

MySqlParser::Decimal_master_optionContext::Decimal_master_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Decimal_master_optionContext::MASTER_PORT() {
  return getToken(MySqlParser::MASTER_PORT, 0);
}

tree::TerminalNode* MySqlParser::Decimal_master_optionContext::MASTER_CONNECT_RETRY() {
  return getToken(MySqlParser::MASTER_CONNECT_RETRY, 0);
}

tree::TerminalNode* MySqlParser::Decimal_master_optionContext::MASTER_RETRY_COUNT() {
  return getToken(MySqlParser::MASTER_RETRY_COUNT, 0);
}

tree::TerminalNode* MySqlParser::Decimal_master_optionContext::MASTER_DELAY() {
  return getToken(MySqlParser::MASTER_DELAY, 0);
}

tree::TerminalNode* MySqlParser::Decimal_master_optionContext::MASTER_LOG_POS() {
  return getToken(MySqlParser::MASTER_LOG_POS, 0);
}

tree::TerminalNode* MySqlParser::Decimal_master_optionContext::RELAY_LOG_POS() {
  return getToken(MySqlParser::RELAY_LOG_POS, 0);
}


size_t MySqlParser::Decimal_master_optionContext::getRuleIndex() const {
  return MySqlParser::RuleDecimal_master_option;
}

void MySqlParser::Decimal_master_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecimal_master_option(this);
}

void MySqlParser::Decimal_master_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecimal_master_option(this);
}

MySqlParser::Decimal_master_optionContext* MySqlParser::decimal_master_option() {
  Decimal_master_optionContext *_localctx = _tracker.createInstance<Decimal_master_optionContext>(_ctx, getState());
  enterRule(_localctx, 288, MySqlParser::RuleDecimal_master_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3686);
    _la = _input->LA(1);
    if (!(((((_la - 372) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 372)) & ((1ULL << (MySqlParser::MASTER_CONNECT_RETRY - 372))
      | (1ULL << (MySqlParser::MASTER_DELAY - 372))
      | (1ULL << (MySqlParser::MASTER_LOG_POS - 372))
      | (1ULL << (MySqlParser::MASTER_PORT - 372))
      | (1ULL << (MySqlParser::MASTER_RETRY_COUNT - 372)))) != 0) || _la == MySqlParser::RELAY_LOG_POS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bool_master_optionContext ------------------------------------------------------------------

MySqlParser::Bool_master_optionContext::Bool_master_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Bool_master_optionContext::MASTER_AUTO_POSITION() {
  return getToken(MySqlParser::MASTER_AUTO_POSITION, 0);
}

tree::TerminalNode* MySqlParser::Bool_master_optionContext::MASTER_SSL() {
  return getToken(MySqlParser::MASTER_SSL, 0);
}

tree::TerminalNode* MySqlParser::Bool_master_optionContext::MASTER_SSL_VERIFY_SERVER_CERT() {
  return getToken(MySqlParser::MASTER_SSL_VERIFY_SERVER_CERT, 0);
}


size_t MySqlParser::Bool_master_optionContext::getRuleIndex() const {
  return MySqlParser::RuleBool_master_option;
}

void MySqlParser::Bool_master_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBool_master_option(this);
}

void MySqlParser::Bool_master_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBool_master_option(this);
}

MySqlParser::Bool_master_optionContext* MySqlParser::bool_master_option() {
  Bool_master_optionContext *_localctx = _tracker.createInstance<Bool_master_optionContext>(_ctx, getState());
  enterRule(_localctx, 290, MySqlParser::RuleBool_master_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3688);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::MASTER_SSL_VERIFY_SERVER_CERT || _la == MySqlParser::MASTER_AUTO_POSITION

    || _la == MySqlParser::MASTER_SSL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Channel_optionContext ------------------------------------------------------------------

MySqlParser::Channel_optionContext::Channel_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Channel_optionContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::Channel_optionContext::CHANNEL() {
  return getToken(MySqlParser::CHANNEL, 0);
}

tree::TerminalNode* MySqlParser::Channel_optionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::Channel_optionContext::getRuleIndex() const {
  return MySqlParser::RuleChannel_option;
}

void MySqlParser::Channel_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChannel_option(this);
}

void MySqlParser::Channel_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChannel_option(this);
}

MySqlParser::Channel_optionContext* MySqlParser::channel_option() {
  Channel_optionContext *_localctx = _tracker.createInstance<Channel_optionContext>(_ctx, getState());
  enterRule(_localctx, 292, MySqlParser::RuleChannel_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3690);
    match(MySqlParser::FOR);
    setState(3691);
    match(MySqlParser::CHANNEL);
    setState(3692);
    match(MySqlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Repl_filterContext ------------------------------------------------------------------

MySqlParser::Repl_filterContext::Repl_filterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Repl_filterContext::getRuleIndex() const {
  return MySqlParser::RuleRepl_filter;
}

void MySqlParser::Repl_filterContext::copyFrom(Repl_filterContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ReplfilterDbListContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ReplfilterDbListContext::REPLICATE_DO_DB() {
  return getToken(MySqlParser::REPLICATE_DO_DB, 0);
}

MySqlParser::Id_listContext* MySqlParser::ReplfilterDbListContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::ReplfilterDbListContext::REPLICATE_IGNORE_DB() {
  return getToken(MySqlParser::REPLICATE_IGNORE_DB, 0);
}

MySqlParser::ReplfilterDbListContext::ReplfilterDbListContext(Repl_filterContext *ctx) { copyFrom(ctx); }

void MySqlParser::ReplfilterDbListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReplfilterDbList(this);
}
void MySqlParser::ReplfilterDbListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReplfilterDbList(this);
}
//----------------- ReplfilterStableListContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ReplfilterStableListContext::REPLICATE_WILD_DO_TABLE() {
  return getToken(MySqlParser::REPLICATE_WILD_DO_TABLE, 0);
}

MySqlParser::Simple_string_listContext* MySqlParser::ReplfilterStableListContext::simple_string_list() {
  return getRuleContext<MySqlParser::Simple_string_listContext>(0);
}

tree::TerminalNode* MySqlParser::ReplfilterStableListContext::REPLICATE_WILD_IGNORE_TABLE() {
  return getToken(MySqlParser::REPLICATE_WILD_IGNORE_TABLE, 0);
}

MySqlParser::ReplfilterStableListContext::ReplfilterStableListContext(Repl_filterContext *ctx) { copyFrom(ctx); }

void MySqlParser::ReplfilterStableListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReplfilterStableList(this);
}
void MySqlParser::ReplfilterStableListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReplfilterStableList(this);
}
//----------------- ReplfilterTablepairListContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ReplfilterTablepairListContext::REPLICATE_REWRITE_DB() {
  return getToken(MySqlParser::REPLICATE_REWRITE_DB, 0);
}

MySqlParser::Table_pair_listContext* MySqlParser::ReplfilterTablepairListContext::table_pair_list() {
  return getRuleContext<MySqlParser::Table_pair_listContext>(0);
}

MySqlParser::ReplfilterTablepairListContext::ReplfilterTablepairListContext(Repl_filterContext *ctx) { copyFrom(ctx); }

void MySqlParser::ReplfilterTablepairListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReplfilterTablepairList(this);
}
void MySqlParser::ReplfilterTablepairListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReplfilterTablepairList(this);
}
//----------------- ReplfilterTableListContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ReplfilterTableListContext::REPLICATE_DO_TABLE() {
  return getToken(MySqlParser::REPLICATE_DO_TABLE, 0);
}

MySqlParser::Table_listContext* MySqlParser::ReplfilterTableListContext::table_list() {
  return getRuleContext<MySqlParser::Table_listContext>(0);
}

tree::TerminalNode* MySqlParser::ReplfilterTableListContext::REPLICATE_IGNORE_TABLE() {
  return getToken(MySqlParser::REPLICATE_IGNORE_TABLE, 0);
}

MySqlParser::ReplfilterTableListContext::ReplfilterTableListContext(Repl_filterContext *ctx) { copyFrom(ctx); }

void MySqlParser::ReplfilterTableListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReplfilterTableList(this);
}
void MySqlParser::ReplfilterTableListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReplfilterTableList(this);
}
MySqlParser::Repl_filterContext* MySqlParser::repl_filter() {
  Repl_filterContext *_localctx = _tracker.createInstance<Repl_filterContext>(_ctx, getState());
  enterRule(_localctx, 294, MySqlParser::RuleRepl_filter);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3736);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::REPLICATE_DO_DB: {
        _localctx = dynamic_cast<Repl_filterContext *>(_tracker.createInstance<MySqlParser::ReplfilterDbListContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(3694);
        match(MySqlParser::REPLICATE_DO_DB);
        setState(3695);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3696);
        match(MySqlParser::LR_BRACKET);
        setState(3697);
        id_list();
        setState(3698);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_IGNORE_DB: {
        _localctx = dynamic_cast<Repl_filterContext *>(_tracker.createInstance<MySqlParser::ReplfilterDbListContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(3700);
        match(MySqlParser::REPLICATE_IGNORE_DB);
        setState(3701);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3702);
        match(MySqlParser::LR_BRACKET);
        setState(3703);
        id_list();
        setState(3704);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_DO_TABLE: {
        _localctx = dynamic_cast<Repl_filterContext *>(_tracker.createInstance<MySqlParser::ReplfilterTableListContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(3706);
        match(MySqlParser::REPLICATE_DO_TABLE);
        setState(3707);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3708);
        match(MySqlParser::LR_BRACKET);
        setState(3709);
        table_list();
        setState(3710);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_IGNORE_TABLE: {
        _localctx = dynamic_cast<Repl_filterContext *>(_tracker.createInstance<MySqlParser::ReplfilterTableListContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(3712);
        match(MySqlParser::REPLICATE_IGNORE_TABLE);
        setState(3713);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3714);
        match(MySqlParser::LR_BRACKET);
        setState(3715);
        table_list();
        setState(3716);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_WILD_DO_TABLE: {
        _localctx = dynamic_cast<Repl_filterContext *>(_tracker.createInstance<MySqlParser::ReplfilterStableListContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(3718);
        match(MySqlParser::REPLICATE_WILD_DO_TABLE);
        setState(3719);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3720);
        match(MySqlParser::LR_BRACKET);
        setState(3721);
        simple_string_list();
        setState(3722);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_WILD_IGNORE_TABLE: {
        _localctx = dynamic_cast<Repl_filterContext *>(_tracker.createInstance<MySqlParser::ReplfilterStableListContext>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(3724);
        match(MySqlParser::REPLICATE_WILD_IGNORE_TABLE);
        setState(3725);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3726);
        match(MySqlParser::LR_BRACKET);
        setState(3727);
        simple_string_list();
        setState(3728);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::REPLICATE_REWRITE_DB: {
        _localctx = dynamic_cast<Repl_filterContext *>(_tracker.createInstance<MySqlParser::ReplfilterTablepairListContext>(_localctx));
        enterOuterAlt(_localctx, 7);
        setState(3730);
        match(MySqlParser::REPLICATE_REWRITE_DB);
        setState(3731);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3732);
        match(MySqlParser::LR_BRACKET);
        setState(3733);
        table_pair_list();
        setState(3734);
        match(MySqlParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Thread_typeContext ------------------------------------------------------------------

MySqlParser::Thread_typeContext::Thread_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Thread_typeContext::IO_THREAD() {
  return getToken(MySqlParser::IO_THREAD, 0);
}

tree::TerminalNode* MySqlParser::Thread_typeContext::SQL_THREAD() {
  return getToken(MySqlParser::SQL_THREAD, 0);
}


size_t MySqlParser::Thread_typeContext::getRuleIndex() const {
  return MySqlParser::RuleThread_type;
}

void MySqlParser::Thread_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThread_type(this);
}

void MySqlParser::Thread_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThread_type(this);
}

MySqlParser::Thread_typeContext* MySqlParser::thread_type() {
  Thread_typeContext *_localctx = _tracker.createInstance<Thread_typeContext>(_ctx, getState());
  enterRule(_localctx, 296, MySqlParser::RuleThread_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3738);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::IO_THREAD || _la == MySqlParser::SQL_THREAD)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Until_optionContext ------------------------------------------------------------------

MySqlParser::Until_optionContext::Until_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Until_optionContext::getRuleIndex() const {
  return MySqlParser::RuleUntil_option;
}

void MySqlParser::Until_optionContext::copyFrom(Until_optionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UntilSqlGapsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::UntilSqlGapsContext::SQL_AFTER_MTS_GAPS() {
  return getToken(MySqlParser::SQL_AFTER_MTS_GAPS, 0);
}

MySqlParser::UntilSqlGapsContext::UntilSqlGapsContext(Until_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::UntilSqlGapsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUntilSqlGaps(this);
}
void MySqlParser::UntilSqlGapsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUntilSqlGaps(this);
}
//----------------- UntilGtidSsetContext ------------------------------------------------------------------

MySqlParser::Gtid_setContext* MySqlParser::UntilGtidSsetContext::gtid_set() {
  return getRuleContext<MySqlParser::Gtid_setContext>(0);
}

tree::TerminalNode* MySqlParser::UntilGtidSsetContext::SQL_BEFORE_GTIDS() {
  return getToken(MySqlParser::SQL_BEFORE_GTIDS, 0);
}

tree::TerminalNode* MySqlParser::UntilGtidSsetContext::SQL_AFTER_GTIDS() {
  return getToken(MySqlParser::SQL_AFTER_GTIDS, 0);
}

MySqlParser::UntilGtidSsetContext::UntilGtidSsetContext(Until_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::UntilGtidSsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUntilGtidSset(this);
}
void MySqlParser::UntilGtidSsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUntilGtidSset(this);
}
//----------------- UntilRelayLogContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::UntilRelayLogContext::RELAY_LOG_FILE() {
  return getToken(MySqlParser::RELAY_LOG_FILE, 0);
}

tree::TerminalNode* MySqlParser::UntilRelayLogContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::UntilRelayLogContext::RELAY_LOG_POS() {
  return getToken(MySqlParser::RELAY_LOG_POS, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::UntilRelayLogContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::UntilRelayLogContext::UntilRelayLogContext(Until_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::UntilRelayLogContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUntilRelayLog(this);
}
void MySqlParser::UntilRelayLogContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUntilRelayLog(this);
}
//----------------- UntilMasterLogContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::UntilMasterLogContext::MASTER_LOG_FILE() {
  return getToken(MySqlParser::MASTER_LOG_FILE, 0);
}

tree::TerminalNode* MySqlParser::UntilMasterLogContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::UntilMasterLogContext::MASTER_LOG_POS() {
  return getToken(MySqlParser::MASTER_LOG_POS, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::UntilMasterLogContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::UntilMasterLogContext::UntilMasterLogContext(Until_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::UntilMasterLogContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUntilMasterLog(this);
}
void MySqlParser::UntilMasterLogContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUntilMasterLog(this);
}
MySqlParser::Until_optionContext* MySqlParser::until_option() {
  Until_optionContext *_localctx = _tracker.createInstance<Until_optionContext>(_ctx, getState());
  enterRule(_localctx, 298, MySqlParser::RuleUntil_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3758);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SQL_AFTER_GTIDS:
      case MySqlParser::SQL_BEFORE_GTIDS: {
        _localctx = dynamic_cast<Until_optionContext *>(_tracker.createInstance<MySqlParser::UntilGtidSsetContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(3740);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::SQL_AFTER_GTIDS

        || _la == MySqlParser::SQL_BEFORE_GTIDS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3741);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3742);
        gtid_set();
        break;
      }

      case MySqlParser::MASTER_LOG_FILE: {
        _localctx = dynamic_cast<Until_optionContext *>(_tracker.createInstance<MySqlParser::UntilMasterLogContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(3743);
        match(MySqlParser::MASTER_LOG_FILE);
        setState(3744);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3745);
        match(MySqlParser::STRING_LITERAL);
        setState(3746);
        match(MySqlParser::COMMA);
        setState(3747);
        match(MySqlParser::MASTER_LOG_POS);
        setState(3748);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3749);
        decimal_literal();
        break;
      }

      case MySqlParser::RELAY_LOG_FILE: {
        _localctx = dynamic_cast<Until_optionContext *>(_tracker.createInstance<MySqlParser::UntilRelayLogContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(3750);
        match(MySqlParser::RELAY_LOG_FILE);
        setState(3751);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3752);
        match(MySqlParser::STRING_LITERAL);
        setState(3753);
        match(MySqlParser::COMMA);
        setState(3754);
        match(MySqlParser::RELAY_LOG_POS);
        setState(3755);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3756);
        decimal_literal();
        break;
      }

      case MySqlParser::SQL_AFTER_MTS_GAPS: {
        _localctx = dynamic_cast<Until_optionContext *>(_tracker.createInstance<MySqlParser::UntilSqlGapsContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(3757);
        match(MySqlParser::SQL_AFTER_MTS_GAPS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_slave_connection_optionContext ------------------------------------------------------------------

MySqlParser::Start_slave_connection_optionContext::Start_slave_connection_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Start_slave_connection_optionContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

tree::TerminalNode* MySqlParser::Start_slave_connection_optionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Start_slave_connection_optionContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::Start_slave_connection_optionContext::DEFAULT_AUTH() {
  return getToken(MySqlParser::DEFAULT_AUTH, 0);
}

tree::TerminalNode* MySqlParser::Start_slave_connection_optionContext::PLUGIN_DIR() {
  return getToken(MySqlParser::PLUGIN_DIR, 0);
}


size_t MySqlParser::Start_slave_connection_optionContext::getRuleIndex() const {
  return MySqlParser::RuleStart_slave_connection_option;
}

void MySqlParser::Start_slave_connection_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_slave_connection_option(this);
}

void MySqlParser::Start_slave_connection_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_slave_connection_option(this);
}

MySqlParser::Start_slave_connection_optionContext* MySqlParser::start_slave_connection_option() {
  Start_slave_connection_optionContext *_localctx = _tracker.createInstance<Start_slave_connection_optionContext>(_ctx, getState());
  enterRule(_localctx, 300, MySqlParser::RuleStart_slave_connection_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3772);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::USER: {
        enterOuterAlt(_localctx, 1);
        setState(3760);
        match(MySqlParser::USER);
        setState(3761);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3762);
        dynamic_cast<Start_slave_connection_optionContext *>(_localctx)->con_opt_user = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::PASSWORD: {
        enterOuterAlt(_localctx, 2);
        setState(3763);
        match(MySqlParser::PASSWORD);
        setState(3764);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3765);
        dynamic_cast<Start_slave_connection_optionContext *>(_localctx)->con_opt_password = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::DEFAULT_AUTH: {
        enterOuterAlt(_localctx, 3);
        setState(3766);
        match(MySqlParser::DEFAULT_AUTH);
        setState(3767);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3768);
        dynamic_cast<Start_slave_connection_optionContext *>(_localctx)->con_opt_def_auth = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::PLUGIN_DIR: {
        enterOuterAlt(_localctx, 4);
        setState(3769);
        match(MySqlParser::PLUGIN_DIR);
        setState(3770);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(3771);
        dynamic_cast<Start_slave_connection_optionContext *>(_localctx)->con_opt_plugin_dir = match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gtid_setContext ------------------------------------------------------------------

MySqlParser::Gtid_setContext::Gtid_setContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Uuid_setContext *> MySqlParser::Gtid_setContext::uuid_set() {
  return getRuleContexts<MySqlParser::Uuid_setContext>();
}

MySqlParser::Uuid_setContext* MySqlParser::Gtid_setContext::uuid_set(size_t i) {
  return getRuleContext<MySqlParser::Uuid_setContext>(i);
}

tree::TerminalNode* MySqlParser::Gtid_setContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::Gtid_setContext::getRuleIndex() const {
  return MySqlParser::RuleGtid_set;
}

void MySqlParser::Gtid_setContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGtid_set(this);
}

void MySqlParser::Gtid_setContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGtid_set(this);
}

MySqlParser::Gtid_setContext* MySqlParser::gtid_set() {
  Gtid_setContext *_localctx = _tracker.createInstance<Gtid_setContext>(_ctx, getState());
  enterRule(_localctx, 302, MySqlParser::RuleGtid_set);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3783);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ZERO_DECIMAL:
      case MySqlParser::ONE_DECIMAL:
      case MySqlParser::TWO_DECIMAL:
      case MySqlParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(3774);
        uuid_set();
        setState(3779);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(3775);
          match(MySqlParser::COMMA);
          setState(3776);
          uuid_set();
          setState(3781);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case MySqlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(3782);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xa_start_transactionContext ------------------------------------------------------------------

MySqlParser::Xa_start_transactionContext::Xa_start_transactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Xa_start_transactionContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

MySqlParser::XidContext* MySqlParser::Xa_start_transactionContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}

tree::TerminalNode* MySqlParser::Xa_start_transactionContext::START() {
  return getToken(MySqlParser::START, 0);
}

tree::TerminalNode* MySqlParser::Xa_start_transactionContext::BEGIN() {
  return getToken(MySqlParser::BEGIN, 0);
}

tree::TerminalNode* MySqlParser::Xa_start_transactionContext::JOIN() {
  return getToken(MySqlParser::JOIN, 0);
}

tree::TerminalNode* MySqlParser::Xa_start_transactionContext::RESUME() {
  return getToken(MySqlParser::RESUME, 0);
}


size_t MySqlParser::Xa_start_transactionContext::getRuleIndex() const {
  return MySqlParser::RuleXa_start_transaction;
}

void MySqlParser::Xa_start_transactionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXa_start_transaction(this);
}

void MySqlParser::Xa_start_transactionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXa_start_transaction(this);
}

MySqlParser::Xa_start_transactionContext* MySqlParser::xa_start_transaction() {
  Xa_start_transactionContext *_localctx = _tracker.createInstance<Xa_start_transactionContext>(_ctx, getState());
  enterRule(_localctx, 304, MySqlParser::RuleXa_start_transaction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3785);
    match(MySqlParser::XA);
    setState(3786);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::BEGIN || _la == MySqlParser::START)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3787);
    xid();
    setState(3789);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::JOIN || _la == MySqlParser::RESUME) {
      setState(3788);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::JOIN || _la == MySqlParser::RESUME)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xa_end_transactionContext ------------------------------------------------------------------

MySqlParser::Xa_end_transactionContext::Xa_end_transactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Xa_end_transactionContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

tree::TerminalNode* MySqlParser::Xa_end_transactionContext::END() {
  return getToken(MySqlParser::END, 0);
}

MySqlParser::XidContext* MySqlParser::Xa_end_transactionContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}

tree::TerminalNode* MySqlParser::Xa_end_transactionContext::SUSPEND() {
  return getToken(MySqlParser::SUSPEND, 0);
}

tree::TerminalNode* MySqlParser::Xa_end_transactionContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::Xa_end_transactionContext::MIGRATE() {
  return getToken(MySqlParser::MIGRATE, 0);
}


size_t MySqlParser::Xa_end_transactionContext::getRuleIndex() const {
  return MySqlParser::RuleXa_end_transaction;
}

void MySqlParser::Xa_end_transactionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXa_end_transaction(this);
}

void MySqlParser::Xa_end_transactionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXa_end_transaction(this);
}

MySqlParser::Xa_end_transactionContext* MySqlParser::xa_end_transaction() {
  Xa_end_transactionContext *_localctx = _tracker.createInstance<Xa_end_transactionContext>(_ctx, getState());
  enterRule(_localctx, 306, MySqlParser::RuleXa_end_transaction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3791);
    match(MySqlParser::XA);
    setState(3792);
    match(MySqlParser::END);
    setState(3793);
    xid();
    setState(3799);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::SUSPEND) {
      setState(3794);
      match(MySqlParser::SUSPEND);
      setState(3797);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(3795);
        match(MySqlParser::FOR);
        setState(3796);
        match(MySqlParser::MIGRATE);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xa_prepareContext ------------------------------------------------------------------

MySqlParser::Xa_prepareContext::Xa_prepareContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Xa_prepareContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

tree::TerminalNode* MySqlParser::Xa_prepareContext::PREPARE() {
  return getToken(MySqlParser::PREPARE, 0);
}

MySqlParser::XidContext* MySqlParser::Xa_prepareContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}


size_t MySqlParser::Xa_prepareContext::getRuleIndex() const {
  return MySqlParser::RuleXa_prepare;
}

void MySqlParser::Xa_prepareContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXa_prepare(this);
}

void MySqlParser::Xa_prepareContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXa_prepare(this);
}

MySqlParser::Xa_prepareContext* MySqlParser::xa_prepare() {
  Xa_prepareContext *_localctx = _tracker.createInstance<Xa_prepareContext>(_ctx, getState());
  enterRule(_localctx, 308, MySqlParser::RuleXa_prepare);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3801);
    match(MySqlParser::XA);
    setState(3802);
    match(MySqlParser::PREPARE);
    setState(3803);
    xid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xa_commit_workContext ------------------------------------------------------------------

MySqlParser::Xa_commit_workContext::Xa_commit_workContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Xa_commit_workContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

tree::TerminalNode* MySqlParser::Xa_commit_workContext::COMMIT() {
  return getToken(MySqlParser::COMMIT, 0);
}

MySqlParser::XidContext* MySqlParser::Xa_commit_workContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}

tree::TerminalNode* MySqlParser::Xa_commit_workContext::ONE() {
  return getToken(MySqlParser::ONE, 0);
}

tree::TerminalNode* MySqlParser::Xa_commit_workContext::PHASE() {
  return getToken(MySqlParser::PHASE, 0);
}


size_t MySqlParser::Xa_commit_workContext::getRuleIndex() const {
  return MySqlParser::RuleXa_commit_work;
}

void MySqlParser::Xa_commit_workContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXa_commit_work(this);
}

void MySqlParser::Xa_commit_workContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXa_commit_work(this);
}

MySqlParser::Xa_commit_workContext* MySqlParser::xa_commit_work() {
  Xa_commit_workContext *_localctx = _tracker.createInstance<Xa_commit_workContext>(_ctx, getState());
  enterRule(_localctx, 310, MySqlParser::RuleXa_commit_work);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3805);
    match(MySqlParser::XA);
    setState(3806);
    match(MySqlParser::COMMIT);
    setState(3807);
    xid();
    setState(3810);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ONE) {
      setState(3808);
      match(MySqlParser::ONE);
      setState(3809);
      match(MySqlParser::PHASE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xa_rollback_workContext ------------------------------------------------------------------

MySqlParser::Xa_rollback_workContext::Xa_rollback_workContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Xa_rollback_workContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

tree::TerminalNode* MySqlParser::Xa_rollback_workContext::ROLLBACK() {
  return getToken(MySqlParser::ROLLBACK, 0);
}

MySqlParser::XidContext* MySqlParser::Xa_rollback_workContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}


size_t MySqlParser::Xa_rollback_workContext::getRuleIndex() const {
  return MySqlParser::RuleXa_rollback_work;
}

void MySqlParser::Xa_rollback_workContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXa_rollback_work(this);
}

void MySqlParser::Xa_rollback_workContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXa_rollback_work(this);
}

MySqlParser::Xa_rollback_workContext* MySqlParser::xa_rollback_work() {
  Xa_rollback_workContext *_localctx = _tracker.createInstance<Xa_rollback_workContext>(_ctx, getState());
  enterRule(_localctx, 312, MySqlParser::RuleXa_rollback_work);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3812);
    match(MySqlParser::XA);
    setState(3813);
    match(MySqlParser::ROLLBACK);
    setState(3814);
    xid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xa_recover_workContext ------------------------------------------------------------------

MySqlParser::Xa_recover_workContext::Xa_recover_workContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Xa_recover_workContext::XA() {
  return getToken(MySqlParser::XA, 0);
}

tree::TerminalNode* MySqlParser::Xa_recover_workContext::RECOVER() {
  return getToken(MySqlParser::RECOVER, 0);
}

tree::TerminalNode* MySqlParser::Xa_recover_workContext::CONVERT() {
  return getToken(MySqlParser::CONVERT, 0);
}

MySqlParser::XidContext* MySqlParser::Xa_recover_workContext::xid() {
  return getRuleContext<MySqlParser::XidContext>(0);
}


size_t MySqlParser::Xa_recover_workContext::getRuleIndex() const {
  return MySqlParser::RuleXa_recover_work;
}

void MySqlParser::Xa_recover_workContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXa_recover_work(this);
}

void MySqlParser::Xa_recover_workContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXa_recover_work(this);
}

MySqlParser::Xa_recover_workContext* MySqlParser::xa_recover_work() {
  Xa_recover_workContext *_localctx = _tracker.createInstance<Xa_recover_workContext>(_ctx, getState());
  enterRule(_localctx, 314, MySqlParser::RuleXa_recover_work);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3816);
    match(MySqlParser::XA);
    setState(3817);
    match(MySqlParser::RECOVER);
    setState(3820);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CONVERT) {
      setState(3818);
      match(MySqlParser::CONVERT);
      setState(3819);
      xid();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prepare_statementContext ------------------------------------------------------------------

MySqlParser::Prepare_statementContext::Prepare_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Prepare_statementContext::PREPARE() {
  return getToken(MySqlParser::PREPARE, 0);
}

MySqlParser::Id_Context* MySqlParser::Prepare_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Prepare_statementContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::Prepare_statementContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Prepare_statementContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}


size_t MySqlParser::Prepare_statementContext::getRuleIndex() const {
  return MySqlParser::RulePrepare_statement;
}

void MySqlParser::Prepare_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrepare_statement(this);
}

void MySqlParser::Prepare_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrepare_statement(this);
}

MySqlParser::Prepare_statementContext* MySqlParser::prepare_statement() {
  Prepare_statementContext *_localctx = _tracker.createInstance<Prepare_statementContext>(_ctx, getState());
  enterRule(_localctx, 316, MySqlParser::RulePrepare_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3822);
    match(MySqlParser::PREPARE);
    setState(3823);
    id_();
    setState(3824);
    match(MySqlParser::FROM);
    setState(3825);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::STRING_LITERAL

    || _la == MySqlParser::LOCAL_ID)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Execute_statementContext ------------------------------------------------------------------

MySqlParser::Execute_statementContext::Execute_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Execute_statementContext::EXECUTE() {
  return getToken(MySqlParser::EXECUTE, 0);
}

MySqlParser::Id_Context* MySqlParser::Execute_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Execute_statementContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

MySqlParser::User_var_listContext* MySqlParser::Execute_statementContext::user_var_list() {
  return getRuleContext<MySqlParser::User_var_listContext>(0);
}


size_t MySqlParser::Execute_statementContext::getRuleIndex() const {
  return MySqlParser::RuleExecute_statement;
}

void MySqlParser::Execute_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecute_statement(this);
}

void MySqlParser::Execute_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecute_statement(this);
}

MySqlParser::Execute_statementContext* MySqlParser::execute_statement() {
  Execute_statementContext *_localctx = _tracker.createInstance<Execute_statementContext>(_ctx, getState());
  enterRule(_localctx, 318, MySqlParser::RuleExecute_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3827);
    match(MySqlParser::EXECUTE);
    setState(3828);
    id_();
    setState(3831);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::USING) {
      setState(3829);
      match(MySqlParser::USING);
      setState(3830);
      user_var_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Deallocate_prepareContext ------------------------------------------------------------------

MySqlParser::Deallocate_prepareContext::Deallocate_prepareContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Deallocate_prepareContext::PREPARE() {
  return getToken(MySqlParser::PREPARE, 0);
}

MySqlParser::Id_Context* MySqlParser::Deallocate_prepareContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Deallocate_prepareContext::DEALLOCATE() {
  return getToken(MySqlParser::DEALLOCATE, 0);
}

tree::TerminalNode* MySqlParser::Deallocate_prepareContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}


size_t MySqlParser::Deallocate_prepareContext::getRuleIndex() const {
  return MySqlParser::RuleDeallocate_prepare;
}

void MySqlParser::Deallocate_prepareContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeallocate_prepare(this);
}

void MySqlParser::Deallocate_prepareContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeallocate_prepare(this);
}

MySqlParser::Deallocate_prepareContext* MySqlParser::deallocate_prepare() {
  Deallocate_prepareContext *_localctx = _tracker.createInstance<Deallocate_prepareContext>(_ctx, getState());
  enterRule(_localctx, 320, MySqlParser::RuleDeallocate_prepare);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3833);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::DROP || _la == MySqlParser::DEALLOCATE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3834);
    match(MySqlParser::PREPARE);
    setState(3835);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Routine_bodyContext ------------------------------------------------------------------

MySqlParser::Routine_bodyContext::Routine_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Block_statementContext* MySqlParser::Routine_bodyContext::block_statement() {
  return getRuleContext<MySqlParser::Block_statementContext>(0);
}

MySqlParser::Sql_statementContext* MySqlParser::Routine_bodyContext::sql_statement() {
  return getRuleContext<MySqlParser::Sql_statementContext>(0);
}


size_t MySqlParser::Routine_bodyContext::getRuleIndex() const {
  return MySqlParser::RuleRoutine_body;
}

void MySqlParser::Routine_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoutine_body(this);
}

void MySqlParser::Routine_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoutine_body(this);
}

MySqlParser::Routine_bodyContext* MySqlParser::routine_body() {
  Routine_bodyContext *_localctx = _tracker.createInstance<Routine_bodyContext>(_ctx, getState());
  enterRule(_localctx, 322, MySqlParser::RuleRoutine_body);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(3839);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 559, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3837);
      block_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3838);
      sql_statement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_statementContext ------------------------------------------------------------------

MySqlParser::Block_statementContext::Block_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Block_statementContext::BEGIN() {
  return getToken(MySqlParser::BEGIN, 0);
}

tree::TerminalNode* MySqlParser::Block_statementContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::Block_statementContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::Block_statementContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

std::vector<MySqlParser::Declare_variableContext *> MySqlParser::Block_statementContext::declare_variable() {
  return getRuleContexts<MySqlParser::Declare_variableContext>();
}

MySqlParser::Declare_variableContext* MySqlParser::Block_statementContext::declare_variable(size_t i) {
  return getRuleContext<MySqlParser::Declare_variableContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::Block_statementContext::SEMI() {
  return getTokens(MySqlParser::SEMI);
}

tree::TerminalNode* MySqlParser::Block_statementContext::SEMI(size_t i) {
  return getToken(MySqlParser::SEMI, i);
}

std::vector<MySqlParser::Declare_conditionContext *> MySqlParser::Block_statementContext::declare_condition() {
  return getRuleContexts<MySqlParser::Declare_conditionContext>();
}

MySqlParser::Declare_conditionContext* MySqlParser::Block_statementContext::declare_condition(size_t i) {
  return getRuleContext<MySqlParser::Declare_conditionContext>(i);
}

std::vector<MySqlParser::Declare_cursorContext *> MySqlParser::Block_statementContext::declare_cursor() {
  return getRuleContexts<MySqlParser::Declare_cursorContext>();
}

MySqlParser::Declare_cursorContext* MySqlParser::Block_statementContext::declare_cursor(size_t i) {
  return getRuleContext<MySqlParser::Declare_cursorContext>(i);
}

std::vector<MySqlParser::Declare_handlerContext *> MySqlParser::Block_statementContext::declare_handler() {
  return getRuleContexts<MySqlParser::Declare_handlerContext>();
}

MySqlParser::Declare_handlerContext* MySqlParser::Block_statementContext::declare_handler(size_t i) {
  return getRuleContext<MySqlParser::Declare_handlerContext>(i);
}

std::vector<MySqlParser::Procedure_sql_statementContext *> MySqlParser::Block_statementContext::procedure_sql_statement() {
  return getRuleContexts<MySqlParser::Procedure_sql_statementContext>();
}

MySqlParser::Procedure_sql_statementContext* MySqlParser::Block_statementContext::procedure_sql_statement(size_t i) {
  return getRuleContext<MySqlParser::Procedure_sql_statementContext>(i);
}


size_t MySqlParser::Block_statementContext::getRuleIndex() const {
  return MySqlParser::RuleBlock_statement;
}

void MySqlParser::Block_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_statement(this);
}

void MySqlParser::Block_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_statement(this);
}

MySqlParser::Block_statementContext* MySqlParser::block_statement() {
  Block_statementContext *_localctx = _tracker.createInstance<Block_statementContext>(_ctx, getState());
  enterRule(_localctx, 324, MySqlParser::RuleBlock_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3844);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 560, _ctx)) {
    case 1: {
      setState(3841);
      id_();
      setState(3842);
      match(MySqlParser::COLON_SYMB);
      break;
    }

    }
    setState(3846);
    match(MySqlParser::BEGIN);
    setState(3884);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & ((1ULL << (MySqlParser::ALTER - 7))
      | (1ULL << (MySqlParser::ANALYZE - 7))
      | (1ULL << (MySqlParser::CALL - 7))
      | (1ULL << (MySqlParser::CASE - 7))
      | (1ULL << (MySqlParser::CHANGE - 7))
      | (1ULL << (MySqlParser::CHECK - 7))
      | (1ULL << (MySqlParser::CREATE - 7))
      | (1ULL << (MySqlParser::DECLARE - 7))
      | (1ULL << (MySqlParser::DELETE - 7))
      | (1ULL << (MySqlParser::DESC - 7))
      | (1ULL << (MySqlParser::DESCRIBE - 7))
      | (1ULL << (MySqlParser::DROP - 7))
      | (1ULL << (MySqlParser::EXPLAIN - 7))
      | (1ULL << (MySqlParser::FETCH - 7))
      | (1ULL << (MySqlParser::GRANT - 7))
      | (1ULL << (MySqlParser::IF - 7)))) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::INSERT - 71))
      | (1ULL << (MySqlParser::ITERATE - 71))
      | (1ULL << (MySqlParser::KILL - 71))
      | (1ULL << (MySqlParser::LEAVE - 71))
      | (1ULL << (MySqlParser::LEFT - 71))
      | (1ULL << (MySqlParser::LOAD - 71))
      | (1ULL << (MySqlParser::LOCK - 71))
      | (1ULL << (MySqlParser::LOOP - 71))
      | (1ULL << (MySqlParser::OPTIMIZE - 71))
      | (1ULL << (MySqlParser::PURGE - 71))
      | (1ULL << (MySqlParser::RELEASE - 71))
      | (1ULL << (MySqlParser::RENAME - 71))
      | (1ULL << (MySqlParser::REPEAT - 71))
      | (1ULL << (MySqlParser::REPLACE - 71))
      | (1ULL << (MySqlParser::RETURN - 71))
      | (1ULL << (MySqlParser::REVOKE - 71))
      | (1ULL << (MySqlParser::RIGHT - 71))
      | (1ULL << (MySqlParser::SELECT - 71))
      | (1ULL << (MySqlParser::SET - 71))
      | (1ULL << (MySqlParser::SHOW - 71)))) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & ((1ULL << (MySqlParser::UNLOCK - 156))
      | (1ULL << (MySqlParser::UPDATE - 156))
      | (1ULL << (MySqlParser::USE - 156))
      | (1ULL << (MySqlParser::WHILE - 156))
      | (1ULL << (MySqlParser::DATE - 156))
      | (1ULL << (MySqlParser::TIME - 156))
      | (1ULL << (MySqlParser::TIMESTAMP - 156))
      | (1ULL << (MySqlParser::DATETIME - 156))
      | (1ULL << (MySqlParser::YEAR - 156))
      | (1ULL << (MySqlParser::TEXT - 156))
      | (1ULL << (MySqlParser::ENUM - 156))
      | (1ULL << (MySqlParser::COUNT - 156)))) != 0) || ((((_la - 237) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 237)) & ((1ULL << (MySqlParser::POSITION - 237))
      | (1ULL << (MySqlParser::ACTION - 237))
      | (1ULL << (MySqlParser::AFTER - 237))
      | (1ULL << (MySqlParser::ALGORITHM - 237))
      | (1ULL << (MySqlParser::ANY - 237))
      | (1ULL << (MySqlParser::AT - 237))
      | (1ULL << (MySqlParser::AUTHORS - 237))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 237))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 237))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 237))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 237))
      | (1ULL << (MySqlParser::BEGIN - 237))
      | (1ULL << (MySqlParser::BINLOG - 237))
      | (1ULL << (MySqlParser::BIT - 237))
      | (1ULL << (MySqlParser::BTREE - 237))
      | (1ULL << (MySqlParser::CACHE - 237))
      | (1ULL << (MySqlParser::CASCADED - 237))
      | (1ULL << (MySqlParser::CHAIN - 237))
      | (1ULL << (MySqlParser::CHECKSUM - 237))
      | (1ULL << (MySqlParser::CIPHER - 237))
      | (1ULL << (MySqlParser::CLIENT - 237))
      | (1ULL << (MySqlParser::CLOSE - 237))
      | (1ULL << (MySqlParser::COALESCE - 237))
      | (1ULL << (MySqlParser::CODE - 237))
      | (1ULL << (MySqlParser::COLUMNS - 237))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 237))
      | (1ULL << (MySqlParser::COMMENT - 237))
      | (1ULL << (MySqlParser::COMMIT - 237))
      | (1ULL << (MySqlParser::COMPACT - 237))
      | (1ULL << (MySqlParser::COMPLETION - 237))
      | (1ULL << (MySqlParser::COMPRESSED - 237))
      | (1ULL << (MySqlParser::CONCURRENT - 237))
      | (1ULL << (MySqlParser::CONNECTION - 237))
      | (1ULL << (MySqlParser::CONSISTENT - 237))
      | (1ULL << (MySqlParser::CONTAINS - 237))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 237))
      | (1ULL << (MySqlParser::COPY - 237))
      | (1ULL << (MySqlParser::DATA - 237))
      | (1ULL << (MySqlParser::DATAFILE - 237))
      | (1ULL << (MySqlParser::DEALLOCATE - 237))
      | (1ULL << (MySqlParser::DEFINER - 237))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 237))
      | (1ULL << (MySqlParser::DIRECTORY - 237))
      | (1ULL << (MySqlParser::DISABLE - 237))
      | (1ULL << (MySqlParser::DISCARD - 237))
      | (1ULL << (MySqlParser::DISK - 237))
      | (1ULL << (MySqlParser::DO - 237)))) != 0) || ((((_la - 301) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 301)) & ((1ULL << (MySqlParser::DUMPFILE - 301))
      | (1ULL << (MySqlParser::DUPLICATE - 301))
      | (1ULL << (MySqlParser::DYNAMIC - 301))
      | (1ULL << (MySqlParser::ENABLE - 301))
      | (1ULL << (MySqlParser::ENDS - 301))
      | (1ULL << (MySqlParser::ENGINE - 301))
      | (1ULL << (MySqlParser::ENGINES - 301))
      | (1ULL << (MySqlParser::ERRORS - 301))
      | (1ULL << (MySqlParser::ESCAPE - 301))
      | (1ULL << (MySqlParser::EVEN - 301))
      | (1ULL << (MySqlParser::EVENT - 301))
      | (1ULL << (MySqlParser::EVENTS - 301))
      | (1ULL << (MySqlParser::EVERY - 301))
      | (1ULL << (MySqlParser::EXCHANGE - 301))
      | (1ULL << (MySqlParser::EXCLUSIVE - 301))
      | (1ULL << (MySqlParser::EXPIRE - 301))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 301))
      | (1ULL << (MySqlParser::FIELDS - 301))
      | (1ULL << (MySqlParser::FIRST - 301))
      | (1ULL << (MySqlParser::FIXED - 301))
      | (1ULL << (MySqlParser::FLUSH - 301))
      | (1ULL << (MySqlParser::FULL - 301))
      | (1ULL << (MySqlParser::FUNCTION - 301))
      | (1ULL << (MySqlParser::GLOBAL - 301))
      | (1ULL << (MySqlParser::GRANTS - 301))
      | (1ULL << (MySqlParser::HANDLER - 301))
      | (1ULL << (MySqlParser::HASH - 301))
      | (1ULL << (MySqlParser::HELP - 301))
      | (1ULL << (MySqlParser::HOST - 301))
      | (1ULL << (MySqlParser::IDENTIFIED - 301))
      | (1ULL << (MySqlParser::IMPORT - 301))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 301))
      | (1ULL << (MySqlParser::INPLACE - 301))
      | (1ULL << (MySqlParser::INSERT_METHOD - 301))
      | (1ULL << (MySqlParser::INSTALL - 301))
      | (1ULL << (MySqlParser::INVOKER - 301))
      | (1ULL << (MySqlParser::ISOLATION - 301))
      | (1ULL << (MySqlParser::ISSUER - 301))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 301))
      | (1ULL << (MySqlParser::LANGUAGE - 301))
      | (1ULL << (MySqlParser::LAST - 301))
      | (1ULL << (MySqlParser::LESS - 301)))) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 365)) & ((1ULL << (MySqlParser::LEVEL - 365))
      | (1ULL << (MySqlParser::LIST - 365))
      | (1ULL << (MySqlParser::LOCAL - 365))
      | (1ULL << (MySqlParser::LOGFILE - 365))
      | (1ULL << (MySqlParser::LOGS - 365))
      | (1ULL << (MySqlParser::MASTER - 365))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_ROWS - 365))
      | (1ULL << (MySqlParser::MAX_SIZE - 365))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 365))
      | (1ULL << (MySqlParser::MERGE - 365))
      | (1ULL << (MySqlParser::MID - 365))
      | (1ULL << (MySqlParser::MIN_ROWS - 365))
      | (1ULL << (MySqlParser::MODIFY - 365))
      | (1ULL << (MySqlParser::MUTEX - 365))
      | (1ULL << (MySqlParser::MYSQL - 365))
      | (1ULL << (MySqlParser::NAME - 365))
      | (1ULL << (MySqlParser::NAMES - 365))
      | (1ULL << (MySqlParser::NCHAR - 365))
      | (1ULL << (MySqlParser::NO - 365))
      | (1ULL << (MySqlParser::NODEGROUP - 365))
      | (1ULL << (MySqlParser::NONE - 365))
      | (1ULL << (MySqlParser::OFFLINE - 365))
      | (1ULL << (MySqlParser::OFFSET - 365))
      | (1ULL << (MySqlParser::OJ - 365))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 365))
      | (1ULL << (MySqlParser::ONLINE - 365))
      | (1ULL << (MySqlParser::ONLY - 365))
      | (1ULL << (MySqlParser::OPEN - 365))
      | (1ULL << (MySqlParser::OPTIONS - 365))
      | (1ULL << (MySqlParser::OWNER - 365))
      | (1ULL << (MySqlParser::PACK_KEYS - 365))
      | (1ULL << (MySqlParser::PARSER - 365))
      | (1ULL << (MySqlParser::PARTIAL - 365)))) != 0) || ((((_la - 429) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 429)) & ((1ULL << (MySqlParser::PARTITIONING - 429))
      | (1ULL << (MySqlParser::PARTITIONS - 429))
      | (1ULL << (MySqlParser::PASSWORD - 429))
      | (1ULL << (MySqlParser::PLUGINS - 429))
      | (1ULL << (MySqlParser::PORT - 429))
      | (1ULL << (MySqlParser::PREPARE - 429))
      | (1ULL << (MySqlParser::PRESERVE - 429))
      | (1ULL << (MySqlParser::PROCESSLIST - 429))
      | (1ULL << (MySqlParser::PROFILE - 429))
      | (1ULL << (MySqlParser::PROFILES - 429))
      | (1ULL << (MySqlParser::PROXY - 429))
      | (1ULL << (MySqlParser::QUERY - 429))
      | (1ULL << (MySqlParser::QUICK - 429))
      | (1ULL << (MySqlParser::REBUILD - 429))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 429))
      | (1ULL << (MySqlParser::REDUNDANT - 429))
      | (1ULL << (MySqlParser::RELAYLOG - 429))
      | (1ULL << (MySqlParser::REMOVE - 429))
      | (1ULL << (MySqlParser::REORGANIZE - 429))
      | (1ULL << (MySqlParser::REPAIR - 429))
      | (1ULL << (MySqlParser::REPLICATION - 429))
      | (1ULL << (MySqlParser::RESET - 429))
      | (1ULL << (MySqlParser::RETURNS - 429))
      | (1ULL << (MySqlParser::ROLLBACK - 429))
      | (1ULL << (MySqlParser::ROLLUP - 429))
      | (1ULL << (MySqlParser::ROW - 429))
      | (1ULL << (MySqlParser::ROWS - 429))
      | (1ULL << (MySqlParser::ROW_FORMAT - 429))
      | (1ULL << (MySqlParser::SAVEPOINT - 429))
      | (1ULL << (MySqlParser::SCHEDULE - 429))
      | (1ULL << (MySqlParser::SECURITY - 429))
      | (1ULL << (MySqlParser::SERVER - 429))
      | (1ULL << (MySqlParser::SESSION - 429))
      | (1ULL << (MySqlParser::SHARE - 429))
      | (1ULL << (MySqlParser::SHARED - 429))
      | (1ULL << (MySqlParser::SIGNED - 429))
      | (1ULL << (MySqlParser::SIMPLE - 429))
      | (1ULL << (MySqlParser::SLAVE - 429))
      | (1ULL << (MySqlParser::SNAPSHOT - 429))
      | (1ULL << (MySqlParser::SOCKET - 429))
      | (1ULL << (MySqlParser::SOME - 429))
      | (1ULL << (MySqlParser::SOUNDS - 429)))) != 0) || ((((_la - 495) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 495)) & ((1ULL << (MySqlParser::SQL_BUFFER_RESULT - 495))
      | (1ULL << (MySqlParser::SQL_CACHE - 495))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 495))
      | (1ULL << (MySqlParser::START - 495))
      | (1ULL << (MySqlParser::STARTS - 495))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 495))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 495))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 495))
      | (1ULL << (MySqlParser::STATUS - 495))
      | (1ULL << (MySqlParser::STOP - 495))
      | (1ULL << (MySqlParser::STORAGE - 495))
      | (1ULL << (MySqlParser::SUBJECT - 495))
      | (1ULL << (MySqlParser::SUBPARTITION - 495))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 495))
      | (1ULL << (MySqlParser::TABLESPACE - 495))
      | (1ULL << (MySqlParser::TEMPORARY - 495))
      | (1ULL << (MySqlParser::TEMPTABLE - 495))
      | (1ULL << (MySqlParser::THAN - 495))
      | (1ULL << (MySqlParser::TRANSACTION - 495))
      | (1ULL << (MySqlParser::TRUNCATE - 495))
      | (1ULL << (MySqlParser::UNDEFINED - 495))
      | (1ULL << (MySqlParser::UNDOFILE - 495))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 495))
      | (1ULL << (MySqlParser::UNINSTALL - 495))
      | (1ULL << (MySqlParser::UNKNOWN - 495))
      | (1ULL << (MySqlParser::UPGRADE - 495))
      | (1ULL << (MySqlParser::USER - 495))
      | (1ULL << (MySqlParser::VALUE - 495))
      | (1ULL << (MySqlParser::VARIABLES - 495))
      | (1ULL << (MySqlParser::VIEW - 495))
      | (1ULL << (MySqlParser::WAIT - 495))
      | (1ULL << (MySqlParser::WARNINGS - 495))
      | (1ULL << (MySqlParser::WORK - 495))
      | (1ULL << (MySqlParser::WRAPPER - 495))
      | (1ULL << (MySqlParser::X509 - 495))
      | (1ULL << (MySqlParser::XA - 495))
      | (1ULL << (MySqlParser::XML - 495))
      | (1ULL << (MySqlParser::QUARTER - 495))
      | (1ULL << (MySqlParser::MONTH - 495))
      | (1ULL << (MySqlParser::DAY - 495))
      | (1ULL << (MySqlParser::HOUR - 495))
      | (1ULL << (MySqlParser::MINUTE - 495))
      | (1ULL << (MySqlParser::WEEK - 495))
      | (1ULL << (MySqlParser::SECOND - 495))
      | (1ULL << (MySqlParser::MICROSECOND - 495))
      | (1ULL << (MySqlParser::TABLES - 495))
      | (1ULL << (MySqlParser::ROUTINE - 495)))) != 0) || ((((_la - 559) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 559)) & ((1ULL << (MySqlParser::EXECUTE - 559))
      | (1ULL << (MySqlParser::FILE - 559))
      | (1ULL << (MySqlParser::PROCESS - 559))
      | (1ULL << (MySqlParser::RELOAD - 559))
      | (1ULL << (MySqlParser::SHUTDOWN - 559))
      | (1ULL << (MySqlParser::SUPER - 559))
      | (1ULL << (MySqlParser::PRIVILEGES - 559))
      | (1ULL << (MySqlParser::ARMSCII8 - 559))
      | (1ULL << (MySqlParser::ASCII - 559))
      | (1ULL << (MySqlParser::BIG5 - 559))
      | (1ULL << (MySqlParser::CP1250 - 559))
      | (1ULL << (MySqlParser::CP1251 - 559))
      | (1ULL << (MySqlParser::CP1256 - 559))
      | (1ULL << (MySqlParser::CP1257 - 559))
      | (1ULL << (MySqlParser::CP850 - 559))
      | (1ULL << (MySqlParser::CP852 - 559))
      | (1ULL << (MySqlParser::CP866 - 559))
      | (1ULL << (MySqlParser::CP932 - 559))
      | (1ULL << (MySqlParser::DEC8 - 559))
      | (1ULL << (MySqlParser::EUCJPMS - 559))
      | (1ULL << (MySqlParser::EUCKR - 559))
      | (1ULL << (MySqlParser::GB2312 - 559))
      | (1ULL << (MySqlParser::GBK - 559))
      | (1ULL << (MySqlParser::GEOSTD8 - 559))
      | (1ULL << (MySqlParser::GREEK - 559))
      | (1ULL << (MySqlParser::HEBREW - 559))
      | (1ULL << (MySqlParser::HP8 - 559))
      | (1ULL << (MySqlParser::KEYBCS2 - 559))
      | (1ULL << (MySqlParser::KOI8R - 559))
      | (1ULL << (MySqlParser::KOI8U - 559))
      | (1ULL << (MySqlParser::LATIN1 - 559))
      | (1ULL << (MySqlParser::LATIN2 - 559))
      | (1ULL << (MySqlParser::LATIN5 - 559))
      | (1ULL << (MySqlParser::LATIN7 - 559))
      | (1ULL << (MySqlParser::MACCE - 559))
      | (1ULL << (MySqlParser::MACROMAN - 559))
      | (1ULL << (MySqlParser::SJIS - 559))
      | (1ULL << (MySqlParser::SWE7 - 559))
      | (1ULL << (MySqlParser::TIS620 - 559))
      | (1ULL << (MySqlParser::UCS2 - 559))
      | (1ULL << (MySqlParser::UJIS - 559))
      | (1ULL << (MySqlParser::UTF16 - 559))
      | (1ULL << (MySqlParser::UTF16LE - 559))
      | (1ULL << (MySqlParser::UTF32 - 559))
      | (1ULL << (MySqlParser::UTF8 - 559))
      | (1ULL << (MySqlParser::UTF8MB3 - 559))
      | (1ULL << (MySqlParser::UTF8MB4 - 559))
      | (1ULL << (MySqlParser::ARCHIVE - 559))
      | (1ULL << (MySqlParser::BLACKHOLE - 559))
      | (1ULL << (MySqlParser::CSV - 559))
      | (1ULL << (MySqlParser::FEDERATED - 559))
      | (1ULL << (MySqlParser::INNODB - 559))
      | (1ULL << (MySqlParser::MEMORY - 559))
      | (1ULL << (MySqlParser::MRG_MYISAM - 559))
      | (1ULL << (MySqlParser::MYISAM - 559))
      | (1ULL << (MySqlParser::NDB - 559))
      | (1ULL << (MySqlParser::NDBCLUSTER - 559))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 559))
      | (1ULL << (MySqlParser::REPEATABLE - 559))
      | (1ULL << (MySqlParser::COMMITTED - 559))
      | (1ULL << (MySqlParser::UNCOMMITTED - 559))
      | (1ULL << (MySqlParser::SERIALIZABLE - 559))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 559))
      | (1ULL << (MySqlParser::LINESTRING - 559)))) != 0) || ((((_la - 623) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 623)) & ((1ULL << (MySqlParser::MULTILINESTRING - 623))
      | (1ULL << (MySqlParser::MULTIPOINT - 623))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 623))
      | (1ULL << (MySqlParser::POINT - 623))
      | (1ULL << (MySqlParser::POLYGON - 623))
      | (1ULL << (MySqlParser::ABS - 623))
      | (1ULL << (MySqlParser::ACOS - 623))
      | (1ULL << (MySqlParser::ADDDATE - 623))
      | (1ULL << (MySqlParser::ADDTIME - 623))
      | (1ULL << (MySqlParser::AES_DECRYPT - 623))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 623))
      | (1ULL << (MySqlParser::AREA - 623))
      | (1ULL << (MySqlParser::ASBINARY - 623))
      | (1ULL << (MySqlParser::ASIN - 623))
      | (1ULL << (MySqlParser::ASTEXT - 623))
      | (1ULL << (MySqlParser::ASWKB - 623))
      | (1ULL << (MySqlParser::ASWKT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 623))
      | (1ULL << (MySqlParser::ATAN - 623))
      | (1ULL << (MySqlParser::ATAN2 - 623))
      | (1ULL << (MySqlParser::BENCHMARK - 623))
      | (1ULL << (MySqlParser::BIN - 623))
      | (1ULL << (MySqlParser::BIT_COUNT - 623))
      | (1ULL << (MySqlParser::BIT_LENGTH - 623))
      | (1ULL << (MySqlParser::BUFFER - 623))
      | (1ULL << (MySqlParser::CEIL - 623))
      | (1ULL << (MySqlParser::CEILING - 623))
      | (1ULL << (MySqlParser::CENTROID - 623))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 623))
      | (1ULL << (MySqlParser::CHARSET - 623))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 623))
      | (1ULL << (MySqlParser::COERCIBILITY - 623))
      | (1ULL << (MySqlParser::COLLATION - 623))
      | (1ULL << (MySqlParser::COMPRESS - 623))
      | (1ULL << (MySqlParser::CONCAT - 623))
      | (1ULL << (MySqlParser::CONCAT_WS - 623))
      | (1ULL << (MySqlParser::CONNECTION_ID - 623))
      | (1ULL << (MySqlParser::CONV - 623))
      | (1ULL << (MySqlParser::CONVERT_TZ - 623))
      | (1ULL << (MySqlParser::COS - 623))
      | (1ULL << (MySqlParser::COT - 623))
      | (1ULL << (MySqlParser::CRC32 - 623))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 623))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 623))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 623))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 623))
      | (1ULL << (MySqlParser::CROSSES - 623))
      | (1ULL << (MySqlParser::DATEDIFF - 623))
      | (1ULL << (MySqlParser::DATE_FORMAT - 623))
      | (1ULL << (MySqlParser::DAYNAME - 623))
      | (1ULL << (MySqlParser::DAYOFMONTH - 623))
      | (1ULL << (MySqlParser::DAYOFWEEK - 623))
      | (1ULL << (MySqlParser::DAYOFYEAR - 623))
      | (1ULL << (MySqlParser::DECODE - 623))
      | (1ULL << (MySqlParser::DEGREES - 623))
      | (1ULL << (MySqlParser::DES_DECRYPT - 623))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 623))
      | (1ULL << (MySqlParser::DIMENSION - 623))
      | (1ULL << (MySqlParser::DISJOINT - 623))
      | (1ULL << (MySqlParser::ELT - 623)))) != 0) || ((((_la - 687) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 687)) & ((1ULL << (MySqlParser::ENCODE - 687))
      | (1ULL << (MySqlParser::ENCRYPT - 687))
      | (1ULL << (MySqlParser::ENDPOINT - 687))
      | (1ULL << (MySqlParser::ENVELOPE - 687))
      | (1ULL << (MySqlParser::EQUALS - 687))
      | (1ULL << (MySqlParser::EXP - 687))
      | (1ULL << (MySqlParser::EXPORT_SET - 687))
      | (1ULL << (MySqlParser::EXTERIORRING - 687))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 687))
      | (1ULL << (MySqlParser::FIELD - 687))
      | (1ULL << (MySqlParser::FIND_IN_SET - 687))
      | (1ULL << (MySqlParser::FLOOR - 687))
      | (1ULL << (MySqlParser::FORMAT - 687))
      | (1ULL << (MySqlParser::FOUND_ROWS - 687))
      | (1ULL << (MySqlParser::FROM_BASE64 - 687))
      | (1ULL << (MySqlParser::FROM_DAYS - 687))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 687))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYN - 687))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 687))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 687))
      | (1ULL << (MySqlParser::GET_FORMAT - 687))
      | (1ULL << (MySqlParser::GET_LOCK - 687))
      | (1ULL << (MySqlParser::GLENGTH - 687))
      | (1ULL << (MySqlParser::GREATEST - 687))
      | (1ULL << (MySqlParser::GTID_SUBSET - 687))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 687))
      | (1ULL << (MySqlParser::HEX - 687))
      | (1ULL << (MySqlParser::IFNULL - 687))
      | (1ULL << (MySqlParser::INET6_ATON - 687))
      | (1ULL << (MySqlParser::INET6_NTOA - 687))
      | (1ULL << (MySqlParser::INET_ATON - 687))
      | (1ULL << (MySqlParser::INET_NTOA - 687))
      | (1ULL << (MySqlParser::INSTR - 687))
      | (1ULL << (MySqlParser::INTERIORRINGN - 687))
      | (1ULL << (MySqlParser::INTERSECTS - 687))
      | (1ULL << (MySqlParser::ISCLOSED - 687))
      | (1ULL << (MySqlParser::ISEMPTY - 687))
      | (1ULL << (MySqlParser::ISNULL - 687))
      | (1ULL << (MySqlParser::ISSIMPLE - 687))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 687))
      | (1ULL << (MySqlParser::IS_IPV4 - 687))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 687))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 687))
      | (1ULL << (MySqlParser::IS_IPV6 - 687))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 687))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 687))
      | (1ULL << (MySqlParser::LCASE - 687))
      | (1ULL << (MySqlParser::LEAST - 687))
      | (1ULL << (MySqlParser::LENGTH - 687))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 687))
      | (1ULL << (MySqlParser::LINEFROMWKB - 687))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 687))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 687))
      | (1ULL << (MySqlParser::LN - 687))
      | (1ULL << (MySqlParser::LOAD_FILE - 687))
      | (1ULL << (MySqlParser::LOCATE - 687))
      | (1ULL << (MySqlParser::LOG - 687)))) != 0) || ((((_la - 751) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 751)) & ((1ULL << (MySqlParser::LOG10 - 751))
      | (1ULL << (MySqlParser::LOG2 - 751))
      | (1ULL << (MySqlParser::LOWER - 751))
      | (1ULL << (MySqlParser::LPAD - 751))
      | (1ULL << (MySqlParser::LTRIM - 751))
      | (1ULL << (MySqlParser::MAKEDATE - 751))
      | (1ULL << (MySqlParser::MAKETIME - 751))
      | (1ULL << (MySqlParser::MAKE_SET - 751))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 751))
      | (1ULL << (MySqlParser::MBRCONTAINS - 751))
      | (1ULL << (MySqlParser::MBRDISJOINT - 751))
      | (1ULL << (MySqlParser::MBREQUAL - 751))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 751))
      | (1ULL << (MySqlParser::MBROVERLAPS - 751))
      | (1ULL << (MySqlParser::MBRTOUCHES - 751))
      | (1ULL << (MySqlParser::MBRWITHIN - 751))
      | (1ULL << (MySqlParser::MD5 - 751))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 751))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 751))
      | (1ULL << (MySqlParser::MONTHNAME - 751))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 751))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 751))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 751))
      | (1ULL << (MySqlParser::NAME_CONST - 751))
      | (1ULL << (MySqlParser::NULLIF - 751))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 751))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 751))
      | (1ULL << (MySqlParser::NUMPOINTS - 751))
      | (1ULL << (MySqlParser::OCT - 751))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 751))
      | (1ULL << (MySqlParser::ORD - 751))
      | (1ULL << (MySqlParser::OVERLAPS - 751))
      | (1ULL << (MySqlParser::PERIOD_ADD - 751))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 751))
      | (1ULL << (MySqlParser::PI - 751))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::POINTFROMWKB - 751))
      | (1ULL << (MySqlParser::POINTN - 751))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 751))
      | (1ULL << (MySqlParser::POLYFROMWKB - 751))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 751))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 751))
      | (1ULL << (MySqlParser::POW - 751))
      | (1ULL << (MySqlParser::POWER - 751))
      | (1ULL << (MySqlParser::QUOTE - 751))
      | (1ULL << (MySqlParser::RADIANS - 751))
      | (1ULL << (MySqlParser::RAND - 751))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 751))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 751))
      | (1ULL << (MySqlParser::REVERSE - 751))
      | (1ULL << (MySqlParser::ROUND - 751))
      | (1ULL << (MySqlParser::ROW_COUNT - 751))
      | (1ULL << (MySqlParser::RPAD - 751))
      | (1ULL << (MySqlParser::RTRIM - 751))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 751))
      | (1ULL << (MySqlParser::SESSION_USER - 751))
      | (1ULL << (MySqlParser::SHA - 751)))) != 0) || ((((_la - 815) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 815)) & ((1ULL << (MySqlParser::SHA1 - 815))
      | (1ULL << (MySqlParser::SHA2 - 815))
      | (1ULL << (MySqlParser::SIGN - 815))
      | (1ULL << (MySqlParser::SIN - 815))
      | (1ULL << (MySqlParser::SLEEP - 815))
      | (1ULL << (MySqlParser::SOUNDEX - 815))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 815))
      | (1ULL << (MySqlParser::SQRT - 815))
      | (1ULL << (MySqlParser::SRID - 815))
      | (1ULL << (MySqlParser::STARTPOINT - 815))
      | (1ULL << (MySqlParser::STRCMP - 815))
      | (1ULL << (MySqlParser::STR_TO_DATE - 815))
      | (1ULL << (MySqlParser::ST_AREA - 815))
      | (1ULL << (MySqlParser::ST_ASBINARY - 815))
      | (1ULL << (MySqlParser::ST_ASTEXT - 815))
      | (1ULL << (MySqlParser::ST_ASWKB - 815))
      | (1ULL << (MySqlParser::ST_ASWKT - 815))
      | (1ULL << (MySqlParser::ST_BUFFER - 815))
      | (1ULL << (MySqlParser::ST_CENTROID - 815))
      | (1ULL << (MySqlParser::ST_CONTAINS - 815))
      | (1ULL << (MySqlParser::ST_CROSSES - 815))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 815))
      | (1ULL << (MySqlParser::ST_DIMENSION - 815))
      | (1ULL << (MySqlParser::ST_DISJOINT - 815))
      | (1ULL << (MySqlParser::ST_DISTANCE - 815))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 815))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 815))
      | (1ULL << (MySqlParser::ST_EQUALS - 815))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 815))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 815))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 815))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 815))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 815))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 815))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 815))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 815))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 815))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 815))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 815))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 815))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_POINTN - 815))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_SRID - 815))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 815)))) != 0) || ((((_la - 879) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 879)) & ((1ULL << (MySqlParser::ST_SYMDIFFERENCE - 879))
      | (1ULL << (MySqlParser::ST_TOUCHES - 879))
      | (1ULL << (MySqlParser::ST_UNION - 879))
      | (1ULL << (MySqlParser::ST_WITHIN - 879))
      | (1ULL << (MySqlParser::ST_X - 879))
      | (1ULL << (MySqlParser::ST_Y - 879))
      | (1ULL << (MySqlParser::SUBDATE - 879))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 879))
      | (1ULL << (MySqlParser::SUBTIME - 879))
      | (1ULL << (MySqlParser::SYSTEM_USER - 879))
      | (1ULL << (MySqlParser::TAN - 879))
      | (1ULL << (MySqlParser::TIMEDIFF - 879))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 879))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 879))
      | (1ULL << (MySqlParser::TIME_FORMAT - 879))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 879))
      | (1ULL << (MySqlParser::TOUCHES - 879))
      | (1ULL << (MySqlParser::TO_BASE64 - 879))
      | (1ULL << (MySqlParser::TO_DAYS - 879))
      | (1ULL << (MySqlParser::TO_SECONDS - 879))
      | (1ULL << (MySqlParser::UCASE - 879))
      | (1ULL << (MySqlParser::UNCOMPRESS - 879))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 879))
      | (1ULL << (MySqlParser::UNHEX - 879))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 879))
      | (1ULL << (MySqlParser::UPDATEXML - 879))
      | (1ULL << (MySqlParser::UPPER - 879))
      | (1ULL << (MySqlParser::UUID - 879))
      | (1ULL << (MySqlParser::UUID_SHORT - 879))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 879))
      | (1ULL << (MySqlParser::VERSION - 879))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879))
      | (1ULL << (MySqlParser::WEEKDAY - 879))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 879))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 879))
      | (1ULL << (MySqlParser::WITHIN - 879))
      | (1ULL << (MySqlParser::YEARWEEK - 879))
      | (1ULL << (MySqlParser::Y_FUNCTION - 879))
      | (1ULL << (MySqlParser::X_FUNCTION - 879)))) != 0) || ((((_la - 943) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 943)) & ((1ULL << (MySqlParser::LR_BRACKET - 943))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 943))
      | (1ULL << (MySqlParser::ID - 943))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 943)))) != 0)) {
      setState(3852);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 561, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3847);
          declare_variable();
          setState(3848);
          match(MySqlParser::SEMI); 
        }
        setState(3854);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 561, _ctx);
      }
      setState(3860);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 562, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3855);
          declare_condition();
          setState(3856);
          match(MySqlParser::SEMI); 
        }
        setState(3862);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 562, _ctx);
      }
      setState(3868);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 563, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3863);
          declare_cursor();
          setState(3864);
          match(MySqlParser::SEMI); 
        }
        setState(3870);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 563, _ctx);
      }
      setState(3876);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::DECLARE) {
        setState(3871);
        declare_handler();
        setState(3872);
        match(MySqlParser::SEMI);
        setState(3878);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3880); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3879);
        procedure_sql_statement();
        setState(3882); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 7) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 7)) & ((1ULL << (MySqlParser::ALTER - 7))
        | (1ULL << (MySqlParser::ANALYZE - 7))
        | (1ULL << (MySqlParser::CALL - 7))
        | (1ULL << (MySqlParser::CASE - 7))
        | (1ULL << (MySqlParser::CHANGE - 7))
        | (1ULL << (MySqlParser::CHECK - 7))
        | (1ULL << (MySqlParser::CREATE - 7))
        | (1ULL << (MySqlParser::DELETE - 7))
        | (1ULL << (MySqlParser::DESC - 7))
        | (1ULL << (MySqlParser::DESCRIBE - 7))
        | (1ULL << (MySqlParser::DROP - 7))
        | (1ULL << (MySqlParser::EXPLAIN - 7))
        | (1ULL << (MySqlParser::FETCH - 7))
        | (1ULL << (MySqlParser::GRANT - 7))
        | (1ULL << (MySqlParser::IF - 7)))) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::INSERT - 71))
        | (1ULL << (MySqlParser::ITERATE - 71))
        | (1ULL << (MySqlParser::KILL - 71))
        | (1ULL << (MySqlParser::LEAVE - 71))
        | (1ULL << (MySqlParser::LEFT - 71))
        | (1ULL << (MySqlParser::LOAD - 71))
        | (1ULL << (MySqlParser::LOCK - 71))
        | (1ULL << (MySqlParser::LOOP - 71))
        | (1ULL << (MySqlParser::OPTIMIZE - 71))
        | (1ULL << (MySqlParser::PURGE - 71))
        | (1ULL << (MySqlParser::RELEASE - 71))
        | (1ULL << (MySqlParser::RENAME - 71))
        | (1ULL << (MySqlParser::REPEAT - 71))
        | (1ULL << (MySqlParser::REPLACE - 71))
        | (1ULL << (MySqlParser::RETURN - 71))
        | (1ULL << (MySqlParser::REVOKE - 71))
        | (1ULL << (MySqlParser::RIGHT - 71))
        | (1ULL << (MySqlParser::SELECT - 71))
        | (1ULL << (MySqlParser::SET - 71))
        | (1ULL << (MySqlParser::SHOW - 71)))) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 156)) & ((1ULL << (MySqlParser::UNLOCK - 156))
        | (1ULL << (MySqlParser::UPDATE - 156))
        | (1ULL << (MySqlParser::USE - 156))
        | (1ULL << (MySqlParser::WHILE - 156))
        | (1ULL << (MySqlParser::DATE - 156))
        | (1ULL << (MySqlParser::TIME - 156))
        | (1ULL << (MySqlParser::TIMESTAMP - 156))
        | (1ULL << (MySqlParser::DATETIME - 156))
        | (1ULL << (MySqlParser::YEAR - 156))
        | (1ULL << (MySqlParser::TEXT - 156))
        | (1ULL << (MySqlParser::ENUM - 156))
        | (1ULL << (MySqlParser::COUNT - 156)))) != 0) || ((((_la - 237) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 237)) & ((1ULL << (MySqlParser::POSITION - 237))
        | (1ULL << (MySqlParser::ACTION - 237))
        | (1ULL << (MySqlParser::AFTER - 237))
        | (1ULL << (MySqlParser::ALGORITHM - 237))
        | (1ULL << (MySqlParser::ANY - 237))
        | (1ULL << (MySqlParser::AT - 237))
        | (1ULL << (MySqlParser::AUTHORS - 237))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 237))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 237))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 237))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 237))
        | (1ULL << (MySqlParser::BEGIN - 237))
        | (1ULL << (MySqlParser::BINLOG - 237))
        | (1ULL << (MySqlParser::BIT - 237))
        | (1ULL << (MySqlParser::BTREE - 237))
        | (1ULL << (MySqlParser::CACHE - 237))
        | (1ULL << (MySqlParser::CASCADED - 237))
        | (1ULL << (MySqlParser::CHAIN - 237))
        | (1ULL << (MySqlParser::CHECKSUM - 237))
        | (1ULL << (MySqlParser::CIPHER - 237))
        | (1ULL << (MySqlParser::CLIENT - 237))
        | (1ULL << (MySqlParser::CLOSE - 237))
        | (1ULL << (MySqlParser::COALESCE - 237))
        | (1ULL << (MySqlParser::CODE - 237))
        | (1ULL << (MySqlParser::COLUMNS - 237))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 237))
        | (1ULL << (MySqlParser::COMMENT - 237))
        | (1ULL << (MySqlParser::COMMIT - 237))
        | (1ULL << (MySqlParser::COMPACT - 237))
        | (1ULL << (MySqlParser::COMPLETION - 237))
        | (1ULL << (MySqlParser::COMPRESSED - 237))
        | (1ULL << (MySqlParser::CONCURRENT - 237))
        | (1ULL << (MySqlParser::CONNECTION - 237))
        | (1ULL << (MySqlParser::CONSISTENT - 237))
        | (1ULL << (MySqlParser::CONTAINS - 237))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 237))
        | (1ULL << (MySqlParser::COPY - 237))
        | (1ULL << (MySqlParser::DATA - 237))
        | (1ULL << (MySqlParser::DATAFILE - 237))
        | (1ULL << (MySqlParser::DEALLOCATE - 237))
        | (1ULL << (MySqlParser::DEFINER - 237))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 237))
        | (1ULL << (MySqlParser::DIRECTORY - 237))
        | (1ULL << (MySqlParser::DISABLE - 237))
        | (1ULL << (MySqlParser::DISCARD - 237))
        | (1ULL << (MySqlParser::DISK - 237))
        | (1ULL << (MySqlParser::DO - 237)))) != 0) || ((((_la - 301) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 301)) & ((1ULL << (MySqlParser::DUMPFILE - 301))
        | (1ULL << (MySqlParser::DUPLICATE - 301))
        | (1ULL << (MySqlParser::DYNAMIC - 301))
        | (1ULL << (MySqlParser::ENABLE - 301))
        | (1ULL << (MySqlParser::ENDS - 301))
        | (1ULL << (MySqlParser::ENGINE - 301))
        | (1ULL << (MySqlParser::ENGINES - 301))
        | (1ULL << (MySqlParser::ERRORS - 301))
        | (1ULL << (MySqlParser::ESCAPE - 301))
        | (1ULL << (MySqlParser::EVEN - 301))
        | (1ULL << (MySqlParser::EVENT - 301))
        | (1ULL << (MySqlParser::EVENTS - 301))
        | (1ULL << (MySqlParser::EVERY - 301))
        | (1ULL << (MySqlParser::EXCHANGE - 301))
        | (1ULL << (MySqlParser::EXCLUSIVE - 301))
        | (1ULL << (MySqlParser::EXPIRE - 301))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 301))
        | (1ULL << (MySqlParser::FIELDS - 301))
        | (1ULL << (MySqlParser::FIRST - 301))
        | (1ULL << (MySqlParser::FIXED - 301))
        | (1ULL << (MySqlParser::FLUSH - 301))
        | (1ULL << (MySqlParser::FULL - 301))
        | (1ULL << (MySqlParser::FUNCTION - 301))
        | (1ULL << (MySqlParser::GLOBAL - 301))
        | (1ULL << (MySqlParser::GRANTS - 301))
        | (1ULL << (MySqlParser::HANDLER - 301))
        | (1ULL << (MySqlParser::HASH - 301))
        | (1ULL << (MySqlParser::HELP - 301))
        | (1ULL << (MySqlParser::HOST - 301))
        | (1ULL << (MySqlParser::IDENTIFIED - 301))
        | (1ULL << (MySqlParser::IMPORT - 301))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 301))
        | (1ULL << (MySqlParser::INPLACE - 301))
        | (1ULL << (MySqlParser::INSERT_METHOD - 301))
        | (1ULL << (MySqlParser::INSTALL - 301))
        | (1ULL << (MySqlParser::INVOKER - 301))
        | (1ULL << (MySqlParser::ISOLATION - 301))
        | (1ULL << (MySqlParser::ISSUER - 301))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 301))
        | (1ULL << (MySqlParser::LANGUAGE - 301))
        | (1ULL << (MySqlParser::LAST - 301))
        | (1ULL << (MySqlParser::LESS - 301)))) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 365)) & ((1ULL << (MySqlParser::LEVEL - 365))
        | (1ULL << (MySqlParser::LIST - 365))
        | (1ULL << (MySqlParser::LOCAL - 365))
        | (1ULL << (MySqlParser::LOGFILE - 365))
        | (1ULL << (MySqlParser::LOGS - 365))
        | (1ULL << (MySqlParser::MASTER - 365))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_ROWS - 365))
        | (1ULL << (MySqlParser::MAX_SIZE - 365))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 365))
        | (1ULL << (MySqlParser::MERGE - 365))
        | (1ULL << (MySqlParser::MID - 365))
        | (1ULL << (MySqlParser::MIN_ROWS - 365))
        | (1ULL << (MySqlParser::MODIFY - 365))
        | (1ULL << (MySqlParser::MUTEX - 365))
        | (1ULL << (MySqlParser::MYSQL - 365))
        | (1ULL << (MySqlParser::NAME - 365))
        | (1ULL << (MySqlParser::NAMES - 365))
        | (1ULL << (MySqlParser::NCHAR - 365))
        | (1ULL << (MySqlParser::NO - 365))
        | (1ULL << (MySqlParser::NODEGROUP - 365))
        | (1ULL << (MySqlParser::NONE - 365))
        | (1ULL << (MySqlParser::OFFLINE - 365))
        | (1ULL << (MySqlParser::OFFSET - 365))
        | (1ULL << (MySqlParser::OJ - 365))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 365))
        | (1ULL << (MySqlParser::ONLINE - 365))
        | (1ULL << (MySqlParser::ONLY - 365))
        | (1ULL << (MySqlParser::OPEN - 365))
        | (1ULL << (MySqlParser::OPTIONS - 365))
        | (1ULL << (MySqlParser::OWNER - 365))
        | (1ULL << (MySqlParser::PACK_KEYS - 365))
        | (1ULL << (MySqlParser::PARSER - 365))
        | (1ULL << (MySqlParser::PARTIAL - 365)))) != 0) || ((((_la - 429) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 429)) & ((1ULL << (MySqlParser::PARTITIONING - 429))
        | (1ULL << (MySqlParser::PARTITIONS - 429))
        | (1ULL << (MySqlParser::PASSWORD - 429))
        | (1ULL << (MySqlParser::PLUGINS - 429))
        | (1ULL << (MySqlParser::PORT - 429))
        | (1ULL << (MySqlParser::PREPARE - 429))
        | (1ULL << (MySqlParser::PRESERVE - 429))
        | (1ULL << (MySqlParser::PROCESSLIST - 429))
        | (1ULL << (MySqlParser::PROFILE - 429))
        | (1ULL << (MySqlParser::PROFILES - 429))
        | (1ULL << (MySqlParser::PROXY - 429))
        | (1ULL << (MySqlParser::QUERY - 429))
        | (1ULL << (MySqlParser::QUICK - 429))
        | (1ULL << (MySqlParser::REBUILD - 429))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 429))
        | (1ULL << (MySqlParser::REDUNDANT - 429))
        | (1ULL << (MySqlParser::RELAYLOG - 429))
        | (1ULL << (MySqlParser::REMOVE - 429))
        | (1ULL << (MySqlParser::REORGANIZE - 429))
        | (1ULL << (MySqlParser::REPAIR - 429))
        | (1ULL << (MySqlParser::REPLICATION - 429))
        | (1ULL << (MySqlParser::RESET - 429))
        | (1ULL << (MySqlParser::RETURNS - 429))
        | (1ULL << (MySqlParser::ROLLBACK - 429))
        | (1ULL << (MySqlParser::ROLLUP - 429))
        | (1ULL << (MySqlParser::ROW - 429))
        | (1ULL << (MySqlParser::ROWS - 429))
        | (1ULL << (MySqlParser::ROW_FORMAT - 429))
        | (1ULL << (MySqlParser::SAVEPOINT - 429))
        | (1ULL << (MySqlParser::SCHEDULE - 429))
        | (1ULL << (MySqlParser::SECURITY - 429))
        | (1ULL << (MySqlParser::SERVER - 429))
        | (1ULL << (MySqlParser::SESSION - 429))
        | (1ULL << (MySqlParser::SHARE - 429))
        | (1ULL << (MySqlParser::SHARED - 429))
        | (1ULL << (MySqlParser::SIGNED - 429))
        | (1ULL << (MySqlParser::SIMPLE - 429))
        | (1ULL << (MySqlParser::SLAVE - 429))
        | (1ULL << (MySqlParser::SNAPSHOT - 429))
        | (1ULL << (MySqlParser::SOCKET - 429))
        | (1ULL << (MySqlParser::SOME - 429))
        | (1ULL << (MySqlParser::SOUNDS - 429)))) != 0) || ((((_la - 495) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 495)) & ((1ULL << (MySqlParser::SQL_BUFFER_RESULT - 495))
        | (1ULL << (MySqlParser::SQL_CACHE - 495))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 495))
        | (1ULL << (MySqlParser::START - 495))
        | (1ULL << (MySqlParser::STARTS - 495))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 495))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 495))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 495))
        | (1ULL << (MySqlParser::STATUS - 495))
        | (1ULL << (MySqlParser::STOP - 495))
        | (1ULL << (MySqlParser::STORAGE - 495))
        | (1ULL << (MySqlParser::SUBJECT - 495))
        | (1ULL << (MySqlParser::SUBPARTITION - 495))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 495))
        | (1ULL << (MySqlParser::TABLESPACE - 495))
        | (1ULL << (MySqlParser::TEMPORARY - 495))
        | (1ULL << (MySqlParser::TEMPTABLE - 495))
        | (1ULL << (MySqlParser::THAN - 495))
        | (1ULL << (MySqlParser::TRANSACTION - 495))
        | (1ULL << (MySqlParser::TRUNCATE - 495))
        | (1ULL << (MySqlParser::UNDEFINED - 495))
        | (1ULL << (MySqlParser::UNDOFILE - 495))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 495))
        | (1ULL << (MySqlParser::UNINSTALL - 495))
        | (1ULL << (MySqlParser::UNKNOWN - 495))
        | (1ULL << (MySqlParser::UPGRADE - 495))
        | (1ULL << (MySqlParser::USER - 495))
        | (1ULL << (MySqlParser::VALUE - 495))
        | (1ULL << (MySqlParser::VARIABLES - 495))
        | (1ULL << (MySqlParser::VIEW - 495))
        | (1ULL << (MySqlParser::WAIT - 495))
        | (1ULL << (MySqlParser::WARNINGS - 495))
        | (1ULL << (MySqlParser::WORK - 495))
        | (1ULL << (MySqlParser::WRAPPER - 495))
        | (1ULL << (MySqlParser::X509 - 495))
        | (1ULL << (MySqlParser::XA - 495))
        | (1ULL << (MySqlParser::XML - 495))
        | (1ULL << (MySqlParser::QUARTER - 495))
        | (1ULL << (MySqlParser::MONTH - 495))
        | (1ULL << (MySqlParser::DAY - 495))
        | (1ULL << (MySqlParser::HOUR - 495))
        | (1ULL << (MySqlParser::MINUTE - 495))
        | (1ULL << (MySqlParser::WEEK - 495))
        | (1ULL << (MySqlParser::SECOND - 495))
        | (1ULL << (MySqlParser::MICROSECOND - 495))
        | (1ULL << (MySqlParser::TABLES - 495))
        | (1ULL << (MySqlParser::ROUTINE - 495)))) != 0) || ((((_la - 559) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 559)) & ((1ULL << (MySqlParser::EXECUTE - 559))
        | (1ULL << (MySqlParser::FILE - 559))
        | (1ULL << (MySqlParser::PROCESS - 559))
        | (1ULL << (MySqlParser::RELOAD - 559))
        | (1ULL << (MySqlParser::SHUTDOWN - 559))
        | (1ULL << (MySqlParser::SUPER - 559))
        | (1ULL << (MySqlParser::PRIVILEGES - 559))
        | (1ULL << (MySqlParser::ARMSCII8 - 559))
        | (1ULL << (MySqlParser::ASCII - 559))
        | (1ULL << (MySqlParser::BIG5 - 559))
        | (1ULL << (MySqlParser::CP1250 - 559))
        | (1ULL << (MySqlParser::CP1251 - 559))
        | (1ULL << (MySqlParser::CP1256 - 559))
        | (1ULL << (MySqlParser::CP1257 - 559))
        | (1ULL << (MySqlParser::CP850 - 559))
        | (1ULL << (MySqlParser::CP852 - 559))
        | (1ULL << (MySqlParser::CP866 - 559))
        | (1ULL << (MySqlParser::CP932 - 559))
        | (1ULL << (MySqlParser::DEC8 - 559))
        | (1ULL << (MySqlParser::EUCJPMS - 559))
        | (1ULL << (MySqlParser::EUCKR - 559))
        | (1ULL << (MySqlParser::GB2312 - 559))
        | (1ULL << (MySqlParser::GBK - 559))
        | (1ULL << (MySqlParser::GEOSTD8 - 559))
        | (1ULL << (MySqlParser::GREEK - 559))
        | (1ULL << (MySqlParser::HEBREW - 559))
        | (1ULL << (MySqlParser::HP8 - 559))
        | (1ULL << (MySqlParser::KEYBCS2 - 559))
        | (1ULL << (MySqlParser::KOI8R - 559))
        | (1ULL << (MySqlParser::KOI8U - 559))
        | (1ULL << (MySqlParser::LATIN1 - 559))
        | (1ULL << (MySqlParser::LATIN2 - 559))
        | (1ULL << (MySqlParser::LATIN5 - 559))
        | (1ULL << (MySqlParser::LATIN7 - 559))
        | (1ULL << (MySqlParser::MACCE - 559))
        | (1ULL << (MySqlParser::MACROMAN - 559))
        | (1ULL << (MySqlParser::SJIS - 559))
        | (1ULL << (MySqlParser::SWE7 - 559))
        | (1ULL << (MySqlParser::TIS620 - 559))
        | (1ULL << (MySqlParser::UCS2 - 559))
        | (1ULL << (MySqlParser::UJIS - 559))
        | (1ULL << (MySqlParser::UTF16 - 559))
        | (1ULL << (MySqlParser::UTF16LE - 559))
        | (1ULL << (MySqlParser::UTF32 - 559))
        | (1ULL << (MySqlParser::UTF8 - 559))
        | (1ULL << (MySqlParser::UTF8MB3 - 559))
        | (1ULL << (MySqlParser::UTF8MB4 - 559))
        | (1ULL << (MySqlParser::ARCHIVE - 559))
        | (1ULL << (MySqlParser::BLACKHOLE - 559))
        | (1ULL << (MySqlParser::CSV - 559))
        | (1ULL << (MySqlParser::FEDERATED - 559))
        | (1ULL << (MySqlParser::INNODB - 559))
        | (1ULL << (MySqlParser::MEMORY - 559))
        | (1ULL << (MySqlParser::MRG_MYISAM - 559))
        | (1ULL << (MySqlParser::MYISAM - 559))
        | (1ULL << (MySqlParser::NDB - 559))
        | (1ULL << (MySqlParser::NDBCLUSTER - 559))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 559))
        | (1ULL << (MySqlParser::REPEATABLE - 559))
        | (1ULL << (MySqlParser::COMMITTED - 559))
        | (1ULL << (MySqlParser::UNCOMMITTED - 559))
        | (1ULL << (MySqlParser::SERIALIZABLE - 559))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 559))
        | (1ULL << (MySqlParser::LINESTRING - 559)))) != 0) || ((((_la - 623) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 623)) & ((1ULL << (MySqlParser::MULTILINESTRING - 623))
        | (1ULL << (MySqlParser::MULTIPOINT - 623))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 623))
        | (1ULL << (MySqlParser::POINT - 623))
        | (1ULL << (MySqlParser::POLYGON - 623))
        | (1ULL << (MySqlParser::ABS - 623))
        | (1ULL << (MySqlParser::ACOS - 623))
        | (1ULL << (MySqlParser::ADDDATE - 623))
        | (1ULL << (MySqlParser::ADDTIME - 623))
        | (1ULL << (MySqlParser::AES_DECRYPT - 623))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 623))
        | (1ULL << (MySqlParser::AREA - 623))
        | (1ULL << (MySqlParser::ASBINARY - 623))
        | (1ULL << (MySqlParser::ASIN - 623))
        | (1ULL << (MySqlParser::ASTEXT - 623))
        | (1ULL << (MySqlParser::ASWKB - 623))
        | (1ULL << (MySqlParser::ASWKT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 623))
        | (1ULL << (MySqlParser::ATAN - 623))
        | (1ULL << (MySqlParser::ATAN2 - 623))
        | (1ULL << (MySqlParser::BENCHMARK - 623))
        | (1ULL << (MySqlParser::BIN - 623))
        | (1ULL << (MySqlParser::BIT_COUNT - 623))
        | (1ULL << (MySqlParser::BIT_LENGTH - 623))
        | (1ULL << (MySqlParser::BUFFER - 623))
        | (1ULL << (MySqlParser::CEIL - 623))
        | (1ULL << (MySqlParser::CEILING - 623))
        | (1ULL << (MySqlParser::CENTROID - 623))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 623))
        | (1ULL << (MySqlParser::CHARSET - 623))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 623))
        | (1ULL << (MySqlParser::COERCIBILITY - 623))
        | (1ULL << (MySqlParser::COLLATION - 623))
        | (1ULL << (MySqlParser::COMPRESS - 623))
        | (1ULL << (MySqlParser::CONCAT - 623))
        | (1ULL << (MySqlParser::CONCAT_WS - 623))
        | (1ULL << (MySqlParser::CONNECTION_ID - 623))
        | (1ULL << (MySqlParser::CONV - 623))
        | (1ULL << (MySqlParser::CONVERT_TZ - 623))
        | (1ULL << (MySqlParser::COS - 623))
        | (1ULL << (MySqlParser::COT - 623))
        | (1ULL << (MySqlParser::CRC32 - 623))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 623))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 623))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 623))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 623))
        | (1ULL << (MySqlParser::CROSSES - 623))
        | (1ULL << (MySqlParser::DATEDIFF - 623))
        | (1ULL << (MySqlParser::DATE_FORMAT - 623))
        | (1ULL << (MySqlParser::DAYNAME - 623))
        | (1ULL << (MySqlParser::DAYOFMONTH - 623))
        | (1ULL << (MySqlParser::DAYOFWEEK - 623))
        | (1ULL << (MySqlParser::DAYOFYEAR - 623))
        | (1ULL << (MySqlParser::DECODE - 623))
        | (1ULL << (MySqlParser::DEGREES - 623))
        | (1ULL << (MySqlParser::DES_DECRYPT - 623))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 623))
        | (1ULL << (MySqlParser::DIMENSION - 623))
        | (1ULL << (MySqlParser::DISJOINT - 623))
        | (1ULL << (MySqlParser::ELT - 623)))) != 0) || ((((_la - 687) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 687)) & ((1ULL << (MySqlParser::ENCODE - 687))
        | (1ULL << (MySqlParser::ENCRYPT - 687))
        | (1ULL << (MySqlParser::ENDPOINT - 687))
        | (1ULL << (MySqlParser::ENVELOPE - 687))
        | (1ULL << (MySqlParser::EQUALS - 687))
        | (1ULL << (MySqlParser::EXP - 687))
        | (1ULL << (MySqlParser::EXPORT_SET - 687))
        | (1ULL << (MySqlParser::EXTERIORRING - 687))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 687))
        | (1ULL << (MySqlParser::FIELD - 687))
        | (1ULL << (MySqlParser::FIND_IN_SET - 687))
        | (1ULL << (MySqlParser::FLOOR - 687))
        | (1ULL << (MySqlParser::FORMAT - 687))
        | (1ULL << (MySqlParser::FOUND_ROWS - 687))
        | (1ULL << (MySqlParser::FROM_BASE64 - 687))
        | (1ULL << (MySqlParser::FROM_DAYS - 687))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 687))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYN - 687))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 687))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 687))
        | (1ULL << (MySqlParser::GET_FORMAT - 687))
        | (1ULL << (MySqlParser::GET_LOCK - 687))
        | (1ULL << (MySqlParser::GLENGTH - 687))
        | (1ULL << (MySqlParser::GREATEST - 687))
        | (1ULL << (MySqlParser::GTID_SUBSET - 687))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 687))
        | (1ULL << (MySqlParser::HEX - 687))
        | (1ULL << (MySqlParser::IFNULL - 687))
        | (1ULL << (MySqlParser::INET6_ATON - 687))
        | (1ULL << (MySqlParser::INET6_NTOA - 687))
        | (1ULL << (MySqlParser::INET_ATON - 687))
        | (1ULL << (MySqlParser::INET_NTOA - 687))
        | (1ULL << (MySqlParser::INSTR - 687))
        | (1ULL << (MySqlParser::INTERIORRINGN - 687))
        | (1ULL << (MySqlParser::INTERSECTS - 687))
        | (1ULL << (MySqlParser::ISCLOSED - 687))
        | (1ULL << (MySqlParser::ISEMPTY - 687))
        | (1ULL << (MySqlParser::ISNULL - 687))
        | (1ULL << (MySqlParser::ISSIMPLE - 687))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 687))
        | (1ULL << (MySqlParser::IS_IPV4 - 687))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 687))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 687))
        | (1ULL << (MySqlParser::IS_IPV6 - 687))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 687))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 687))
        | (1ULL << (MySqlParser::LCASE - 687))
        | (1ULL << (MySqlParser::LEAST - 687))
        | (1ULL << (MySqlParser::LENGTH - 687))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 687))
        | (1ULL << (MySqlParser::LINEFROMWKB - 687))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 687))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 687))
        | (1ULL << (MySqlParser::LN - 687))
        | (1ULL << (MySqlParser::LOAD_FILE - 687))
        | (1ULL << (MySqlParser::LOCATE - 687))
        | (1ULL << (MySqlParser::LOG - 687)))) != 0) || ((((_la - 751) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 751)) & ((1ULL << (MySqlParser::LOG10 - 751))
        | (1ULL << (MySqlParser::LOG2 - 751))
        | (1ULL << (MySqlParser::LOWER - 751))
        | (1ULL << (MySqlParser::LPAD - 751))
        | (1ULL << (MySqlParser::LTRIM - 751))
        | (1ULL << (MySqlParser::MAKEDATE - 751))
        | (1ULL << (MySqlParser::MAKETIME - 751))
        | (1ULL << (MySqlParser::MAKE_SET - 751))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 751))
        | (1ULL << (MySqlParser::MBRCONTAINS - 751))
        | (1ULL << (MySqlParser::MBRDISJOINT - 751))
        | (1ULL << (MySqlParser::MBREQUAL - 751))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 751))
        | (1ULL << (MySqlParser::MBROVERLAPS - 751))
        | (1ULL << (MySqlParser::MBRTOUCHES - 751))
        | (1ULL << (MySqlParser::MBRWITHIN - 751))
        | (1ULL << (MySqlParser::MD5 - 751))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 751))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 751))
        | (1ULL << (MySqlParser::MONTHNAME - 751))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 751))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 751))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 751))
        | (1ULL << (MySqlParser::NAME_CONST - 751))
        | (1ULL << (MySqlParser::NULLIF - 751))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 751))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 751))
        | (1ULL << (MySqlParser::NUMPOINTS - 751))
        | (1ULL << (MySqlParser::OCT - 751))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 751))
        | (1ULL << (MySqlParser::ORD - 751))
        | (1ULL << (MySqlParser::OVERLAPS - 751))
        | (1ULL << (MySqlParser::PERIOD_ADD - 751))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 751))
        | (1ULL << (MySqlParser::PI - 751))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::POINTFROMWKB - 751))
        | (1ULL << (MySqlParser::POINTN - 751))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 751))
        | (1ULL << (MySqlParser::POLYFROMWKB - 751))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 751))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 751))
        | (1ULL << (MySqlParser::POW - 751))
        | (1ULL << (MySqlParser::POWER - 751))
        | (1ULL << (MySqlParser::QUOTE - 751))
        | (1ULL << (MySqlParser::RADIANS - 751))
        | (1ULL << (MySqlParser::RAND - 751))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 751))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 751))
        | (1ULL << (MySqlParser::REVERSE - 751))
        | (1ULL << (MySqlParser::ROUND - 751))
        | (1ULL << (MySqlParser::ROW_COUNT - 751))
        | (1ULL << (MySqlParser::RPAD - 751))
        | (1ULL << (MySqlParser::RTRIM - 751))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 751))
        | (1ULL << (MySqlParser::SESSION_USER - 751))
        | (1ULL << (MySqlParser::SHA - 751)))) != 0) || ((((_la - 815) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 815)) & ((1ULL << (MySqlParser::SHA1 - 815))
        | (1ULL << (MySqlParser::SHA2 - 815))
        | (1ULL << (MySqlParser::SIGN - 815))
        | (1ULL << (MySqlParser::SIN - 815))
        | (1ULL << (MySqlParser::SLEEP - 815))
        | (1ULL << (MySqlParser::SOUNDEX - 815))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 815))
        | (1ULL << (MySqlParser::SQRT - 815))
        | (1ULL << (MySqlParser::SRID - 815))
        | (1ULL << (MySqlParser::STARTPOINT - 815))
        | (1ULL << (MySqlParser::STRCMP - 815))
        | (1ULL << (MySqlParser::STR_TO_DATE - 815))
        | (1ULL << (MySqlParser::ST_AREA - 815))
        | (1ULL << (MySqlParser::ST_ASBINARY - 815))
        | (1ULL << (MySqlParser::ST_ASTEXT - 815))
        | (1ULL << (MySqlParser::ST_ASWKB - 815))
        | (1ULL << (MySqlParser::ST_ASWKT - 815))
        | (1ULL << (MySqlParser::ST_BUFFER - 815))
        | (1ULL << (MySqlParser::ST_CENTROID - 815))
        | (1ULL << (MySqlParser::ST_CONTAINS - 815))
        | (1ULL << (MySqlParser::ST_CROSSES - 815))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 815))
        | (1ULL << (MySqlParser::ST_DIMENSION - 815))
        | (1ULL << (MySqlParser::ST_DISJOINT - 815))
        | (1ULL << (MySqlParser::ST_DISTANCE - 815))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 815))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 815))
        | (1ULL << (MySqlParser::ST_EQUALS - 815))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 815))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 815))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 815))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 815))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 815))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 815))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 815))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 815))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 815))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 815))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 815))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 815))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_POINTN - 815))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_SRID - 815))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 815)))) != 0) || ((((_la - 879) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 879)) & ((1ULL << (MySqlParser::ST_SYMDIFFERENCE - 879))
        | (1ULL << (MySqlParser::ST_TOUCHES - 879))
        | (1ULL << (MySqlParser::ST_UNION - 879))
        | (1ULL << (MySqlParser::ST_WITHIN - 879))
        | (1ULL << (MySqlParser::ST_X - 879))
        | (1ULL << (MySqlParser::ST_Y - 879))
        | (1ULL << (MySqlParser::SUBDATE - 879))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 879))
        | (1ULL << (MySqlParser::SUBTIME - 879))
        | (1ULL << (MySqlParser::SYSTEM_USER - 879))
        | (1ULL << (MySqlParser::TAN - 879))
        | (1ULL << (MySqlParser::TIMEDIFF - 879))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 879))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 879))
        | (1ULL << (MySqlParser::TIME_FORMAT - 879))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 879))
        | (1ULL << (MySqlParser::TOUCHES - 879))
        | (1ULL << (MySqlParser::TO_BASE64 - 879))
        | (1ULL << (MySqlParser::TO_DAYS - 879))
        | (1ULL << (MySqlParser::TO_SECONDS - 879))
        | (1ULL << (MySqlParser::UCASE - 879))
        | (1ULL << (MySqlParser::UNCOMPRESS - 879))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 879))
        | (1ULL << (MySqlParser::UNHEX - 879))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 879))
        | (1ULL << (MySqlParser::UPDATEXML - 879))
        | (1ULL << (MySqlParser::UPPER - 879))
        | (1ULL << (MySqlParser::UUID - 879))
        | (1ULL << (MySqlParser::UUID_SHORT - 879))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 879))
        | (1ULL << (MySqlParser::VERSION - 879))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879))
        | (1ULL << (MySqlParser::WEEKDAY - 879))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 879))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 879))
        | (1ULL << (MySqlParser::WITHIN - 879))
        | (1ULL << (MySqlParser::YEARWEEK - 879))
        | (1ULL << (MySqlParser::Y_FUNCTION - 879))
        | (1ULL << (MySqlParser::X_FUNCTION - 879)))) != 0) || ((((_la - 943) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 943)) & ((1ULL << (MySqlParser::LR_BRACKET - 943))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 943))
        | (1ULL << (MySqlParser::ID - 943))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 943)))) != 0));
    }
    setState(3886);
    match(MySqlParser::END);
    setState(3888);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519))
      | (1ULL << (MySqlParser::QUARTER - 519))
      | (1ULL << (MySqlParser::MONTH - 519))
      | (1ULL << (MySqlParser::DAY - 519))
      | (1ULL << (MySqlParser::HOUR - 519))
      | (1ULL << (MySqlParser::MINUTE - 519))
      | (1ULL << (MySqlParser::WEEK - 519))
      | (1ULL << (MySqlParser::SECOND - 519))
      | (1ULL << (MySqlParser::MICROSECOND - 519))
      | (1ULL << (MySqlParser::TABLES - 519))
      | (1ULL << (MySqlParser::ROUTINE - 519))
      | (1ULL << (MySqlParser::EXECUTE - 519))
      | (1ULL << (MySqlParser::FILE - 519))
      | (1ULL << (MySqlParser::PROCESS - 519))
      | (1ULL << (MySqlParser::RELOAD - 519))
      | (1ULL << (MySqlParser::SHUTDOWN - 519))
      | (1ULL << (MySqlParser::SUPER - 519))
      | (1ULL << (MySqlParser::PRIVILEGES - 519))
      | (1ULL << (MySqlParser::ARMSCII8 - 519))
      | (1ULL << (MySqlParser::ASCII - 519))
      | (1ULL << (MySqlParser::BIG5 - 519))
      | (1ULL << (MySqlParser::CP1250 - 519))
      | (1ULL << (MySqlParser::CP1251 - 519))
      | (1ULL << (MySqlParser::CP1256 - 519))
      | (1ULL << (MySqlParser::CP1257 - 519))
      | (1ULL << (MySqlParser::CP850 - 519))
      | (1ULL << (MySqlParser::CP852 - 519))
      | (1ULL << (MySqlParser::CP866 - 519))
      | (1ULL << (MySqlParser::CP932 - 519))
      | (1ULL << (MySqlParser::DEC8 - 519))
      | (1ULL << (MySqlParser::EUCJPMS - 519))
      | (1ULL << (MySqlParser::EUCKR - 519))
      | (1ULL << (MySqlParser::GB2312 - 519))
      | (1ULL << (MySqlParser::GBK - 519))
      | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
      | (1ULL << (MySqlParser::HEBREW - 583))
      | (1ULL << (MySqlParser::HP8 - 583))
      | (1ULL << (MySqlParser::KEYBCS2 - 583))
      | (1ULL << (MySqlParser::KOI8R - 583))
      | (1ULL << (MySqlParser::KOI8U - 583))
      | (1ULL << (MySqlParser::LATIN1 - 583))
      | (1ULL << (MySqlParser::LATIN2 - 583))
      | (1ULL << (MySqlParser::LATIN5 - 583))
      | (1ULL << (MySqlParser::LATIN7 - 583))
      | (1ULL << (MySqlParser::MACCE - 583))
      | (1ULL << (MySqlParser::MACROMAN - 583))
      | (1ULL << (MySqlParser::SJIS - 583))
      | (1ULL << (MySqlParser::SWE7 - 583))
      | (1ULL << (MySqlParser::TIS620 - 583))
      | (1ULL << (MySqlParser::UCS2 - 583))
      | (1ULL << (MySqlParser::UJIS - 583))
      | (1ULL << (MySqlParser::UTF16 - 583))
      | (1ULL << (MySqlParser::UTF16LE - 583))
      | (1ULL << (MySqlParser::UTF32 - 583))
      | (1ULL << (MySqlParser::UTF8 - 583))
      | (1ULL << (MySqlParser::UTF8MB3 - 583))
      | (1ULL << (MySqlParser::UTF8MB4 - 583))
      | (1ULL << (MySqlParser::ARCHIVE - 583))
      | (1ULL << (MySqlParser::BLACKHOLE - 583))
      | (1ULL << (MySqlParser::CSV - 583))
      | (1ULL << (MySqlParser::FEDERATED - 583))
      | (1ULL << (MySqlParser::INNODB - 583))
      | (1ULL << (MySqlParser::MEMORY - 583))
      | (1ULL << (MySqlParser::MRG_MYISAM - 583))
      | (1ULL << (MySqlParser::MYISAM - 583))
      | (1ULL << (MySqlParser::NDB - 583))
      | (1ULL << (MySqlParser::NDBCLUSTER - 583))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
      | (1ULL << (MySqlParser::REPEATABLE - 583))
      | (1ULL << (MySqlParser::COMMITTED - 583))
      | (1ULL << (MySqlParser::UNCOMMITTED - 583))
      | (1ULL << (MySqlParser::SERIALIZABLE - 583))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
      | (1ULL << (MySqlParser::LINESTRING - 583))
      | (1ULL << (MySqlParser::MULTILINESTRING - 583))
      | (1ULL << (MySqlParser::MULTIPOINT - 583))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
      | (1ULL << (MySqlParser::POINT - 583))
      | (1ULL << (MySqlParser::POLYGON - 583))
      | (1ULL << (MySqlParser::ABS - 583))
      | (1ULL << (MySqlParser::ACOS - 583))
      | (1ULL << (MySqlParser::ADDDATE - 583))
      | (1ULL << (MySqlParser::ADDTIME - 583))
      | (1ULL << (MySqlParser::AES_DECRYPT - 583))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
      | (1ULL << (MySqlParser::AREA - 583))
      | (1ULL << (MySqlParser::ASBINARY - 583))
      | (1ULL << (MySqlParser::ASIN - 583))
      | (1ULL << (MySqlParser::ASTEXT - 583))
      | (1ULL << (MySqlParser::ASWKB - 583))
      | (1ULL << (MySqlParser::ASWKT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
      | (1ULL << (MySqlParser::ATAN - 583))
      | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
      | (1ULL << (MySqlParser::BIN - 647))
      | (1ULL << (MySqlParser::BIT_COUNT - 647))
      | (1ULL << (MySqlParser::BIT_LENGTH - 647))
      | (1ULL << (MySqlParser::BUFFER - 647))
      | (1ULL << (MySqlParser::CEIL - 647))
      | (1ULL << (MySqlParser::CEILING - 647))
      | (1ULL << (MySqlParser::CENTROID - 647))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
      | (1ULL << (MySqlParser::CHARSET - 647))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
      | (1ULL << (MySqlParser::COERCIBILITY - 647))
      | (1ULL << (MySqlParser::COLLATION - 647))
      | (1ULL << (MySqlParser::COMPRESS - 647))
      | (1ULL << (MySqlParser::CONCAT - 647))
      | (1ULL << (MySqlParser::CONCAT_WS - 647))
      | (1ULL << (MySqlParser::CONNECTION_ID - 647))
      | (1ULL << (MySqlParser::CONV - 647))
      | (1ULL << (MySqlParser::CONVERT_TZ - 647))
      | (1ULL << (MySqlParser::COS - 647))
      | (1ULL << (MySqlParser::COT - 647))
      | (1ULL << (MySqlParser::CRC32 - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
      | (1ULL << (MySqlParser::CROSSES - 647))
      | (1ULL << (MySqlParser::DATEDIFF - 647))
      | (1ULL << (MySqlParser::DATE_FORMAT - 647))
      | (1ULL << (MySqlParser::DAYNAME - 647))
      | (1ULL << (MySqlParser::DAYOFMONTH - 647))
      | (1ULL << (MySqlParser::DAYOFWEEK - 647))
      | (1ULL << (MySqlParser::DAYOFYEAR - 647))
      | (1ULL << (MySqlParser::DECODE - 647))
      | (1ULL << (MySqlParser::DEGREES - 647))
      | (1ULL << (MySqlParser::DES_DECRYPT - 647))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
      | (1ULL << (MySqlParser::DIMENSION - 647))
      | (1ULL << (MySqlParser::DISJOINT - 647))
      | (1ULL << (MySqlParser::ELT - 647))
      | (1ULL << (MySqlParser::ENCODE - 647))
      | (1ULL << (MySqlParser::ENCRYPT - 647))
      | (1ULL << (MySqlParser::ENDPOINT - 647))
      | (1ULL << (MySqlParser::ENVELOPE - 647))
      | (1ULL << (MySqlParser::EQUALS - 647))
      | (1ULL << (MySqlParser::EXP - 647))
      | (1ULL << (MySqlParser::EXPORT_SET - 647))
      | (1ULL << (MySqlParser::EXTERIORRING - 647))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
      | (1ULL << (MySqlParser::FIELD - 647))
      | (1ULL << (MySqlParser::FIND_IN_SET - 647))
      | (1ULL << (MySqlParser::FLOOR - 647))
      | (1ULL << (MySqlParser::FORMAT - 647))
      | (1ULL << (MySqlParser::FOUND_ROWS - 647))
      | (1ULL << (MySqlParser::FROM_BASE64 - 647))
      | (1ULL << (MySqlParser::FROM_DAYS - 647))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
      | (1ULL << (MySqlParser::GET_FORMAT - 711))
      | (1ULL << (MySqlParser::GET_LOCK - 711))
      | (1ULL << (MySqlParser::GLENGTH - 711))
      | (1ULL << (MySqlParser::GREATEST - 711))
      | (1ULL << (MySqlParser::GTID_SUBSET - 711))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
      | (1ULL << (MySqlParser::HEX - 711))
      | (1ULL << (MySqlParser::IFNULL - 711))
      | (1ULL << (MySqlParser::INET6_ATON - 711))
      | (1ULL << (MySqlParser::INET6_NTOA - 711))
      | (1ULL << (MySqlParser::INET_ATON - 711))
      | (1ULL << (MySqlParser::INET_NTOA - 711))
      | (1ULL << (MySqlParser::INSTR - 711))
      | (1ULL << (MySqlParser::INTERIORRINGN - 711))
      | (1ULL << (MySqlParser::INTERSECTS - 711))
      | (1ULL << (MySqlParser::ISCLOSED - 711))
      | (1ULL << (MySqlParser::ISEMPTY - 711))
      | (1ULL << (MySqlParser::ISNULL - 711))
      | (1ULL << (MySqlParser::ISSIMPLE - 711))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
      | (1ULL << (MySqlParser::IS_IPV4 - 711))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
      | (1ULL << (MySqlParser::IS_IPV6 - 711))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
      | (1ULL << (MySqlParser::LCASE - 711))
      | (1ULL << (MySqlParser::LEAST - 711))
      | (1ULL << (MySqlParser::LENGTH - 711))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINEFROMWKB - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
      | (1ULL << (MySqlParser::LN - 711))
      | (1ULL << (MySqlParser::LOAD_FILE - 711))
      | (1ULL << (MySqlParser::LOCATE - 711))
      | (1ULL << (MySqlParser::LOG - 711))
      | (1ULL << (MySqlParser::LOG10 - 711))
      | (1ULL << (MySqlParser::LOG2 - 711))
      | (1ULL << (MySqlParser::LOWER - 711))
      | (1ULL << (MySqlParser::LPAD - 711))
      | (1ULL << (MySqlParser::LTRIM - 711))
      | (1ULL << (MySqlParser::MAKEDATE - 711))
      | (1ULL << (MySqlParser::MAKETIME - 711))
      | (1ULL << (MySqlParser::MAKE_SET - 711))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
      | (1ULL << (MySqlParser::MBRCONTAINS - 711))
      | (1ULL << (MySqlParser::MBRDISJOINT - 711))
      | (1ULL << (MySqlParser::MBREQUAL - 711))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
      | (1ULL << (MySqlParser::MBROVERLAPS - 711))
      | (1ULL << (MySqlParser::MBRTOUCHES - 711))
      | (1ULL << (MySqlParser::MBRWITHIN - 711))
      | (1ULL << (MySqlParser::MD5 - 711))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
      | (1ULL << (MySqlParser::MONTHNAME - 711))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::NAME_CONST - 775))
      | (1ULL << (MySqlParser::NULLIF - 775))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
      | (1ULL << (MySqlParser::NUMPOINTS - 775))
      | (1ULL << (MySqlParser::OCT - 775))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
      | (1ULL << (MySqlParser::ORD - 775))
      | (1ULL << (MySqlParser::OVERLAPS - 775))
      | (1ULL << (MySqlParser::PERIOD_ADD - 775))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
      | (1ULL << (MySqlParser::PI - 775))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::POINTFROMWKB - 775))
      | (1ULL << (MySqlParser::POINTN - 775))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYFROMWKB - 775))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::POW - 775))
      | (1ULL << (MySqlParser::POWER - 775))
      | (1ULL << (MySqlParser::QUOTE - 775))
      | (1ULL << (MySqlParser::RADIANS - 775))
      | (1ULL << (MySqlParser::RAND - 775))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
      | (1ULL << (MySqlParser::REVERSE - 775))
      | (1ULL << (MySqlParser::ROUND - 775))
      | (1ULL << (MySqlParser::ROW_COUNT - 775))
      | (1ULL << (MySqlParser::RPAD - 775))
      | (1ULL << (MySqlParser::RTRIM - 775))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
      | (1ULL << (MySqlParser::SESSION_USER - 775))
      | (1ULL << (MySqlParser::SHA - 775))
      | (1ULL << (MySqlParser::SHA1 - 775))
      | (1ULL << (MySqlParser::SHA2 - 775))
      | (1ULL << (MySqlParser::SIGN - 775))
      | (1ULL << (MySqlParser::SIN - 775))
      | (1ULL << (MySqlParser::SLEEP - 775))
      | (1ULL << (MySqlParser::SOUNDEX - 775))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
      | (1ULL << (MySqlParser::SQRT - 775))
      | (1ULL << (MySqlParser::SRID - 775))
      | (1ULL << (MySqlParser::STARTPOINT - 775))
      | (1ULL << (MySqlParser::STRCMP - 775))
      | (1ULL << (MySqlParser::STR_TO_DATE - 775))
      | (1ULL << (MySqlParser::ST_AREA - 775))
      | (1ULL << (MySqlParser::ST_ASBINARY - 775))
      | (1ULL << (MySqlParser::ST_ASTEXT - 775))
      | (1ULL << (MySqlParser::ST_ASWKB - 775))
      | (1ULL << (MySqlParser::ST_ASWKT - 775))
      | (1ULL << (MySqlParser::ST_BUFFER - 775))
      | (1ULL << (MySqlParser::ST_CENTROID - 775))
      | (1ULL << (MySqlParser::ST_CONTAINS - 775))
      | (1ULL << (MySqlParser::ST_CROSSES - 775))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
      | (1ULL << (MySqlParser::ST_DIMENSION - 775))
      | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
      | (1ULL << (MySqlParser::ST_EQUALS - 839))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POINTN - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_SRID - 839))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
      | (1ULL << (MySqlParser::ST_TOUCHES - 839))
      | (1ULL << (MySqlParser::ST_UNION - 839))
      | (1ULL << (MySqlParser::ST_WITHIN - 839))
      | (1ULL << (MySqlParser::ST_X - 839))
      | (1ULL << (MySqlParser::ST_Y - 839))
      | (1ULL << (MySqlParser::SUBDATE - 839))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
      | (1ULL << (MySqlParser::SUBTIME - 839))
      | (1ULL << (MySqlParser::SYSTEM_USER - 839))
      | (1ULL << (MySqlParser::TAN - 839))
      | (1ULL << (MySqlParser::TIMEDIFF - 839))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
      | (1ULL << (MySqlParser::TIME_FORMAT - 839))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
      | (1ULL << (MySqlParser::TOUCHES - 839))
      | (1ULL << (MySqlParser::TO_BASE64 - 839))
      | (1ULL << (MySqlParser::TO_DAYS - 839))
      | (1ULL << (MySqlParser::TO_SECONDS - 839))
      | (1ULL << (MySqlParser::UCASE - 839))
      | (1ULL << (MySqlParser::UNCOMPRESS - 839))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
      | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
      | (1ULL << (MySqlParser::UPDATEXML - 903))
      | (1ULL << (MySqlParser::UPPER - 903))
      | (1ULL << (MySqlParser::UUID - 903))
      | (1ULL << (MySqlParser::UUID_SHORT - 903))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
      | (1ULL << (MySqlParser::VERSION - 903))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
      | (1ULL << (MySqlParser::WEEKDAY - 903))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
      | (1ULL << (MySqlParser::WITHIN - 903))
      | (1ULL << (MySqlParser::YEARWEEK - 903))
      | (1ULL << (MySqlParser::Y_FUNCTION - 903))
      | (1ULL << (MySqlParser::X_FUNCTION - 903))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
      | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
      setState(3887);
      id_();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_statementContext ------------------------------------------------------------------

MySqlParser::Case_statementContext::Case_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::Case_statementContext::CASE() {
  return getTokens(MySqlParser::CASE);
}

tree::TerminalNode* MySqlParser::Case_statementContext::CASE(size_t i) {
  return getToken(MySqlParser::CASE, i);
}

tree::TerminalNode* MySqlParser::Case_statementContext::END() {
  return getToken(MySqlParser::END, 0);
}

MySqlParser::Id_Context* MySqlParser::Case_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::Case_statementContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::Case_statementContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::Case_statementContext::WHEN() {
  return getTokens(MySqlParser::WHEN);
}

tree::TerminalNode* MySqlParser::Case_statementContext::WHEN(size_t i) {
  return getToken(MySqlParser::WHEN, i);
}

std::vector<tree::TerminalNode *> MySqlParser::Case_statementContext::THEN() {
  return getTokens(MySqlParser::THEN);
}

tree::TerminalNode* MySqlParser::Case_statementContext::THEN(size_t i) {
  return getToken(MySqlParser::THEN, i);
}

tree::TerminalNode* MySqlParser::Case_statementContext::ELSE() {
  return getToken(MySqlParser::ELSE, 0);
}

std::vector<MySqlParser::ConstantContext *> MySqlParser::Case_statementContext::constant() {
  return getRuleContexts<MySqlParser::ConstantContext>();
}

MySqlParser::ConstantContext* MySqlParser::Case_statementContext::constant(size_t i) {
  return getRuleContext<MySqlParser::ConstantContext>(i);
}

std::vector<MySqlParser::Procedure_sql_statementContext *> MySqlParser::Case_statementContext::procedure_sql_statement() {
  return getRuleContexts<MySqlParser::Procedure_sql_statementContext>();
}

MySqlParser::Procedure_sql_statementContext* MySqlParser::Case_statementContext::procedure_sql_statement(size_t i) {
  return getRuleContext<MySqlParser::Procedure_sql_statementContext>(i);
}


size_t MySqlParser::Case_statementContext::getRuleIndex() const {
  return MySqlParser::RuleCase_statement;
}

void MySqlParser::Case_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_statement(this);
}

void MySqlParser::Case_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_statement(this);
}

MySqlParser::Case_statementContext* MySqlParser::case_statement() {
  Case_statementContext *_localctx = _tracker.createInstance<Case_statementContext>(_ctx, getState());
  enterRule(_localctx, 326, MySqlParser::RuleCase_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3890);
    match(MySqlParser::CASE);
    setState(3893);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 568, _ctx)) {
    case 1: {
      setState(3891);
      id_();
      break;
    }

    case 2: {
      setState(3892);
      expression(0);
      break;
    }

    }
    setState(3906); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3895);
      match(MySqlParser::WHEN);
      setState(3898);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 569, _ctx)) {
      case 1: {
        setState(3896);
        constant();
        break;
      }

      case 2: {
        setState(3897);
        expression(0);
        break;
      }

      }
      setState(3900);
      match(MySqlParser::THEN);
      setState(3902); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3901);
        procedure_sql_statement();
        setState(3904); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 7) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 7)) & ((1ULL << (MySqlParser::ALTER - 7))
        | (1ULL << (MySqlParser::ANALYZE - 7))
        | (1ULL << (MySqlParser::CALL - 7))
        | (1ULL << (MySqlParser::CASE - 7))
        | (1ULL << (MySqlParser::CHANGE - 7))
        | (1ULL << (MySqlParser::CHECK - 7))
        | (1ULL << (MySqlParser::CREATE - 7))
        | (1ULL << (MySqlParser::DELETE - 7))
        | (1ULL << (MySqlParser::DESC - 7))
        | (1ULL << (MySqlParser::DESCRIBE - 7))
        | (1ULL << (MySqlParser::DROP - 7))
        | (1ULL << (MySqlParser::EXPLAIN - 7))
        | (1ULL << (MySqlParser::FETCH - 7))
        | (1ULL << (MySqlParser::GRANT - 7))
        | (1ULL << (MySqlParser::IF - 7)))) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::INSERT - 71))
        | (1ULL << (MySqlParser::ITERATE - 71))
        | (1ULL << (MySqlParser::KILL - 71))
        | (1ULL << (MySqlParser::LEAVE - 71))
        | (1ULL << (MySqlParser::LEFT - 71))
        | (1ULL << (MySqlParser::LOAD - 71))
        | (1ULL << (MySqlParser::LOCK - 71))
        | (1ULL << (MySqlParser::LOOP - 71))
        | (1ULL << (MySqlParser::OPTIMIZE - 71))
        | (1ULL << (MySqlParser::PURGE - 71))
        | (1ULL << (MySqlParser::RELEASE - 71))
        | (1ULL << (MySqlParser::RENAME - 71))
        | (1ULL << (MySqlParser::REPEAT - 71))
        | (1ULL << (MySqlParser::REPLACE - 71))
        | (1ULL << (MySqlParser::RETURN - 71))
        | (1ULL << (MySqlParser::REVOKE - 71))
        | (1ULL << (MySqlParser::RIGHT - 71))
        | (1ULL << (MySqlParser::SELECT - 71))
        | (1ULL << (MySqlParser::SET - 71))
        | (1ULL << (MySqlParser::SHOW - 71)))) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 156)) & ((1ULL << (MySqlParser::UNLOCK - 156))
        | (1ULL << (MySqlParser::UPDATE - 156))
        | (1ULL << (MySqlParser::USE - 156))
        | (1ULL << (MySqlParser::WHILE - 156))
        | (1ULL << (MySqlParser::DATE - 156))
        | (1ULL << (MySqlParser::TIME - 156))
        | (1ULL << (MySqlParser::TIMESTAMP - 156))
        | (1ULL << (MySqlParser::DATETIME - 156))
        | (1ULL << (MySqlParser::YEAR - 156))
        | (1ULL << (MySqlParser::TEXT - 156))
        | (1ULL << (MySqlParser::ENUM - 156))
        | (1ULL << (MySqlParser::COUNT - 156)))) != 0) || ((((_la - 237) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 237)) & ((1ULL << (MySqlParser::POSITION - 237))
        | (1ULL << (MySqlParser::ACTION - 237))
        | (1ULL << (MySqlParser::AFTER - 237))
        | (1ULL << (MySqlParser::ALGORITHM - 237))
        | (1ULL << (MySqlParser::ANY - 237))
        | (1ULL << (MySqlParser::AT - 237))
        | (1ULL << (MySqlParser::AUTHORS - 237))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 237))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 237))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 237))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 237))
        | (1ULL << (MySqlParser::BEGIN - 237))
        | (1ULL << (MySqlParser::BINLOG - 237))
        | (1ULL << (MySqlParser::BIT - 237))
        | (1ULL << (MySqlParser::BTREE - 237))
        | (1ULL << (MySqlParser::CACHE - 237))
        | (1ULL << (MySqlParser::CASCADED - 237))
        | (1ULL << (MySqlParser::CHAIN - 237))
        | (1ULL << (MySqlParser::CHECKSUM - 237))
        | (1ULL << (MySqlParser::CIPHER - 237))
        | (1ULL << (MySqlParser::CLIENT - 237))
        | (1ULL << (MySqlParser::CLOSE - 237))
        | (1ULL << (MySqlParser::COALESCE - 237))
        | (1ULL << (MySqlParser::CODE - 237))
        | (1ULL << (MySqlParser::COLUMNS - 237))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 237))
        | (1ULL << (MySqlParser::COMMENT - 237))
        | (1ULL << (MySqlParser::COMMIT - 237))
        | (1ULL << (MySqlParser::COMPACT - 237))
        | (1ULL << (MySqlParser::COMPLETION - 237))
        | (1ULL << (MySqlParser::COMPRESSED - 237))
        | (1ULL << (MySqlParser::CONCURRENT - 237))
        | (1ULL << (MySqlParser::CONNECTION - 237))
        | (1ULL << (MySqlParser::CONSISTENT - 237))
        | (1ULL << (MySqlParser::CONTAINS - 237))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 237))
        | (1ULL << (MySqlParser::COPY - 237))
        | (1ULL << (MySqlParser::DATA - 237))
        | (1ULL << (MySqlParser::DATAFILE - 237))
        | (1ULL << (MySqlParser::DEALLOCATE - 237))
        | (1ULL << (MySqlParser::DEFINER - 237))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 237))
        | (1ULL << (MySqlParser::DIRECTORY - 237))
        | (1ULL << (MySqlParser::DISABLE - 237))
        | (1ULL << (MySqlParser::DISCARD - 237))
        | (1ULL << (MySqlParser::DISK - 237))
        | (1ULL << (MySqlParser::DO - 237)))) != 0) || ((((_la - 301) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 301)) & ((1ULL << (MySqlParser::DUMPFILE - 301))
        | (1ULL << (MySqlParser::DUPLICATE - 301))
        | (1ULL << (MySqlParser::DYNAMIC - 301))
        | (1ULL << (MySqlParser::ENABLE - 301))
        | (1ULL << (MySqlParser::ENDS - 301))
        | (1ULL << (MySqlParser::ENGINE - 301))
        | (1ULL << (MySqlParser::ENGINES - 301))
        | (1ULL << (MySqlParser::ERRORS - 301))
        | (1ULL << (MySqlParser::ESCAPE - 301))
        | (1ULL << (MySqlParser::EVEN - 301))
        | (1ULL << (MySqlParser::EVENT - 301))
        | (1ULL << (MySqlParser::EVENTS - 301))
        | (1ULL << (MySqlParser::EVERY - 301))
        | (1ULL << (MySqlParser::EXCHANGE - 301))
        | (1ULL << (MySqlParser::EXCLUSIVE - 301))
        | (1ULL << (MySqlParser::EXPIRE - 301))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 301))
        | (1ULL << (MySqlParser::FIELDS - 301))
        | (1ULL << (MySqlParser::FIRST - 301))
        | (1ULL << (MySqlParser::FIXED - 301))
        | (1ULL << (MySqlParser::FLUSH - 301))
        | (1ULL << (MySqlParser::FULL - 301))
        | (1ULL << (MySqlParser::FUNCTION - 301))
        | (1ULL << (MySqlParser::GLOBAL - 301))
        | (1ULL << (MySqlParser::GRANTS - 301))
        | (1ULL << (MySqlParser::HANDLER - 301))
        | (1ULL << (MySqlParser::HASH - 301))
        | (1ULL << (MySqlParser::HELP - 301))
        | (1ULL << (MySqlParser::HOST - 301))
        | (1ULL << (MySqlParser::IDENTIFIED - 301))
        | (1ULL << (MySqlParser::IMPORT - 301))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 301))
        | (1ULL << (MySqlParser::INPLACE - 301))
        | (1ULL << (MySqlParser::INSERT_METHOD - 301))
        | (1ULL << (MySqlParser::INSTALL - 301))
        | (1ULL << (MySqlParser::INVOKER - 301))
        | (1ULL << (MySqlParser::ISOLATION - 301))
        | (1ULL << (MySqlParser::ISSUER - 301))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 301))
        | (1ULL << (MySqlParser::LANGUAGE - 301))
        | (1ULL << (MySqlParser::LAST - 301))
        | (1ULL << (MySqlParser::LESS - 301)))) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 365)) & ((1ULL << (MySqlParser::LEVEL - 365))
        | (1ULL << (MySqlParser::LIST - 365))
        | (1ULL << (MySqlParser::LOCAL - 365))
        | (1ULL << (MySqlParser::LOGFILE - 365))
        | (1ULL << (MySqlParser::LOGS - 365))
        | (1ULL << (MySqlParser::MASTER - 365))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_ROWS - 365))
        | (1ULL << (MySqlParser::MAX_SIZE - 365))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 365))
        | (1ULL << (MySqlParser::MERGE - 365))
        | (1ULL << (MySqlParser::MID - 365))
        | (1ULL << (MySqlParser::MIN_ROWS - 365))
        | (1ULL << (MySqlParser::MODIFY - 365))
        | (1ULL << (MySqlParser::MUTEX - 365))
        | (1ULL << (MySqlParser::MYSQL - 365))
        | (1ULL << (MySqlParser::NAME - 365))
        | (1ULL << (MySqlParser::NAMES - 365))
        | (1ULL << (MySqlParser::NCHAR - 365))
        | (1ULL << (MySqlParser::NO - 365))
        | (1ULL << (MySqlParser::NODEGROUP - 365))
        | (1ULL << (MySqlParser::NONE - 365))
        | (1ULL << (MySqlParser::OFFLINE - 365))
        | (1ULL << (MySqlParser::OFFSET - 365))
        | (1ULL << (MySqlParser::OJ - 365))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 365))
        | (1ULL << (MySqlParser::ONLINE - 365))
        | (1ULL << (MySqlParser::ONLY - 365))
        | (1ULL << (MySqlParser::OPEN - 365))
        | (1ULL << (MySqlParser::OPTIONS - 365))
        | (1ULL << (MySqlParser::OWNER - 365))
        | (1ULL << (MySqlParser::PACK_KEYS - 365))
        | (1ULL << (MySqlParser::PARSER - 365))
        | (1ULL << (MySqlParser::PARTIAL - 365)))) != 0) || ((((_la - 429) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 429)) & ((1ULL << (MySqlParser::PARTITIONING - 429))
        | (1ULL << (MySqlParser::PARTITIONS - 429))
        | (1ULL << (MySqlParser::PASSWORD - 429))
        | (1ULL << (MySqlParser::PLUGINS - 429))
        | (1ULL << (MySqlParser::PORT - 429))
        | (1ULL << (MySqlParser::PREPARE - 429))
        | (1ULL << (MySqlParser::PRESERVE - 429))
        | (1ULL << (MySqlParser::PROCESSLIST - 429))
        | (1ULL << (MySqlParser::PROFILE - 429))
        | (1ULL << (MySqlParser::PROFILES - 429))
        | (1ULL << (MySqlParser::PROXY - 429))
        | (1ULL << (MySqlParser::QUERY - 429))
        | (1ULL << (MySqlParser::QUICK - 429))
        | (1ULL << (MySqlParser::REBUILD - 429))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 429))
        | (1ULL << (MySqlParser::REDUNDANT - 429))
        | (1ULL << (MySqlParser::RELAYLOG - 429))
        | (1ULL << (MySqlParser::REMOVE - 429))
        | (1ULL << (MySqlParser::REORGANIZE - 429))
        | (1ULL << (MySqlParser::REPAIR - 429))
        | (1ULL << (MySqlParser::REPLICATION - 429))
        | (1ULL << (MySqlParser::RESET - 429))
        | (1ULL << (MySqlParser::RETURNS - 429))
        | (1ULL << (MySqlParser::ROLLBACK - 429))
        | (1ULL << (MySqlParser::ROLLUP - 429))
        | (1ULL << (MySqlParser::ROW - 429))
        | (1ULL << (MySqlParser::ROWS - 429))
        | (1ULL << (MySqlParser::ROW_FORMAT - 429))
        | (1ULL << (MySqlParser::SAVEPOINT - 429))
        | (1ULL << (MySqlParser::SCHEDULE - 429))
        | (1ULL << (MySqlParser::SECURITY - 429))
        | (1ULL << (MySqlParser::SERVER - 429))
        | (1ULL << (MySqlParser::SESSION - 429))
        | (1ULL << (MySqlParser::SHARE - 429))
        | (1ULL << (MySqlParser::SHARED - 429))
        | (1ULL << (MySqlParser::SIGNED - 429))
        | (1ULL << (MySqlParser::SIMPLE - 429))
        | (1ULL << (MySqlParser::SLAVE - 429))
        | (1ULL << (MySqlParser::SNAPSHOT - 429))
        | (1ULL << (MySqlParser::SOCKET - 429))
        | (1ULL << (MySqlParser::SOME - 429))
        | (1ULL << (MySqlParser::SOUNDS - 429)))) != 0) || ((((_la - 495) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 495)) & ((1ULL << (MySqlParser::SQL_BUFFER_RESULT - 495))
        | (1ULL << (MySqlParser::SQL_CACHE - 495))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 495))
        | (1ULL << (MySqlParser::START - 495))
        | (1ULL << (MySqlParser::STARTS - 495))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 495))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 495))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 495))
        | (1ULL << (MySqlParser::STATUS - 495))
        | (1ULL << (MySqlParser::STOP - 495))
        | (1ULL << (MySqlParser::STORAGE - 495))
        | (1ULL << (MySqlParser::SUBJECT - 495))
        | (1ULL << (MySqlParser::SUBPARTITION - 495))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 495))
        | (1ULL << (MySqlParser::TABLESPACE - 495))
        | (1ULL << (MySqlParser::TEMPORARY - 495))
        | (1ULL << (MySqlParser::TEMPTABLE - 495))
        | (1ULL << (MySqlParser::THAN - 495))
        | (1ULL << (MySqlParser::TRANSACTION - 495))
        | (1ULL << (MySqlParser::TRUNCATE - 495))
        | (1ULL << (MySqlParser::UNDEFINED - 495))
        | (1ULL << (MySqlParser::UNDOFILE - 495))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 495))
        | (1ULL << (MySqlParser::UNINSTALL - 495))
        | (1ULL << (MySqlParser::UNKNOWN - 495))
        | (1ULL << (MySqlParser::UPGRADE - 495))
        | (1ULL << (MySqlParser::USER - 495))
        | (1ULL << (MySqlParser::VALUE - 495))
        | (1ULL << (MySqlParser::VARIABLES - 495))
        | (1ULL << (MySqlParser::VIEW - 495))
        | (1ULL << (MySqlParser::WAIT - 495))
        | (1ULL << (MySqlParser::WARNINGS - 495))
        | (1ULL << (MySqlParser::WORK - 495))
        | (1ULL << (MySqlParser::WRAPPER - 495))
        | (1ULL << (MySqlParser::X509 - 495))
        | (1ULL << (MySqlParser::XA - 495))
        | (1ULL << (MySqlParser::XML - 495))
        | (1ULL << (MySqlParser::QUARTER - 495))
        | (1ULL << (MySqlParser::MONTH - 495))
        | (1ULL << (MySqlParser::DAY - 495))
        | (1ULL << (MySqlParser::HOUR - 495))
        | (1ULL << (MySqlParser::MINUTE - 495))
        | (1ULL << (MySqlParser::WEEK - 495))
        | (1ULL << (MySqlParser::SECOND - 495))
        | (1ULL << (MySqlParser::MICROSECOND - 495))
        | (1ULL << (MySqlParser::TABLES - 495))
        | (1ULL << (MySqlParser::ROUTINE - 495)))) != 0) || ((((_la - 559) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 559)) & ((1ULL << (MySqlParser::EXECUTE - 559))
        | (1ULL << (MySqlParser::FILE - 559))
        | (1ULL << (MySqlParser::PROCESS - 559))
        | (1ULL << (MySqlParser::RELOAD - 559))
        | (1ULL << (MySqlParser::SHUTDOWN - 559))
        | (1ULL << (MySqlParser::SUPER - 559))
        | (1ULL << (MySqlParser::PRIVILEGES - 559))
        | (1ULL << (MySqlParser::ARMSCII8 - 559))
        | (1ULL << (MySqlParser::ASCII - 559))
        | (1ULL << (MySqlParser::BIG5 - 559))
        | (1ULL << (MySqlParser::CP1250 - 559))
        | (1ULL << (MySqlParser::CP1251 - 559))
        | (1ULL << (MySqlParser::CP1256 - 559))
        | (1ULL << (MySqlParser::CP1257 - 559))
        | (1ULL << (MySqlParser::CP850 - 559))
        | (1ULL << (MySqlParser::CP852 - 559))
        | (1ULL << (MySqlParser::CP866 - 559))
        | (1ULL << (MySqlParser::CP932 - 559))
        | (1ULL << (MySqlParser::DEC8 - 559))
        | (1ULL << (MySqlParser::EUCJPMS - 559))
        | (1ULL << (MySqlParser::EUCKR - 559))
        | (1ULL << (MySqlParser::GB2312 - 559))
        | (1ULL << (MySqlParser::GBK - 559))
        | (1ULL << (MySqlParser::GEOSTD8 - 559))
        | (1ULL << (MySqlParser::GREEK - 559))
        | (1ULL << (MySqlParser::HEBREW - 559))
        | (1ULL << (MySqlParser::HP8 - 559))
        | (1ULL << (MySqlParser::KEYBCS2 - 559))
        | (1ULL << (MySqlParser::KOI8R - 559))
        | (1ULL << (MySqlParser::KOI8U - 559))
        | (1ULL << (MySqlParser::LATIN1 - 559))
        | (1ULL << (MySqlParser::LATIN2 - 559))
        | (1ULL << (MySqlParser::LATIN5 - 559))
        | (1ULL << (MySqlParser::LATIN7 - 559))
        | (1ULL << (MySqlParser::MACCE - 559))
        | (1ULL << (MySqlParser::MACROMAN - 559))
        | (1ULL << (MySqlParser::SJIS - 559))
        | (1ULL << (MySqlParser::SWE7 - 559))
        | (1ULL << (MySqlParser::TIS620 - 559))
        | (1ULL << (MySqlParser::UCS2 - 559))
        | (1ULL << (MySqlParser::UJIS - 559))
        | (1ULL << (MySqlParser::UTF16 - 559))
        | (1ULL << (MySqlParser::UTF16LE - 559))
        | (1ULL << (MySqlParser::UTF32 - 559))
        | (1ULL << (MySqlParser::UTF8 - 559))
        | (1ULL << (MySqlParser::UTF8MB3 - 559))
        | (1ULL << (MySqlParser::UTF8MB4 - 559))
        | (1ULL << (MySqlParser::ARCHIVE - 559))
        | (1ULL << (MySqlParser::BLACKHOLE - 559))
        | (1ULL << (MySqlParser::CSV - 559))
        | (1ULL << (MySqlParser::FEDERATED - 559))
        | (1ULL << (MySqlParser::INNODB - 559))
        | (1ULL << (MySqlParser::MEMORY - 559))
        | (1ULL << (MySqlParser::MRG_MYISAM - 559))
        | (1ULL << (MySqlParser::MYISAM - 559))
        | (1ULL << (MySqlParser::NDB - 559))
        | (1ULL << (MySqlParser::NDBCLUSTER - 559))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 559))
        | (1ULL << (MySqlParser::REPEATABLE - 559))
        | (1ULL << (MySqlParser::COMMITTED - 559))
        | (1ULL << (MySqlParser::UNCOMMITTED - 559))
        | (1ULL << (MySqlParser::SERIALIZABLE - 559))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 559))
        | (1ULL << (MySqlParser::LINESTRING - 559)))) != 0) || ((((_la - 623) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 623)) & ((1ULL << (MySqlParser::MULTILINESTRING - 623))
        | (1ULL << (MySqlParser::MULTIPOINT - 623))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 623))
        | (1ULL << (MySqlParser::POINT - 623))
        | (1ULL << (MySqlParser::POLYGON - 623))
        | (1ULL << (MySqlParser::ABS - 623))
        | (1ULL << (MySqlParser::ACOS - 623))
        | (1ULL << (MySqlParser::ADDDATE - 623))
        | (1ULL << (MySqlParser::ADDTIME - 623))
        | (1ULL << (MySqlParser::AES_DECRYPT - 623))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 623))
        | (1ULL << (MySqlParser::AREA - 623))
        | (1ULL << (MySqlParser::ASBINARY - 623))
        | (1ULL << (MySqlParser::ASIN - 623))
        | (1ULL << (MySqlParser::ASTEXT - 623))
        | (1ULL << (MySqlParser::ASWKB - 623))
        | (1ULL << (MySqlParser::ASWKT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 623))
        | (1ULL << (MySqlParser::ATAN - 623))
        | (1ULL << (MySqlParser::ATAN2 - 623))
        | (1ULL << (MySqlParser::BENCHMARK - 623))
        | (1ULL << (MySqlParser::BIN - 623))
        | (1ULL << (MySqlParser::BIT_COUNT - 623))
        | (1ULL << (MySqlParser::BIT_LENGTH - 623))
        | (1ULL << (MySqlParser::BUFFER - 623))
        | (1ULL << (MySqlParser::CEIL - 623))
        | (1ULL << (MySqlParser::CEILING - 623))
        | (1ULL << (MySqlParser::CENTROID - 623))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 623))
        | (1ULL << (MySqlParser::CHARSET - 623))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 623))
        | (1ULL << (MySqlParser::COERCIBILITY - 623))
        | (1ULL << (MySqlParser::COLLATION - 623))
        | (1ULL << (MySqlParser::COMPRESS - 623))
        | (1ULL << (MySqlParser::CONCAT - 623))
        | (1ULL << (MySqlParser::CONCAT_WS - 623))
        | (1ULL << (MySqlParser::CONNECTION_ID - 623))
        | (1ULL << (MySqlParser::CONV - 623))
        | (1ULL << (MySqlParser::CONVERT_TZ - 623))
        | (1ULL << (MySqlParser::COS - 623))
        | (1ULL << (MySqlParser::COT - 623))
        | (1ULL << (MySqlParser::CRC32 - 623))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 623))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 623))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 623))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 623))
        | (1ULL << (MySqlParser::CROSSES - 623))
        | (1ULL << (MySqlParser::DATEDIFF - 623))
        | (1ULL << (MySqlParser::DATE_FORMAT - 623))
        | (1ULL << (MySqlParser::DAYNAME - 623))
        | (1ULL << (MySqlParser::DAYOFMONTH - 623))
        | (1ULL << (MySqlParser::DAYOFWEEK - 623))
        | (1ULL << (MySqlParser::DAYOFYEAR - 623))
        | (1ULL << (MySqlParser::DECODE - 623))
        | (1ULL << (MySqlParser::DEGREES - 623))
        | (1ULL << (MySqlParser::DES_DECRYPT - 623))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 623))
        | (1ULL << (MySqlParser::DIMENSION - 623))
        | (1ULL << (MySqlParser::DISJOINT - 623))
        | (1ULL << (MySqlParser::ELT - 623)))) != 0) || ((((_la - 687) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 687)) & ((1ULL << (MySqlParser::ENCODE - 687))
        | (1ULL << (MySqlParser::ENCRYPT - 687))
        | (1ULL << (MySqlParser::ENDPOINT - 687))
        | (1ULL << (MySqlParser::ENVELOPE - 687))
        | (1ULL << (MySqlParser::EQUALS - 687))
        | (1ULL << (MySqlParser::EXP - 687))
        | (1ULL << (MySqlParser::EXPORT_SET - 687))
        | (1ULL << (MySqlParser::EXTERIORRING - 687))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 687))
        | (1ULL << (MySqlParser::FIELD - 687))
        | (1ULL << (MySqlParser::FIND_IN_SET - 687))
        | (1ULL << (MySqlParser::FLOOR - 687))
        | (1ULL << (MySqlParser::FORMAT - 687))
        | (1ULL << (MySqlParser::FOUND_ROWS - 687))
        | (1ULL << (MySqlParser::FROM_BASE64 - 687))
        | (1ULL << (MySqlParser::FROM_DAYS - 687))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 687))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYN - 687))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 687))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 687))
        | (1ULL << (MySqlParser::GET_FORMAT - 687))
        | (1ULL << (MySqlParser::GET_LOCK - 687))
        | (1ULL << (MySqlParser::GLENGTH - 687))
        | (1ULL << (MySqlParser::GREATEST - 687))
        | (1ULL << (MySqlParser::GTID_SUBSET - 687))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 687))
        | (1ULL << (MySqlParser::HEX - 687))
        | (1ULL << (MySqlParser::IFNULL - 687))
        | (1ULL << (MySqlParser::INET6_ATON - 687))
        | (1ULL << (MySqlParser::INET6_NTOA - 687))
        | (1ULL << (MySqlParser::INET_ATON - 687))
        | (1ULL << (MySqlParser::INET_NTOA - 687))
        | (1ULL << (MySqlParser::INSTR - 687))
        | (1ULL << (MySqlParser::INTERIORRINGN - 687))
        | (1ULL << (MySqlParser::INTERSECTS - 687))
        | (1ULL << (MySqlParser::ISCLOSED - 687))
        | (1ULL << (MySqlParser::ISEMPTY - 687))
        | (1ULL << (MySqlParser::ISNULL - 687))
        | (1ULL << (MySqlParser::ISSIMPLE - 687))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 687))
        | (1ULL << (MySqlParser::IS_IPV4 - 687))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 687))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 687))
        | (1ULL << (MySqlParser::IS_IPV6 - 687))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 687))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 687))
        | (1ULL << (MySqlParser::LCASE - 687))
        | (1ULL << (MySqlParser::LEAST - 687))
        | (1ULL << (MySqlParser::LENGTH - 687))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 687))
        | (1ULL << (MySqlParser::LINEFROMWKB - 687))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 687))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 687))
        | (1ULL << (MySqlParser::LN - 687))
        | (1ULL << (MySqlParser::LOAD_FILE - 687))
        | (1ULL << (MySqlParser::LOCATE - 687))
        | (1ULL << (MySqlParser::LOG - 687)))) != 0) || ((((_la - 751) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 751)) & ((1ULL << (MySqlParser::LOG10 - 751))
        | (1ULL << (MySqlParser::LOG2 - 751))
        | (1ULL << (MySqlParser::LOWER - 751))
        | (1ULL << (MySqlParser::LPAD - 751))
        | (1ULL << (MySqlParser::LTRIM - 751))
        | (1ULL << (MySqlParser::MAKEDATE - 751))
        | (1ULL << (MySqlParser::MAKETIME - 751))
        | (1ULL << (MySqlParser::MAKE_SET - 751))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 751))
        | (1ULL << (MySqlParser::MBRCONTAINS - 751))
        | (1ULL << (MySqlParser::MBRDISJOINT - 751))
        | (1ULL << (MySqlParser::MBREQUAL - 751))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 751))
        | (1ULL << (MySqlParser::MBROVERLAPS - 751))
        | (1ULL << (MySqlParser::MBRTOUCHES - 751))
        | (1ULL << (MySqlParser::MBRWITHIN - 751))
        | (1ULL << (MySqlParser::MD5 - 751))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 751))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 751))
        | (1ULL << (MySqlParser::MONTHNAME - 751))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 751))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 751))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 751))
        | (1ULL << (MySqlParser::NAME_CONST - 751))
        | (1ULL << (MySqlParser::NULLIF - 751))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 751))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 751))
        | (1ULL << (MySqlParser::NUMPOINTS - 751))
        | (1ULL << (MySqlParser::OCT - 751))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 751))
        | (1ULL << (MySqlParser::ORD - 751))
        | (1ULL << (MySqlParser::OVERLAPS - 751))
        | (1ULL << (MySqlParser::PERIOD_ADD - 751))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 751))
        | (1ULL << (MySqlParser::PI - 751))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::POINTFROMWKB - 751))
        | (1ULL << (MySqlParser::POINTN - 751))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 751))
        | (1ULL << (MySqlParser::POLYFROMWKB - 751))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 751))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 751))
        | (1ULL << (MySqlParser::POW - 751))
        | (1ULL << (MySqlParser::POWER - 751))
        | (1ULL << (MySqlParser::QUOTE - 751))
        | (1ULL << (MySqlParser::RADIANS - 751))
        | (1ULL << (MySqlParser::RAND - 751))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 751))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 751))
        | (1ULL << (MySqlParser::REVERSE - 751))
        | (1ULL << (MySqlParser::ROUND - 751))
        | (1ULL << (MySqlParser::ROW_COUNT - 751))
        | (1ULL << (MySqlParser::RPAD - 751))
        | (1ULL << (MySqlParser::RTRIM - 751))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 751))
        | (1ULL << (MySqlParser::SESSION_USER - 751))
        | (1ULL << (MySqlParser::SHA - 751)))) != 0) || ((((_la - 815) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 815)) & ((1ULL << (MySqlParser::SHA1 - 815))
        | (1ULL << (MySqlParser::SHA2 - 815))
        | (1ULL << (MySqlParser::SIGN - 815))
        | (1ULL << (MySqlParser::SIN - 815))
        | (1ULL << (MySqlParser::SLEEP - 815))
        | (1ULL << (MySqlParser::SOUNDEX - 815))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 815))
        | (1ULL << (MySqlParser::SQRT - 815))
        | (1ULL << (MySqlParser::SRID - 815))
        | (1ULL << (MySqlParser::STARTPOINT - 815))
        | (1ULL << (MySqlParser::STRCMP - 815))
        | (1ULL << (MySqlParser::STR_TO_DATE - 815))
        | (1ULL << (MySqlParser::ST_AREA - 815))
        | (1ULL << (MySqlParser::ST_ASBINARY - 815))
        | (1ULL << (MySqlParser::ST_ASTEXT - 815))
        | (1ULL << (MySqlParser::ST_ASWKB - 815))
        | (1ULL << (MySqlParser::ST_ASWKT - 815))
        | (1ULL << (MySqlParser::ST_BUFFER - 815))
        | (1ULL << (MySqlParser::ST_CENTROID - 815))
        | (1ULL << (MySqlParser::ST_CONTAINS - 815))
        | (1ULL << (MySqlParser::ST_CROSSES - 815))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 815))
        | (1ULL << (MySqlParser::ST_DIMENSION - 815))
        | (1ULL << (MySqlParser::ST_DISJOINT - 815))
        | (1ULL << (MySqlParser::ST_DISTANCE - 815))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 815))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 815))
        | (1ULL << (MySqlParser::ST_EQUALS - 815))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 815))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 815))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 815))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 815))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 815))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 815))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 815))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 815))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 815))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 815))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 815))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 815))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_POINTN - 815))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_SRID - 815))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 815)))) != 0) || ((((_la - 879) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 879)) & ((1ULL << (MySqlParser::ST_SYMDIFFERENCE - 879))
        | (1ULL << (MySqlParser::ST_TOUCHES - 879))
        | (1ULL << (MySqlParser::ST_UNION - 879))
        | (1ULL << (MySqlParser::ST_WITHIN - 879))
        | (1ULL << (MySqlParser::ST_X - 879))
        | (1ULL << (MySqlParser::ST_Y - 879))
        | (1ULL << (MySqlParser::SUBDATE - 879))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 879))
        | (1ULL << (MySqlParser::SUBTIME - 879))
        | (1ULL << (MySqlParser::SYSTEM_USER - 879))
        | (1ULL << (MySqlParser::TAN - 879))
        | (1ULL << (MySqlParser::TIMEDIFF - 879))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 879))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 879))
        | (1ULL << (MySqlParser::TIME_FORMAT - 879))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 879))
        | (1ULL << (MySqlParser::TOUCHES - 879))
        | (1ULL << (MySqlParser::TO_BASE64 - 879))
        | (1ULL << (MySqlParser::TO_DAYS - 879))
        | (1ULL << (MySqlParser::TO_SECONDS - 879))
        | (1ULL << (MySqlParser::UCASE - 879))
        | (1ULL << (MySqlParser::UNCOMPRESS - 879))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 879))
        | (1ULL << (MySqlParser::UNHEX - 879))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 879))
        | (1ULL << (MySqlParser::UPDATEXML - 879))
        | (1ULL << (MySqlParser::UPPER - 879))
        | (1ULL << (MySqlParser::UUID - 879))
        | (1ULL << (MySqlParser::UUID_SHORT - 879))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 879))
        | (1ULL << (MySqlParser::VERSION - 879))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879))
        | (1ULL << (MySqlParser::WEEKDAY - 879))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 879))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 879))
        | (1ULL << (MySqlParser::WITHIN - 879))
        | (1ULL << (MySqlParser::YEARWEEK - 879))
        | (1ULL << (MySqlParser::Y_FUNCTION - 879))
        | (1ULL << (MySqlParser::X_FUNCTION - 879)))) != 0) || ((((_la - 943) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 943)) & ((1ULL << (MySqlParser::LR_BRACKET - 943))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 943))
        | (1ULL << (MySqlParser::ID - 943))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 943)))) != 0));
      setState(3908); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == MySqlParser::WHEN);
    setState(3916);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ELSE) {
      setState(3910);
      match(MySqlParser::ELSE);
      setState(3912); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3911);
        procedure_sql_statement();
        setState(3914); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 7) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 7)) & ((1ULL << (MySqlParser::ALTER - 7))
        | (1ULL << (MySqlParser::ANALYZE - 7))
        | (1ULL << (MySqlParser::CALL - 7))
        | (1ULL << (MySqlParser::CASE - 7))
        | (1ULL << (MySqlParser::CHANGE - 7))
        | (1ULL << (MySqlParser::CHECK - 7))
        | (1ULL << (MySqlParser::CREATE - 7))
        | (1ULL << (MySqlParser::DELETE - 7))
        | (1ULL << (MySqlParser::DESC - 7))
        | (1ULL << (MySqlParser::DESCRIBE - 7))
        | (1ULL << (MySqlParser::DROP - 7))
        | (1ULL << (MySqlParser::EXPLAIN - 7))
        | (1ULL << (MySqlParser::FETCH - 7))
        | (1ULL << (MySqlParser::GRANT - 7))
        | (1ULL << (MySqlParser::IF - 7)))) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::INSERT - 71))
        | (1ULL << (MySqlParser::ITERATE - 71))
        | (1ULL << (MySqlParser::KILL - 71))
        | (1ULL << (MySqlParser::LEAVE - 71))
        | (1ULL << (MySqlParser::LEFT - 71))
        | (1ULL << (MySqlParser::LOAD - 71))
        | (1ULL << (MySqlParser::LOCK - 71))
        | (1ULL << (MySqlParser::LOOP - 71))
        | (1ULL << (MySqlParser::OPTIMIZE - 71))
        | (1ULL << (MySqlParser::PURGE - 71))
        | (1ULL << (MySqlParser::RELEASE - 71))
        | (1ULL << (MySqlParser::RENAME - 71))
        | (1ULL << (MySqlParser::REPEAT - 71))
        | (1ULL << (MySqlParser::REPLACE - 71))
        | (1ULL << (MySqlParser::RETURN - 71))
        | (1ULL << (MySqlParser::REVOKE - 71))
        | (1ULL << (MySqlParser::RIGHT - 71))
        | (1ULL << (MySqlParser::SELECT - 71))
        | (1ULL << (MySqlParser::SET - 71))
        | (1ULL << (MySqlParser::SHOW - 71)))) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 156)) & ((1ULL << (MySqlParser::UNLOCK - 156))
        | (1ULL << (MySqlParser::UPDATE - 156))
        | (1ULL << (MySqlParser::USE - 156))
        | (1ULL << (MySqlParser::WHILE - 156))
        | (1ULL << (MySqlParser::DATE - 156))
        | (1ULL << (MySqlParser::TIME - 156))
        | (1ULL << (MySqlParser::TIMESTAMP - 156))
        | (1ULL << (MySqlParser::DATETIME - 156))
        | (1ULL << (MySqlParser::YEAR - 156))
        | (1ULL << (MySqlParser::TEXT - 156))
        | (1ULL << (MySqlParser::ENUM - 156))
        | (1ULL << (MySqlParser::COUNT - 156)))) != 0) || ((((_la - 237) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 237)) & ((1ULL << (MySqlParser::POSITION - 237))
        | (1ULL << (MySqlParser::ACTION - 237))
        | (1ULL << (MySqlParser::AFTER - 237))
        | (1ULL << (MySqlParser::ALGORITHM - 237))
        | (1ULL << (MySqlParser::ANY - 237))
        | (1ULL << (MySqlParser::AT - 237))
        | (1ULL << (MySqlParser::AUTHORS - 237))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 237))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 237))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 237))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 237))
        | (1ULL << (MySqlParser::BEGIN - 237))
        | (1ULL << (MySqlParser::BINLOG - 237))
        | (1ULL << (MySqlParser::BIT - 237))
        | (1ULL << (MySqlParser::BTREE - 237))
        | (1ULL << (MySqlParser::CACHE - 237))
        | (1ULL << (MySqlParser::CASCADED - 237))
        | (1ULL << (MySqlParser::CHAIN - 237))
        | (1ULL << (MySqlParser::CHECKSUM - 237))
        | (1ULL << (MySqlParser::CIPHER - 237))
        | (1ULL << (MySqlParser::CLIENT - 237))
        | (1ULL << (MySqlParser::CLOSE - 237))
        | (1ULL << (MySqlParser::COALESCE - 237))
        | (1ULL << (MySqlParser::CODE - 237))
        | (1ULL << (MySqlParser::COLUMNS - 237))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 237))
        | (1ULL << (MySqlParser::COMMENT - 237))
        | (1ULL << (MySqlParser::COMMIT - 237))
        | (1ULL << (MySqlParser::COMPACT - 237))
        | (1ULL << (MySqlParser::COMPLETION - 237))
        | (1ULL << (MySqlParser::COMPRESSED - 237))
        | (1ULL << (MySqlParser::CONCURRENT - 237))
        | (1ULL << (MySqlParser::CONNECTION - 237))
        | (1ULL << (MySqlParser::CONSISTENT - 237))
        | (1ULL << (MySqlParser::CONTAINS - 237))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 237))
        | (1ULL << (MySqlParser::COPY - 237))
        | (1ULL << (MySqlParser::DATA - 237))
        | (1ULL << (MySqlParser::DATAFILE - 237))
        | (1ULL << (MySqlParser::DEALLOCATE - 237))
        | (1ULL << (MySqlParser::DEFINER - 237))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 237))
        | (1ULL << (MySqlParser::DIRECTORY - 237))
        | (1ULL << (MySqlParser::DISABLE - 237))
        | (1ULL << (MySqlParser::DISCARD - 237))
        | (1ULL << (MySqlParser::DISK - 237))
        | (1ULL << (MySqlParser::DO - 237)))) != 0) || ((((_la - 301) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 301)) & ((1ULL << (MySqlParser::DUMPFILE - 301))
        | (1ULL << (MySqlParser::DUPLICATE - 301))
        | (1ULL << (MySqlParser::DYNAMIC - 301))
        | (1ULL << (MySqlParser::ENABLE - 301))
        | (1ULL << (MySqlParser::ENDS - 301))
        | (1ULL << (MySqlParser::ENGINE - 301))
        | (1ULL << (MySqlParser::ENGINES - 301))
        | (1ULL << (MySqlParser::ERRORS - 301))
        | (1ULL << (MySqlParser::ESCAPE - 301))
        | (1ULL << (MySqlParser::EVEN - 301))
        | (1ULL << (MySqlParser::EVENT - 301))
        | (1ULL << (MySqlParser::EVENTS - 301))
        | (1ULL << (MySqlParser::EVERY - 301))
        | (1ULL << (MySqlParser::EXCHANGE - 301))
        | (1ULL << (MySqlParser::EXCLUSIVE - 301))
        | (1ULL << (MySqlParser::EXPIRE - 301))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 301))
        | (1ULL << (MySqlParser::FIELDS - 301))
        | (1ULL << (MySqlParser::FIRST - 301))
        | (1ULL << (MySqlParser::FIXED - 301))
        | (1ULL << (MySqlParser::FLUSH - 301))
        | (1ULL << (MySqlParser::FULL - 301))
        | (1ULL << (MySqlParser::FUNCTION - 301))
        | (1ULL << (MySqlParser::GLOBAL - 301))
        | (1ULL << (MySqlParser::GRANTS - 301))
        | (1ULL << (MySqlParser::HANDLER - 301))
        | (1ULL << (MySqlParser::HASH - 301))
        | (1ULL << (MySqlParser::HELP - 301))
        | (1ULL << (MySqlParser::HOST - 301))
        | (1ULL << (MySqlParser::IDENTIFIED - 301))
        | (1ULL << (MySqlParser::IMPORT - 301))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 301))
        | (1ULL << (MySqlParser::INPLACE - 301))
        | (1ULL << (MySqlParser::INSERT_METHOD - 301))
        | (1ULL << (MySqlParser::INSTALL - 301))
        | (1ULL << (MySqlParser::INVOKER - 301))
        | (1ULL << (MySqlParser::ISOLATION - 301))
        | (1ULL << (MySqlParser::ISSUER - 301))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 301))
        | (1ULL << (MySqlParser::LANGUAGE - 301))
        | (1ULL << (MySqlParser::LAST - 301))
        | (1ULL << (MySqlParser::LESS - 301)))) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 365)) & ((1ULL << (MySqlParser::LEVEL - 365))
        | (1ULL << (MySqlParser::LIST - 365))
        | (1ULL << (MySqlParser::LOCAL - 365))
        | (1ULL << (MySqlParser::LOGFILE - 365))
        | (1ULL << (MySqlParser::LOGS - 365))
        | (1ULL << (MySqlParser::MASTER - 365))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_ROWS - 365))
        | (1ULL << (MySqlParser::MAX_SIZE - 365))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 365))
        | (1ULL << (MySqlParser::MERGE - 365))
        | (1ULL << (MySqlParser::MID - 365))
        | (1ULL << (MySqlParser::MIN_ROWS - 365))
        | (1ULL << (MySqlParser::MODIFY - 365))
        | (1ULL << (MySqlParser::MUTEX - 365))
        | (1ULL << (MySqlParser::MYSQL - 365))
        | (1ULL << (MySqlParser::NAME - 365))
        | (1ULL << (MySqlParser::NAMES - 365))
        | (1ULL << (MySqlParser::NCHAR - 365))
        | (1ULL << (MySqlParser::NO - 365))
        | (1ULL << (MySqlParser::NODEGROUP - 365))
        | (1ULL << (MySqlParser::NONE - 365))
        | (1ULL << (MySqlParser::OFFLINE - 365))
        | (1ULL << (MySqlParser::OFFSET - 365))
        | (1ULL << (MySqlParser::OJ - 365))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 365))
        | (1ULL << (MySqlParser::ONLINE - 365))
        | (1ULL << (MySqlParser::ONLY - 365))
        | (1ULL << (MySqlParser::OPEN - 365))
        | (1ULL << (MySqlParser::OPTIONS - 365))
        | (1ULL << (MySqlParser::OWNER - 365))
        | (1ULL << (MySqlParser::PACK_KEYS - 365))
        | (1ULL << (MySqlParser::PARSER - 365))
        | (1ULL << (MySqlParser::PARTIAL - 365)))) != 0) || ((((_la - 429) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 429)) & ((1ULL << (MySqlParser::PARTITIONING - 429))
        | (1ULL << (MySqlParser::PARTITIONS - 429))
        | (1ULL << (MySqlParser::PASSWORD - 429))
        | (1ULL << (MySqlParser::PLUGINS - 429))
        | (1ULL << (MySqlParser::PORT - 429))
        | (1ULL << (MySqlParser::PREPARE - 429))
        | (1ULL << (MySqlParser::PRESERVE - 429))
        | (1ULL << (MySqlParser::PROCESSLIST - 429))
        | (1ULL << (MySqlParser::PROFILE - 429))
        | (1ULL << (MySqlParser::PROFILES - 429))
        | (1ULL << (MySqlParser::PROXY - 429))
        | (1ULL << (MySqlParser::QUERY - 429))
        | (1ULL << (MySqlParser::QUICK - 429))
        | (1ULL << (MySqlParser::REBUILD - 429))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 429))
        | (1ULL << (MySqlParser::REDUNDANT - 429))
        | (1ULL << (MySqlParser::RELAYLOG - 429))
        | (1ULL << (MySqlParser::REMOVE - 429))
        | (1ULL << (MySqlParser::REORGANIZE - 429))
        | (1ULL << (MySqlParser::REPAIR - 429))
        | (1ULL << (MySqlParser::REPLICATION - 429))
        | (1ULL << (MySqlParser::RESET - 429))
        | (1ULL << (MySqlParser::RETURNS - 429))
        | (1ULL << (MySqlParser::ROLLBACK - 429))
        | (1ULL << (MySqlParser::ROLLUP - 429))
        | (1ULL << (MySqlParser::ROW - 429))
        | (1ULL << (MySqlParser::ROWS - 429))
        | (1ULL << (MySqlParser::ROW_FORMAT - 429))
        | (1ULL << (MySqlParser::SAVEPOINT - 429))
        | (1ULL << (MySqlParser::SCHEDULE - 429))
        | (1ULL << (MySqlParser::SECURITY - 429))
        | (1ULL << (MySqlParser::SERVER - 429))
        | (1ULL << (MySqlParser::SESSION - 429))
        | (1ULL << (MySqlParser::SHARE - 429))
        | (1ULL << (MySqlParser::SHARED - 429))
        | (1ULL << (MySqlParser::SIGNED - 429))
        | (1ULL << (MySqlParser::SIMPLE - 429))
        | (1ULL << (MySqlParser::SLAVE - 429))
        | (1ULL << (MySqlParser::SNAPSHOT - 429))
        | (1ULL << (MySqlParser::SOCKET - 429))
        | (1ULL << (MySqlParser::SOME - 429))
        | (1ULL << (MySqlParser::SOUNDS - 429)))) != 0) || ((((_la - 495) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 495)) & ((1ULL << (MySqlParser::SQL_BUFFER_RESULT - 495))
        | (1ULL << (MySqlParser::SQL_CACHE - 495))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 495))
        | (1ULL << (MySqlParser::START - 495))
        | (1ULL << (MySqlParser::STARTS - 495))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 495))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 495))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 495))
        | (1ULL << (MySqlParser::STATUS - 495))
        | (1ULL << (MySqlParser::STOP - 495))
        | (1ULL << (MySqlParser::STORAGE - 495))
        | (1ULL << (MySqlParser::SUBJECT - 495))
        | (1ULL << (MySqlParser::SUBPARTITION - 495))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 495))
        | (1ULL << (MySqlParser::TABLESPACE - 495))
        | (1ULL << (MySqlParser::TEMPORARY - 495))
        | (1ULL << (MySqlParser::TEMPTABLE - 495))
        | (1ULL << (MySqlParser::THAN - 495))
        | (1ULL << (MySqlParser::TRANSACTION - 495))
        | (1ULL << (MySqlParser::TRUNCATE - 495))
        | (1ULL << (MySqlParser::UNDEFINED - 495))
        | (1ULL << (MySqlParser::UNDOFILE - 495))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 495))
        | (1ULL << (MySqlParser::UNINSTALL - 495))
        | (1ULL << (MySqlParser::UNKNOWN - 495))
        | (1ULL << (MySqlParser::UPGRADE - 495))
        | (1ULL << (MySqlParser::USER - 495))
        | (1ULL << (MySqlParser::VALUE - 495))
        | (1ULL << (MySqlParser::VARIABLES - 495))
        | (1ULL << (MySqlParser::VIEW - 495))
        | (1ULL << (MySqlParser::WAIT - 495))
        | (1ULL << (MySqlParser::WARNINGS - 495))
        | (1ULL << (MySqlParser::WORK - 495))
        | (1ULL << (MySqlParser::WRAPPER - 495))
        | (1ULL << (MySqlParser::X509 - 495))
        | (1ULL << (MySqlParser::XA - 495))
        | (1ULL << (MySqlParser::XML - 495))
        | (1ULL << (MySqlParser::QUARTER - 495))
        | (1ULL << (MySqlParser::MONTH - 495))
        | (1ULL << (MySqlParser::DAY - 495))
        | (1ULL << (MySqlParser::HOUR - 495))
        | (1ULL << (MySqlParser::MINUTE - 495))
        | (1ULL << (MySqlParser::WEEK - 495))
        | (1ULL << (MySqlParser::SECOND - 495))
        | (1ULL << (MySqlParser::MICROSECOND - 495))
        | (1ULL << (MySqlParser::TABLES - 495))
        | (1ULL << (MySqlParser::ROUTINE - 495)))) != 0) || ((((_la - 559) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 559)) & ((1ULL << (MySqlParser::EXECUTE - 559))
        | (1ULL << (MySqlParser::FILE - 559))
        | (1ULL << (MySqlParser::PROCESS - 559))
        | (1ULL << (MySqlParser::RELOAD - 559))
        | (1ULL << (MySqlParser::SHUTDOWN - 559))
        | (1ULL << (MySqlParser::SUPER - 559))
        | (1ULL << (MySqlParser::PRIVILEGES - 559))
        | (1ULL << (MySqlParser::ARMSCII8 - 559))
        | (1ULL << (MySqlParser::ASCII - 559))
        | (1ULL << (MySqlParser::BIG5 - 559))
        | (1ULL << (MySqlParser::CP1250 - 559))
        | (1ULL << (MySqlParser::CP1251 - 559))
        | (1ULL << (MySqlParser::CP1256 - 559))
        | (1ULL << (MySqlParser::CP1257 - 559))
        | (1ULL << (MySqlParser::CP850 - 559))
        | (1ULL << (MySqlParser::CP852 - 559))
        | (1ULL << (MySqlParser::CP866 - 559))
        | (1ULL << (MySqlParser::CP932 - 559))
        | (1ULL << (MySqlParser::DEC8 - 559))
        | (1ULL << (MySqlParser::EUCJPMS - 559))
        | (1ULL << (MySqlParser::EUCKR - 559))
        | (1ULL << (MySqlParser::GB2312 - 559))
        | (1ULL << (MySqlParser::GBK - 559))
        | (1ULL << (MySqlParser::GEOSTD8 - 559))
        | (1ULL << (MySqlParser::GREEK - 559))
        | (1ULL << (MySqlParser::HEBREW - 559))
        | (1ULL << (MySqlParser::HP8 - 559))
        | (1ULL << (MySqlParser::KEYBCS2 - 559))
        | (1ULL << (MySqlParser::KOI8R - 559))
        | (1ULL << (MySqlParser::KOI8U - 559))
        | (1ULL << (MySqlParser::LATIN1 - 559))
        | (1ULL << (MySqlParser::LATIN2 - 559))
        | (1ULL << (MySqlParser::LATIN5 - 559))
        | (1ULL << (MySqlParser::LATIN7 - 559))
        | (1ULL << (MySqlParser::MACCE - 559))
        | (1ULL << (MySqlParser::MACROMAN - 559))
        | (1ULL << (MySqlParser::SJIS - 559))
        | (1ULL << (MySqlParser::SWE7 - 559))
        | (1ULL << (MySqlParser::TIS620 - 559))
        | (1ULL << (MySqlParser::UCS2 - 559))
        | (1ULL << (MySqlParser::UJIS - 559))
        | (1ULL << (MySqlParser::UTF16 - 559))
        | (1ULL << (MySqlParser::UTF16LE - 559))
        | (1ULL << (MySqlParser::UTF32 - 559))
        | (1ULL << (MySqlParser::UTF8 - 559))
        | (1ULL << (MySqlParser::UTF8MB3 - 559))
        | (1ULL << (MySqlParser::UTF8MB4 - 559))
        | (1ULL << (MySqlParser::ARCHIVE - 559))
        | (1ULL << (MySqlParser::BLACKHOLE - 559))
        | (1ULL << (MySqlParser::CSV - 559))
        | (1ULL << (MySqlParser::FEDERATED - 559))
        | (1ULL << (MySqlParser::INNODB - 559))
        | (1ULL << (MySqlParser::MEMORY - 559))
        | (1ULL << (MySqlParser::MRG_MYISAM - 559))
        | (1ULL << (MySqlParser::MYISAM - 559))
        | (1ULL << (MySqlParser::NDB - 559))
        | (1ULL << (MySqlParser::NDBCLUSTER - 559))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 559))
        | (1ULL << (MySqlParser::REPEATABLE - 559))
        | (1ULL << (MySqlParser::COMMITTED - 559))
        | (1ULL << (MySqlParser::UNCOMMITTED - 559))
        | (1ULL << (MySqlParser::SERIALIZABLE - 559))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 559))
        | (1ULL << (MySqlParser::LINESTRING - 559)))) != 0) || ((((_la - 623) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 623)) & ((1ULL << (MySqlParser::MULTILINESTRING - 623))
        | (1ULL << (MySqlParser::MULTIPOINT - 623))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 623))
        | (1ULL << (MySqlParser::POINT - 623))
        | (1ULL << (MySqlParser::POLYGON - 623))
        | (1ULL << (MySqlParser::ABS - 623))
        | (1ULL << (MySqlParser::ACOS - 623))
        | (1ULL << (MySqlParser::ADDDATE - 623))
        | (1ULL << (MySqlParser::ADDTIME - 623))
        | (1ULL << (MySqlParser::AES_DECRYPT - 623))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 623))
        | (1ULL << (MySqlParser::AREA - 623))
        | (1ULL << (MySqlParser::ASBINARY - 623))
        | (1ULL << (MySqlParser::ASIN - 623))
        | (1ULL << (MySqlParser::ASTEXT - 623))
        | (1ULL << (MySqlParser::ASWKB - 623))
        | (1ULL << (MySqlParser::ASWKT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 623))
        | (1ULL << (MySqlParser::ATAN - 623))
        | (1ULL << (MySqlParser::ATAN2 - 623))
        | (1ULL << (MySqlParser::BENCHMARK - 623))
        | (1ULL << (MySqlParser::BIN - 623))
        | (1ULL << (MySqlParser::BIT_COUNT - 623))
        | (1ULL << (MySqlParser::BIT_LENGTH - 623))
        | (1ULL << (MySqlParser::BUFFER - 623))
        | (1ULL << (MySqlParser::CEIL - 623))
        | (1ULL << (MySqlParser::CEILING - 623))
        | (1ULL << (MySqlParser::CENTROID - 623))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 623))
        | (1ULL << (MySqlParser::CHARSET - 623))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 623))
        | (1ULL << (MySqlParser::COERCIBILITY - 623))
        | (1ULL << (MySqlParser::COLLATION - 623))
        | (1ULL << (MySqlParser::COMPRESS - 623))
        | (1ULL << (MySqlParser::CONCAT - 623))
        | (1ULL << (MySqlParser::CONCAT_WS - 623))
        | (1ULL << (MySqlParser::CONNECTION_ID - 623))
        | (1ULL << (MySqlParser::CONV - 623))
        | (1ULL << (MySqlParser::CONVERT_TZ - 623))
        | (1ULL << (MySqlParser::COS - 623))
        | (1ULL << (MySqlParser::COT - 623))
        | (1ULL << (MySqlParser::CRC32 - 623))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 623))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 623))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 623))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 623))
        | (1ULL << (MySqlParser::CROSSES - 623))
        | (1ULL << (MySqlParser::DATEDIFF - 623))
        | (1ULL << (MySqlParser::DATE_FORMAT - 623))
        | (1ULL << (MySqlParser::DAYNAME - 623))
        | (1ULL << (MySqlParser::DAYOFMONTH - 623))
        | (1ULL << (MySqlParser::DAYOFWEEK - 623))
        | (1ULL << (MySqlParser::DAYOFYEAR - 623))
        | (1ULL << (MySqlParser::DECODE - 623))
        | (1ULL << (MySqlParser::DEGREES - 623))
        | (1ULL << (MySqlParser::DES_DECRYPT - 623))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 623))
        | (1ULL << (MySqlParser::DIMENSION - 623))
        | (1ULL << (MySqlParser::DISJOINT - 623))
        | (1ULL << (MySqlParser::ELT - 623)))) != 0) || ((((_la - 687) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 687)) & ((1ULL << (MySqlParser::ENCODE - 687))
        | (1ULL << (MySqlParser::ENCRYPT - 687))
        | (1ULL << (MySqlParser::ENDPOINT - 687))
        | (1ULL << (MySqlParser::ENVELOPE - 687))
        | (1ULL << (MySqlParser::EQUALS - 687))
        | (1ULL << (MySqlParser::EXP - 687))
        | (1ULL << (MySqlParser::EXPORT_SET - 687))
        | (1ULL << (MySqlParser::EXTERIORRING - 687))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 687))
        | (1ULL << (MySqlParser::FIELD - 687))
        | (1ULL << (MySqlParser::FIND_IN_SET - 687))
        | (1ULL << (MySqlParser::FLOOR - 687))
        | (1ULL << (MySqlParser::FORMAT - 687))
        | (1ULL << (MySqlParser::FOUND_ROWS - 687))
        | (1ULL << (MySqlParser::FROM_BASE64 - 687))
        | (1ULL << (MySqlParser::FROM_DAYS - 687))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 687))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYN - 687))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 687))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 687))
        | (1ULL << (MySqlParser::GET_FORMAT - 687))
        | (1ULL << (MySqlParser::GET_LOCK - 687))
        | (1ULL << (MySqlParser::GLENGTH - 687))
        | (1ULL << (MySqlParser::GREATEST - 687))
        | (1ULL << (MySqlParser::GTID_SUBSET - 687))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 687))
        | (1ULL << (MySqlParser::HEX - 687))
        | (1ULL << (MySqlParser::IFNULL - 687))
        | (1ULL << (MySqlParser::INET6_ATON - 687))
        | (1ULL << (MySqlParser::INET6_NTOA - 687))
        | (1ULL << (MySqlParser::INET_ATON - 687))
        | (1ULL << (MySqlParser::INET_NTOA - 687))
        | (1ULL << (MySqlParser::INSTR - 687))
        | (1ULL << (MySqlParser::INTERIORRINGN - 687))
        | (1ULL << (MySqlParser::INTERSECTS - 687))
        | (1ULL << (MySqlParser::ISCLOSED - 687))
        | (1ULL << (MySqlParser::ISEMPTY - 687))
        | (1ULL << (MySqlParser::ISNULL - 687))
        | (1ULL << (MySqlParser::ISSIMPLE - 687))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 687))
        | (1ULL << (MySqlParser::IS_IPV4 - 687))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 687))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 687))
        | (1ULL << (MySqlParser::IS_IPV6 - 687))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 687))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 687))
        | (1ULL << (MySqlParser::LCASE - 687))
        | (1ULL << (MySqlParser::LEAST - 687))
        | (1ULL << (MySqlParser::LENGTH - 687))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 687))
        | (1ULL << (MySqlParser::LINEFROMWKB - 687))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 687))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 687))
        | (1ULL << (MySqlParser::LN - 687))
        | (1ULL << (MySqlParser::LOAD_FILE - 687))
        | (1ULL << (MySqlParser::LOCATE - 687))
        | (1ULL << (MySqlParser::LOG - 687)))) != 0) || ((((_la - 751) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 751)) & ((1ULL << (MySqlParser::LOG10 - 751))
        | (1ULL << (MySqlParser::LOG2 - 751))
        | (1ULL << (MySqlParser::LOWER - 751))
        | (1ULL << (MySqlParser::LPAD - 751))
        | (1ULL << (MySqlParser::LTRIM - 751))
        | (1ULL << (MySqlParser::MAKEDATE - 751))
        | (1ULL << (MySqlParser::MAKETIME - 751))
        | (1ULL << (MySqlParser::MAKE_SET - 751))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 751))
        | (1ULL << (MySqlParser::MBRCONTAINS - 751))
        | (1ULL << (MySqlParser::MBRDISJOINT - 751))
        | (1ULL << (MySqlParser::MBREQUAL - 751))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 751))
        | (1ULL << (MySqlParser::MBROVERLAPS - 751))
        | (1ULL << (MySqlParser::MBRTOUCHES - 751))
        | (1ULL << (MySqlParser::MBRWITHIN - 751))
        | (1ULL << (MySqlParser::MD5 - 751))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 751))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 751))
        | (1ULL << (MySqlParser::MONTHNAME - 751))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 751))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 751))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 751))
        | (1ULL << (MySqlParser::NAME_CONST - 751))
        | (1ULL << (MySqlParser::NULLIF - 751))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 751))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 751))
        | (1ULL << (MySqlParser::NUMPOINTS - 751))
        | (1ULL << (MySqlParser::OCT - 751))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 751))
        | (1ULL << (MySqlParser::ORD - 751))
        | (1ULL << (MySqlParser::OVERLAPS - 751))
        | (1ULL << (MySqlParser::PERIOD_ADD - 751))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 751))
        | (1ULL << (MySqlParser::PI - 751))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::POINTFROMWKB - 751))
        | (1ULL << (MySqlParser::POINTN - 751))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 751))
        | (1ULL << (MySqlParser::POLYFROMWKB - 751))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 751))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 751))
        | (1ULL << (MySqlParser::POW - 751))
        | (1ULL << (MySqlParser::POWER - 751))
        | (1ULL << (MySqlParser::QUOTE - 751))
        | (1ULL << (MySqlParser::RADIANS - 751))
        | (1ULL << (MySqlParser::RAND - 751))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 751))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 751))
        | (1ULL << (MySqlParser::REVERSE - 751))
        | (1ULL << (MySqlParser::ROUND - 751))
        | (1ULL << (MySqlParser::ROW_COUNT - 751))
        | (1ULL << (MySqlParser::RPAD - 751))
        | (1ULL << (MySqlParser::RTRIM - 751))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 751))
        | (1ULL << (MySqlParser::SESSION_USER - 751))
        | (1ULL << (MySqlParser::SHA - 751)))) != 0) || ((((_la - 815) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 815)) & ((1ULL << (MySqlParser::SHA1 - 815))
        | (1ULL << (MySqlParser::SHA2 - 815))
        | (1ULL << (MySqlParser::SIGN - 815))
        | (1ULL << (MySqlParser::SIN - 815))
        | (1ULL << (MySqlParser::SLEEP - 815))
        | (1ULL << (MySqlParser::SOUNDEX - 815))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 815))
        | (1ULL << (MySqlParser::SQRT - 815))
        | (1ULL << (MySqlParser::SRID - 815))
        | (1ULL << (MySqlParser::STARTPOINT - 815))
        | (1ULL << (MySqlParser::STRCMP - 815))
        | (1ULL << (MySqlParser::STR_TO_DATE - 815))
        | (1ULL << (MySqlParser::ST_AREA - 815))
        | (1ULL << (MySqlParser::ST_ASBINARY - 815))
        | (1ULL << (MySqlParser::ST_ASTEXT - 815))
        | (1ULL << (MySqlParser::ST_ASWKB - 815))
        | (1ULL << (MySqlParser::ST_ASWKT - 815))
        | (1ULL << (MySqlParser::ST_BUFFER - 815))
        | (1ULL << (MySqlParser::ST_CENTROID - 815))
        | (1ULL << (MySqlParser::ST_CONTAINS - 815))
        | (1ULL << (MySqlParser::ST_CROSSES - 815))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 815))
        | (1ULL << (MySqlParser::ST_DIMENSION - 815))
        | (1ULL << (MySqlParser::ST_DISJOINT - 815))
        | (1ULL << (MySqlParser::ST_DISTANCE - 815))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 815))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 815))
        | (1ULL << (MySqlParser::ST_EQUALS - 815))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 815))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 815))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 815))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 815))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 815))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 815))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 815))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 815))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 815))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 815))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 815))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 815))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_POINTN - 815))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_SRID - 815))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 815)))) != 0) || ((((_la - 879) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 879)) & ((1ULL << (MySqlParser::ST_SYMDIFFERENCE - 879))
        | (1ULL << (MySqlParser::ST_TOUCHES - 879))
        | (1ULL << (MySqlParser::ST_UNION - 879))
        | (1ULL << (MySqlParser::ST_WITHIN - 879))
        | (1ULL << (MySqlParser::ST_X - 879))
        | (1ULL << (MySqlParser::ST_Y - 879))
        | (1ULL << (MySqlParser::SUBDATE - 879))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 879))
        | (1ULL << (MySqlParser::SUBTIME - 879))
        | (1ULL << (MySqlParser::SYSTEM_USER - 879))
        | (1ULL << (MySqlParser::TAN - 879))
        | (1ULL << (MySqlParser::TIMEDIFF - 879))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 879))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 879))
        | (1ULL << (MySqlParser::TIME_FORMAT - 879))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 879))
        | (1ULL << (MySqlParser::TOUCHES - 879))
        | (1ULL << (MySqlParser::TO_BASE64 - 879))
        | (1ULL << (MySqlParser::TO_DAYS - 879))
        | (1ULL << (MySqlParser::TO_SECONDS - 879))
        | (1ULL << (MySqlParser::UCASE - 879))
        | (1ULL << (MySqlParser::UNCOMPRESS - 879))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 879))
        | (1ULL << (MySqlParser::UNHEX - 879))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 879))
        | (1ULL << (MySqlParser::UPDATEXML - 879))
        | (1ULL << (MySqlParser::UPPER - 879))
        | (1ULL << (MySqlParser::UUID - 879))
        | (1ULL << (MySqlParser::UUID_SHORT - 879))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 879))
        | (1ULL << (MySqlParser::VERSION - 879))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879))
        | (1ULL << (MySqlParser::WEEKDAY - 879))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 879))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 879))
        | (1ULL << (MySqlParser::WITHIN - 879))
        | (1ULL << (MySqlParser::YEARWEEK - 879))
        | (1ULL << (MySqlParser::Y_FUNCTION - 879))
        | (1ULL << (MySqlParser::X_FUNCTION - 879)))) != 0) || ((((_la - 943) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 943)) & ((1ULL << (MySqlParser::LR_BRACKET - 943))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 943))
        | (1ULL << (MySqlParser::ID - 943))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 943)))) != 0));
    }
    setState(3918);
    match(MySqlParser::END);
    setState(3919);
    match(MySqlParser::CASE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_statementContext ------------------------------------------------------------------

MySqlParser::If_statementContext::If_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::If_statementContext::IF() {
  return getTokens(MySqlParser::IF);
}

tree::TerminalNode* MySqlParser::If_statementContext::IF(size_t i) {
  return getToken(MySqlParser::IF, i);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::If_statementContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::If_statementContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::If_statementContext::THEN() {
  return getTokens(MySqlParser::THEN);
}

tree::TerminalNode* MySqlParser::If_statementContext::THEN(size_t i) {
  return getToken(MySqlParser::THEN, i);
}

tree::TerminalNode* MySqlParser::If_statementContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<MySqlParser::Procedure_sql_statementContext *> MySqlParser::If_statementContext::procedure_sql_statement() {
  return getRuleContexts<MySqlParser::Procedure_sql_statementContext>();
}

MySqlParser::Procedure_sql_statementContext* MySqlParser::If_statementContext::procedure_sql_statement(size_t i) {
  return getRuleContext<MySqlParser::Procedure_sql_statementContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::If_statementContext::ELSEIF() {
  return getTokens(MySqlParser::ELSEIF);
}

tree::TerminalNode* MySqlParser::If_statementContext::ELSEIF(size_t i) {
  return getToken(MySqlParser::ELSEIF, i);
}

tree::TerminalNode* MySqlParser::If_statementContext::ELSE() {
  return getToken(MySqlParser::ELSE, 0);
}


size_t MySqlParser::If_statementContext::getRuleIndex() const {
  return MySqlParser::RuleIf_statement;
}

void MySqlParser::If_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_statement(this);
}

void MySqlParser::If_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_statement(this);
}

MySqlParser::If_statementContext* MySqlParser::if_statement() {
  If_statementContext *_localctx = _tracker.createInstance<If_statementContext>(_ctx, getState());
  enterRule(_localctx, 328, MySqlParser::RuleIf_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3921);
    match(MySqlParser::IF);
    setState(3922);
    expression(0);
    setState(3923);
    match(MySqlParser::THEN);
    setState(3925); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3924);
      procedure_sql_statement();
      setState(3927); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & ((1ULL << (MySqlParser::ALTER - 7))
      | (1ULL << (MySqlParser::ANALYZE - 7))
      | (1ULL << (MySqlParser::CALL - 7))
      | (1ULL << (MySqlParser::CASE - 7))
      | (1ULL << (MySqlParser::CHANGE - 7))
      | (1ULL << (MySqlParser::CHECK - 7))
      | (1ULL << (MySqlParser::CREATE - 7))
      | (1ULL << (MySqlParser::DELETE - 7))
      | (1ULL << (MySqlParser::DESC - 7))
      | (1ULL << (MySqlParser::DESCRIBE - 7))
      | (1ULL << (MySqlParser::DROP - 7))
      | (1ULL << (MySqlParser::EXPLAIN - 7))
      | (1ULL << (MySqlParser::FETCH - 7))
      | (1ULL << (MySqlParser::GRANT - 7))
      | (1ULL << (MySqlParser::IF - 7)))) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::INSERT - 71))
      | (1ULL << (MySqlParser::ITERATE - 71))
      | (1ULL << (MySqlParser::KILL - 71))
      | (1ULL << (MySqlParser::LEAVE - 71))
      | (1ULL << (MySqlParser::LEFT - 71))
      | (1ULL << (MySqlParser::LOAD - 71))
      | (1ULL << (MySqlParser::LOCK - 71))
      | (1ULL << (MySqlParser::LOOP - 71))
      | (1ULL << (MySqlParser::OPTIMIZE - 71))
      | (1ULL << (MySqlParser::PURGE - 71))
      | (1ULL << (MySqlParser::RELEASE - 71))
      | (1ULL << (MySqlParser::RENAME - 71))
      | (1ULL << (MySqlParser::REPEAT - 71))
      | (1ULL << (MySqlParser::REPLACE - 71))
      | (1ULL << (MySqlParser::RETURN - 71))
      | (1ULL << (MySqlParser::REVOKE - 71))
      | (1ULL << (MySqlParser::RIGHT - 71))
      | (1ULL << (MySqlParser::SELECT - 71))
      | (1ULL << (MySqlParser::SET - 71))
      | (1ULL << (MySqlParser::SHOW - 71)))) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & ((1ULL << (MySqlParser::UNLOCK - 156))
      | (1ULL << (MySqlParser::UPDATE - 156))
      | (1ULL << (MySqlParser::USE - 156))
      | (1ULL << (MySqlParser::WHILE - 156))
      | (1ULL << (MySqlParser::DATE - 156))
      | (1ULL << (MySqlParser::TIME - 156))
      | (1ULL << (MySqlParser::TIMESTAMP - 156))
      | (1ULL << (MySqlParser::DATETIME - 156))
      | (1ULL << (MySqlParser::YEAR - 156))
      | (1ULL << (MySqlParser::TEXT - 156))
      | (1ULL << (MySqlParser::ENUM - 156))
      | (1ULL << (MySqlParser::COUNT - 156)))) != 0) || ((((_la - 237) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 237)) & ((1ULL << (MySqlParser::POSITION - 237))
      | (1ULL << (MySqlParser::ACTION - 237))
      | (1ULL << (MySqlParser::AFTER - 237))
      | (1ULL << (MySqlParser::ALGORITHM - 237))
      | (1ULL << (MySqlParser::ANY - 237))
      | (1ULL << (MySqlParser::AT - 237))
      | (1ULL << (MySqlParser::AUTHORS - 237))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 237))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 237))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 237))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 237))
      | (1ULL << (MySqlParser::BEGIN - 237))
      | (1ULL << (MySqlParser::BINLOG - 237))
      | (1ULL << (MySqlParser::BIT - 237))
      | (1ULL << (MySqlParser::BTREE - 237))
      | (1ULL << (MySqlParser::CACHE - 237))
      | (1ULL << (MySqlParser::CASCADED - 237))
      | (1ULL << (MySqlParser::CHAIN - 237))
      | (1ULL << (MySqlParser::CHECKSUM - 237))
      | (1ULL << (MySqlParser::CIPHER - 237))
      | (1ULL << (MySqlParser::CLIENT - 237))
      | (1ULL << (MySqlParser::CLOSE - 237))
      | (1ULL << (MySqlParser::COALESCE - 237))
      | (1ULL << (MySqlParser::CODE - 237))
      | (1ULL << (MySqlParser::COLUMNS - 237))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 237))
      | (1ULL << (MySqlParser::COMMENT - 237))
      | (1ULL << (MySqlParser::COMMIT - 237))
      | (1ULL << (MySqlParser::COMPACT - 237))
      | (1ULL << (MySqlParser::COMPLETION - 237))
      | (1ULL << (MySqlParser::COMPRESSED - 237))
      | (1ULL << (MySqlParser::CONCURRENT - 237))
      | (1ULL << (MySqlParser::CONNECTION - 237))
      | (1ULL << (MySqlParser::CONSISTENT - 237))
      | (1ULL << (MySqlParser::CONTAINS - 237))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 237))
      | (1ULL << (MySqlParser::COPY - 237))
      | (1ULL << (MySqlParser::DATA - 237))
      | (1ULL << (MySqlParser::DATAFILE - 237))
      | (1ULL << (MySqlParser::DEALLOCATE - 237))
      | (1ULL << (MySqlParser::DEFINER - 237))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 237))
      | (1ULL << (MySqlParser::DIRECTORY - 237))
      | (1ULL << (MySqlParser::DISABLE - 237))
      | (1ULL << (MySqlParser::DISCARD - 237))
      | (1ULL << (MySqlParser::DISK - 237))
      | (1ULL << (MySqlParser::DO - 237)))) != 0) || ((((_la - 301) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 301)) & ((1ULL << (MySqlParser::DUMPFILE - 301))
      | (1ULL << (MySqlParser::DUPLICATE - 301))
      | (1ULL << (MySqlParser::DYNAMIC - 301))
      | (1ULL << (MySqlParser::ENABLE - 301))
      | (1ULL << (MySqlParser::ENDS - 301))
      | (1ULL << (MySqlParser::ENGINE - 301))
      | (1ULL << (MySqlParser::ENGINES - 301))
      | (1ULL << (MySqlParser::ERRORS - 301))
      | (1ULL << (MySqlParser::ESCAPE - 301))
      | (1ULL << (MySqlParser::EVEN - 301))
      | (1ULL << (MySqlParser::EVENT - 301))
      | (1ULL << (MySqlParser::EVENTS - 301))
      | (1ULL << (MySqlParser::EVERY - 301))
      | (1ULL << (MySqlParser::EXCHANGE - 301))
      | (1ULL << (MySqlParser::EXCLUSIVE - 301))
      | (1ULL << (MySqlParser::EXPIRE - 301))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 301))
      | (1ULL << (MySqlParser::FIELDS - 301))
      | (1ULL << (MySqlParser::FIRST - 301))
      | (1ULL << (MySqlParser::FIXED - 301))
      | (1ULL << (MySqlParser::FLUSH - 301))
      | (1ULL << (MySqlParser::FULL - 301))
      | (1ULL << (MySqlParser::FUNCTION - 301))
      | (1ULL << (MySqlParser::GLOBAL - 301))
      | (1ULL << (MySqlParser::GRANTS - 301))
      | (1ULL << (MySqlParser::HANDLER - 301))
      | (1ULL << (MySqlParser::HASH - 301))
      | (1ULL << (MySqlParser::HELP - 301))
      | (1ULL << (MySqlParser::HOST - 301))
      | (1ULL << (MySqlParser::IDENTIFIED - 301))
      | (1ULL << (MySqlParser::IMPORT - 301))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 301))
      | (1ULL << (MySqlParser::INPLACE - 301))
      | (1ULL << (MySqlParser::INSERT_METHOD - 301))
      | (1ULL << (MySqlParser::INSTALL - 301))
      | (1ULL << (MySqlParser::INVOKER - 301))
      | (1ULL << (MySqlParser::ISOLATION - 301))
      | (1ULL << (MySqlParser::ISSUER - 301))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 301))
      | (1ULL << (MySqlParser::LANGUAGE - 301))
      | (1ULL << (MySqlParser::LAST - 301))
      | (1ULL << (MySqlParser::LESS - 301)))) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 365)) & ((1ULL << (MySqlParser::LEVEL - 365))
      | (1ULL << (MySqlParser::LIST - 365))
      | (1ULL << (MySqlParser::LOCAL - 365))
      | (1ULL << (MySqlParser::LOGFILE - 365))
      | (1ULL << (MySqlParser::LOGS - 365))
      | (1ULL << (MySqlParser::MASTER - 365))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_ROWS - 365))
      | (1ULL << (MySqlParser::MAX_SIZE - 365))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 365))
      | (1ULL << (MySqlParser::MERGE - 365))
      | (1ULL << (MySqlParser::MID - 365))
      | (1ULL << (MySqlParser::MIN_ROWS - 365))
      | (1ULL << (MySqlParser::MODIFY - 365))
      | (1ULL << (MySqlParser::MUTEX - 365))
      | (1ULL << (MySqlParser::MYSQL - 365))
      | (1ULL << (MySqlParser::NAME - 365))
      | (1ULL << (MySqlParser::NAMES - 365))
      | (1ULL << (MySqlParser::NCHAR - 365))
      | (1ULL << (MySqlParser::NO - 365))
      | (1ULL << (MySqlParser::NODEGROUP - 365))
      | (1ULL << (MySqlParser::NONE - 365))
      | (1ULL << (MySqlParser::OFFLINE - 365))
      | (1ULL << (MySqlParser::OFFSET - 365))
      | (1ULL << (MySqlParser::OJ - 365))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 365))
      | (1ULL << (MySqlParser::ONLINE - 365))
      | (1ULL << (MySqlParser::ONLY - 365))
      | (1ULL << (MySqlParser::OPEN - 365))
      | (1ULL << (MySqlParser::OPTIONS - 365))
      | (1ULL << (MySqlParser::OWNER - 365))
      | (1ULL << (MySqlParser::PACK_KEYS - 365))
      | (1ULL << (MySqlParser::PARSER - 365))
      | (1ULL << (MySqlParser::PARTIAL - 365)))) != 0) || ((((_la - 429) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 429)) & ((1ULL << (MySqlParser::PARTITIONING - 429))
      | (1ULL << (MySqlParser::PARTITIONS - 429))
      | (1ULL << (MySqlParser::PASSWORD - 429))
      | (1ULL << (MySqlParser::PLUGINS - 429))
      | (1ULL << (MySqlParser::PORT - 429))
      | (1ULL << (MySqlParser::PREPARE - 429))
      | (1ULL << (MySqlParser::PRESERVE - 429))
      | (1ULL << (MySqlParser::PROCESSLIST - 429))
      | (1ULL << (MySqlParser::PROFILE - 429))
      | (1ULL << (MySqlParser::PROFILES - 429))
      | (1ULL << (MySqlParser::PROXY - 429))
      | (1ULL << (MySqlParser::QUERY - 429))
      | (1ULL << (MySqlParser::QUICK - 429))
      | (1ULL << (MySqlParser::REBUILD - 429))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 429))
      | (1ULL << (MySqlParser::REDUNDANT - 429))
      | (1ULL << (MySqlParser::RELAYLOG - 429))
      | (1ULL << (MySqlParser::REMOVE - 429))
      | (1ULL << (MySqlParser::REORGANIZE - 429))
      | (1ULL << (MySqlParser::REPAIR - 429))
      | (1ULL << (MySqlParser::REPLICATION - 429))
      | (1ULL << (MySqlParser::RESET - 429))
      | (1ULL << (MySqlParser::RETURNS - 429))
      | (1ULL << (MySqlParser::ROLLBACK - 429))
      | (1ULL << (MySqlParser::ROLLUP - 429))
      | (1ULL << (MySqlParser::ROW - 429))
      | (1ULL << (MySqlParser::ROWS - 429))
      | (1ULL << (MySqlParser::ROW_FORMAT - 429))
      | (1ULL << (MySqlParser::SAVEPOINT - 429))
      | (1ULL << (MySqlParser::SCHEDULE - 429))
      | (1ULL << (MySqlParser::SECURITY - 429))
      | (1ULL << (MySqlParser::SERVER - 429))
      | (1ULL << (MySqlParser::SESSION - 429))
      | (1ULL << (MySqlParser::SHARE - 429))
      | (1ULL << (MySqlParser::SHARED - 429))
      | (1ULL << (MySqlParser::SIGNED - 429))
      | (1ULL << (MySqlParser::SIMPLE - 429))
      | (1ULL << (MySqlParser::SLAVE - 429))
      | (1ULL << (MySqlParser::SNAPSHOT - 429))
      | (1ULL << (MySqlParser::SOCKET - 429))
      | (1ULL << (MySqlParser::SOME - 429))
      | (1ULL << (MySqlParser::SOUNDS - 429)))) != 0) || ((((_la - 495) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 495)) & ((1ULL << (MySqlParser::SQL_BUFFER_RESULT - 495))
      | (1ULL << (MySqlParser::SQL_CACHE - 495))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 495))
      | (1ULL << (MySqlParser::START - 495))
      | (1ULL << (MySqlParser::STARTS - 495))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 495))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 495))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 495))
      | (1ULL << (MySqlParser::STATUS - 495))
      | (1ULL << (MySqlParser::STOP - 495))
      | (1ULL << (MySqlParser::STORAGE - 495))
      | (1ULL << (MySqlParser::SUBJECT - 495))
      | (1ULL << (MySqlParser::SUBPARTITION - 495))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 495))
      | (1ULL << (MySqlParser::TABLESPACE - 495))
      | (1ULL << (MySqlParser::TEMPORARY - 495))
      | (1ULL << (MySqlParser::TEMPTABLE - 495))
      | (1ULL << (MySqlParser::THAN - 495))
      | (1ULL << (MySqlParser::TRANSACTION - 495))
      | (1ULL << (MySqlParser::TRUNCATE - 495))
      | (1ULL << (MySqlParser::UNDEFINED - 495))
      | (1ULL << (MySqlParser::UNDOFILE - 495))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 495))
      | (1ULL << (MySqlParser::UNINSTALL - 495))
      | (1ULL << (MySqlParser::UNKNOWN - 495))
      | (1ULL << (MySqlParser::UPGRADE - 495))
      | (1ULL << (MySqlParser::USER - 495))
      | (1ULL << (MySqlParser::VALUE - 495))
      | (1ULL << (MySqlParser::VARIABLES - 495))
      | (1ULL << (MySqlParser::VIEW - 495))
      | (1ULL << (MySqlParser::WAIT - 495))
      | (1ULL << (MySqlParser::WARNINGS - 495))
      | (1ULL << (MySqlParser::WORK - 495))
      | (1ULL << (MySqlParser::WRAPPER - 495))
      | (1ULL << (MySqlParser::X509 - 495))
      | (1ULL << (MySqlParser::XA - 495))
      | (1ULL << (MySqlParser::XML - 495))
      | (1ULL << (MySqlParser::QUARTER - 495))
      | (1ULL << (MySqlParser::MONTH - 495))
      | (1ULL << (MySqlParser::DAY - 495))
      | (1ULL << (MySqlParser::HOUR - 495))
      | (1ULL << (MySqlParser::MINUTE - 495))
      | (1ULL << (MySqlParser::WEEK - 495))
      | (1ULL << (MySqlParser::SECOND - 495))
      | (1ULL << (MySqlParser::MICROSECOND - 495))
      | (1ULL << (MySqlParser::TABLES - 495))
      | (1ULL << (MySqlParser::ROUTINE - 495)))) != 0) || ((((_la - 559) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 559)) & ((1ULL << (MySqlParser::EXECUTE - 559))
      | (1ULL << (MySqlParser::FILE - 559))
      | (1ULL << (MySqlParser::PROCESS - 559))
      | (1ULL << (MySqlParser::RELOAD - 559))
      | (1ULL << (MySqlParser::SHUTDOWN - 559))
      | (1ULL << (MySqlParser::SUPER - 559))
      | (1ULL << (MySqlParser::PRIVILEGES - 559))
      | (1ULL << (MySqlParser::ARMSCII8 - 559))
      | (1ULL << (MySqlParser::ASCII - 559))
      | (1ULL << (MySqlParser::BIG5 - 559))
      | (1ULL << (MySqlParser::CP1250 - 559))
      | (1ULL << (MySqlParser::CP1251 - 559))
      | (1ULL << (MySqlParser::CP1256 - 559))
      | (1ULL << (MySqlParser::CP1257 - 559))
      | (1ULL << (MySqlParser::CP850 - 559))
      | (1ULL << (MySqlParser::CP852 - 559))
      | (1ULL << (MySqlParser::CP866 - 559))
      | (1ULL << (MySqlParser::CP932 - 559))
      | (1ULL << (MySqlParser::DEC8 - 559))
      | (1ULL << (MySqlParser::EUCJPMS - 559))
      | (1ULL << (MySqlParser::EUCKR - 559))
      | (1ULL << (MySqlParser::GB2312 - 559))
      | (1ULL << (MySqlParser::GBK - 559))
      | (1ULL << (MySqlParser::GEOSTD8 - 559))
      | (1ULL << (MySqlParser::GREEK - 559))
      | (1ULL << (MySqlParser::HEBREW - 559))
      | (1ULL << (MySqlParser::HP8 - 559))
      | (1ULL << (MySqlParser::KEYBCS2 - 559))
      | (1ULL << (MySqlParser::KOI8R - 559))
      | (1ULL << (MySqlParser::KOI8U - 559))
      | (1ULL << (MySqlParser::LATIN1 - 559))
      | (1ULL << (MySqlParser::LATIN2 - 559))
      | (1ULL << (MySqlParser::LATIN5 - 559))
      | (1ULL << (MySqlParser::LATIN7 - 559))
      | (1ULL << (MySqlParser::MACCE - 559))
      | (1ULL << (MySqlParser::MACROMAN - 559))
      | (1ULL << (MySqlParser::SJIS - 559))
      | (1ULL << (MySqlParser::SWE7 - 559))
      | (1ULL << (MySqlParser::TIS620 - 559))
      | (1ULL << (MySqlParser::UCS2 - 559))
      | (1ULL << (MySqlParser::UJIS - 559))
      | (1ULL << (MySqlParser::UTF16 - 559))
      | (1ULL << (MySqlParser::UTF16LE - 559))
      | (1ULL << (MySqlParser::UTF32 - 559))
      | (1ULL << (MySqlParser::UTF8 - 559))
      | (1ULL << (MySqlParser::UTF8MB3 - 559))
      | (1ULL << (MySqlParser::UTF8MB4 - 559))
      | (1ULL << (MySqlParser::ARCHIVE - 559))
      | (1ULL << (MySqlParser::BLACKHOLE - 559))
      | (1ULL << (MySqlParser::CSV - 559))
      | (1ULL << (MySqlParser::FEDERATED - 559))
      | (1ULL << (MySqlParser::INNODB - 559))
      | (1ULL << (MySqlParser::MEMORY - 559))
      | (1ULL << (MySqlParser::MRG_MYISAM - 559))
      | (1ULL << (MySqlParser::MYISAM - 559))
      | (1ULL << (MySqlParser::NDB - 559))
      | (1ULL << (MySqlParser::NDBCLUSTER - 559))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 559))
      | (1ULL << (MySqlParser::REPEATABLE - 559))
      | (1ULL << (MySqlParser::COMMITTED - 559))
      | (1ULL << (MySqlParser::UNCOMMITTED - 559))
      | (1ULL << (MySqlParser::SERIALIZABLE - 559))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 559))
      | (1ULL << (MySqlParser::LINESTRING - 559)))) != 0) || ((((_la - 623) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 623)) & ((1ULL << (MySqlParser::MULTILINESTRING - 623))
      | (1ULL << (MySqlParser::MULTIPOINT - 623))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 623))
      | (1ULL << (MySqlParser::POINT - 623))
      | (1ULL << (MySqlParser::POLYGON - 623))
      | (1ULL << (MySqlParser::ABS - 623))
      | (1ULL << (MySqlParser::ACOS - 623))
      | (1ULL << (MySqlParser::ADDDATE - 623))
      | (1ULL << (MySqlParser::ADDTIME - 623))
      | (1ULL << (MySqlParser::AES_DECRYPT - 623))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 623))
      | (1ULL << (MySqlParser::AREA - 623))
      | (1ULL << (MySqlParser::ASBINARY - 623))
      | (1ULL << (MySqlParser::ASIN - 623))
      | (1ULL << (MySqlParser::ASTEXT - 623))
      | (1ULL << (MySqlParser::ASWKB - 623))
      | (1ULL << (MySqlParser::ASWKT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 623))
      | (1ULL << (MySqlParser::ATAN - 623))
      | (1ULL << (MySqlParser::ATAN2 - 623))
      | (1ULL << (MySqlParser::BENCHMARK - 623))
      | (1ULL << (MySqlParser::BIN - 623))
      | (1ULL << (MySqlParser::BIT_COUNT - 623))
      | (1ULL << (MySqlParser::BIT_LENGTH - 623))
      | (1ULL << (MySqlParser::BUFFER - 623))
      | (1ULL << (MySqlParser::CEIL - 623))
      | (1ULL << (MySqlParser::CEILING - 623))
      | (1ULL << (MySqlParser::CENTROID - 623))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 623))
      | (1ULL << (MySqlParser::CHARSET - 623))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 623))
      | (1ULL << (MySqlParser::COERCIBILITY - 623))
      | (1ULL << (MySqlParser::COLLATION - 623))
      | (1ULL << (MySqlParser::COMPRESS - 623))
      | (1ULL << (MySqlParser::CONCAT - 623))
      | (1ULL << (MySqlParser::CONCAT_WS - 623))
      | (1ULL << (MySqlParser::CONNECTION_ID - 623))
      | (1ULL << (MySqlParser::CONV - 623))
      | (1ULL << (MySqlParser::CONVERT_TZ - 623))
      | (1ULL << (MySqlParser::COS - 623))
      | (1ULL << (MySqlParser::COT - 623))
      | (1ULL << (MySqlParser::CRC32 - 623))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 623))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 623))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 623))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 623))
      | (1ULL << (MySqlParser::CROSSES - 623))
      | (1ULL << (MySqlParser::DATEDIFF - 623))
      | (1ULL << (MySqlParser::DATE_FORMAT - 623))
      | (1ULL << (MySqlParser::DAYNAME - 623))
      | (1ULL << (MySqlParser::DAYOFMONTH - 623))
      | (1ULL << (MySqlParser::DAYOFWEEK - 623))
      | (1ULL << (MySqlParser::DAYOFYEAR - 623))
      | (1ULL << (MySqlParser::DECODE - 623))
      | (1ULL << (MySqlParser::DEGREES - 623))
      | (1ULL << (MySqlParser::DES_DECRYPT - 623))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 623))
      | (1ULL << (MySqlParser::DIMENSION - 623))
      | (1ULL << (MySqlParser::DISJOINT - 623))
      | (1ULL << (MySqlParser::ELT - 623)))) != 0) || ((((_la - 687) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 687)) & ((1ULL << (MySqlParser::ENCODE - 687))
      | (1ULL << (MySqlParser::ENCRYPT - 687))
      | (1ULL << (MySqlParser::ENDPOINT - 687))
      | (1ULL << (MySqlParser::ENVELOPE - 687))
      | (1ULL << (MySqlParser::EQUALS - 687))
      | (1ULL << (MySqlParser::EXP - 687))
      | (1ULL << (MySqlParser::EXPORT_SET - 687))
      | (1ULL << (MySqlParser::EXTERIORRING - 687))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 687))
      | (1ULL << (MySqlParser::FIELD - 687))
      | (1ULL << (MySqlParser::FIND_IN_SET - 687))
      | (1ULL << (MySqlParser::FLOOR - 687))
      | (1ULL << (MySqlParser::FORMAT - 687))
      | (1ULL << (MySqlParser::FOUND_ROWS - 687))
      | (1ULL << (MySqlParser::FROM_BASE64 - 687))
      | (1ULL << (MySqlParser::FROM_DAYS - 687))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 687))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYN - 687))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 687))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 687))
      | (1ULL << (MySqlParser::GET_FORMAT - 687))
      | (1ULL << (MySqlParser::GET_LOCK - 687))
      | (1ULL << (MySqlParser::GLENGTH - 687))
      | (1ULL << (MySqlParser::GREATEST - 687))
      | (1ULL << (MySqlParser::GTID_SUBSET - 687))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 687))
      | (1ULL << (MySqlParser::HEX - 687))
      | (1ULL << (MySqlParser::IFNULL - 687))
      | (1ULL << (MySqlParser::INET6_ATON - 687))
      | (1ULL << (MySqlParser::INET6_NTOA - 687))
      | (1ULL << (MySqlParser::INET_ATON - 687))
      | (1ULL << (MySqlParser::INET_NTOA - 687))
      | (1ULL << (MySqlParser::INSTR - 687))
      | (1ULL << (MySqlParser::INTERIORRINGN - 687))
      | (1ULL << (MySqlParser::INTERSECTS - 687))
      | (1ULL << (MySqlParser::ISCLOSED - 687))
      | (1ULL << (MySqlParser::ISEMPTY - 687))
      | (1ULL << (MySqlParser::ISNULL - 687))
      | (1ULL << (MySqlParser::ISSIMPLE - 687))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 687))
      | (1ULL << (MySqlParser::IS_IPV4 - 687))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 687))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 687))
      | (1ULL << (MySqlParser::IS_IPV6 - 687))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 687))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 687))
      | (1ULL << (MySqlParser::LCASE - 687))
      | (1ULL << (MySqlParser::LEAST - 687))
      | (1ULL << (MySqlParser::LENGTH - 687))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 687))
      | (1ULL << (MySqlParser::LINEFROMWKB - 687))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 687))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 687))
      | (1ULL << (MySqlParser::LN - 687))
      | (1ULL << (MySqlParser::LOAD_FILE - 687))
      | (1ULL << (MySqlParser::LOCATE - 687))
      | (1ULL << (MySqlParser::LOG - 687)))) != 0) || ((((_la - 751) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 751)) & ((1ULL << (MySqlParser::LOG10 - 751))
      | (1ULL << (MySqlParser::LOG2 - 751))
      | (1ULL << (MySqlParser::LOWER - 751))
      | (1ULL << (MySqlParser::LPAD - 751))
      | (1ULL << (MySqlParser::LTRIM - 751))
      | (1ULL << (MySqlParser::MAKEDATE - 751))
      | (1ULL << (MySqlParser::MAKETIME - 751))
      | (1ULL << (MySqlParser::MAKE_SET - 751))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 751))
      | (1ULL << (MySqlParser::MBRCONTAINS - 751))
      | (1ULL << (MySqlParser::MBRDISJOINT - 751))
      | (1ULL << (MySqlParser::MBREQUAL - 751))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 751))
      | (1ULL << (MySqlParser::MBROVERLAPS - 751))
      | (1ULL << (MySqlParser::MBRTOUCHES - 751))
      | (1ULL << (MySqlParser::MBRWITHIN - 751))
      | (1ULL << (MySqlParser::MD5 - 751))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 751))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 751))
      | (1ULL << (MySqlParser::MONTHNAME - 751))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 751))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 751))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 751))
      | (1ULL << (MySqlParser::NAME_CONST - 751))
      | (1ULL << (MySqlParser::NULLIF - 751))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 751))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 751))
      | (1ULL << (MySqlParser::NUMPOINTS - 751))
      | (1ULL << (MySqlParser::OCT - 751))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 751))
      | (1ULL << (MySqlParser::ORD - 751))
      | (1ULL << (MySqlParser::OVERLAPS - 751))
      | (1ULL << (MySqlParser::PERIOD_ADD - 751))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 751))
      | (1ULL << (MySqlParser::PI - 751))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::POINTFROMWKB - 751))
      | (1ULL << (MySqlParser::POINTN - 751))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 751))
      | (1ULL << (MySqlParser::POLYFROMWKB - 751))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 751))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 751))
      | (1ULL << (MySqlParser::POW - 751))
      | (1ULL << (MySqlParser::POWER - 751))
      | (1ULL << (MySqlParser::QUOTE - 751))
      | (1ULL << (MySqlParser::RADIANS - 751))
      | (1ULL << (MySqlParser::RAND - 751))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 751))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 751))
      | (1ULL << (MySqlParser::REVERSE - 751))
      | (1ULL << (MySqlParser::ROUND - 751))
      | (1ULL << (MySqlParser::ROW_COUNT - 751))
      | (1ULL << (MySqlParser::RPAD - 751))
      | (1ULL << (MySqlParser::RTRIM - 751))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 751))
      | (1ULL << (MySqlParser::SESSION_USER - 751))
      | (1ULL << (MySqlParser::SHA - 751)))) != 0) || ((((_la - 815) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 815)) & ((1ULL << (MySqlParser::SHA1 - 815))
      | (1ULL << (MySqlParser::SHA2 - 815))
      | (1ULL << (MySqlParser::SIGN - 815))
      | (1ULL << (MySqlParser::SIN - 815))
      | (1ULL << (MySqlParser::SLEEP - 815))
      | (1ULL << (MySqlParser::SOUNDEX - 815))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 815))
      | (1ULL << (MySqlParser::SQRT - 815))
      | (1ULL << (MySqlParser::SRID - 815))
      | (1ULL << (MySqlParser::STARTPOINT - 815))
      | (1ULL << (MySqlParser::STRCMP - 815))
      | (1ULL << (MySqlParser::STR_TO_DATE - 815))
      | (1ULL << (MySqlParser::ST_AREA - 815))
      | (1ULL << (MySqlParser::ST_ASBINARY - 815))
      | (1ULL << (MySqlParser::ST_ASTEXT - 815))
      | (1ULL << (MySqlParser::ST_ASWKB - 815))
      | (1ULL << (MySqlParser::ST_ASWKT - 815))
      | (1ULL << (MySqlParser::ST_BUFFER - 815))
      | (1ULL << (MySqlParser::ST_CENTROID - 815))
      | (1ULL << (MySqlParser::ST_CONTAINS - 815))
      | (1ULL << (MySqlParser::ST_CROSSES - 815))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 815))
      | (1ULL << (MySqlParser::ST_DIMENSION - 815))
      | (1ULL << (MySqlParser::ST_DISJOINT - 815))
      | (1ULL << (MySqlParser::ST_DISTANCE - 815))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 815))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 815))
      | (1ULL << (MySqlParser::ST_EQUALS - 815))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 815))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 815))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 815))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 815))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 815))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 815))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 815))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 815))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 815))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 815))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 815))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 815))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_POINTN - 815))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_SRID - 815))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 815)))) != 0) || ((((_la - 879) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 879)) & ((1ULL << (MySqlParser::ST_SYMDIFFERENCE - 879))
      | (1ULL << (MySqlParser::ST_TOUCHES - 879))
      | (1ULL << (MySqlParser::ST_UNION - 879))
      | (1ULL << (MySqlParser::ST_WITHIN - 879))
      | (1ULL << (MySqlParser::ST_X - 879))
      | (1ULL << (MySqlParser::ST_Y - 879))
      | (1ULL << (MySqlParser::SUBDATE - 879))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 879))
      | (1ULL << (MySqlParser::SUBTIME - 879))
      | (1ULL << (MySqlParser::SYSTEM_USER - 879))
      | (1ULL << (MySqlParser::TAN - 879))
      | (1ULL << (MySqlParser::TIMEDIFF - 879))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 879))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 879))
      | (1ULL << (MySqlParser::TIME_FORMAT - 879))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 879))
      | (1ULL << (MySqlParser::TOUCHES - 879))
      | (1ULL << (MySqlParser::TO_BASE64 - 879))
      | (1ULL << (MySqlParser::TO_DAYS - 879))
      | (1ULL << (MySqlParser::TO_SECONDS - 879))
      | (1ULL << (MySqlParser::UCASE - 879))
      | (1ULL << (MySqlParser::UNCOMPRESS - 879))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 879))
      | (1ULL << (MySqlParser::UNHEX - 879))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 879))
      | (1ULL << (MySqlParser::UPDATEXML - 879))
      | (1ULL << (MySqlParser::UPPER - 879))
      | (1ULL << (MySqlParser::UUID - 879))
      | (1ULL << (MySqlParser::UUID_SHORT - 879))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 879))
      | (1ULL << (MySqlParser::VERSION - 879))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879))
      | (1ULL << (MySqlParser::WEEKDAY - 879))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 879))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 879))
      | (1ULL << (MySqlParser::WITHIN - 879))
      | (1ULL << (MySqlParser::YEARWEEK - 879))
      | (1ULL << (MySqlParser::Y_FUNCTION - 879))
      | (1ULL << (MySqlParser::X_FUNCTION - 879)))) != 0) || ((((_la - 943) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 943)) & ((1ULL << (MySqlParser::LR_BRACKET - 943))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 943))
      | (1ULL << (MySqlParser::ID - 943))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 943)))) != 0));
    setState(3939);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::ELSEIF) {
      setState(3929);
      match(MySqlParser::ELSEIF);
      setState(3930);
      expression(0);
      setState(3931);
      match(MySqlParser::THEN);
      setState(3933); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3932);
        procedure_sql_statement();
        setState(3935); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 7) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 7)) & ((1ULL << (MySqlParser::ALTER - 7))
        | (1ULL << (MySqlParser::ANALYZE - 7))
        | (1ULL << (MySqlParser::CALL - 7))
        | (1ULL << (MySqlParser::CASE - 7))
        | (1ULL << (MySqlParser::CHANGE - 7))
        | (1ULL << (MySqlParser::CHECK - 7))
        | (1ULL << (MySqlParser::CREATE - 7))
        | (1ULL << (MySqlParser::DELETE - 7))
        | (1ULL << (MySqlParser::DESC - 7))
        | (1ULL << (MySqlParser::DESCRIBE - 7))
        | (1ULL << (MySqlParser::DROP - 7))
        | (1ULL << (MySqlParser::EXPLAIN - 7))
        | (1ULL << (MySqlParser::FETCH - 7))
        | (1ULL << (MySqlParser::GRANT - 7))
        | (1ULL << (MySqlParser::IF - 7)))) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::INSERT - 71))
        | (1ULL << (MySqlParser::ITERATE - 71))
        | (1ULL << (MySqlParser::KILL - 71))
        | (1ULL << (MySqlParser::LEAVE - 71))
        | (1ULL << (MySqlParser::LEFT - 71))
        | (1ULL << (MySqlParser::LOAD - 71))
        | (1ULL << (MySqlParser::LOCK - 71))
        | (1ULL << (MySqlParser::LOOP - 71))
        | (1ULL << (MySqlParser::OPTIMIZE - 71))
        | (1ULL << (MySqlParser::PURGE - 71))
        | (1ULL << (MySqlParser::RELEASE - 71))
        | (1ULL << (MySqlParser::RENAME - 71))
        | (1ULL << (MySqlParser::REPEAT - 71))
        | (1ULL << (MySqlParser::REPLACE - 71))
        | (1ULL << (MySqlParser::RETURN - 71))
        | (1ULL << (MySqlParser::REVOKE - 71))
        | (1ULL << (MySqlParser::RIGHT - 71))
        | (1ULL << (MySqlParser::SELECT - 71))
        | (1ULL << (MySqlParser::SET - 71))
        | (1ULL << (MySqlParser::SHOW - 71)))) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 156)) & ((1ULL << (MySqlParser::UNLOCK - 156))
        | (1ULL << (MySqlParser::UPDATE - 156))
        | (1ULL << (MySqlParser::USE - 156))
        | (1ULL << (MySqlParser::WHILE - 156))
        | (1ULL << (MySqlParser::DATE - 156))
        | (1ULL << (MySqlParser::TIME - 156))
        | (1ULL << (MySqlParser::TIMESTAMP - 156))
        | (1ULL << (MySqlParser::DATETIME - 156))
        | (1ULL << (MySqlParser::YEAR - 156))
        | (1ULL << (MySqlParser::TEXT - 156))
        | (1ULL << (MySqlParser::ENUM - 156))
        | (1ULL << (MySqlParser::COUNT - 156)))) != 0) || ((((_la - 237) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 237)) & ((1ULL << (MySqlParser::POSITION - 237))
        | (1ULL << (MySqlParser::ACTION - 237))
        | (1ULL << (MySqlParser::AFTER - 237))
        | (1ULL << (MySqlParser::ALGORITHM - 237))
        | (1ULL << (MySqlParser::ANY - 237))
        | (1ULL << (MySqlParser::AT - 237))
        | (1ULL << (MySqlParser::AUTHORS - 237))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 237))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 237))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 237))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 237))
        | (1ULL << (MySqlParser::BEGIN - 237))
        | (1ULL << (MySqlParser::BINLOG - 237))
        | (1ULL << (MySqlParser::BIT - 237))
        | (1ULL << (MySqlParser::BTREE - 237))
        | (1ULL << (MySqlParser::CACHE - 237))
        | (1ULL << (MySqlParser::CASCADED - 237))
        | (1ULL << (MySqlParser::CHAIN - 237))
        | (1ULL << (MySqlParser::CHECKSUM - 237))
        | (1ULL << (MySqlParser::CIPHER - 237))
        | (1ULL << (MySqlParser::CLIENT - 237))
        | (1ULL << (MySqlParser::CLOSE - 237))
        | (1ULL << (MySqlParser::COALESCE - 237))
        | (1ULL << (MySqlParser::CODE - 237))
        | (1ULL << (MySqlParser::COLUMNS - 237))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 237))
        | (1ULL << (MySqlParser::COMMENT - 237))
        | (1ULL << (MySqlParser::COMMIT - 237))
        | (1ULL << (MySqlParser::COMPACT - 237))
        | (1ULL << (MySqlParser::COMPLETION - 237))
        | (1ULL << (MySqlParser::COMPRESSED - 237))
        | (1ULL << (MySqlParser::CONCURRENT - 237))
        | (1ULL << (MySqlParser::CONNECTION - 237))
        | (1ULL << (MySqlParser::CONSISTENT - 237))
        | (1ULL << (MySqlParser::CONTAINS - 237))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 237))
        | (1ULL << (MySqlParser::COPY - 237))
        | (1ULL << (MySqlParser::DATA - 237))
        | (1ULL << (MySqlParser::DATAFILE - 237))
        | (1ULL << (MySqlParser::DEALLOCATE - 237))
        | (1ULL << (MySqlParser::DEFINER - 237))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 237))
        | (1ULL << (MySqlParser::DIRECTORY - 237))
        | (1ULL << (MySqlParser::DISABLE - 237))
        | (1ULL << (MySqlParser::DISCARD - 237))
        | (1ULL << (MySqlParser::DISK - 237))
        | (1ULL << (MySqlParser::DO - 237)))) != 0) || ((((_la - 301) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 301)) & ((1ULL << (MySqlParser::DUMPFILE - 301))
        | (1ULL << (MySqlParser::DUPLICATE - 301))
        | (1ULL << (MySqlParser::DYNAMIC - 301))
        | (1ULL << (MySqlParser::ENABLE - 301))
        | (1ULL << (MySqlParser::ENDS - 301))
        | (1ULL << (MySqlParser::ENGINE - 301))
        | (1ULL << (MySqlParser::ENGINES - 301))
        | (1ULL << (MySqlParser::ERRORS - 301))
        | (1ULL << (MySqlParser::ESCAPE - 301))
        | (1ULL << (MySqlParser::EVEN - 301))
        | (1ULL << (MySqlParser::EVENT - 301))
        | (1ULL << (MySqlParser::EVENTS - 301))
        | (1ULL << (MySqlParser::EVERY - 301))
        | (1ULL << (MySqlParser::EXCHANGE - 301))
        | (1ULL << (MySqlParser::EXCLUSIVE - 301))
        | (1ULL << (MySqlParser::EXPIRE - 301))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 301))
        | (1ULL << (MySqlParser::FIELDS - 301))
        | (1ULL << (MySqlParser::FIRST - 301))
        | (1ULL << (MySqlParser::FIXED - 301))
        | (1ULL << (MySqlParser::FLUSH - 301))
        | (1ULL << (MySqlParser::FULL - 301))
        | (1ULL << (MySqlParser::FUNCTION - 301))
        | (1ULL << (MySqlParser::GLOBAL - 301))
        | (1ULL << (MySqlParser::GRANTS - 301))
        | (1ULL << (MySqlParser::HANDLER - 301))
        | (1ULL << (MySqlParser::HASH - 301))
        | (1ULL << (MySqlParser::HELP - 301))
        | (1ULL << (MySqlParser::HOST - 301))
        | (1ULL << (MySqlParser::IDENTIFIED - 301))
        | (1ULL << (MySqlParser::IMPORT - 301))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 301))
        | (1ULL << (MySqlParser::INPLACE - 301))
        | (1ULL << (MySqlParser::INSERT_METHOD - 301))
        | (1ULL << (MySqlParser::INSTALL - 301))
        | (1ULL << (MySqlParser::INVOKER - 301))
        | (1ULL << (MySqlParser::ISOLATION - 301))
        | (1ULL << (MySqlParser::ISSUER - 301))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 301))
        | (1ULL << (MySqlParser::LANGUAGE - 301))
        | (1ULL << (MySqlParser::LAST - 301))
        | (1ULL << (MySqlParser::LESS - 301)))) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 365)) & ((1ULL << (MySqlParser::LEVEL - 365))
        | (1ULL << (MySqlParser::LIST - 365))
        | (1ULL << (MySqlParser::LOCAL - 365))
        | (1ULL << (MySqlParser::LOGFILE - 365))
        | (1ULL << (MySqlParser::LOGS - 365))
        | (1ULL << (MySqlParser::MASTER - 365))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_ROWS - 365))
        | (1ULL << (MySqlParser::MAX_SIZE - 365))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 365))
        | (1ULL << (MySqlParser::MERGE - 365))
        | (1ULL << (MySqlParser::MID - 365))
        | (1ULL << (MySqlParser::MIN_ROWS - 365))
        | (1ULL << (MySqlParser::MODIFY - 365))
        | (1ULL << (MySqlParser::MUTEX - 365))
        | (1ULL << (MySqlParser::MYSQL - 365))
        | (1ULL << (MySqlParser::NAME - 365))
        | (1ULL << (MySqlParser::NAMES - 365))
        | (1ULL << (MySqlParser::NCHAR - 365))
        | (1ULL << (MySqlParser::NO - 365))
        | (1ULL << (MySqlParser::NODEGROUP - 365))
        | (1ULL << (MySqlParser::NONE - 365))
        | (1ULL << (MySqlParser::OFFLINE - 365))
        | (1ULL << (MySqlParser::OFFSET - 365))
        | (1ULL << (MySqlParser::OJ - 365))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 365))
        | (1ULL << (MySqlParser::ONLINE - 365))
        | (1ULL << (MySqlParser::ONLY - 365))
        | (1ULL << (MySqlParser::OPEN - 365))
        | (1ULL << (MySqlParser::OPTIONS - 365))
        | (1ULL << (MySqlParser::OWNER - 365))
        | (1ULL << (MySqlParser::PACK_KEYS - 365))
        | (1ULL << (MySqlParser::PARSER - 365))
        | (1ULL << (MySqlParser::PARTIAL - 365)))) != 0) || ((((_la - 429) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 429)) & ((1ULL << (MySqlParser::PARTITIONING - 429))
        | (1ULL << (MySqlParser::PARTITIONS - 429))
        | (1ULL << (MySqlParser::PASSWORD - 429))
        | (1ULL << (MySqlParser::PLUGINS - 429))
        | (1ULL << (MySqlParser::PORT - 429))
        | (1ULL << (MySqlParser::PREPARE - 429))
        | (1ULL << (MySqlParser::PRESERVE - 429))
        | (1ULL << (MySqlParser::PROCESSLIST - 429))
        | (1ULL << (MySqlParser::PROFILE - 429))
        | (1ULL << (MySqlParser::PROFILES - 429))
        | (1ULL << (MySqlParser::PROXY - 429))
        | (1ULL << (MySqlParser::QUERY - 429))
        | (1ULL << (MySqlParser::QUICK - 429))
        | (1ULL << (MySqlParser::REBUILD - 429))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 429))
        | (1ULL << (MySqlParser::REDUNDANT - 429))
        | (1ULL << (MySqlParser::RELAYLOG - 429))
        | (1ULL << (MySqlParser::REMOVE - 429))
        | (1ULL << (MySqlParser::REORGANIZE - 429))
        | (1ULL << (MySqlParser::REPAIR - 429))
        | (1ULL << (MySqlParser::REPLICATION - 429))
        | (1ULL << (MySqlParser::RESET - 429))
        | (1ULL << (MySqlParser::RETURNS - 429))
        | (1ULL << (MySqlParser::ROLLBACK - 429))
        | (1ULL << (MySqlParser::ROLLUP - 429))
        | (1ULL << (MySqlParser::ROW - 429))
        | (1ULL << (MySqlParser::ROWS - 429))
        | (1ULL << (MySqlParser::ROW_FORMAT - 429))
        | (1ULL << (MySqlParser::SAVEPOINT - 429))
        | (1ULL << (MySqlParser::SCHEDULE - 429))
        | (1ULL << (MySqlParser::SECURITY - 429))
        | (1ULL << (MySqlParser::SERVER - 429))
        | (1ULL << (MySqlParser::SESSION - 429))
        | (1ULL << (MySqlParser::SHARE - 429))
        | (1ULL << (MySqlParser::SHARED - 429))
        | (1ULL << (MySqlParser::SIGNED - 429))
        | (1ULL << (MySqlParser::SIMPLE - 429))
        | (1ULL << (MySqlParser::SLAVE - 429))
        | (1ULL << (MySqlParser::SNAPSHOT - 429))
        | (1ULL << (MySqlParser::SOCKET - 429))
        | (1ULL << (MySqlParser::SOME - 429))
        | (1ULL << (MySqlParser::SOUNDS - 429)))) != 0) || ((((_la - 495) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 495)) & ((1ULL << (MySqlParser::SQL_BUFFER_RESULT - 495))
        | (1ULL << (MySqlParser::SQL_CACHE - 495))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 495))
        | (1ULL << (MySqlParser::START - 495))
        | (1ULL << (MySqlParser::STARTS - 495))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 495))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 495))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 495))
        | (1ULL << (MySqlParser::STATUS - 495))
        | (1ULL << (MySqlParser::STOP - 495))
        | (1ULL << (MySqlParser::STORAGE - 495))
        | (1ULL << (MySqlParser::SUBJECT - 495))
        | (1ULL << (MySqlParser::SUBPARTITION - 495))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 495))
        | (1ULL << (MySqlParser::TABLESPACE - 495))
        | (1ULL << (MySqlParser::TEMPORARY - 495))
        | (1ULL << (MySqlParser::TEMPTABLE - 495))
        | (1ULL << (MySqlParser::THAN - 495))
        | (1ULL << (MySqlParser::TRANSACTION - 495))
        | (1ULL << (MySqlParser::TRUNCATE - 495))
        | (1ULL << (MySqlParser::UNDEFINED - 495))
        | (1ULL << (MySqlParser::UNDOFILE - 495))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 495))
        | (1ULL << (MySqlParser::UNINSTALL - 495))
        | (1ULL << (MySqlParser::UNKNOWN - 495))
        | (1ULL << (MySqlParser::UPGRADE - 495))
        | (1ULL << (MySqlParser::USER - 495))
        | (1ULL << (MySqlParser::VALUE - 495))
        | (1ULL << (MySqlParser::VARIABLES - 495))
        | (1ULL << (MySqlParser::VIEW - 495))
        | (1ULL << (MySqlParser::WAIT - 495))
        | (1ULL << (MySqlParser::WARNINGS - 495))
        | (1ULL << (MySqlParser::WORK - 495))
        | (1ULL << (MySqlParser::WRAPPER - 495))
        | (1ULL << (MySqlParser::X509 - 495))
        | (1ULL << (MySqlParser::XA - 495))
        | (1ULL << (MySqlParser::XML - 495))
        | (1ULL << (MySqlParser::QUARTER - 495))
        | (1ULL << (MySqlParser::MONTH - 495))
        | (1ULL << (MySqlParser::DAY - 495))
        | (1ULL << (MySqlParser::HOUR - 495))
        | (1ULL << (MySqlParser::MINUTE - 495))
        | (1ULL << (MySqlParser::WEEK - 495))
        | (1ULL << (MySqlParser::SECOND - 495))
        | (1ULL << (MySqlParser::MICROSECOND - 495))
        | (1ULL << (MySqlParser::TABLES - 495))
        | (1ULL << (MySqlParser::ROUTINE - 495)))) != 0) || ((((_la - 559) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 559)) & ((1ULL << (MySqlParser::EXECUTE - 559))
        | (1ULL << (MySqlParser::FILE - 559))
        | (1ULL << (MySqlParser::PROCESS - 559))
        | (1ULL << (MySqlParser::RELOAD - 559))
        | (1ULL << (MySqlParser::SHUTDOWN - 559))
        | (1ULL << (MySqlParser::SUPER - 559))
        | (1ULL << (MySqlParser::PRIVILEGES - 559))
        | (1ULL << (MySqlParser::ARMSCII8 - 559))
        | (1ULL << (MySqlParser::ASCII - 559))
        | (1ULL << (MySqlParser::BIG5 - 559))
        | (1ULL << (MySqlParser::CP1250 - 559))
        | (1ULL << (MySqlParser::CP1251 - 559))
        | (1ULL << (MySqlParser::CP1256 - 559))
        | (1ULL << (MySqlParser::CP1257 - 559))
        | (1ULL << (MySqlParser::CP850 - 559))
        | (1ULL << (MySqlParser::CP852 - 559))
        | (1ULL << (MySqlParser::CP866 - 559))
        | (1ULL << (MySqlParser::CP932 - 559))
        | (1ULL << (MySqlParser::DEC8 - 559))
        | (1ULL << (MySqlParser::EUCJPMS - 559))
        | (1ULL << (MySqlParser::EUCKR - 559))
        | (1ULL << (MySqlParser::GB2312 - 559))
        | (1ULL << (MySqlParser::GBK - 559))
        | (1ULL << (MySqlParser::GEOSTD8 - 559))
        | (1ULL << (MySqlParser::GREEK - 559))
        | (1ULL << (MySqlParser::HEBREW - 559))
        | (1ULL << (MySqlParser::HP8 - 559))
        | (1ULL << (MySqlParser::KEYBCS2 - 559))
        | (1ULL << (MySqlParser::KOI8R - 559))
        | (1ULL << (MySqlParser::KOI8U - 559))
        | (1ULL << (MySqlParser::LATIN1 - 559))
        | (1ULL << (MySqlParser::LATIN2 - 559))
        | (1ULL << (MySqlParser::LATIN5 - 559))
        | (1ULL << (MySqlParser::LATIN7 - 559))
        | (1ULL << (MySqlParser::MACCE - 559))
        | (1ULL << (MySqlParser::MACROMAN - 559))
        | (1ULL << (MySqlParser::SJIS - 559))
        | (1ULL << (MySqlParser::SWE7 - 559))
        | (1ULL << (MySqlParser::TIS620 - 559))
        | (1ULL << (MySqlParser::UCS2 - 559))
        | (1ULL << (MySqlParser::UJIS - 559))
        | (1ULL << (MySqlParser::UTF16 - 559))
        | (1ULL << (MySqlParser::UTF16LE - 559))
        | (1ULL << (MySqlParser::UTF32 - 559))
        | (1ULL << (MySqlParser::UTF8 - 559))
        | (1ULL << (MySqlParser::UTF8MB3 - 559))
        | (1ULL << (MySqlParser::UTF8MB4 - 559))
        | (1ULL << (MySqlParser::ARCHIVE - 559))
        | (1ULL << (MySqlParser::BLACKHOLE - 559))
        | (1ULL << (MySqlParser::CSV - 559))
        | (1ULL << (MySqlParser::FEDERATED - 559))
        | (1ULL << (MySqlParser::INNODB - 559))
        | (1ULL << (MySqlParser::MEMORY - 559))
        | (1ULL << (MySqlParser::MRG_MYISAM - 559))
        | (1ULL << (MySqlParser::MYISAM - 559))
        | (1ULL << (MySqlParser::NDB - 559))
        | (1ULL << (MySqlParser::NDBCLUSTER - 559))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 559))
        | (1ULL << (MySqlParser::REPEATABLE - 559))
        | (1ULL << (MySqlParser::COMMITTED - 559))
        | (1ULL << (MySqlParser::UNCOMMITTED - 559))
        | (1ULL << (MySqlParser::SERIALIZABLE - 559))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 559))
        | (1ULL << (MySqlParser::LINESTRING - 559)))) != 0) || ((((_la - 623) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 623)) & ((1ULL << (MySqlParser::MULTILINESTRING - 623))
        | (1ULL << (MySqlParser::MULTIPOINT - 623))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 623))
        | (1ULL << (MySqlParser::POINT - 623))
        | (1ULL << (MySqlParser::POLYGON - 623))
        | (1ULL << (MySqlParser::ABS - 623))
        | (1ULL << (MySqlParser::ACOS - 623))
        | (1ULL << (MySqlParser::ADDDATE - 623))
        | (1ULL << (MySqlParser::ADDTIME - 623))
        | (1ULL << (MySqlParser::AES_DECRYPT - 623))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 623))
        | (1ULL << (MySqlParser::AREA - 623))
        | (1ULL << (MySqlParser::ASBINARY - 623))
        | (1ULL << (MySqlParser::ASIN - 623))
        | (1ULL << (MySqlParser::ASTEXT - 623))
        | (1ULL << (MySqlParser::ASWKB - 623))
        | (1ULL << (MySqlParser::ASWKT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 623))
        | (1ULL << (MySqlParser::ATAN - 623))
        | (1ULL << (MySqlParser::ATAN2 - 623))
        | (1ULL << (MySqlParser::BENCHMARK - 623))
        | (1ULL << (MySqlParser::BIN - 623))
        | (1ULL << (MySqlParser::BIT_COUNT - 623))
        | (1ULL << (MySqlParser::BIT_LENGTH - 623))
        | (1ULL << (MySqlParser::BUFFER - 623))
        | (1ULL << (MySqlParser::CEIL - 623))
        | (1ULL << (MySqlParser::CEILING - 623))
        | (1ULL << (MySqlParser::CENTROID - 623))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 623))
        | (1ULL << (MySqlParser::CHARSET - 623))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 623))
        | (1ULL << (MySqlParser::COERCIBILITY - 623))
        | (1ULL << (MySqlParser::COLLATION - 623))
        | (1ULL << (MySqlParser::COMPRESS - 623))
        | (1ULL << (MySqlParser::CONCAT - 623))
        | (1ULL << (MySqlParser::CONCAT_WS - 623))
        | (1ULL << (MySqlParser::CONNECTION_ID - 623))
        | (1ULL << (MySqlParser::CONV - 623))
        | (1ULL << (MySqlParser::CONVERT_TZ - 623))
        | (1ULL << (MySqlParser::COS - 623))
        | (1ULL << (MySqlParser::COT - 623))
        | (1ULL << (MySqlParser::CRC32 - 623))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 623))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 623))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 623))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 623))
        | (1ULL << (MySqlParser::CROSSES - 623))
        | (1ULL << (MySqlParser::DATEDIFF - 623))
        | (1ULL << (MySqlParser::DATE_FORMAT - 623))
        | (1ULL << (MySqlParser::DAYNAME - 623))
        | (1ULL << (MySqlParser::DAYOFMONTH - 623))
        | (1ULL << (MySqlParser::DAYOFWEEK - 623))
        | (1ULL << (MySqlParser::DAYOFYEAR - 623))
        | (1ULL << (MySqlParser::DECODE - 623))
        | (1ULL << (MySqlParser::DEGREES - 623))
        | (1ULL << (MySqlParser::DES_DECRYPT - 623))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 623))
        | (1ULL << (MySqlParser::DIMENSION - 623))
        | (1ULL << (MySqlParser::DISJOINT - 623))
        | (1ULL << (MySqlParser::ELT - 623)))) != 0) || ((((_la - 687) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 687)) & ((1ULL << (MySqlParser::ENCODE - 687))
        | (1ULL << (MySqlParser::ENCRYPT - 687))
        | (1ULL << (MySqlParser::ENDPOINT - 687))
        | (1ULL << (MySqlParser::ENVELOPE - 687))
        | (1ULL << (MySqlParser::EQUALS - 687))
        | (1ULL << (MySqlParser::EXP - 687))
        | (1ULL << (MySqlParser::EXPORT_SET - 687))
        | (1ULL << (MySqlParser::EXTERIORRING - 687))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 687))
        | (1ULL << (MySqlParser::FIELD - 687))
        | (1ULL << (MySqlParser::FIND_IN_SET - 687))
        | (1ULL << (MySqlParser::FLOOR - 687))
        | (1ULL << (MySqlParser::FORMAT - 687))
        | (1ULL << (MySqlParser::FOUND_ROWS - 687))
        | (1ULL << (MySqlParser::FROM_BASE64 - 687))
        | (1ULL << (MySqlParser::FROM_DAYS - 687))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 687))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYN - 687))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 687))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 687))
        | (1ULL << (MySqlParser::GET_FORMAT - 687))
        | (1ULL << (MySqlParser::GET_LOCK - 687))
        | (1ULL << (MySqlParser::GLENGTH - 687))
        | (1ULL << (MySqlParser::GREATEST - 687))
        | (1ULL << (MySqlParser::GTID_SUBSET - 687))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 687))
        | (1ULL << (MySqlParser::HEX - 687))
        | (1ULL << (MySqlParser::IFNULL - 687))
        | (1ULL << (MySqlParser::INET6_ATON - 687))
        | (1ULL << (MySqlParser::INET6_NTOA - 687))
        | (1ULL << (MySqlParser::INET_ATON - 687))
        | (1ULL << (MySqlParser::INET_NTOA - 687))
        | (1ULL << (MySqlParser::INSTR - 687))
        | (1ULL << (MySqlParser::INTERIORRINGN - 687))
        | (1ULL << (MySqlParser::INTERSECTS - 687))
        | (1ULL << (MySqlParser::ISCLOSED - 687))
        | (1ULL << (MySqlParser::ISEMPTY - 687))
        | (1ULL << (MySqlParser::ISNULL - 687))
        | (1ULL << (MySqlParser::ISSIMPLE - 687))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 687))
        | (1ULL << (MySqlParser::IS_IPV4 - 687))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 687))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 687))
        | (1ULL << (MySqlParser::IS_IPV6 - 687))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 687))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 687))
        | (1ULL << (MySqlParser::LCASE - 687))
        | (1ULL << (MySqlParser::LEAST - 687))
        | (1ULL << (MySqlParser::LENGTH - 687))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 687))
        | (1ULL << (MySqlParser::LINEFROMWKB - 687))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 687))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 687))
        | (1ULL << (MySqlParser::LN - 687))
        | (1ULL << (MySqlParser::LOAD_FILE - 687))
        | (1ULL << (MySqlParser::LOCATE - 687))
        | (1ULL << (MySqlParser::LOG - 687)))) != 0) || ((((_la - 751) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 751)) & ((1ULL << (MySqlParser::LOG10 - 751))
        | (1ULL << (MySqlParser::LOG2 - 751))
        | (1ULL << (MySqlParser::LOWER - 751))
        | (1ULL << (MySqlParser::LPAD - 751))
        | (1ULL << (MySqlParser::LTRIM - 751))
        | (1ULL << (MySqlParser::MAKEDATE - 751))
        | (1ULL << (MySqlParser::MAKETIME - 751))
        | (1ULL << (MySqlParser::MAKE_SET - 751))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 751))
        | (1ULL << (MySqlParser::MBRCONTAINS - 751))
        | (1ULL << (MySqlParser::MBRDISJOINT - 751))
        | (1ULL << (MySqlParser::MBREQUAL - 751))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 751))
        | (1ULL << (MySqlParser::MBROVERLAPS - 751))
        | (1ULL << (MySqlParser::MBRTOUCHES - 751))
        | (1ULL << (MySqlParser::MBRWITHIN - 751))
        | (1ULL << (MySqlParser::MD5 - 751))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 751))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 751))
        | (1ULL << (MySqlParser::MONTHNAME - 751))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 751))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 751))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 751))
        | (1ULL << (MySqlParser::NAME_CONST - 751))
        | (1ULL << (MySqlParser::NULLIF - 751))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 751))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 751))
        | (1ULL << (MySqlParser::NUMPOINTS - 751))
        | (1ULL << (MySqlParser::OCT - 751))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 751))
        | (1ULL << (MySqlParser::ORD - 751))
        | (1ULL << (MySqlParser::OVERLAPS - 751))
        | (1ULL << (MySqlParser::PERIOD_ADD - 751))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 751))
        | (1ULL << (MySqlParser::PI - 751))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::POINTFROMWKB - 751))
        | (1ULL << (MySqlParser::POINTN - 751))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 751))
        | (1ULL << (MySqlParser::POLYFROMWKB - 751))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 751))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 751))
        | (1ULL << (MySqlParser::POW - 751))
        | (1ULL << (MySqlParser::POWER - 751))
        | (1ULL << (MySqlParser::QUOTE - 751))
        | (1ULL << (MySqlParser::RADIANS - 751))
        | (1ULL << (MySqlParser::RAND - 751))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 751))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 751))
        | (1ULL << (MySqlParser::REVERSE - 751))
        | (1ULL << (MySqlParser::ROUND - 751))
        | (1ULL << (MySqlParser::ROW_COUNT - 751))
        | (1ULL << (MySqlParser::RPAD - 751))
        | (1ULL << (MySqlParser::RTRIM - 751))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 751))
        | (1ULL << (MySqlParser::SESSION_USER - 751))
        | (1ULL << (MySqlParser::SHA - 751)))) != 0) || ((((_la - 815) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 815)) & ((1ULL << (MySqlParser::SHA1 - 815))
        | (1ULL << (MySqlParser::SHA2 - 815))
        | (1ULL << (MySqlParser::SIGN - 815))
        | (1ULL << (MySqlParser::SIN - 815))
        | (1ULL << (MySqlParser::SLEEP - 815))
        | (1ULL << (MySqlParser::SOUNDEX - 815))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 815))
        | (1ULL << (MySqlParser::SQRT - 815))
        | (1ULL << (MySqlParser::SRID - 815))
        | (1ULL << (MySqlParser::STARTPOINT - 815))
        | (1ULL << (MySqlParser::STRCMP - 815))
        | (1ULL << (MySqlParser::STR_TO_DATE - 815))
        | (1ULL << (MySqlParser::ST_AREA - 815))
        | (1ULL << (MySqlParser::ST_ASBINARY - 815))
        | (1ULL << (MySqlParser::ST_ASTEXT - 815))
        | (1ULL << (MySqlParser::ST_ASWKB - 815))
        | (1ULL << (MySqlParser::ST_ASWKT - 815))
        | (1ULL << (MySqlParser::ST_BUFFER - 815))
        | (1ULL << (MySqlParser::ST_CENTROID - 815))
        | (1ULL << (MySqlParser::ST_CONTAINS - 815))
        | (1ULL << (MySqlParser::ST_CROSSES - 815))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 815))
        | (1ULL << (MySqlParser::ST_DIMENSION - 815))
        | (1ULL << (MySqlParser::ST_DISJOINT - 815))
        | (1ULL << (MySqlParser::ST_DISTANCE - 815))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 815))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 815))
        | (1ULL << (MySqlParser::ST_EQUALS - 815))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 815))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 815))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 815))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 815))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 815))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 815))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 815))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 815))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 815))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 815))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 815))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 815))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_POINTN - 815))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_SRID - 815))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 815)))) != 0) || ((((_la - 879) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 879)) & ((1ULL << (MySqlParser::ST_SYMDIFFERENCE - 879))
        | (1ULL << (MySqlParser::ST_TOUCHES - 879))
        | (1ULL << (MySqlParser::ST_UNION - 879))
        | (1ULL << (MySqlParser::ST_WITHIN - 879))
        | (1ULL << (MySqlParser::ST_X - 879))
        | (1ULL << (MySqlParser::ST_Y - 879))
        | (1ULL << (MySqlParser::SUBDATE - 879))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 879))
        | (1ULL << (MySqlParser::SUBTIME - 879))
        | (1ULL << (MySqlParser::SYSTEM_USER - 879))
        | (1ULL << (MySqlParser::TAN - 879))
        | (1ULL << (MySqlParser::TIMEDIFF - 879))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 879))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 879))
        | (1ULL << (MySqlParser::TIME_FORMAT - 879))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 879))
        | (1ULL << (MySqlParser::TOUCHES - 879))
        | (1ULL << (MySqlParser::TO_BASE64 - 879))
        | (1ULL << (MySqlParser::TO_DAYS - 879))
        | (1ULL << (MySqlParser::TO_SECONDS - 879))
        | (1ULL << (MySqlParser::UCASE - 879))
        | (1ULL << (MySqlParser::UNCOMPRESS - 879))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 879))
        | (1ULL << (MySqlParser::UNHEX - 879))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 879))
        | (1ULL << (MySqlParser::UPDATEXML - 879))
        | (1ULL << (MySqlParser::UPPER - 879))
        | (1ULL << (MySqlParser::UUID - 879))
        | (1ULL << (MySqlParser::UUID_SHORT - 879))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 879))
        | (1ULL << (MySqlParser::VERSION - 879))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879))
        | (1ULL << (MySqlParser::WEEKDAY - 879))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 879))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 879))
        | (1ULL << (MySqlParser::WITHIN - 879))
        | (1ULL << (MySqlParser::YEARWEEK - 879))
        | (1ULL << (MySqlParser::Y_FUNCTION - 879))
        | (1ULL << (MySqlParser::X_FUNCTION - 879)))) != 0) || ((((_la - 943) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 943)) & ((1ULL << (MySqlParser::LR_BRACKET - 943))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 943))
        | (1ULL << (MySqlParser::ID - 943))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 943)))) != 0));
      setState(3941);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3948);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ELSE) {
      setState(3942);
      match(MySqlParser::ELSE);
      setState(3944); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3943);
        procedure_sql_statement();
        setState(3946); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 7) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 7)) & ((1ULL << (MySqlParser::ALTER - 7))
        | (1ULL << (MySqlParser::ANALYZE - 7))
        | (1ULL << (MySqlParser::CALL - 7))
        | (1ULL << (MySqlParser::CASE - 7))
        | (1ULL << (MySqlParser::CHANGE - 7))
        | (1ULL << (MySqlParser::CHECK - 7))
        | (1ULL << (MySqlParser::CREATE - 7))
        | (1ULL << (MySqlParser::DELETE - 7))
        | (1ULL << (MySqlParser::DESC - 7))
        | (1ULL << (MySqlParser::DESCRIBE - 7))
        | (1ULL << (MySqlParser::DROP - 7))
        | (1ULL << (MySqlParser::EXPLAIN - 7))
        | (1ULL << (MySqlParser::FETCH - 7))
        | (1ULL << (MySqlParser::GRANT - 7))
        | (1ULL << (MySqlParser::IF - 7)))) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::INSERT - 71))
        | (1ULL << (MySqlParser::ITERATE - 71))
        | (1ULL << (MySqlParser::KILL - 71))
        | (1ULL << (MySqlParser::LEAVE - 71))
        | (1ULL << (MySqlParser::LEFT - 71))
        | (1ULL << (MySqlParser::LOAD - 71))
        | (1ULL << (MySqlParser::LOCK - 71))
        | (1ULL << (MySqlParser::LOOP - 71))
        | (1ULL << (MySqlParser::OPTIMIZE - 71))
        | (1ULL << (MySqlParser::PURGE - 71))
        | (1ULL << (MySqlParser::RELEASE - 71))
        | (1ULL << (MySqlParser::RENAME - 71))
        | (1ULL << (MySqlParser::REPEAT - 71))
        | (1ULL << (MySqlParser::REPLACE - 71))
        | (1ULL << (MySqlParser::RETURN - 71))
        | (1ULL << (MySqlParser::REVOKE - 71))
        | (1ULL << (MySqlParser::RIGHT - 71))
        | (1ULL << (MySqlParser::SELECT - 71))
        | (1ULL << (MySqlParser::SET - 71))
        | (1ULL << (MySqlParser::SHOW - 71)))) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 156)) & ((1ULL << (MySqlParser::UNLOCK - 156))
        | (1ULL << (MySqlParser::UPDATE - 156))
        | (1ULL << (MySqlParser::USE - 156))
        | (1ULL << (MySqlParser::WHILE - 156))
        | (1ULL << (MySqlParser::DATE - 156))
        | (1ULL << (MySqlParser::TIME - 156))
        | (1ULL << (MySqlParser::TIMESTAMP - 156))
        | (1ULL << (MySqlParser::DATETIME - 156))
        | (1ULL << (MySqlParser::YEAR - 156))
        | (1ULL << (MySqlParser::TEXT - 156))
        | (1ULL << (MySqlParser::ENUM - 156))
        | (1ULL << (MySqlParser::COUNT - 156)))) != 0) || ((((_la - 237) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 237)) & ((1ULL << (MySqlParser::POSITION - 237))
        | (1ULL << (MySqlParser::ACTION - 237))
        | (1ULL << (MySqlParser::AFTER - 237))
        | (1ULL << (MySqlParser::ALGORITHM - 237))
        | (1ULL << (MySqlParser::ANY - 237))
        | (1ULL << (MySqlParser::AT - 237))
        | (1ULL << (MySqlParser::AUTHORS - 237))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 237))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 237))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 237))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 237))
        | (1ULL << (MySqlParser::BEGIN - 237))
        | (1ULL << (MySqlParser::BINLOG - 237))
        | (1ULL << (MySqlParser::BIT - 237))
        | (1ULL << (MySqlParser::BTREE - 237))
        | (1ULL << (MySqlParser::CACHE - 237))
        | (1ULL << (MySqlParser::CASCADED - 237))
        | (1ULL << (MySqlParser::CHAIN - 237))
        | (1ULL << (MySqlParser::CHECKSUM - 237))
        | (1ULL << (MySqlParser::CIPHER - 237))
        | (1ULL << (MySqlParser::CLIENT - 237))
        | (1ULL << (MySqlParser::CLOSE - 237))
        | (1ULL << (MySqlParser::COALESCE - 237))
        | (1ULL << (MySqlParser::CODE - 237))
        | (1ULL << (MySqlParser::COLUMNS - 237))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 237))
        | (1ULL << (MySqlParser::COMMENT - 237))
        | (1ULL << (MySqlParser::COMMIT - 237))
        | (1ULL << (MySqlParser::COMPACT - 237))
        | (1ULL << (MySqlParser::COMPLETION - 237))
        | (1ULL << (MySqlParser::COMPRESSED - 237))
        | (1ULL << (MySqlParser::CONCURRENT - 237))
        | (1ULL << (MySqlParser::CONNECTION - 237))
        | (1ULL << (MySqlParser::CONSISTENT - 237))
        | (1ULL << (MySqlParser::CONTAINS - 237))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 237))
        | (1ULL << (MySqlParser::COPY - 237))
        | (1ULL << (MySqlParser::DATA - 237))
        | (1ULL << (MySqlParser::DATAFILE - 237))
        | (1ULL << (MySqlParser::DEALLOCATE - 237))
        | (1ULL << (MySqlParser::DEFINER - 237))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 237))
        | (1ULL << (MySqlParser::DIRECTORY - 237))
        | (1ULL << (MySqlParser::DISABLE - 237))
        | (1ULL << (MySqlParser::DISCARD - 237))
        | (1ULL << (MySqlParser::DISK - 237))
        | (1ULL << (MySqlParser::DO - 237)))) != 0) || ((((_la - 301) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 301)) & ((1ULL << (MySqlParser::DUMPFILE - 301))
        | (1ULL << (MySqlParser::DUPLICATE - 301))
        | (1ULL << (MySqlParser::DYNAMIC - 301))
        | (1ULL << (MySqlParser::ENABLE - 301))
        | (1ULL << (MySqlParser::ENDS - 301))
        | (1ULL << (MySqlParser::ENGINE - 301))
        | (1ULL << (MySqlParser::ENGINES - 301))
        | (1ULL << (MySqlParser::ERRORS - 301))
        | (1ULL << (MySqlParser::ESCAPE - 301))
        | (1ULL << (MySqlParser::EVEN - 301))
        | (1ULL << (MySqlParser::EVENT - 301))
        | (1ULL << (MySqlParser::EVENTS - 301))
        | (1ULL << (MySqlParser::EVERY - 301))
        | (1ULL << (MySqlParser::EXCHANGE - 301))
        | (1ULL << (MySqlParser::EXCLUSIVE - 301))
        | (1ULL << (MySqlParser::EXPIRE - 301))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 301))
        | (1ULL << (MySqlParser::FIELDS - 301))
        | (1ULL << (MySqlParser::FIRST - 301))
        | (1ULL << (MySqlParser::FIXED - 301))
        | (1ULL << (MySqlParser::FLUSH - 301))
        | (1ULL << (MySqlParser::FULL - 301))
        | (1ULL << (MySqlParser::FUNCTION - 301))
        | (1ULL << (MySqlParser::GLOBAL - 301))
        | (1ULL << (MySqlParser::GRANTS - 301))
        | (1ULL << (MySqlParser::HANDLER - 301))
        | (1ULL << (MySqlParser::HASH - 301))
        | (1ULL << (MySqlParser::HELP - 301))
        | (1ULL << (MySqlParser::HOST - 301))
        | (1ULL << (MySqlParser::IDENTIFIED - 301))
        | (1ULL << (MySqlParser::IMPORT - 301))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 301))
        | (1ULL << (MySqlParser::INPLACE - 301))
        | (1ULL << (MySqlParser::INSERT_METHOD - 301))
        | (1ULL << (MySqlParser::INSTALL - 301))
        | (1ULL << (MySqlParser::INVOKER - 301))
        | (1ULL << (MySqlParser::ISOLATION - 301))
        | (1ULL << (MySqlParser::ISSUER - 301))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 301))
        | (1ULL << (MySqlParser::LANGUAGE - 301))
        | (1ULL << (MySqlParser::LAST - 301))
        | (1ULL << (MySqlParser::LESS - 301)))) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 365)) & ((1ULL << (MySqlParser::LEVEL - 365))
        | (1ULL << (MySqlParser::LIST - 365))
        | (1ULL << (MySqlParser::LOCAL - 365))
        | (1ULL << (MySqlParser::LOGFILE - 365))
        | (1ULL << (MySqlParser::LOGS - 365))
        | (1ULL << (MySqlParser::MASTER - 365))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_ROWS - 365))
        | (1ULL << (MySqlParser::MAX_SIZE - 365))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 365))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 365))
        | (1ULL << (MySqlParser::MERGE - 365))
        | (1ULL << (MySqlParser::MID - 365))
        | (1ULL << (MySqlParser::MIN_ROWS - 365))
        | (1ULL << (MySqlParser::MODIFY - 365))
        | (1ULL << (MySqlParser::MUTEX - 365))
        | (1ULL << (MySqlParser::MYSQL - 365))
        | (1ULL << (MySqlParser::NAME - 365))
        | (1ULL << (MySqlParser::NAMES - 365))
        | (1ULL << (MySqlParser::NCHAR - 365))
        | (1ULL << (MySqlParser::NO - 365))
        | (1ULL << (MySqlParser::NODEGROUP - 365))
        | (1ULL << (MySqlParser::NONE - 365))
        | (1ULL << (MySqlParser::OFFLINE - 365))
        | (1ULL << (MySqlParser::OFFSET - 365))
        | (1ULL << (MySqlParser::OJ - 365))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 365))
        | (1ULL << (MySqlParser::ONLINE - 365))
        | (1ULL << (MySqlParser::ONLY - 365))
        | (1ULL << (MySqlParser::OPEN - 365))
        | (1ULL << (MySqlParser::OPTIONS - 365))
        | (1ULL << (MySqlParser::OWNER - 365))
        | (1ULL << (MySqlParser::PACK_KEYS - 365))
        | (1ULL << (MySqlParser::PARSER - 365))
        | (1ULL << (MySqlParser::PARTIAL - 365)))) != 0) || ((((_la - 429) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 429)) & ((1ULL << (MySqlParser::PARTITIONING - 429))
        | (1ULL << (MySqlParser::PARTITIONS - 429))
        | (1ULL << (MySqlParser::PASSWORD - 429))
        | (1ULL << (MySqlParser::PLUGINS - 429))
        | (1ULL << (MySqlParser::PORT - 429))
        | (1ULL << (MySqlParser::PREPARE - 429))
        | (1ULL << (MySqlParser::PRESERVE - 429))
        | (1ULL << (MySqlParser::PROCESSLIST - 429))
        | (1ULL << (MySqlParser::PROFILE - 429))
        | (1ULL << (MySqlParser::PROFILES - 429))
        | (1ULL << (MySqlParser::PROXY - 429))
        | (1ULL << (MySqlParser::QUERY - 429))
        | (1ULL << (MySqlParser::QUICK - 429))
        | (1ULL << (MySqlParser::REBUILD - 429))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 429))
        | (1ULL << (MySqlParser::REDUNDANT - 429))
        | (1ULL << (MySqlParser::RELAYLOG - 429))
        | (1ULL << (MySqlParser::REMOVE - 429))
        | (1ULL << (MySqlParser::REORGANIZE - 429))
        | (1ULL << (MySqlParser::REPAIR - 429))
        | (1ULL << (MySqlParser::REPLICATION - 429))
        | (1ULL << (MySqlParser::RESET - 429))
        | (1ULL << (MySqlParser::RETURNS - 429))
        | (1ULL << (MySqlParser::ROLLBACK - 429))
        | (1ULL << (MySqlParser::ROLLUP - 429))
        | (1ULL << (MySqlParser::ROW - 429))
        | (1ULL << (MySqlParser::ROWS - 429))
        | (1ULL << (MySqlParser::ROW_FORMAT - 429))
        | (1ULL << (MySqlParser::SAVEPOINT - 429))
        | (1ULL << (MySqlParser::SCHEDULE - 429))
        | (1ULL << (MySqlParser::SECURITY - 429))
        | (1ULL << (MySqlParser::SERVER - 429))
        | (1ULL << (MySqlParser::SESSION - 429))
        | (1ULL << (MySqlParser::SHARE - 429))
        | (1ULL << (MySqlParser::SHARED - 429))
        | (1ULL << (MySqlParser::SIGNED - 429))
        | (1ULL << (MySqlParser::SIMPLE - 429))
        | (1ULL << (MySqlParser::SLAVE - 429))
        | (1ULL << (MySqlParser::SNAPSHOT - 429))
        | (1ULL << (MySqlParser::SOCKET - 429))
        | (1ULL << (MySqlParser::SOME - 429))
        | (1ULL << (MySqlParser::SOUNDS - 429)))) != 0) || ((((_la - 495) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 495)) & ((1ULL << (MySqlParser::SQL_BUFFER_RESULT - 495))
        | (1ULL << (MySqlParser::SQL_CACHE - 495))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 495))
        | (1ULL << (MySqlParser::START - 495))
        | (1ULL << (MySqlParser::STARTS - 495))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 495))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 495))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 495))
        | (1ULL << (MySqlParser::STATUS - 495))
        | (1ULL << (MySqlParser::STOP - 495))
        | (1ULL << (MySqlParser::STORAGE - 495))
        | (1ULL << (MySqlParser::SUBJECT - 495))
        | (1ULL << (MySqlParser::SUBPARTITION - 495))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 495))
        | (1ULL << (MySqlParser::TABLESPACE - 495))
        | (1ULL << (MySqlParser::TEMPORARY - 495))
        | (1ULL << (MySqlParser::TEMPTABLE - 495))
        | (1ULL << (MySqlParser::THAN - 495))
        | (1ULL << (MySqlParser::TRANSACTION - 495))
        | (1ULL << (MySqlParser::TRUNCATE - 495))
        | (1ULL << (MySqlParser::UNDEFINED - 495))
        | (1ULL << (MySqlParser::UNDOFILE - 495))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 495))
        | (1ULL << (MySqlParser::UNINSTALL - 495))
        | (1ULL << (MySqlParser::UNKNOWN - 495))
        | (1ULL << (MySqlParser::UPGRADE - 495))
        | (1ULL << (MySqlParser::USER - 495))
        | (1ULL << (MySqlParser::VALUE - 495))
        | (1ULL << (MySqlParser::VARIABLES - 495))
        | (1ULL << (MySqlParser::VIEW - 495))
        | (1ULL << (MySqlParser::WAIT - 495))
        | (1ULL << (MySqlParser::WARNINGS - 495))
        | (1ULL << (MySqlParser::WORK - 495))
        | (1ULL << (MySqlParser::WRAPPER - 495))
        | (1ULL << (MySqlParser::X509 - 495))
        | (1ULL << (MySqlParser::XA - 495))
        | (1ULL << (MySqlParser::XML - 495))
        | (1ULL << (MySqlParser::QUARTER - 495))
        | (1ULL << (MySqlParser::MONTH - 495))
        | (1ULL << (MySqlParser::DAY - 495))
        | (1ULL << (MySqlParser::HOUR - 495))
        | (1ULL << (MySqlParser::MINUTE - 495))
        | (1ULL << (MySqlParser::WEEK - 495))
        | (1ULL << (MySqlParser::SECOND - 495))
        | (1ULL << (MySqlParser::MICROSECOND - 495))
        | (1ULL << (MySqlParser::TABLES - 495))
        | (1ULL << (MySqlParser::ROUTINE - 495)))) != 0) || ((((_la - 559) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 559)) & ((1ULL << (MySqlParser::EXECUTE - 559))
        | (1ULL << (MySqlParser::FILE - 559))
        | (1ULL << (MySqlParser::PROCESS - 559))
        | (1ULL << (MySqlParser::RELOAD - 559))
        | (1ULL << (MySqlParser::SHUTDOWN - 559))
        | (1ULL << (MySqlParser::SUPER - 559))
        | (1ULL << (MySqlParser::PRIVILEGES - 559))
        | (1ULL << (MySqlParser::ARMSCII8 - 559))
        | (1ULL << (MySqlParser::ASCII - 559))
        | (1ULL << (MySqlParser::BIG5 - 559))
        | (1ULL << (MySqlParser::CP1250 - 559))
        | (1ULL << (MySqlParser::CP1251 - 559))
        | (1ULL << (MySqlParser::CP1256 - 559))
        | (1ULL << (MySqlParser::CP1257 - 559))
        | (1ULL << (MySqlParser::CP850 - 559))
        | (1ULL << (MySqlParser::CP852 - 559))
        | (1ULL << (MySqlParser::CP866 - 559))
        | (1ULL << (MySqlParser::CP932 - 559))
        | (1ULL << (MySqlParser::DEC8 - 559))
        | (1ULL << (MySqlParser::EUCJPMS - 559))
        | (1ULL << (MySqlParser::EUCKR - 559))
        | (1ULL << (MySqlParser::GB2312 - 559))
        | (1ULL << (MySqlParser::GBK - 559))
        | (1ULL << (MySqlParser::GEOSTD8 - 559))
        | (1ULL << (MySqlParser::GREEK - 559))
        | (1ULL << (MySqlParser::HEBREW - 559))
        | (1ULL << (MySqlParser::HP8 - 559))
        | (1ULL << (MySqlParser::KEYBCS2 - 559))
        | (1ULL << (MySqlParser::KOI8R - 559))
        | (1ULL << (MySqlParser::KOI8U - 559))
        | (1ULL << (MySqlParser::LATIN1 - 559))
        | (1ULL << (MySqlParser::LATIN2 - 559))
        | (1ULL << (MySqlParser::LATIN5 - 559))
        | (1ULL << (MySqlParser::LATIN7 - 559))
        | (1ULL << (MySqlParser::MACCE - 559))
        | (1ULL << (MySqlParser::MACROMAN - 559))
        | (1ULL << (MySqlParser::SJIS - 559))
        | (1ULL << (MySqlParser::SWE7 - 559))
        | (1ULL << (MySqlParser::TIS620 - 559))
        | (1ULL << (MySqlParser::UCS2 - 559))
        | (1ULL << (MySqlParser::UJIS - 559))
        | (1ULL << (MySqlParser::UTF16 - 559))
        | (1ULL << (MySqlParser::UTF16LE - 559))
        | (1ULL << (MySqlParser::UTF32 - 559))
        | (1ULL << (MySqlParser::UTF8 - 559))
        | (1ULL << (MySqlParser::UTF8MB3 - 559))
        | (1ULL << (MySqlParser::UTF8MB4 - 559))
        | (1ULL << (MySqlParser::ARCHIVE - 559))
        | (1ULL << (MySqlParser::BLACKHOLE - 559))
        | (1ULL << (MySqlParser::CSV - 559))
        | (1ULL << (MySqlParser::FEDERATED - 559))
        | (1ULL << (MySqlParser::INNODB - 559))
        | (1ULL << (MySqlParser::MEMORY - 559))
        | (1ULL << (MySqlParser::MRG_MYISAM - 559))
        | (1ULL << (MySqlParser::MYISAM - 559))
        | (1ULL << (MySqlParser::NDB - 559))
        | (1ULL << (MySqlParser::NDBCLUSTER - 559))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 559))
        | (1ULL << (MySqlParser::REPEATABLE - 559))
        | (1ULL << (MySqlParser::COMMITTED - 559))
        | (1ULL << (MySqlParser::UNCOMMITTED - 559))
        | (1ULL << (MySqlParser::SERIALIZABLE - 559))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 559))
        | (1ULL << (MySqlParser::LINESTRING - 559)))) != 0) || ((((_la - 623) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 623)) & ((1ULL << (MySqlParser::MULTILINESTRING - 623))
        | (1ULL << (MySqlParser::MULTIPOINT - 623))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 623))
        | (1ULL << (MySqlParser::POINT - 623))
        | (1ULL << (MySqlParser::POLYGON - 623))
        | (1ULL << (MySqlParser::ABS - 623))
        | (1ULL << (MySqlParser::ACOS - 623))
        | (1ULL << (MySqlParser::ADDDATE - 623))
        | (1ULL << (MySqlParser::ADDTIME - 623))
        | (1ULL << (MySqlParser::AES_DECRYPT - 623))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 623))
        | (1ULL << (MySqlParser::AREA - 623))
        | (1ULL << (MySqlParser::ASBINARY - 623))
        | (1ULL << (MySqlParser::ASIN - 623))
        | (1ULL << (MySqlParser::ASTEXT - 623))
        | (1ULL << (MySqlParser::ASWKB - 623))
        | (1ULL << (MySqlParser::ASWKT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 623))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 623))
        | (1ULL << (MySqlParser::ATAN - 623))
        | (1ULL << (MySqlParser::ATAN2 - 623))
        | (1ULL << (MySqlParser::BENCHMARK - 623))
        | (1ULL << (MySqlParser::BIN - 623))
        | (1ULL << (MySqlParser::BIT_COUNT - 623))
        | (1ULL << (MySqlParser::BIT_LENGTH - 623))
        | (1ULL << (MySqlParser::BUFFER - 623))
        | (1ULL << (MySqlParser::CEIL - 623))
        | (1ULL << (MySqlParser::CEILING - 623))
        | (1ULL << (MySqlParser::CENTROID - 623))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 623))
        | (1ULL << (MySqlParser::CHARSET - 623))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 623))
        | (1ULL << (MySqlParser::COERCIBILITY - 623))
        | (1ULL << (MySqlParser::COLLATION - 623))
        | (1ULL << (MySqlParser::COMPRESS - 623))
        | (1ULL << (MySqlParser::CONCAT - 623))
        | (1ULL << (MySqlParser::CONCAT_WS - 623))
        | (1ULL << (MySqlParser::CONNECTION_ID - 623))
        | (1ULL << (MySqlParser::CONV - 623))
        | (1ULL << (MySqlParser::CONVERT_TZ - 623))
        | (1ULL << (MySqlParser::COS - 623))
        | (1ULL << (MySqlParser::COT - 623))
        | (1ULL << (MySqlParser::CRC32 - 623))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 623))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 623))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 623))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 623))
        | (1ULL << (MySqlParser::CROSSES - 623))
        | (1ULL << (MySqlParser::DATEDIFF - 623))
        | (1ULL << (MySqlParser::DATE_FORMAT - 623))
        | (1ULL << (MySqlParser::DAYNAME - 623))
        | (1ULL << (MySqlParser::DAYOFMONTH - 623))
        | (1ULL << (MySqlParser::DAYOFWEEK - 623))
        | (1ULL << (MySqlParser::DAYOFYEAR - 623))
        | (1ULL << (MySqlParser::DECODE - 623))
        | (1ULL << (MySqlParser::DEGREES - 623))
        | (1ULL << (MySqlParser::DES_DECRYPT - 623))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 623))
        | (1ULL << (MySqlParser::DIMENSION - 623))
        | (1ULL << (MySqlParser::DISJOINT - 623))
        | (1ULL << (MySqlParser::ELT - 623)))) != 0) || ((((_la - 687) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 687)) & ((1ULL << (MySqlParser::ENCODE - 687))
        | (1ULL << (MySqlParser::ENCRYPT - 687))
        | (1ULL << (MySqlParser::ENDPOINT - 687))
        | (1ULL << (MySqlParser::ENVELOPE - 687))
        | (1ULL << (MySqlParser::EQUALS - 687))
        | (1ULL << (MySqlParser::EXP - 687))
        | (1ULL << (MySqlParser::EXPORT_SET - 687))
        | (1ULL << (MySqlParser::EXTERIORRING - 687))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 687))
        | (1ULL << (MySqlParser::FIELD - 687))
        | (1ULL << (MySqlParser::FIND_IN_SET - 687))
        | (1ULL << (MySqlParser::FLOOR - 687))
        | (1ULL << (MySqlParser::FORMAT - 687))
        | (1ULL << (MySqlParser::FOUND_ROWS - 687))
        | (1ULL << (MySqlParser::FROM_BASE64 - 687))
        | (1ULL << (MySqlParser::FROM_DAYS - 687))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 687))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 687))
        | (1ULL << (MySqlParser::GEOMETRYN - 687))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 687))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 687))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 687))
        | (1ULL << (MySqlParser::GET_FORMAT - 687))
        | (1ULL << (MySqlParser::GET_LOCK - 687))
        | (1ULL << (MySqlParser::GLENGTH - 687))
        | (1ULL << (MySqlParser::GREATEST - 687))
        | (1ULL << (MySqlParser::GTID_SUBSET - 687))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 687))
        | (1ULL << (MySqlParser::HEX - 687))
        | (1ULL << (MySqlParser::IFNULL - 687))
        | (1ULL << (MySqlParser::INET6_ATON - 687))
        | (1ULL << (MySqlParser::INET6_NTOA - 687))
        | (1ULL << (MySqlParser::INET_ATON - 687))
        | (1ULL << (MySqlParser::INET_NTOA - 687))
        | (1ULL << (MySqlParser::INSTR - 687))
        | (1ULL << (MySqlParser::INTERIORRINGN - 687))
        | (1ULL << (MySqlParser::INTERSECTS - 687))
        | (1ULL << (MySqlParser::ISCLOSED - 687))
        | (1ULL << (MySqlParser::ISEMPTY - 687))
        | (1ULL << (MySqlParser::ISNULL - 687))
        | (1ULL << (MySqlParser::ISSIMPLE - 687))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 687))
        | (1ULL << (MySqlParser::IS_IPV4 - 687))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 687))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 687))
        | (1ULL << (MySqlParser::IS_IPV6 - 687))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 687))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 687))
        | (1ULL << (MySqlParser::LCASE - 687))
        | (1ULL << (MySqlParser::LEAST - 687))
        | (1ULL << (MySqlParser::LENGTH - 687))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 687))
        | (1ULL << (MySqlParser::LINEFROMWKB - 687))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 687))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 687))
        | (1ULL << (MySqlParser::LN - 687))
        | (1ULL << (MySqlParser::LOAD_FILE - 687))
        | (1ULL << (MySqlParser::LOCATE - 687))
        | (1ULL << (MySqlParser::LOG - 687)))) != 0) || ((((_la - 751) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 751)) & ((1ULL << (MySqlParser::LOG10 - 751))
        | (1ULL << (MySqlParser::LOG2 - 751))
        | (1ULL << (MySqlParser::LOWER - 751))
        | (1ULL << (MySqlParser::LPAD - 751))
        | (1ULL << (MySqlParser::LTRIM - 751))
        | (1ULL << (MySqlParser::MAKEDATE - 751))
        | (1ULL << (MySqlParser::MAKETIME - 751))
        | (1ULL << (MySqlParser::MAKE_SET - 751))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 751))
        | (1ULL << (MySqlParser::MBRCONTAINS - 751))
        | (1ULL << (MySqlParser::MBRDISJOINT - 751))
        | (1ULL << (MySqlParser::MBREQUAL - 751))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 751))
        | (1ULL << (MySqlParser::MBROVERLAPS - 751))
        | (1ULL << (MySqlParser::MBRTOUCHES - 751))
        | (1ULL << (MySqlParser::MBRWITHIN - 751))
        | (1ULL << (MySqlParser::MD5 - 751))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 751))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 751))
        | (1ULL << (MySqlParser::MONTHNAME - 751))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 751))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 751))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 751))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 751))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 751))
        | (1ULL << (MySqlParser::NAME_CONST - 751))
        | (1ULL << (MySqlParser::NULLIF - 751))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 751))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 751))
        | (1ULL << (MySqlParser::NUMPOINTS - 751))
        | (1ULL << (MySqlParser::OCT - 751))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 751))
        | (1ULL << (MySqlParser::ORD - 751))
        | (1ULL << (MySqlParser::OVERLAPS - 751))
        | (1ULL << (MySqlParser::PERIOD_ADD - 751))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 751))
        | (1ULL << (MySqlParser::PI - 751))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 751))
        | (1ULL << (MySqlParser::POINTFROMWKB - 751))
        | (1ULL << (MySqlParser::POINTN - 751))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 751))
        | (1ULL << (MySqlParser::POLYFROMWKB - 751))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 751))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 751))
        | (1ULL << (MySqlParser::POW - 751))
        | (1ULL << (MySqlParser::POWER - 751))
        | (1ULL << (MySqlParser::QUOTE - 751))
        | (1ULL << (MySqlParser::RADIANS - 751))
        | (1ULL << (MySqlParser::RAND - 751))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 751))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 751))
        | (1ULL << (MySqlParser::REVERSE - 751))
        | (1ULL << (MySqlParser::ROUND - 751))
        | (1ULL << (MySqlParser::ROW_COUNT - 751))
        | (1ULL << (MySqlParser::RPAD - 751))
        | (1ULL << (MySqlParser::RTRIM - 751))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 751))
        | (1ULL << (MySqlParser::SESSION_USER - 751))
        | (1ULL << (MySqlParser::SHA - 751)))) != 0) || ((((_la - 815) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 815)) & ((1ULL << (MySqlParser::SHA1 - 815))
        | (1ULL << (MySqlParser::SHA2 - 815))
        | (1ULL << (MySqlParser::SIGN - 815))
        | (1ULL << (MySqlParser::SIN - 815))
        | (1ULL << (MySqlParser::SLEEP - 815))
        | (1ULL << (MySqlParser::SOUNDEX - 815))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 815))
        | (1ULL << (MySqlParser::SQRT - 815))
        | (1ULL << (MySqlParser::SRID - 815))
        | (1ULL << (MySqlParser::STARTPOINT - 815))
        | (1ULL << (MySqlParser::STRCMP - 815))
        | (1ULL << (MySqlParser::STR_TO_DATE - 815))
        | (1ULL << (MySqlParser::ST_AREA - 815))
        | (1ULL << (MySqlParser::ST_ASBINARY - 815))
        | (1ULL << (MySqlParser::ST_ASTEXT - 815))
        | (1ULL << (MySqlParser::ST_ASWKB - 815))
        | (1ULL << (MySqlParser::ST_ASWKT - 815))
        | (1ULL << (MySqlParser::ST_BUFFER - 815))
        | (1ULL << (MySqlParser::ST_CENTROID - 815))
        | (1ULL << (MySqlParser::ST_CONTAINS - 815))
        | (1ULL << (MySqlParser::ST_CROSSES - 815))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 815))
        | (1ULL << (MySqlParser::ST_DIMENSION - 815))
        | (1ULL << (MySqlParser::ST_DISJOINT - 815))
        | (1ULL << (MySqlParser::ST_DISTANCE - 815))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 815))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 815))
        | (1ULL << (MySqlParser::ST_EQUALS - 815))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 815))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 815))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 815))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 815))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 815))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 815))
        | (1ULL << (MySqlParser::ST_ISEMPTY - 815))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 815))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 815))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 815))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 815))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 815))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 815))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_POINTN - 815))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 815))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 815))
        | (1ULL << (MySqlParser::ST_SRID - 815))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 815)))) != 0) || ((((_la - 879) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 879)) & ((1ULL << (MySqlParser::ST_SYMDIFFERENCE - 879))
        | (1ULL << (MySqlParser::ST_TOUCHES - 879))
        | (1ULL << (MySqlParser::ST_UNION - 879))
        | (1ULL << (MySqlParser::ST_WITHIN - 879))
        | (1ULL << (MySqlParser::ST_X - 879))
        | (1ULL << (MySqlParser::ST_Y - 879))
        | (1ULL << (MySqlParser::SUBDATE - 879))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 879))
        | (1ULL << (MySqlParser::SUBTIME - 879))
        | (1ULL << (MySqlParser::SYSTEM_USER - 879))
        | (1ULL << (MySqlParser::TAN - 879))
        | (1ULL << (MySqlParser::TIMEDIFF - 879))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 879))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 879))
        | (1ULL << (MySqlParser::TIME_FORMAT - 879))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 879))
        | (1ULL << (MySqlParser::TOUCHES - 879))
        | (1ULL << (MySqlParser::TO_BASE64 - 879))
        | (1ULL << (MySqlParser::TO_DAYS - 879))
        | (1ULL << (MySqlParser::TO_SECONDS - 879))
        | (1ULL << (MySqlParser::UCASE - 879))
        | (1ULL << (MySqlParser::UNCOMPRESS - 879))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 879))
        | (1ULL << (MySqlParser::UNHEX - 879))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 879))
        | (1ULL << (MySqlParser::UPDATEXML - 879))
        | (1ULL << (MySqlParser::UPPER - 879))
        | (1ULL << (MySqlParser::UUID - 879))
        | (1ULL << (MySqlParser::UUID_SHORT - 879))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 879))
        | (1ULL << (MySqlParser::VERSION - 879))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879))
        | (1ULL << (MySqlParser::WEEKDAY - 879))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 879))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 879))
        | (1ULL << (MySqlParser::WITHIN - 879))
        | (1ULL << (MySqlParser::YEARWEEK - 879))
        | (1ULL << (MySqlParser::Y_FUNCTION - 879))
        | (1ULL << (MySqlParser::X_FUNCTION - 879)))) != 0) || ((((_la - 943) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 943)) & ((1ULL << (MySqlParser::LR_BRACKET - 943))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 943))
        | (1ULL << (MySqlParser::ID - 943))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 943)))) != 0));
    }
    setState(3950);
    match(MySqlParser::END);
    setState(3951);
    match(MySqlParser::IF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Iterate_statementContext ------------------------------------------------------------------

MySqlParser::Iterate_statementContext::Iterate_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Iterate_statementContext::ITERATE() {
  return getToken(MySqlParser::ITERATE, 0);
}

MySqlParser::Id_Context* MySqlParser::Iterate_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}


size_t MySqlParser::Iterate_statementContext::getRuleIndex() const {
  return MySqlParser::RuleIterate_statement;
}

void MySqlParser::Iterate_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIterate_statement(this);
}

void MySqlParser::Iterate_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIterate_statement(this);
}

MySqlParser::Iterate_statementContext* MySqlParser::iterate_statement() {
  Iterate_statementContext *_localctx = _tracker.createInstance<Iterate_statementContext>(_ctx, getState());
  enterRule(_localctx, 330, MySqlParser::RuleIterate_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3953);
    match(MySqlParser::ITERATE);
    setState(3954);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Leave_statementContext ------------------------------------------------------------------

MySqlParser::Leave_statementContext::Leave_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Leave_statementContext::LEAVE() {
  return getToken(MySqlParser::LEAVE, 0);
}

MySqlParser::Id_Context* MySqlParser::Leave_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}


size_t MySqlParser::Leave_statementContext::getRuleIndex() const {
  return MySqlParser::RuleLeave_statement;
}

void MySqlParser::Leave_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeave_statement(this);
}

void MySqlParser::Leave_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeave_statement(this);
}

MySqlParser::Leave_statementContext* MySqlParser::leave_statement() {
  Leave_statementContext *_localctx = _tracker.createInstance<Leave_statementContext>(_ctx, getState());
  enterRule(_localctx, 332, MySqlParser::RuleLeave_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3956);
    match(MySqlParser::LEAVE);
    setState(3957);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Loop_statementContext ------------------------------------------------------------------

MySqlParser::Loop_statementContext::Loop_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::Loop_statementContext::LOOP() {
  return getTokens(MySqlParser::LOOP);
}

tree::TerminalNode* MySqlParser::Loop_statementContext::LOOP(size_t i) {
  return getToken(MySqlParser::LOOP, i);
}

tree::TerminalNode* MySqlParser::Loop_statementContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::Loop_statementContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::Loop_statementContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

std::vector<MySqlParser::Procedure_sql_statementContext *> MySqlParser::Loop_statementContext::procedure_sql_statement() {
  return getRuleContexts<MySqlParser::Procedure_sql_statementContext>();
}

MySqlParser::Procedure_sql_statementContext* MySqlParser::Loop_statementContext::procedure_sql_statement(size_t i) {
  return getRuleContext<MySqlParser::Procedure_sql_statementContext>(i);
}


size_t MySqlParser::Loop_statementContext::getRuleIndex() const {
  return MySqlParser::RuleLoop_statement;
}

void MySqlParser::Loop_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoop_statement(this);
}

void MySqlParser::Loop_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoop_statement(this);
}

MySqlParser::Loop_statementContext* MySqlParser::loop_statement() {
  Loop_statementContext *_localctx = _tracker.createInstance<Loop_statementContext>(_ctx, getState());
  enterRule(_localctx, 334, MySqlParser::RuleLoop_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3962);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519))
      | (1ULL << (MySqlParser::QUARTER - 519))
      | (1ULL << (MySqlParser::MONTH - 519))
      | (1ULL << (MySqlParser::DAY - 519))
      | (1ULL << (MySqlParser::HOUR - 519))
      | (1ULL << (MySqlParser::MINUTE - 519))
      | (1ULL << (MySqlParser::WEEK - 519))
      | (1ULL << (MySqlParser::SECOND - 519))
      | (1ULL << (MySqlParser::MICROSECOND - 519))
      | (1ULL << (MySqlParser::TABLES - 519))
      | (1ULL << (MySqlParser::ROUTINE - 519))
      | (1ULL << (MySqlParser::EXECUTE - 519))
      | (1ULL << (MySqlParser::FILE - 519))
      | (1ULL << (MySqlParser::PROCESS - 519))
      | (1ULL << (MySqlParser::RELOAD - 519))
      | (1ULL << (MySqlParser::SHUTDOWN - 519))
      | (1ULL << (MySqlParser::SUPER - 519))
      | (1ULL << (MySqlParser::PRIVILEGES - 519))
      | (1ULL << (MySqlParser::ARMSCII8 - 519))
      | (1ULL << (MySqlParser::ASCII - 519))
      | (1ULL << (MySqlParser::BIG5 - 519))
      | (1ULL << (MySqlParser::CP1250 - 519))
      | (1ULL << (MySqlParser::CP1251 - 519))
      | (1ULL << (MySqlParser::CP1256 - 519))
      | (1ULL << (MySqlParser::CP1257 - 519))
      | (1ULL << (MySqlParser::CP850 - 519))
      | (1ULL << (MySqlParser::CP852 - 519))
      | (1ULL << (MySqlParser::CP866 - 519))
      | (1ULL << (MySqlParser::CP932 - 519))
      | (1ULL << (MySqlParser::DEC8 - 519))
      | (1ULL << (MySqlParser::EUCJPMS - 519))
      | (1ULL << (MySqlParser::EUCKR - 519))
      | (1ULL << (MySqlParser::GB2312 - 519))
      | (1ULL << (MySqlParser::GBK - 519))
      | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
      | (1ULL << (MySqlParser::HEBREW - 583))
      | (1ULL << (MySqlParser::HP8 - 583))
      | (1ULL << (MySqlParser::KEYBCS2 - 583))
      | (1ULL << (MySqlParser::KOI8R - 583))
      | (1ULL << (MySqlParser::KOI8U - 583))
      | (1ULL << (MySqlParser::LATIN1 - 583))
      | (1ULL << (MySqlParser::LATIN2 - 583))
      | (1ULL << (MySqlParser::LATIN5 - 583))
      | (1ULL << (MySqlParser::LATIN7 - 583))
      | (1ULL << (MySqlParser::MACCE - 583))
      | (1ULL << (MySqlParser::MACROMAN - 583))
      | (1ULL << (MySqlParser::SJIS - 583))
      | (1ULL << (MySqlParser::SWE7 - 583))
      | (1ULL << (MySqlParser::TIS620 - 583))
      | (1ULL << (MySqlParser::UCS2 - 583))
      | (1ULL << (MySqlParser::UJIS - 583))
      | (1ULL << (MySqlParser::UTF16 - 583))
      | (1ULL << (MySqlParser::UTF16LE - 583))
      | (1ULL << (MySqlParser::UTF32 - 583))
      | (1ULL << (MySqlParser::UTF8 - 583))
      | (1ULL << (MySqlParser::UTF8MB3 - 583))
      | (1ULL << (MySqlParser::UTF8MB4 - 583))
      | (1ULL << (MySqlParser::ARCHIVE - 583))
      | (1ULL << (MySqlParser::BLACKHOLE - 583))
      | (1ULL << (MySqlParser::CSV - 583))
      | (1ULL << (MySqlParser::FEDERATED - 583))
      | (1ULL << (MySqlParser::INNODB - 583))
      | (1ULL << (MySqlParser::MEMORY - 583))
      | (1ULL << (MySqlParser::MRG_MYISAM - 583))
      | (1ULL << (MySqlParser::MYISAM - 583))
      | (1ULL << (MySqlParser::NDB - 583))
      | (1ULL << (MySqlParser::NDBCLUSTER - 583))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
      | (1ULL << (MySqlParser::REPEATABLE - 583))
      | (1ULL << (MySqlParser::COMMITTED - 583))
      | (1ULL << (MySqlParser::UNCOMMITTED - 583))
      | (1ULL << (MySqlParser::SERIALIZABLE - 583))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
      | (1ULL << (MySqlParser::LINESTRING - 583))
      | (1ULL << (MySqlParser::MULTILINESTRING - 583))
      | (1ULL << (MySqlParser::MULTIPOINT - 583))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
      | (1ULL << (MySqlParser::POINT - 583))
      | (1ULL << (MySqlParser::POLYGON - 583))
      | (1ULL << (MySqlParser::ABS - 583))
      | (1ULL << (MySqlParser::ACOS - 583))
      | (1ULL << (MySqlParser::ADDDATE - 583))
      | (1ULL << (MySqlParser::ADDTIME - 583))
      | (1ULL << (MySqlParser::AES_DECRYPT - 583))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
      | (1ULL << (MySqlParser::AREA - 583))
      | (1ULL << (MySqlParser::ASBINARY - 583))
      | (1ULL << (MySqlParser::ASIN - 583))
      | (1ULL << (MySqlParser::ASTEXT - 583))
      | (1ULL << (MySqlParser::ASWKB - 583))
      | (1ULL << (MySqlParser::ASWKT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
      | (1ULL << (MySqlParser::ATAN - 583))
      | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
      | (1ULL << (MySqlParser::BIN - 647))
      | (1ULL << (MySqlParser::BIT_COUNT - 647))
      | (1ULL << (MySqlParser::BIT_LENGTH - 647))
      | (1ULL << (MySqlParser::BUFFER - 647))
      | (1ULL << (MySqlParser::CEIL - 647))
      | (1ULL << (MySqlParser::CEILING - 647))
      | (1ULL << (MySqlParser::CENTROID - 647))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
      | (1ULL << (MySqlParser::CHARSET - 647))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
      | (1ULL << (MySqlParser::COERCIBILITY - 647))
      | (1ULL << (MySqlParser::COLLATION - 647))
      | (1ULL << (MySqlParser::COMPRESS - 647))
      | (1ULL << (MySqlParser::CONCAT - 647))
      | (1ULL << (MySqlParser::CONCAT_WS - 647))
      | (1ULL << (MySqlParser::CONNECTION_ID - 647))
      | (1ULL << (MySqlParser::CONV - 647))
      | (1ULL << (MySqlParser::CONVERT_TZ - 647))
      | (1ULL << (MySqlParser::COS - 647))
      | (1ULL << (MySqlParser::COT - 647))
      | (1ULL << (MySqlParser::CRC32 - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
      | (1ULL << (MySqlParser::CROSSES - 647))
      | (1ULL << (MySqlParser::DATEDIFF - 647))
      | (1ULL << (MySqlParser::DATE_FORMAT - 647))
      | (1ULL << (MySqlParser::DAYNAME - 647))
      | (1ULL << (MySqlParser::DAYOFMONTH - 647))
      | (1ULL << (MySqlParser::DAYOFWEEK - 647))
      | (1ULL << (MySqlParser::DAYOFYEAR - 647))
      | (1ULL << (MySqlParser::DECODE - 647))
      | (1ULL << (MySqlParser::DEGREES - 647))
      | (1ULL << (MySqlParser::DES_DECRYPT - 647))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
      | (1ULL << (MySqlParser::DIMENSION - 647))
      | (1ULL << (MySqlParser::DISJOINT - 647))
      | (1ULL << (MySqlParser::ELT - 647))
      | (1ULL << (MySqlParser::ENCODE - 647))
      | (1ULL << (MySqlParser::ENCRYPT - 647))
      | (1ULL << (MySqlParser::ENDPOINT - 647))
      | (1ULL << (MySqlParser::ENVELOPE - 647))
      | (1ULL << (MySqlParser::EQUALS - 647))
      | (1ULL << (MySqlParser::EXP - 647))
      | (1ULL << (MySqlParser::EXPORT_SET - 647))
      | (1ULL << (MySqlParser::EXTERIORRING - 647))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
      | (1ULL << (MySqlParser::FIELD - 647))
      | (1ULL << (MySqlParser::FIND_IN_SET - 647))
      | (1ULL << (MySqlParser::FLOOR - 647))
      | (1ULL << (MySqlParser::FORMAT - 647))
      | (1ULL << (MySqlParser::FOUND_ROWS - 647))
      | (1ULL << (MySqlParser::FROM_BASE64 - 647))
      | (1ULL << (MySqlParser::FROM_DAYS - 647))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
      | (1ULL << (MySqlParser::GET_FORMAT - 711))
      | (1ULL << (MySqlParser::GET_LOCK - 711))
      | (1ULL << (MySqlParser::GLENGTH - 711))
      | (1ULL << (MySqlParser::GREATEST - 711))
      | (1ULL << (MySqlParser::GTID_SUBSET - 711))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
      | (1ULL << (MySqlParser::HEX - 711))
      | (1ULL << (MySqlParser::IFNULL - 711))
      | (1ULL << (MySqlParser::INET6_ATON - 711))
      | (1ULL << (MySqlParser::INET6_NTOA - 711))
      | (1ULL << (MySqlParser::INET_ATON - 711))
      | (1ULL << (MySqlParser::INET_NTOA - 711))
      | (1ULL << (MySqlParser::INSTR - 711))
      | (1ULL << (MySqlParser::INTERIORRINGN - 711))
      | (1ULL << (MySqlParser::INTERSECTS - 711))
      | (1ULL << (MySqlParser::ISCLOSED - 711))
      | (1ULL << (MySqlParser::ISEMPTY - 711))
      | (1ULL << (MySqlParser::ISNULL - 711))
      | (1ULL << (MySqlParser::ISSIMPLE - 711))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
      | (1ULL << (MySqlParser::IS_IPV4 - 711))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
      | (1ULL << (MySqlParser::IS_IPV6 - 711))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
      | (1ULL << (MySqlParser::LCASE - 711))
      | (1ULL << (MySqlParser::LEAST - 711))
      | (1ULL << (MySqlParser::LENGTH - 711))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINEFROMWKB - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
      | (1ULL << (MySqlParser::LN - 711))
      | (1ULL << (MySqlParser::LOAD_FILE - 711))
      | (1ULL << (MySqlParser::LOCATE - 711))
      | (1ULL << (MySqlParser::LOG - 711))
      | (1ULL << (MySqlParser::LOG10 - 711))
      | (1ULL << (MySqlParser::LOG2 - 711))
      | (1ULL << (MySqlParser::LOWER - 711))
      | (1ULL << (MySqlParser::LPAD - 711))
      | (1ULL << (MySqlParser::LTRIM - 711))
      | (1ULL << (MySqlParser::MAKEDATE - 711))
      | (1ULL << (MySqlParser::MAKETIME - 711))
      | (1ULL << (MySqlParser::MAKE_SET - 711))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
      | (1ULL << (MySqlParser::MBRCONTAINS - 711))
      | (1ULL << (MySqlParser::MBRDISJOINT - 711))
      | (1ULL << (MySqlParser::MBREQUAL - 711))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
      | (1ULL << (MySqlParser::MBROVERLAPS - 711))
      | (1ULL << (MySqlParser::MBRTOUCHES - 711))
      | (1ULL << (MySqlParser::MBRWITHIN - 711))
      | (1ULL << (MySqlParser::MD5 - 711))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
      | (1ULL << (MySqlParser::MONTHNAME - 711))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::NAME_CONST - 775))
      | (1ULL << (MySqlParser::NULLIF - 775))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
      | (1ULL << (MySqlParser::NUMPOINTS - 775))
      | (1ULL << (MySqlParser::OCT - 775))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
      | (1ULL << (MySqlParser::ORD - 775))
      | (1ULL << (MySqlParser::OVERLAPS - 775))
      | (1ULL << (MySqlParser::PERIOD_ADD - 775))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
      | (1ULL << (MySqlParser::PI - 775))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::POINTFROMWKB - 775))
      | (1ULL << (MySqlParser::POINTN - 775))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYFROMWKB - 775))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::POW - 775))
      | (1ULL << (MySqlParser::POWER - 775))
      | (1ULL << (MySqlParser::QUOTE - 775))
      | (1ULL << (MySqlParser::RADIANS - 775))
      | (1ULL << (MySqlParser::RAND - 775))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
      | (1ULL << (MySqlParser::REVERSE - 775))
      | (1ULL << (MySqlParser::ROUND - 775))
      | (1ULL << (MySqlParser::ROW_COUNT - 775))
      | (1ULL << (MySqlParser::RPAD - 775))
      | (1ULL << (MySqlParser::RTRIM - 775))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
      | (1ULL << (MySqlParser::SESSION_USER - 775))
      | (1ULL << (MySqlParser::SHA - 775))
      | (1ULL << (MySqlParser::SHA1 - 775))
      | (1ULL << (MySqlParser::SHA2 - 775))
      | (1ULL << (MySqlParser::SIGN - 775))
      | (1ULL << (MySqlParser::SIN - 775))
      | (1ULL << (MySqlParser::SLEEP - 775))
      | (1ULL << (MySqlParser::SOUNDEX - 775))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
      | (1ULL << (MySqlParser::SQRT - 775))
      | (1ULL << (MySqlParser::SRID - 775))
      | (1ULL << (MySqlParser::STARTPOINT - 775))
      | (1ULL << (MySqlParser::STRCMP - 775))
      | (1ULL << (MySqlParser::STR_TO_DATE - 775))
      | (1ULL << (MySqlParser::ST_AREA - 775))
      | (1ULL << (MySqlParser::ST_ASBINARY - 775))
      | (1ULL << (MySqlParser::ST_ASTEXT - 775))
      | (1ULL << (MySqlParser::ST_ASWKB - 775))
      | (1ULL << (MySqlParser::ST_ASWKT - 775))
      | (1ULL << (MySqlParser::ST_BUFFER - 775))
      | (1ULL << (MySqlParser::ST_CENTROID - 775))
      | (1ULL << (MySqlParser::ST_CONTAINS - 775))
      | (1ULL << (MySqlParser::ST_CROSSES - 775))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
      | (1ULL << (MySqlParser::ST_DIMENSION - 775))
      | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
      | (1ULL << (MySqlParser::ST_EQUALS - 839))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POINTN - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_SRID - 839))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
      | (1ULL << (MySqlParser::ST_TOUCHES - 839))
      | (1ULL << (MySqlParser::ST_UNION - 839))
      | (1ULL << (MySqlParser::ST_WITHIN - 839))
      | (1ULL << (MySqlParser::ST_X - 839))
      | (1ULL << (MySqlParser::ST_Y - 839))
      | (1ULL << (MySqlParser::SUBDATE - 839))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
      | (1ULL << (MySqlParser::SUBTIME - 839))
      | (1ULL << (MySqlParser::SYSTEM_USER - 839))
      | (1ULL << (MySqlParser::TAN - 839))
      | (1ULL << (MySqlParser::TIMEDIFF - 839))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
      | (1ULL << (MySqlParser::TIME_FORMAT - 839))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
      | (1ULL << (MySqlParser::TOUCHES - 839))
      | (1ULL << (MySqlParser::TO_BASE64 - 839))
      | (1ULL << (MySqlParser::TO_DAYS - 839))
      | (1ULL << (MySqlParser::TO_SECONDS - 839))
      | (1ULL << (MySqlParser::UCASE - 839))
      | (1ULL << (MySqlParser::UNCOMPRESS - 839))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
      | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
      | (1ULL << (MySqlParser::UPDATEXML - 903))
      | (1ULL << (MySqlParser::UPPER - 903))
      | (1ULL << (MySqlParser::UUID - 903))
      | (1ULL << (MySqlParser::UUID_SHORT - 903))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
      | (1ULL << (MySqlParser::VERSION - 903))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
      | (1ULL << (MySqlParser::WEEKDAY - 903))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
      | (1ULL << (MySqlParser::WITHIN - 903))
      | (1ULL << (MySqlParser::YEARWEEK - 903))
      | (1ULL << (MySqlParser::Y_FUNCTION - 903))
      | (1ULL << (MySqlParser::X_FUNCTION - 903))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
      | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
      setState(3959);
      id_();
      setState(3960);
      match(MySqlParser::COLON_SYMB);
    }
    setState(3964);
    match(MySqlParser::LOOP);
    setState(3966); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3965);
      procedure_sql_statement();
      setState(3968); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & ((1ULL << (MySqlParser::ALTER - 7))
      | (1ULL << (MySqlParser::ANALYZE - 7))
      | (1ULL << (MySqlParser::CALL - 7))
      | (1ULL << (MySqlParser::CASE - 7))
      | (1ULL << (MySqlParser::CHANGE - 7))
      | (1ULL << (MySqlParser::CHECK - 7))
      | (1ULL << (MySqlParser::CREATE - 7))
      | (1ULL << (MySqlParser::DELETE - 7))
      | (1ULL << (MySqlParser::DESC - 7))
      | (1ULL << (MySqlParser::DESCRIBE - 7))
      | (1ULL << (MySqlParser::DROP - 7))
      | (1ULL << (MySqlParser::EXPLAIN - 7))
      | (1ULL << (MySqlParser::FETCH - 7))
      | (1ULL << (MySqlParser::GRANT - 7))
      | (1ULL << (MySqlParser::IF - 7)))) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::INSERT - 71))
      | (1ULL << (MySqlParser::ITERATE - 71))
      | (1ULL << (MySqlParser::KILL - 71))
      | (1ULL << (MySqlParser::LEAVE - 71))
      | (1ULL << (MySqlParser::LEFT - 71))
      | (1ULL << (MySqlParser::LOAD - 71))
      | (1ULL << (MySqlParser::LOCK - 71))
      | (1ULL << (MySqlParser::LOOP - 71))
      | (1ULL << (MySqlParser::OPTIMIZE - 71))
      | (1ULL << (MySqlParser::PURGE - 71))
      | (1ULL << (MySqlParser::RELEASE - 71))
      | (1ULL << (MySqlParser::RENAME - 71))
      | (1ULL << (MySqlParser::REPEAT - 71))
      | (1ULL << (MySqlParser::REPLACE - 71))
      | (1ULL << (MySqlParser::RETURN - 71))
      | (1ULL << (MySqlParser::REVOKE - 71))
      | (1ULL << (MySqlParser::RIGHT - 71))
      | (1ULL << (MySqlParser::SELECT - 71))
      | (1ULL << (MySqlParser::SET - 71))
      | (1ULL << (MySqlParser::SHOW - 71)))) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & ((1ULL << (MySqlParser::UNLOCK - 156))
      | (1ULL << (MySqlParser::UPDATE - 156))
      | (1ULL << (MySqlParser::USE - 156))
      | (1ULL << (MySqlParser::WHILE - 156))
      | (1ULL << (MySqlParser::DATE - 156))
      | (1ULL << (MySqlParser::TIME - 156))
      | (1ULL << (MySqlParser::TIMESTAMP - 156))
      | (1ULL << (MySqlParser::DATETIME - 156))
      | (1ULL << (MySqlParser::YEAR - 156))
      | (1ULL << (MySqlParser::TEXT - 156))
      | (1ULL << (MySqlParser::ENUM - 156))
      | (1ULL << (MySqlParser::COUNT - 156)))) != 0) || ((((_la - 237) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 237)) & ((1ULL << (MySqlParser::POSITION - 237))
      | (1ULL << (MySqlParser::ACTION - 237))
      | (1ULL << (MySqlParser::AFTER - 237))
      | (1ULL << (MySqlParser::ALGORITHM - 237))
      | (1ULL << (MySqlParser::ANY - 237))
      | (1ULL << (MySqlParser::AT - 237))
      | (1ULL << (MySqlParser::AUTHORS - 237))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 237))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 237))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 237))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 237))
      | (1ULL << (MySqlParser::BEGIN - 237))
      | (1ULL << (MySqlParser::BINLOG - 237))
      | (1ULL << (MySqlParser::BIT - 237))
      | (1ULL << (MySqlParser::BTREE - 237))
      | (1ULL << (MySqlParser::CACHE - 237))
      | (1ULL << (MySqlParser::CASCADED - 237))
      | (1ULL << (MySqlParser::CHAIN - 237))
      | (1ULL << (MySqlParser::CHECKSUM - 237))
      | (1ULL << (MySqlParser::CIPHER - 237))
      | (1ULL << (MySqlParser::CLIENT - 237))
      | (1ULL << (MySqlParser::CLOSE - 237))
      | (1ULL << (MySqlParser::COALESCE - 237))
      | (1ULL << (MySqlParser::CODE - 237))
      | (1ULL << (MySqlParser::COLUMNS - 237))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 237))
      | (1ULL << (MySqlParser::COMMENT - 237))
      | (1ULL << (MySqlParser::COMMIT - 237))
      | (1ULL << (MySqlParser::COMPACT - 237))
      | (1ULL << (MySqlParser::COMPLETION - 237))
      | (1ULL << (MySqlParser::COMPRESSED - 237))
      | (1ULL << (MySqlParser::CONCURRENT - 237))
      | (1ULL << (MySqlParser::CONNECTION - 237))
      | (1ULL << (MySqlParser::CONSISTENT - 237))
      | (1ULL << (MySqlParser::CONTAINS - 237))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 237))
      | (1ULL << (MySqlParser::COPY - 237))
      | (1ULL << (MySqlParser::DATA - 237))
      | (1ULL << (MySqlParser::DATAFILE - 237))
      | (1ULL << (MySqlParser::DEALLOCATE - 237))
      | (1ULL << (MySqlParser::DEFINER - 237))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 237))
      | (1ULL << (MySqlParser::DIRECTORY - 237))
      | (1ULL << (MySqlParser::DISABLE - 237))
      | (1ULL << (MySqlParser::DISCARD - 237))
      | (1ULL << (MySqlParser::DISK - 237))
      | (1ULL << (MySqlParser::DO - 237)))) != 0) || ((((_la - 301) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 301)) & ((1ULL << (MySqlParser::DUMPFILE - 301))
      | (1ULL << (MySqlParser::DUPLICATE - 301))
      | (1ULL << (MySqlParser::DYNAMIC - 301))
      | (1ULL << (MySqlParser::ENABLE - 301))
      | (1ULL << (MySqlParser::ENDS - 301))
      | (1ULL << (MySqlParser::ENGINE - 301))
      | (1ULL << (MySqlParser::ENGINES - 301))
      | (1ULL << (MySqlParser::ERRORS - 301))
      | (1ULL << (MySqlParser::ESCAPE - 301))
      | (1ULL << (MySqlParser::EVEN - 301))
      | (1ULL << (MySqlParser::EVENT - 301))
      | (1ULL << (MySqlParser::EVENTS - 301))
      | (1ULL << (MySqlParser::EVERY - 301))
      | (1ULL << (MySqlParser::EXCHANGE - 301))
      | (1ULL << (MySqlParser::EXCLUSIVE - 301))
      | (1ULL << (MySqlParser::EXPIRE - 301))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 301))
      | (1ULL << (MySqlParser::FIELDS - 301))
      | (1ULL << (MySqlParser::FIRST - 301))
      | (1ULL << (MySqlParser::FIXED - 301))
      | (1ULL << (MySqlParser::FLUSH - 301))
      | (1ULL << (MySqlParser::FULL - 301))
      | (1ULL << (MySqlParser::FUNCTION - 301))
      | (1ULL << (MySqlParser::GLOBAL - 301))
      | (1ULL << (MySqlParser::GRANTS - 301))
      | (1ULL << (MySqlParser::HANDLER - 301))
      | (1ULL << (MySqlParser::HASH - 301))
      | (1ULL << (MySqlParser::HELP - 301))
      | (1ULL << (MySqlParser::HOST - 301))
      | (1ULL << (MySqlParser::IDENTIFIED - 301))
      | (1ULL << (MySqlParser::IMPORT - 301))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 301))
      | (1ULL << (MySqlParser::INPLACE - 301))
      | (1ULL << (MySqlParser::INSERT_METHOD - 301))
      | (1ULL << (MySqlParser::INSTALL - 301))
      | (1ULL << (MySqlParser::INVOKER - 301))
      | (1ULL << (MySqlParser::ISOLATION - 301))
      | (1ULL << (MySqlParser::ISSUER - 301))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 301))
      | (1ULL << (MySqlParser::LANGUAGE - 301))
      | (1ULL << (MySqlParser::LAST - 301))
      | (1ULL << (MySqlParser::LESS - 301)))) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 365)) & ((1ULL << (MySqlParser::LEVEL - 365))
      | (1ULL << (MySqlParser::LIST - 365))
      | (1ULL << (MySqlParser::LOCAL - 365))
      | (1ULL << (MySqlParser::LOGFILE - 365))
      | (1ULL << (MySqlParser::LOGS - 365))
      | (1ULL << (MySqlParser::MASTER - 365))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_ROWS - 365))
      | (1ULL << (MySqlParser::MAX_SIZE - 365))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 365))
      | (1ULL << (MySqlParser::MERGE - 365))
      | (1ULL << (MySqlParser::MID - 365))
      | (1ULL << (MySqlParser::MIN_ROWS - 365))
      | (1ULL << (MySqlParser::MODIFY - 365))
      | (1ULL << (MySqlParser::MUTEX - 365))
      | (1ULL << (MySqlParser::MYSQL - 365))
      | (1ULL << (MySqlParser::NAME - 365))
      | (1ULL << (MySqlParser::NAMES - 365))
      | (1ULL << (MySqlParser::NCHAR - 365))
      | (1ULL << (MySqlParser::NO - 365))
      | (1ULL << (MySqlParser::NODEGROUP - 365))
      | (1ULL << (MySqlParser::NONE - 365))
      | (1ULL << (MySqlParser::OFFLINE - 365))
      | (1ULL << (MySqlParser::OFFSET - 365))
      | (1ULL << (MySqlParser::OJ - 365))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 365))
      | (1ULL << (MySqlParser::ONLINE - 365))
      | (1ULL << (MySqlParser::ONLY - 365))
      | (1ULL << (MySqlParser::OPEN - 365))
      | (1ULL << (MySqlParser::OPTIONS - 365))
      | (1ULL << (MySqlParser::OWNER - 365))
      | (1ULL << (MySqlParser::PACK_KEYS - 365))
      | (1ULL << (MySqlParser::PARSER - 365))
      | (1ULL << (MySqlParser::PARTIAL - 365)))) != 0) || ((((_la - 429) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 429)) & ((1ULL << (MySqlParser::PARTITIONING - 429))
      | (1ULL << (MySqlParser::PARTITIONS - 429))
      | (1ULL << (MySqlParser::PASSWORD - 429))
      | (1ULL << (MySqlParser::PLUGINS - 429))
      | (1ULL << (MySqlParser::PORT - 429))
      | (1ULL << (MySqlParser::PREPARE - 429))
      | (1ULL << (MySqlParser::PRESERVE - 429))
      | (1ULL << (MySqlParser::PROCESSLIST - 429))
      | (1ULL << (MySqlParser::PROFILE - 429))
      | (1ULL << (MySqlParser::PROFILES - 429))
      | (1ULL << (MySqlParser::PROXY - 429))
      | (1ULL << (MySqlParser::QUERY - 429))
      | (1ULL << (MySqlParser::QUICK - 429))
      | (1ULL << (MySqlParser::REBUILD - 429))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 429))
      | (1ULL << (MySqlParser::REDUNDANT - 429))
      | (1ULL << (MySqlParser::RELAYLOG - 429))
      | (1ULL << (MySqlParser::REMOVE - 429))
      | (1ULL << (MySqlParser::REORGANIZE - 429))
      | (1ULL << (MySqlParser::REPAIR - 429))
      | (1ULL << (MySqlParser::REPLICATION - 429))
      | (1ULL << (MySqlParser::RESET - 429))
      | (1ULL << (MySqlParser::RETURNS - 429))
      | (1ULL << (MySqlParser::ROLLBACK - 429))
      | (1ULL << (MySqlParser::ROLLUP - 429))
      | (1ULL << (MySqlParser::ROW - 429))
      | (1ULL << (MySqlParser::ROWS - 429))
      | (1ULL << (MySqlParser::ROW_FORMAT - 429))
      | (1ULL << (MySqlParser::SAVEPOINT - 429))
      | (1ULL << (MySqlParser::SCHEDULE - 429))
      | (1ULL << (MySqlParser::SECURITY - 429))
      | (1ULL << (MySqlParser::SERVER - 429))
      | (1ULL << (MySqlParser::SESSION - 429))
      | (1ULL << (MySqlParser::SHARE - 429))
      | (1ULL << (MySqlParser::SHARED - 429))
      | (1ULL << (MySqlParser::SIGNED - 429))
      | (1ULL << (MySqlParser::SIMPLE - 429))
      | (1ULL << (MySqlParser::SLAVE - 429))
      | (1ULL << (MySqlParser::SNAPSHOT - 429))
      | (1ULL << (MySqlParser::SOCKET - 429))
      | (1ULL << (MySqlParser::SOME - 429))
      | (1ULL << (MySqlParser::SOUNDS - 429)))) != 0) || ((((_la - 495) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 495)) & ((1ULL << (MySqlParser::SQL_BUFFER_RESULT - 495))
      | (1ULL << (MySqlParser::SQL_CACHE - 495))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 495))
      | (1ULL << (MySqlParser::START - 495))
      | (1ULL << (MySqlParser::STARTS - 495))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 495))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 495))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 495))
      | (1ULL << (MySqlParser::STATUS - 495))
      | (1ULL << (MySqlParser::STOP - 495))
      | (1ULL << (MySqlParser::STORAGE - 495))
      | (1ULL << (MySqlParser::SUBJECT - 495))
      | (1ULL << (MySqlParser::SUBPARTITION - 495))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 495))
      | (1ULL << (MySqlParser::TABLESPACE - 495))
      | (1ULL << (MySqlParser::TEMPORARY - 495))
      | (1ULL << (MySqlParser::TEMPTABLE - 495))
      | (1ULL << (MySqlParser::THAN - 495))
      | (1ULL << (MySqlParser::TRANSACTION - 495))
      | (1ULL << (MySqlParser::TRUNCATE - 495))
      | (1ULL << (MySqlParser::UNDEFINED - 495))
      | (1ULL << (MySqlParser::UNDOFILE - 495))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 495))
      | (1ULL << (MySqlParser::UNINSTALL - 495))
      | (1ULL << (MySqlParser::UNKNOWN - 495))
      | (1ULL << (MySqlParser::UPGRADE - 495))
      | (1ULL << (MySqlParser::USER - 495))
      | (1ULL << (MySqlParser::VALUE - 495))
      | (1ULL << (MySqlParser::VARIABLES - 495))
      | (1ULL << (MySqlParser::VIEW - 495))
      | (1ULL << (MySqlParser::WAIT - 495))
      | (1ULL << (MySqlParser::WARNINGS - 495))
      | (1ULL << (MySqlParser::WORK - 495))
      | (1ULL << (MySqlParser::WRAPPER - 495))
      | (1ULL << (MySqlParser::X509 - 495))
      | (1ULL << (MySqlParser::XA - 495))
      | (1ULL << (MySqlParser::XML - 495))
      | (1ULL << (MySqlParser::QUARTER - 495))
      | (1ULL << (MySqlParser::MONTH - 495))
      | (1ULL << (MySqlParser::DAY - 495))
      | (1ULL << (MySqlParser::HOUR - 495))
      | (1ULL << (MySqlParser::MINUTE - 495))
      | (1ULL << (MySqlParser::WEEK - 495))
      | (1ULL << (MySqlParser::SECOND - 495))
      | (1ULL << (MySqlParser::MICROSECOND - 495))
      | (1ULL << (MySqlParser::TABLES - 495))
      | (1ULL << (MySqlParser::ROUTINE - 495)))) != 0) || ((((_la - 559) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 559)) & ((1ULL << (MySqlParser::EXECUTE - 559))
      | (1ULL << (MySqlParser::FILE - 559))
      | (1ULL << (MySqlParser::PROCESS - 559))
      | (1ULL << (MySqlParser::RELOAD - 559))
      | (1ULL << (MySqlParser::SHUTDOWN - 559))
      | (1ULL << (MySqlParser::SUPER - 559))
      | (1ULL << (MySqlParser::PRIVILEGES - 559))
      | (1ULL << (MySqlParser::ARMSCII8 - 559))
      | (1ULL << (MySqlParser::ASCII - 559))
      | (1ULL << (MySqlParser::BIG5 - 559))
      | (1ULL << (MySqlParser::CP1250 - 559))
      | (1ULL << (MySqlParser::CP1251 - 559))
      | (1ULL << (MySqlParser::CP1256 - 559))
      | (1ULL << (MySqlParser::CP1257 - 559))
      | (1ULL << (MySqlParser::CP850 - 559))
      | (1ULL << (MySqlParser::CP852 - 559))
      | (1ULL << (MySqlParser::CP866 - 559))
      | (1ULL << (MySqlParser::CP932 - 559))
      | (1ULL << (MySqlParser::DEC8 - 559))
      | (1ULL << (MySqlParser::EUCJPMS - 559))
      | (1ULL << (MySqlParser::EUCKR - 559))
      | (1ULL << (MySqlParser::GB2312 - 559))
      | (1ULL << (MySqlParser::GBK - 559))
      | (1ULL << (MySqlParser::GEOSTD8 - 559))
      | (1ULL << (MySqlParser::GREEK - 559))
      | (1ULL << (MySqlParser::HEBREW - 559))
      | (1ULL << (MySqlParser::HP8 - 559))
      | (1ULL << (MySqlParser::KEYBCS2 - 559))
      | (1ULL << (MySqlParser::KOI8R - 559))
      | (1ULL << (MySqlParser::KOI8U - 559))
      | (1ULL << (MySqlParser::LATIN1 - 559))
      | (1ULL << (MySqlParser::LATIN2 - 559))
      | (1ULL << (MySqlParser::LATIN5 - 559))
      | (1ULL << (MySqlParser::LATIN7 - 559))
      | (1ULL << (MySqlParser::MACCE - 559))
      | (1ULL << (MySqlParser::MACROMAN - 559))
      | (1ULL << (MySqlParser::SJIS - 559))
      | (1ULL << (MySqlParser::SWE7 - 559))
      | (1ULL << (MySqlParser::TIS620 - 559))
      | (1ULL << (MySqlParser::UCS2 - 559))
      | (1ULL << (MySqlParser::UJIS - 559))
      | (1ULL << (MySqlParser::UTF16 - 559))
      | (1ULL << (MySqlParser::UTF16LE - 559))
      | (1ULL << (MySqlParser::UTF32 - 559))
      | (1ULL << (MySqlParser::UTF8 - 559))
      | (1ULL << (MySqlParser::UTF8MB3 - 559))
      | (1ULL << (MySqlParser::UTF8MB4 - 559))
      | (1ULL << (MySqlParser::ARCHIVE - 559))
      | (1ULL << (MySqlParser::BLACKHOLE - 559))
      | (1ULL << (MySqlParser::CSV - 559))
      | (1ULL << (MySqlParser::FEDERATED - 559))
      | (1ULL << (MySqlParser::INNODB - 559))
      | (1ULL << (MySqlParser::MEMORY - 559))
      | (1ULL << (MySqlParser::MRG_MYISAM - 559))
      | (1ULL << (MySqlParser::MYISAM - 559))
      | (1ULL << (MySqlParser::NDB - 559))
      | (1ULL << (MySqlParser::NDBCLUSTER - 559))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 559))
      | (1ULL << (MySqlParser::REPEATABLE - 559))
      | (1ULL << (MySqlParser::COMMITTED - 559))
      | (1ULL << (MySqlParser::UNCOMMITTED - 559))
      | (1ULL << (MySqlParser::SERIALIZABLE - 559))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 559))
      | (1ULL << (MySqlParser::LINESTRING - 559)))) != 0) || ((((_la - 623) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 623)) & ((1ULL << (MySqlParser::MULTILINESTRING - 623))
      | (1ULL << (MySqlParser::MULTIPOINT - 623))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 623))
      | (1ULL << (MySqlParser::POINT - 623))
      | (1ULL << (MySqlParser::POLYGON - 623))
      | (1ULL << (MySqlParser::ABS - 623))
      | (1ULL << (MySqlParser::ACOS - 623))
      | (1ULL << (MySqlParser::ADDDATE - 623))
      | (1ULL << (MySqlParser::ADDTIME - 623))
      | (1ULL << (MySqlParser::AES_DECRYPT - 623))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 623))
      | (1ULL << (MySqlParser::AREA - 623))
      | (1ULL << (MySqlParser::ASBINARY - 623))
      | (1ULL << (MySqlParser::ASIN - 623))
      | (1ULL << (MySqlParser::ASTEXT - 623))
      | (1ULL << (MySqlParser::ASWKB - 623))
      | (1ULL << (MySqlParser::ASWKT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 623))
      | (1ULL << (MySqlParser::ATAN - 623))
      | (1ULL << (MySqlParser::ATAN2 - 623))
      | (1ULL << (MySqlParser::BENCHMARK - 623))
      | (1ULL << (MySqlParser::BIN - 623))
      | (1ULL << (MySqlParser::BIT_COUNT - 623))
      | (1ULL << (MySqlParser::BIT_LENGTH - 623))
      | (1ULL << (MySqlParser::BUFFER - 623))
      | (1ULL << (MySqlParser::CEIL - 623))
      | (1ULL << (MySqlParser::CEILING - 623))
      | (1ULL << (MySqlParser::CENTROID - 623))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 623))
      | (1ULL << (MySqlParser::CHARSET - 623))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 623))
      | (1ULL << (MySqlParser::COERCIBILITY - 623))
      | (1ULL << (MySqlParser::COLLATION - 623))
      | (1ULL << (MySqlParser::COMPRESS - 623))
      | (1ULL << (MySqlParser::CONCAT - 623))
      | (1ULL << (MySqlParser::CONCAT_WS - 623))
      | (1ULL << (MySqlParser::CONNECTION_ID - 623))
      | (1ULL << (MySqlParser::CONV - 623))
      | (1ULL << (MySqlParser::CONVERT_TZ - 623))
      | (1ULL << (MySqlParser::COS - 623))
      | (1ULL << (MySqlParser::COT - 623))
      | (1ULL << (MySqlParser::CRC32 - 623))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 623))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 623))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 623))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 623))
      | (1ULL << (MySqlParser::CROSSES - 623))
      | (1ULL << (MySqlParser::DATEDIFF - 623))
      | (1ULL << (MySqlParser::DATE_FORMAT - 623))
      | (1ULL << (MySqlParser::DAYNAME - 623))
      | (1ULL << (MySqlParser::DAYOFMONTH - 623))
      | (1ULL << (MySqlParser::DAYOFWEEK - 623))
      | (1ULL << (MySqlParser::DAYOFYEAR - 623))
      | (1ULL << (MySqlParser::DECODE - 623))
      | (1ULL << (MySqlParser::DEGREES - 623))
      | (1ULL << (MySqlParser::DES_DECRYPT - 623))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 623))
      | (1ULL << (MySqlParser::DIMENSION - 623))
      | (1ULL << (MySqlParser::DISJOINT - 623))
      | (1ULL << (MySqlParser::ELT - 623)))) != 0) || ((((_la - 687) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 687)) & ((1ULL << (MySqlParser::ENCODE - 687))
      | (1ULL << (MySqlParser::ENCRYPT - 687))
      | (1ULL << (MySqlParser::ENDPOINT - 687))
      | (1ULL << (MySqlParser::ENVELOPE - 687))
      | (1ULL << (MySqlParser::EQUALS - 687))
      | (1ULL << (MySqlParser::EXP - 687))
      | (1ULL << (MySqlParser::EXPORT_SET - 687))
      | (1ULL << (MySqlParser::EXTERIORRING - 687))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 687))
      | (1ULL << (MySqlParser::FIELD - 687))
      | (1ULL << (MySqlParser::FIND_IN_SET - 687))
      | (1ULL << (MySqlParser::FLOOR - 687))
      | (1ULL << (MySqlParser::FORMAT - 687))
      | (1ULL << (MySqlParser::FOUND_ROWS - 687))
      | (1ULL << (MySqlParser::FROM_BASE64 - 687))
      | (1ULL << (MySqlParser::FROM_DAYS - 687))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 687))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYN - 687))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 687))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 687))
      | (1ULL << (MySqlParser::GET_FORMAT - 687))
      | (1ULL << (MySqlParser::GET_LOCK - 687))
      | (1ULL << (MySqlParser::GLENGTH - 687))
      | (1ULL << (MySqlParser::GREATEST - 687))
      | (1ULL << (MySqlParser::GTID_SUBSET - 687))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 687))
      | (1ULL << (MySqlParser::HEX - 687))
      | (1ULL << (MySqlParser::IFNULL - 687))
      | (1ULL << (MySqlParser::INET6_ATON - 687))
      | (1ULL << (MySqlParser::INET6_NTOA - 687))
      | (1ULL << (MySqlParser::INET_ATON - 687))
      | (1ULL << (MySqlParser::INET_NTOA - 687))
      | (1ULL << (MySqlParser::INSTR - 687))
      | (1ULL << (MySqlParser::INTERIORRINGN - 687))
      | (1ULL << (MySqlParser::INTERSECTS - 687))
      | (1ULL << (MySqlParser::ISCLOSED - 687))
      | (1ULL << (MySqlParser::ISEMPTY - 687))
      | (1ULL << (MySqlParser::ISNULL - 687))
      | (1ULL << (MySqlParser::ISSIMPLE - 687))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 687))
      | (1ULL << (MySqlParser::IS_IPV4 - 687))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 687))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 687))
      | (1ULL << (MySqlParser::IS_IPV6 - 687))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 687))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 687))
      | (1ULL << (MySqlParser::LCASE - 687))
      | (1ULL << (MySqlParser::LEAST - 687))
      | (1ULL << (MySqlParser::LENGTH - 687))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 687))
      | (1ULL << (MySqlParser::LINEFROMWKB - 687))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 687))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 687))
      | (1ULL << (MySqlParser::LN - 687))
      | (1ULL << (MySqlParser::LOAD_FILE - 687))
      | (1ULL << (MySqlParser::LOCATE - 687))
      | (1ULL << (MySqlParser::LOG - 687)))) != 0) || ((((_la - 751) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 751)) & ((1ULL << (MySqlParser::LOG10 - 751))
      | (1ULL << (MySqlParser::LOG2 - 751))
      | (1ULL << (MySqlParser::LOWER - 751))
      | (1ULL << (MySqlParser::LPAD - 751))
      | (1ULL << (MySqlParser::LTRIM - 751))
      | (1ULL << (MySqlParser::MAKEDATE - 751))
      | (1ULL << (MySqlParser::MAKETIME - 751))
      | (1ULL << (MySqlParser::MAKE_SET - 751))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 751))
      | (1ULL << (MySqlParser::MBRCONTAINS - 751))
      | (1ULL << (MySqlParser::MBRDISJOINT - 751))
      | (1ULL << (MySqlParser::MBREQUAL - 751))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 751))
      | (1ULL << (MySqlParser::MBROVERLAPS - 751))
      | (1ULL << (MySqlParser::MBRTOUCHES - 751))
      | (1ULL << (MySqlParser::MBRWITHIN - 751))
      | (1ULL << (MySqlParser::MD5 - 751))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 751))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 751))
      | (1ULL << (MySqlParser::MONTHNAME - 751))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 751))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 751))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 751))
      | (1ULL << (MySqlParser::NAME_CONST - 751))
      | (1ULL << (MySqlParser::NULLIF - 751))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 751))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 751))
      | (1ULL << (MySqlParser::NUMPOINTS - 751))
      | (1ULL << (MySqlParser::OCT - 751))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 751))
      | (1ULL << (MySqlParser::ORD - 751))
      | (1ULL << (MySqlParser::OVERLAPS - 751))
      | (1ULL << (MySqlParser::PERIOD_ADD - 751))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 751))
      | (1ULL << (MySqlParser::PI - 751))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::POINTFROMWKB - 751))
      | (1ULL << (MySqlParser::POINTN - 751))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 751))
      | (1ULL << (MySqlParser::POLYFROMWKB - 751))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 751))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 751))
      | (1ULL << (MySqlParser::POW - 751))
      | (1ULL << (MySqlParser::POWER - 751))
      | (1ULL << (MySqlParser::QUOTE - 751))
      | (1ULL << (MySqlParser::RADIANS - 751))
      | (1ULL << (MySqlParser::RAND - 751))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 751))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 751))
      | (1ULL << (MySqlParser::REVERSE - 751))
      | (1ULL << (MySqlParser::ROUND - 751))
      | (1ULL << (MySqlParser::ROW_COUNT - 751))
      | (1ULL << (MySqlParser::RPAD - 751))
      | (1ULL << (MySqlParser::RTRIM - 751))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 751))
      | (1ULL << (MySqlParser::SESSION_USER - 751))
      | (1ULL << (MySqlParser::SHA - 751)))) != 0) || ((((_la - 815) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 815)) & ((1ULL << (MySqlParser::SHA1 - 815))
      | (1ULL << (MySqlParser::SHA2 - 815))
      | (1ULL << (MySqlParser::SIGN - 815))
      | (1ULL << (MySqlParser::SIN - 815))
      | (1ULL << (MySqlParser::SLEEP - 815))
      | (1ULL << (MySqlParser::SOUNDEX - 815))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 815))
      | (1ULL << (MySqlParser::SQRT - 815))
      | (1ULL << (MySqlParser::SRID - 815))
      | (1ULL << (MySqlParser::STARTPOINT - 815))
      | (1ULL << (MySqlParser::STRCMP - 815))
      | (1ULL << (MySqlParser::STR_TO_DATE - 815))
      | (1ULL << (MySqlParser::ST_AREA - 815))
      | (1ULL << (MySqlParser::ST_ASBINARY - 815))
      | (1ULL << (MySqlParser::ST_ASTEXT - 815))
      | (1ULL << (MySqlParser::ST_ASWKB - 815))
      | (1ULL << (MySqlParser::ST_ASWKT - 815))
      | (1ULL << (MySqlParser::ST_BUFFER - 815))
      | (1ULL << (MySqlParser::ST_CENTROID - 815))
      | (1ULL << (MySqlParser::ST_CONTAINS - 815))
      | (1ULL << (MySqlParser::ST_CROSSES - 815))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 815))
      | (1ULL << (MySqlParser::ST_DIMENSION - 815))
      | (1ULL << (MySqlParser::ST_DISJOINT - 815))
      | (1ULL << (MySqlParser::ST_DISTANCE - 815))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 815))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 815))
      | (1ULL << (MySqlParser::ST_EQUALS - 815))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 815))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 815))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 815))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 815))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 815))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 815))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 815))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 815))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 815))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 815))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 815))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 815))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_POINTN - 815))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_SRID - 815))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 815)))) != 0) || ((((_la - 879) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 879)) & ((1ULL << (MySqlParser::ST_SYMDIFFERENCE - 879))
      | (1ULL << (MySqlParser::ST_TOUCHES - 879))
      | (1ULL << (MySqlParser::ST_UNION - 879))
      | (1ULL << (MySqlParser::ST_WITHIN - 879))
      | (1ULL << (MySqlParser::ST_X - 879))
      | (1ULL << (MySqlParser::ST_Y - 879))
      | (1ULL << (MySqlParser::SUBDATE - 879))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 879))
      | (1ULL << (MySqlParser::SUBTIME - 879))
      | (1ULL << (MySqlParser::SYSTEM_USER - 879))
      | (1ULL << (MySqlParser::TAN - 879))
      | (1ULL << (MySqlParser::TIMEDIFF - 879))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 879))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 879))
      | (1ULL << (MySqlParser::TIME_FORMAT - 879))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 879))
      | (1ULL << (MySqlParser::TOUCHES - 879))
      | (1ULL << (MySqlParser::TO_BASE64 - 879))
      | (1ULL << (MySqlParser::TO_DAYS - 879))
      | (1ULL << (MySqlParser::TO_SECONDS - 879))
      | (1ULL << (MySqlParser::UCASE - 879))
      | (1ULL << (MySqlParser::UNCOMPRESS - 879))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 879))
      | (1ULL << (MySqlParser::UNHEX - 879))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 879))
      | (1ULL << (MySqlParser::UPDATEXML - 879))
      | (1ULL << (MySqlParser::UPPER - 879))
      | (1ULL << (MySqlParser::UUID - 879))
      | (1ULL << (MySqlParser::UUID_SHORT - 879))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 879))
      | (1ULL << (MySqlParser::VERSION - 879))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879))
      | (1ULL << (MySqlParser::WEEKDAY - 879))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 879))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 879))
      | (1ULL << (MySqlParser::WITHIN - 879))
      | (1ULL << (MySqlParser::YEARWEEK - 879))
      | (1ULL << (MySqlParser::Y_FUNCTION - 879))
      | (1ULL << (MySqlParser::X_FUNCTION - 879)))) != 0) || ((((_la - 943) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 943)) & ((1ULL << (MySqlParser::LR_BRACKET - 943))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 943))
      | (1ULL << (MySqlParser::ID - 943))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 943)))) != 0));
    setState(3970);
    match(MySqlParser::END);
    setState(3971);
    match(MySqlParser::LOOP);
    setState(3973);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519))
      | (1ULL << (MySqlParser::QUARTER - 519))
      | (1ULL << (MySqlParser::MONTH - 519))
      | (1ULL << (MySqlParser::DAY - 519))
      | (1ULL << (MySqlParser::HOUR - 519))
      | (1ULL << (MySqlParser::MINUTE - 519))
      | (1ULL << (MySqlParser::WEEK - 519))
      | (1ULL << (MySqlParser::SECOND - 519))
      | (1ULL << (MySqlParser::MICROSECOND - 519))
      | (1ULL << (MySqlParser::TABLES - 519))
      | (1ULL << (MySqlParser::ROUTINE - 519))
      | (1ULL << (MySqlParser::EXECUTE - 519))
      | (1ULL << (MySqlParser::FILE - 519))
      | (1ULL << (MySqlParser::PROCESS - 519))
      | (1ULL << (MySqlParser::RELOAD - 519))
      | (1ULL << (MySqlParser::SHUTDOWN - 519))
      | (1ULL << (MySqlParser::SUPER - 519))
      | (1ULL << (MySqlParser::PRIVILEGES - 519))
      | (1ULL << (MySqlParser::ARMSCII8 - 519))
      | (1ULL << (MySqlParser::ASCII - 519))
      | (1ULL << (MySqlParser::BIG5 - 519))
      | (1ULL << (MySqlParser::CP1250 - 519))
      | (1ULL << (MySqlParser::CP1251 - 519))
      | (1ULL << (MySqlParser::CP1256 - 519))
      | (1ULL << (MySqlParser::CP1257 - 519))
      | (1ULL << (MySqlParser::CP850 - 519))
      | (1ULL << (MySqlParser::CP852 - 519))
      | (1ULL << (MySqlParser::CP866 - 519))
      | (1ULL << (MySqlParser::CP932 - 519))
      | (1ULL << (MySqlParser::DEC8 - 519))
      | (1ULL << (MySqlParser::EUCJPMS - 519))
      | (1ULL << (MySqlParser::EUCKR - 519))
      | (1ULL << (MySqlParser::GB2312 - 519))
      | (1ULL << (MySqlParser::GBK - 519))
      | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
      | (1ULL << (MySqlParser::HEBREW - 583))
      | (1ULL << (MySqlParser::HP8 - 583))
      | (1ULL << (MySqlParser::KEYBCS2 - 583))
      | (1ULL << (MySqlParser::KOI8R - 583))
      | (1ULL << (MySqlParser::KOI8U - 583))
      | (1ULL << (MySqlParser::LATIN1 - 583))
      | (1ULL << (MySqlParser::LATIN2 - 583))
      | (1ULL << (MySqlParser::LATIN5 - 583))
      | (1ULL << (MySqlParser::LATIN7 - 583))
      | (1ULL << (MySqlParser::MACCE - 583))
      | (1ULL << (MySqlParser::MACROMAN - 583))
      | (1ULL << (MySqlParser::SJIS - 583))
      | (1ULL << (MySqlParser::SWE7 - 583))
      | (1ULL << (MySqlParser::TIS620 - 583))
      | (1ULL << (MySqlParser::UCS2 - 583))
      | (1ULL << (MySqlParser::UJIS - 583))
      | (1ULL << (MySqlParser::UTF16 - 583))
      | (1ULL << (MySqlParser::UTF16LE - 583))
      | (1ULL << (MySqlParser::UTF32 - 583))
      | (1ULL << (MySqlParser::UTF8 - 583))
      | (1ULL << (MySqlParser::UTF8MB3 - 583))
      | (1ULL << (MySqlParser::UTF8MB4 - 583))
      | (1ULL << (MySqlParser::ARCHIVE - 583))
      | (1ULL << (MySqlParser::BLACKHOLE - 583))
      | (1ULL << (MySqlParser::CSV - 583))
      | (1ULL << (MySqlParser::FEDERATED - 583))
      | (1ULL << (MySqlParser::INNODB - 583))
      | (1ULL << (MySqlParser::MEMORY - 583))
      | (1ULL << (MySqlParser::MRG_MYISAM - 583))
      | (1ULL << (MySqlParser::MYISAM - 583))
      | (1ULL << (MySqlParser::NDB - 583))
      | (1ULL << (MySqlParser::NDBCLUSTER - 583))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
      | (1ULL << (MySqlParser::REPEATABLE - 583))
      | (1ULL << (MySqlParser::COMMITTED - 583))
      | (1ULL << (MySqlParser::UNCOMMITTED - 583))
      | (1ULL << (MySqlParser::SERIALIZABLE - 583))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
      | (1ULL << (MySqlParser::LINESTRING - 583))
      | (1ULL << (MySqlParser::MULTILINESTRING - 583))
      | (1ULL << (MySqlParser::MULTIPOINT - 583))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
      | (1ULL << (MySqlParser::POINT - 583))
      | (1ULL << (MySqlParser::POLYGON - 583))
      | (1ULL << (MySqlParser::ABS - 583))
      | (1ULL << (MySqlParser::ACOS - 583))
      | (1ULL << (MySqlParser::ADDDATE - 583))
      | (1ULL << (MySqlParser::ADDTIME - 583))
      | (1ULL << (MySqlParser::AES_DECRYPT - 583))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
      | (1ULL << (MySqlParser::AREA - 583))
      | (1ULL << (MySqlParser::ASBINARY - 583))
      | (1ULL << (MySqlParser::ASIN - 583))
      | (1ULL << (MySqlParser::ASTEXT - 583))
      | (1ULL << (MySqlParser::ASWKB - 583))
      | (1ULL << (MySqlParser::ASWKT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
      | (1ULL << (MySqlParser::ATAN - 583))
      | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
      | (1ULL << (MySqlParser::BIN - 647))
      | (1ULL << (MySqlParser::BIT_COUNT - 647))
      | (1ULL << (MySqlParser::BIT_LENGTH - 647))
      | (1ULL << (MySqlParser::BUFFER - 647))
      | (1ULL << (MySqlParser::CEIL - 647))
      | (1ULL << (MySqlParser::CEILING - 647))
      | (1ULL << (MySqlParser::CENTROID - 647))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
      | (1ULL << (MySqlParser::CHARSET - 647))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
      | (1ULL << (MySqlParser::COERCIBILITY - 647))
      | (1ULL << (MySqlParser::COLLATION - 647))
      | (1ULL << (MySqlParser::COMPRESS - 647))
      | (1ULL << (MySqlParser::CONCAT - 647))
      | (1ULL << (MySqlParser::CONCAT_WS - 647))
      | (1ULL << (MySqlParser::CONNECTION_ID - 647))
      | (1ULL << (MySqlParser::CONV - 647))
      | (1ULL << (MySqlParser::CONVERT_TZ - 647))
      | (1ULL << (MySqlParser::COS - 647))
      | (1ULL << (MySqlParser::COT - 647))
      | (1ULL << (MySqlParser::CRC32 - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
      | (1ULL << (MySqlParser::CROSSES - 647))
      | (1ULL << (MySqlParser::DATEDIFF - 647))
      | (1ULL << (MySqlParser::DATE_FORMAT - 647))
      | (1ULL << (MySqlParser::DAYNAME - 647))
      | (1ULL << (MySqlParser::DAYOFMONTH - 647))
      | (1ULL << (MySqlParser::DAYOFWEEK - 647))
      | (1ULL << (MySqlParser::DAYOFYEAR - 647))
      | (1ULL << (MySqlParser::DECODE - 647))
      | (1ULL << (MySqlParser::DEGREES - 647))
      | (1ULL << (MySqlParser::DES_DECRYPT - 647))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
      | (1ULL << (MySqlParser::DIMENSION - 647))
      | (1ULL << (MySqlParser::DISJOINT - 647))
      | (1ULL << (MySqlParser::ELT - 647))
      | (1ULL << (MySqlParser::ENCODE - 647))
      | (1ULL << (MySqlParser::ENCRYPT - 647))
      | (1ULL << (MySqlParser::ENDPOINT - 647))
      | (1ULL << (MySqlParser::ENVELOPE - 647))
      | (1ULL << (MySqlParser::EQUALS - 647))
      | (1ULL << (MySqlParser::EXP - 647))
      | (1ULL << (MySqlParser::EXPORT_SET - 647))
      | (1ULL << (MySqlParser::EXTERIORRING - 647))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
      | (1ULL << (MySqlParser::FIELD - 647))
      | (1ULL << (MySqlParser::FIND_IN_SET - 647))
      | (1ULL << (MySqlParser::FLOOR - 647))
      | (1ULL << (MySqlParser::FORMAT - 647))
      | (1ULL << (MySqlParser::FOUND_ROWS - 647))
      | (1ULL << (MySqlParser::FROM_BASE64 - 647))
      | (1ULL << (MySqlParser::FROM_DAYS - 647))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
      | (1ULL << (MySqlParser::GET_FORMAT - 711))
      | (1ULL << (MySqlParser::GET_LOCK - 711))
      | (1ULL << (MySqlParser::GLENGTH - 711))
      | (1ULL << (MySqlParser::GREATEST - 711))
      | (1ULL << (MySqlParser::GTID_SUBSET - 711))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
      | (1ULL << (MySqlParser::HEX - 711))
      | (1ULL << (MySqlParser::IFNULL - 711))
      | (1ULL << (MySqlParser::INET6_ATON - 711))
      | (1ULL << (MySqlParser::INET6_NTOA - 711))
      | (1ULL << (MySqlParser::INET_ATON - 711))
      | (1ULL << (MySqlParser::INET_NTOA - 711))
      | (1ULL << (MySqlParser::INSTR - 711))
      | (1ULL << (MySqlParser::INTERIORRINGN - 711))
      | (1ULL << (MySqlParser::INTERSECTS - 711))
      | (1ULL << (MySqlParser::ISCLOSED - 711))
      | (1ULL << (MySqlParser::ISEMPTY - 711))
      | (1ULL << (MySqlParser::ISNULL - 711))
      | (1ULL << (MySqlParser::ISSIMPLE - 711))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
      | (1ULL << (MySqlParser::IS_IPV4 - 711))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
      | (1ULL << (MySqlParser::IS_IPV6 - 711))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
      | (1ULL << (MySqlParser::LCASE - 711))
      | (1ULL << (MySqlParser::LEAST - 711))
      | (1ULL << (MySqlParser::LENGTH - 711))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINEFROMWKB - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
      | (1ULL << (MySqlParser::LN - 711))
      | (1ULL << (MySqlParser::LOAD_FILE - 711))
      | (1ULL << (MySqlParser::LOCATE - 711))
      | (1ULL << (MySqlParser::LOG - 711))
      | (1ULL << (MySqlParser::LOG10 - 711))
      | (1ULL << (MySqlParser::LOG2 - 711))
      | (1ULL << (MySqlParser::LOWER - 711))
      | (1ULL << (MySqlParser::LPAD - 711))
      | (1ULL << (MySqlParser::LTRIM - 711))
      | (1ULL << (MySqlParser::MAKEDATE - 711))
      | (1ULL << (MySqlParser::MAKETIME - 711))
      | (1ULL << (MySqlParser::MAKE_SET - 711))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
      | (1ULL << (MySqlParser::MBRCONTAINS - 711))
      | (1ULL << (MySqlParser::MBRDISJOINT - 711))
      | (1ULL << (MySqlParser::MBREQUAL - 711))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
      | (1ULL << (MySqlParser::MBROVERLAPS - 711))
      | (1ULL << (MySqlParser::MBRTOUCHES - 711))
      | (1ULL << (MySqlParser::MBRWITHIN - 711))
      | (1ULL << (MySqlParser::MD5 - 711))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
      | (1ULL << (MySqlParser::MONTHNAME - 711))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::NAME_CONST - 775))
      | (1ULL << (MySqlParser::NULLIF - 775))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
      | (1ULL << (MySqlParser::NUMPOINTS - 775))
      | (1ULL << (MySqlParser::OCT - 775))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
      | (1ULL << (MySqlParser::ORD - 775))
      | (1ULL << (MySqlParser::OVERLAPS - 775))
      | (1ULL << (MySqlParser::PERIOD_ADD - 775))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
      | (1ULL << (MySqlParser::PI - 775))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::POINTFROMWKB - 775))
      | (1ULL << (MySqlParser::POINTN - 775))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYFROMWKB - 775))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::POW - 775))
      | (1ULL << (MySqlParser::POWER - 775))
      | (1ULL << (MySqlParser::QUOTE - 775))
      | (1ULL << (MySqlParser::RADIANS - 775))
      | (1ULL << (MySqlParser::RAND - 775))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
      | (1ULL << (MySqlParser::REVERSE - 775))
      | (1ULL << (MySqlParser::ROUND - 775))
      | (1ULL << (MySqlParser::ROW_COUNT - 775))
      | (1ULL << (MySqlParser::RPAD - 775))
      | (1ULL << (MySqlParser::RTRIM - 775))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
      | (1ULL << (MySqlParser::SESSION_USER - 775))
      | (1ULL << (MySqlParser::SHA - 775))
      | (1ULL << (MySqlParser::SHA1 - 775))
      | (1ULL << (MySqlParser::SHA2 - 775))
      | (1ULL << (MySqlParser::SIGN - 775))
      | (1ULL << (MySqlParser::SIN - 775))
      | (1ULL << (MySqlParser::SLEEP - 775))
      | (1ULL << (MySqlParser::SOUNDEX - 775))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
      | (1ULL << (MySqlParser::SQRT - 775))
      | (1ULL << (MySqlParser::SRID - 775))
      | (1ULL << (MySqlParser::STARTPOINT - 775))
      | (1ULL << (MySqlParser::STRCMP - 775))
      | (1ULL << (MySqlParser::STR_TO_DATE - 775))
      | (1ULL << (MySqlParser::ST_AREA - 775))
      | (1ULL << (MySqlParser::ST_ASBINARY - 775))
      | (1ULL << (MySqlParser::ST_ASTEXT - 775))
      | (1ULL << (MySqlParser::ST_ASWKB - 775))
      | (1ULL << (MySqlParser::ST_ASWKT - 775))
      | (1ULL << (MySqlParser::ST_BUFFER - 775))
      | (1ULL << (MySqlParser::ST_CENTROID - 775))
      | (1ULL << (MySqlParser::ST_CONTAINS - 775))
      | (1ULL << (MySqlParser::ST_CROSSES - 775))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
      | (1ULL << (MySqlParser::ST_DIMENSION - 775))
      | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
      | (1ULL << (MySqlParser::ST_EQUALS - 839))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POINTN - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_SRID - 839))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
      | (1ULL << (MySqlParser::ST_TOUCHES - 839))
      | (1ULL << (MySqlParser::ST_UNION - 839))
      | (1ULL << (MySqlParser::ST_WITHIN - 839))
      | (1ULL << (MySqlParser::ST_X - 839))
      | (1ULL << (MySqlParser::ST_Y - 839))
      | (1ULL << (MySqlParser::SUBDATE - 839))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
      | (1ULL << (MySqlParser::SUBTIME - 839))
      | (1ULL << (MySqlParser::SYSTEM_USER - 839))
      | (1ULL << (MySqlParser::TAN - 839))
      | (1ULL << (MySqlParser::TIMEDIFF - 839))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
      | (1ULL << (MySqlParser::TIME_FORMAT - 839))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
      | (1ULL << (MySqlParser::TOUCHES - 839))
      | (1ULL << (MySqlParser::TO_BASE64 - 839))
      | (1ULL << (MySqlParser::TO_DAYS - 839))
      | (1ULL << (MySqlParser::TO_SECONDS - 839))
      | (1ULL << (MySqlParser::UCASE - 839))
      | (1ULL << (MySqlParser::UNCOMPRESS - 839))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
      | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
      | (1ULL << (MySqlParser::UPDATEXML - 903))
      | (1ULL << (MySqlParser::UPPER - 903))
      | (1ULL << (MySqlParser::UUID - 903))
      | (1ULL << (MySqlParser::UUID_SHORT - 903))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
      | (1ULL << (MySqlParser::VERSION - 903))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
      | (1ULL << (MySqlParser::WEEKDAY - 903))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
      | (1ULL << (MySqlParser::WITHIN - 903))
      | (1ULL << (MySqlParser::YEARWEEK - 903))
      | (1ULL << (MySqlParser::Y_FUNCTION - 903))
      | (1ULL << (MySqlParser::X_FUNCTION - 903))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
      | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
      setState(3972);
      id_();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Repeat_statementContext ------------------------------------------------------------------

MySqlParser::Repeat_statementContext::Repeat_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::Repeat_statementContext::REPEAT() {
  return getTokens(MySqlParser::REPEAT);
}

tree::TerminalNode* MySqlParser::Repeat_statementContext::REPEAT(size_t i) {
  return getToken(MySqlParser::REPEAT, i);
}

tree::TerminalNode* MySqlParser::Repeat_statementContext::UNTIL() {
  return getToken(MySqlParser::UNTIL, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Repeat_statementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::Repeat_statementContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::Repeat_statementContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::Repeat_statementContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

std::vector<MySqlParser::Procedure_sql_statementContext *> MySqlParser::Repeat_statementContext::procedure_sql_statement() {
  return getRuleContexts<MySqlParser::Procedure_sql_statementContext>();
}

MySqlParser::Procedure_sql_statementContext* MySqlParser::Repeat_statementContext::procedure_sql_statement(size_t i) {
  return getRuleContext<MySqlParser::Procedure_sql_statementContext>(i);
}


size_t MySqlParser::Repeat_statementContext::getRuleIndex() const {
  return MySqlParser::RuleRepeat_statement;
}

void MySqlParser::Repeat_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRepeat_statement(this);
}

void MySqlParser::Repeat_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRepeat_statement(this);
}

MySqlParser::Repeat_statementContext* MySqlParser::repeat_statement() {
  Repeat_statementContext *_localctx = _tracker.createInstance<Repeat_statementContext>(_ctx, getState());
  enterRule(_localctx, 336, MySqlParser::RuleRepeat_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3978);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519))
      | (1ULL << (MySqlParser::QUARTER - 519))
      | (1ULL << (MySqlParser::MONTH - 519))
      | (1ULL << (MySqlParser::DAY - 519))
      | (1ULL << (MySqlParser::HOUR - 519))
      | (1ULL << (MySqlParser::MINUTE - 519))
      | (1ULL << (MySqlParser::WEEK - 519))
      | (1ULL << (MySqlParser::SECOND - 519))
      | (1ULL << (MySqlParser::MICROSECOND - 519))
      | (1ULL << (MySqlParser::TABLES - 519))
      | (1ULL << (MySqlParser::ROUTINE - 519))
      | (1ULL << (MySqlParser::EXECUTE - 519))
      | (1ULL << (MySqlParser::FILE - 519))
      | (1ULL << (MySqlParser::PROCESS - 519))
      | (1ULL << (MySqlParser::RELOAD - 519))
      | (1ULL << (MySqlParser::SHUTDOWN - 519))
      | (1ULL << (MySqlParser::SUPER - 519))
      | (1ULL << (MySqlParser::PRIVILEGES - 519))
      | (1ULL << (MySqlParser::ARMSCII8 - 519))
      | (1ULL << (MySqlParser::ASCII - 519))
      | (1ULL << (MySqlParser::BIG5 - 519))
      | (1ULL << (MySqlParser::CP1250 - 519))
      | (1ULL << (MySqlParser::CP1251 - 519))
      | (1ULL << (MySqlParser::CP1256 - 519))
      | (1ULL << (MySqlParser::CP1257 - 519))
      | (1ULL << (MySqlParser::CP850 - 519))
      | (1ULL << (MySqlParser::CP852 - 519))
      | (1ULL << (MySqlParser::CP866 - 519))
      | (1ULL << (MySqlParser::CP932 - 519))
      | (1ULL << (MySqlParser::DEC8 - 519))
      | (1ULL << (MySqlParser::EUCJPMS - 519))
      | (1ULL << (MySqlParser::EUCKR - 519))
      | (1ULL << (MySqlParser::GB2312 - 519))
      | (1ULL << (MySqlParser::GBK - 519))
      | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
      | (1ULL << (MySqlParser::HEBREW - 583))
      | (1ULL << (MySqlParser::HP8 - 583))
      | (1ULL << (MySqlParser::KEYBCS2 - 583))
      | (1ULL << (MySqlParser::KOI8R - 583))
      | (1ULL << (MySqlParser::KOI8U - 583))
      | (1ULL << (MySqlParser::LATIN1 - 583))
      | (1ULL << (MySqlParser::LATIN2 - 583))
      | (1ULL << (MySqlParser::LATIN5 - 583))
      | (1ULL << (MySqlParser::LATIN7 - 583))
      | (1ULL << (MySqlParser::MACCE - 583))
      | (1ULL << (MySqlParser::MACROMAN - 583))
      | (1ULL << (MySqlParser::SJIS - 583))
      | (1ULL << (MySqlParser::SWE7 - 583))
      | (1ULL << (MySqlParser::TIS620 - 583))
      | (1ULL << (MySqlParser::UCS2 - 583))
      | (1ULL << (MySqlParser::UJIS - 583))
      | (1ULL << (MySqlParser::UTF16 - 583))
      | (1ULL << (MySqlParser::UTF16LE - 583))
      | (1ULL << (MySqlParser::UTF32 - 583))
      | (1ULL << (MySqlParser::UTF8 - 583))
      | (1ULL << (MySqlParser::UTF8MB3 - 583))
      | (1ULL << (MySqlParser::UTF8MB4 - 583))
      | (1ULL << (MySqlParser::ARCHIVE - 583))
      | (1ULL << (MySqlParser::BLACKHOLE - 583))
      | (1ULL << (MySqlParser::CSV - 583))
      | (1ULL << (MySqlParser::FEDERATED - 583))
      | (1ULL << (MySqlParser::INNODB - 583))
      | (1ULL << (MySqlParser::MEMORY - 583))
      | (1ULL << (MySqlParser::MRG_MYISAM - 583))
      | (1ULL << (MySqlParser::MYISAM - 583))
      | (1ULL << (MySqlParser::NDB - 583))
      | (1ULL << (MySqlParser::NDBCLUSTER - 583))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
      | (1ULL << (MySqlParser::REPEATABLE - 583))
      | (1ULL << (MySqlParser::COMMITTED - 583))
      | (1ULL << (MySqlParser::UNCOMMITTED - 583))
      | (1ULL << (MySqlParser::SERIALIZABLE - 583))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
      | (1ULL << (MySqlParser::LINESTRING - 583))
      | (1ULL << (MySqlParser::MULTILINESTRING - 583))
      | (1ULL << (MySqlParser::MULTIPOINT - 583))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
      | (1ULL << (MySqlParser::POINT - 583))
      | (1ULL << (MySqlParser::POLYGON - 583))
      | (1ULL << (MySqlParser::ABS - 583))
      | (1ULL << (MySqlParser::ACOS - 583))
      | (1ULL << (MySqlParser::ADDDATE - 583))
      | (1ULL << (MySqlParser::ADDTIME - 583))
      | (1ULL << (MySqlParser::AES_DECRYPT - 583))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
      | (1ULL << (MySqlParser::AREA - 583))
      | (1ULL << (MySqlParser::ASBINARY - 583))
      | (1ULL << (MySqlParser::ASIN - 583))
      | (1ULL << (MySqlParser::ASTEXT - 583))
      | (1ULL << (MySqlParser::ASWKB - 583))
      | (1ULL << (MySqlParser::ASWKT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
      | (1ULL << (MySqlParser::ATAN - 583))
      | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
      | (1ULL << (MySqlParser::BIN - 647))
      | (1ULL << (MySqlParser::BIT_COUNT - 647))
      | (1ULL << (MySqlParser::BIT_LENGTH - 647))
      | (1ULL << (MySqlParser::BUFFER - 647))
      | (1ULL << (MySqlParser::CEIL - 647))
      | (1ULL << (MySqlParser::CEILING - 647))
      | (1ULL << (MySqlParser::CENTROID - 647))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
      | (1ULL << (MySqlParser::CHARSET - 647))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
      | (1ULL << (MySqlParser::COERCIBILITY - 647))
      | (1ULL << (MySqlParser::COLLATION - 647))
      | (1ULL << (MySqlParser::COMPRESS - 647))
      | (1ULL << (MySqlParser::CONCAT - 647))
      | (1ULL << (MySqlParser::CONCAT_WS - 647))
      | (1ULL << (MySqlParser::CONNECTION_ID - 647))
      | (1ULL << (MySqlParser::CONV - 647))
      | (1ULL << (MySqlParser::CONVERT_TZ - 647))
      | (1ULL << (MySqlParser::COS - 647))
      | (1ULL << (MySqlParser::COT - 647))
      | (1ULL << (MySqlParser::CRC32 - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
      | (1ULL << (MySqlParser::CROSSES - 647))
      | (1ULL << (MySqlParser::DATEDIFF - 647))
      | (1ULL << (MySqlParser::DATE_FORMAT - 647))
      | (1ULL << (MySqlParser::DAYNAME - 647))
      | (1ULL << (MySqlParser::DAYOFMONTH - 647))
      | (1ULL << (MySqlParser::DAYOFWEEK - 647))
      | (1ULL << (MySqlParser::DAYOFYEAR - 647))
      | (1ULL << (MySqlParser::DECODE - 647))
      | (1ULL << (MySqlParser::DEGREES - 647))
      | (1ULL << (MySqlParser::DES_DECRYPT - 647))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
      | (1ULL << (MySqlParser::DIMENSION - 647))
      | (1ULL << (MySqlParser::DISJOINT - 647))
      | (1ULL << (MySqlParser::ELT - 647))
      | (1ULL << (MySqlParser::ENCODE - 647))
      | (1ULL << (MySqlParser::ENCRYPT - 647))
      | (1ULL << (MySqlParser::ENDPOINT - 647))
      | (1ULL << (MySqlParser::ENVELOPE - 647))
      | (1ULL << (MySqlParser::EQUALS - 647))
      | (1ULL << (MySqlParser::EXP - 647))
      | (1ULL << (MySqlParser::EXPORT_SET - 647))
      | (1ULL << (MySqlParser::EXTERIORRING - 647))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
      | (1ULL << (MySqlParser::FIELD - 647))
      | (1ULL << (MySqlParser::FIND_IN_SET - 647))
      | (1ULL << (MySqlParser::FLOOR - 647))
      | (1ULL << (MySqlParser::FORMAT - 647))
      | (1ULL << (MySqlParser::FOUND_ROWS - 647))
      | (1ULL << (MySqlParser::FROM_BASE64 - 647))
      | (1ULL << (MySqlParser::FROM_DAYS - 647))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
      | (1ULL << (MySqlParser::GET_FORMAT - 711))
      | (1ULL << (MySqlParser::GET_LOCK - 711))
      | (1ULL << (MySqlParser::GLENGTH - 711))
      | (1ULL << (MySqlParser::GREATEST - 711))
      | (1ULL << (MySqlParser::GTID_SUBSET - 711))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
      | (1ULL << (MySqlParser::HEX - 711))
      | (1ULL << (MySqlParser::IFNULL - 711))
      | (1ULL << (MySqlParser::INET6_ATON - 711))
      | (1ULL << (MySqlParser::INET6_NTOA - 711))
      | (1ULL << (MySqlParser::INET_ATON - 711))
      | (1ULL << (MySqlParser::INET_NTOA - 711))
      | (1ULL << (MySqlParser::INSTR - 711))
      | (1ULL << (MySqlParser::INTERIORRINGN - 711))
      | (1ULL << (MySqlParser::INTERSECTS - 711))
      | (1ULL << (MySqlParser::ISCLOSED - 711))
      | (1ULL << (MySqlParser::ISEMPTY - 711))
      | (1ULL << (MySqlParser::ISNULL - 711))
      | (1ULL << (MySqlParser::ISSIMPLE - 711))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
      | (1ULL << (MySqlParser::IS_IPV4 - 711))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
      | (1ULL << (MySqlParser::IS_IPV6 - 711))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
      | (1ULL << (MySqlParser::LCASE - 711))
      | (1ULL << (MySqlParser::LEAST - 711))
      | (1ULL << (MySqlParser::LENGTH - 711))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINEFROMWKB - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
      | (1ULL << (MySqlParser::LN - 711))
      | (1ULL << (MySqlParser::LOAD_FILE - 711))
      | (1ULL << (MySqlParser::LOCATE - 711))
      | (1ULL << (MySqlParser::LOG - 711))
      | (1ULL << (MySqlParser::LOG10 - 711))
      | (1ULL << (MySqlParser::LOG2 - 711))
      | (1ULL << (MySqlParser::LOWER - 711))
      | (1ULL << (MySqlParser::LPAD - 711))
      | (1ULL << (MySqlParser::LTRIM - 711))
      | (1ULL << (MySqlParser::MAKEDATE - 711))
      | (1ULL << (MySqlParser::MAKETIME - 711))
      | (1ULL << (MySqlParser::MAKE_SET - 711))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
      | (1ULL << (MySqlParser::MBRCONTAINS - 711))
      | (1ULL << (MySqlParser::MBRDISJOINT - 711))
      | (1ULL << (MySqlParser::MBREQUAL - 711))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
      | (1ULL << (MySqlParser::MBROVERLAPS - 711))
      | (1ULL << (MySqlParser::MBRTOUCHES - 711))
      | (1ULL << (MySqlParser::MBRWITHIN - 711))
      | (1ULL << (MySqlParser::MD5 - 711))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
      | (1ULL << (MySqlParser::MONTHNAME - 711))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::NAME_CONST - 775))
      | (1ULL << (MySqlParser::NULLIF - 775))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
      | (1ULL << (MySqlParser::NUMPOINTS - 775))
      | (1ULL << (MySqlParser::OCT - 775))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
      | (1ULL << (MySqlParser::ORD - 775))
      | (1ULL << (MySqlParser::OVERLAPS - 775))
      | (1ULL << (MySqlParser::PERIOD_ADD - 775))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
      | (1ULL << (MySqlParser::PI - 775))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::POINTFROMWKB - 775))
      | (1ULL << (MySqlParser::POINTN - 775))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYFROMWKB - 775))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::POW - 775))
      | (1ULL << (MySqlParser::POWER - 775))
      | (1ULL << (MySqlParser::QUOTE - 775))
      | (1ULL << (MySqlParser::RADIANS - 775))
      | (1ULL << (MySqlParser::RAND - 775))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
      | (1ULL << (MySqlParser::REVERSE - 775))
      | (1ULL << (MySqlParser::ROUND - 775))
      | (1ULL << (MySqlParser::ROW_COUNT - 775))
      | (1ULL << (MySqlParser::RPAD - 775))
      | (1ULL << (MySqlParser::RTRIM - 775))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
      | (1ULL << (MySqlParser::SESSION_USER - 775))
      | (1ULL << (MySqlParser::SHA - 775))
      | (1ULL << (MySqlParser::SHA1 - 775))
      | (1ULL << (MySqlParser::SHA2 - 775))
      | (1ULL << (MySqlParser::SIGN - 775))
      | (1ULL << (MySqlParser::SIN - 775))
      | (1ULL << (MySqlParser::SLEEP - 775))
      | (1ULL << (MySqlParser::SOUNDEX - 775))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
      | (1ULL << (MySqlParser::SQRT - 775))
      | (1ULL << (MySqlParser::SRID - 775))
      | (1ULL << (MySqlParser::STARTPOINT - 775))
      | (1ULL << (MySqlParser::STRCMP - 775))
      | (1ULL << (MySqlParser::STR_TO_DATE - 775))
      | (1ULL << (MySqlParser::ST_AREA - 775))
      | (1ULL << (MySqlParser::ST_ASBINARY - 775))
      | (1ULL << (MySqlParser::ST_ASTEXT - 775))
      | (1ULL << (MySqlParser::ST_ASWKB - 775))
      | (1ULL << (MySqlParser::ST_ASWKT - 775))
      | (1ULL << (MySqlParser::ST_BUFFER - 775))
      | (1ULL << (MySqlParser::ST_CENTROID - 775))
      | (1ULL << (MySqlParser::ST_CONTAINS - 775))
      | (1ULL << (MySqlParser::ST_CROSSES - 775))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
      | (1ULL << (MySqlParser::ST_DIMENSION - 775))
      | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
      | (1ULL << (MySqlParser::ST_EQUALS - 839))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POINTN - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_SRID - 839))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
      | (1ULL << (MySqlParser::ST_TOUCHES - 839))
      | (1ULL << (MySqlParser::ST_UNION - 839))
      | (1ULL << (MySqlParser::ST_WITHIN - 839))
      | (1ULL << (MySqlParser::ST_X - 839))
      | (1ULL << (MySqlParser::ST_Y - 839))
      | (1ULL << (MySqlParser::SUBDATE - 839))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
      | (1ULL << (MySqlParser::SUBTIME - 839))
      | (1ULL << (MySqlParser::SYSTEM_USER - 839))
      | (1ULL << (MySqlParser::TAN - 839))
      | (1ULL << (MySqlParser::TIMEDIFF - 839))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
      | (1ULL << (MySqlParser::TIME_FORMAT - 839))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
      | (1ULL << (MySqlParser::TOUCHES - 839))
      | (1ULL << (MySqlParser::TO_BASE64 - 839))
      | (1ULL << (MySqlParser::TO_DAYS - 839))
      | (1ULL << (MySqlParser::TO_SECONDS - 839))
      | (1ULL << (MySqlParser::UCASE - 839))
      | (1ULL << (MySqlParser::UNCOMPRESS - 839))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
      | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
      | (1ULL << (MySqlParser::UPDATEXML - 903))
      | (1ULL << (MySqlParser::UPPER - 903))
      | (1ULL << (MySqlParser::UUID - 903))
      | (1ULL << (MySqlParser::UUID_SHORT - 903))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
      | (1ULL << (MySqlParser::VERSION - 903))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
      | (1ULL << (MySqlParser::WEEKDAY - 903))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
      | (1ULL << (MySqlParser::WITHIN - 903))
      | (1ULL << (MySqlParser::YEARWEEK - 903))
      | (1ULL << (MySqlParser::Y_FUNCTION - 903))
      | (1ULL << (MySqlParser::X_FUNCTION - 903))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
      | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
      setState(3975);
      id_();
      setState(3976);
      match(MySqlParser::COLON_SYMB);
    }
    setState(3980);
    match(MySqlParser::REPEAT);
    setState(3982); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3981);
      procedure_sql_statement();
      setState(3984); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & ((1ULL << (MySqlParser::ALTER - 7))
      | (1ULL << (MySqlParser::ANALYZE - 7))
      | (1ULL << (MySqlParser::CALL - 7))
      | (1ULL << (MySqlParser::CASE - 7))
      | (1ULL << (MySqlParser::CHANGE - 7))
      | (1ULL << (MySqlParser::CHECK - 7))
      | (1ULL << (MySqlParser::CREATE - 7))
      | (1ULL << (MySqlParser::DELETE - 7))
      | (1ULL << (MySqlParser::DESC - 7))
      | (1ULL << (MySqlParser::DESCRIBE - 7))
      | (1ULL << (MySqlParser::DROP - 7))
      | (1ULL << (MySqlParser::EXPLAIN - 7))
      | (1ULL << (MySqlParser::FETCH - 7))
      | (1ULL << (MySqlParser::GRANT - 7))
      | (1ULL << (MySqlParser::IF - 7)))) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::INSERT - 71))
      | (1ULL << (MySqlParser::ITERATE - 71))
      | (1ULL << (MySqlParser::KILL - 71))
      | (1ULL << (MySqlParser::LEAVE - 71))
      | (1ULL << (MySqlParser::LEFT - 71))
      | (1ULL << (MySqlParser::LOAD - 71))
      | (1ULL << (MySqlParser::LOCK - 71))
      | (1ULL << (MySqlParser::LOOP - 71))
      | (1ULL << (MySqlParser::OPTIMIZE - 71))
      | (1ULL << (MySqlParser::PURGE - 71))
      | (1ULL << (MySqlParser::RELEASE - 71))
      | (1ULL << (MySqlParser::RENAME - 71))
      | (1ULL << (MySqlParser::REPEAT - 71))
      | (1ULL << (MySqlParser::REPLACE - 71))
      | (1ULL << (MySqlParser::RETURN - 71))
      | (1ULL << (MySqlParser::REVOKE - 71))
      | (1ULL << (MySqlParser::RIGHT - 71))
      | (1ULL << (MySqlParser::SELECT - 71))
      | (1ULL << (MySqlParser::SET - 71))
      | (1ULL << (MySqlParser::SHOW - 71)))) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & ((1ULL << (MySqlParser::UNLOCK - 156))
      | (1ULL << (MySqlParser::UPDATE - 156))
      | (1ULL << (MySqlParser::USE - 156))
      | (1ULL << (MySqlParser::WHILE - 156))
      | (1ULL << (MySqlParser::DATE - 156))
      | (1ULL << (MySqlParser::TIME - 156))
      | (1ULL << (MySqlParser::TIMESTAMP - 156))
      | (1ULL << (MySqlParser::DATETIME - 156))
      | (1ULL << (MySqlParser::YEAR - 156))
      | (1ULL << (MySqlParser::TEXT - 156))
      | (1ULL << (MySqlParser::ENUM - 156))
      | (1ULL << (MySqlParser::COUNT - 156)))) != 0) || ((((_la - 237) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 237)) & ((1ULL << (MySqlParser::POSITION - 237))
      | (1ULL << (MySqlParser::ACTION - 237))
      | (1ULL << (MySqlParser::AFTER - 237))
      | (1ULL << (MySqlParser::ALGORITHM - 237))
      | (1ULL << (MySqlParser::ANY - 237))
      | (1ULL << (MySqlParser::AT - 237))
      | (1ULL << (MySqlParser::AUTHORS - 237))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 237))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 237))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 237))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 237))
      | (1ULL << (MySqlParser::BEGIN - 237))
      | (1ULL << (MySqlParser::BINLOG - 237))
      | (1ULL << (MySqlParser::BIT - 237))
      | (1ULL << (MySqlParser::BTREE - 237))
      | (1ULL << (MySqlParser::CACHE - 237))
      | (1ULL << (MySqlParser::CASCADED - 237))
      | (1ULL << (MySqlParser::CHAIN - 237))
      | (1ULL << (MySqlParser::CHECKSUM - 237))
      | (1ULL << (MySqlParser::CIPHER - 237))
      | (1ULL << (MySqlParser::CLIENT - 237))
      | (1ULL << (MySqlParser::CLOSE - 237))
      | (1ULL << (MySqlParser::COALESCE - 237))
      | (1ULL << (MySqlParser::CODE - 237))
      | (1ULL << (MySqlParser::COLUMNS - 237))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 237))
      | (1ULL << (MySqlParser::COMMENT - 237))
      | (1ULL << (MySqlParser::COMMIT - 237))
      | (1ULL << (MySqlParser::COMPACT - 237))
      | (1ULL << (MySqlParser::COMPLETION - 237))
      | (1ULL << (MySqlParser::COMPRESSED - 237))
      | (1ULL << (MySqlParser::CONCURRENT - 237))
      | (1ULL << (MySqlParser::CONNECTION - 237))
      | (1ULL << (MySqlParser::CONSISTENT - 237))
      | (1ULL << (MySqlParser::CONTAINS - 237))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 237))
      | (1ULL << (MySqlParser::COPY - 237))
      | (1ULL << (MySqlParser::DATA - 237))
      | (1ULL << (MySqlParser::DATAFILE - 237))
      | (1ULL << (MySqlParser::DEALLOCATE - 237))
      | (1ULL << (MySqlParser::DEFINER - 237))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 237))
      | (1ULL << (MySqlParser::DIRECTORY - 237))
      | (1ULL << (MySqlParser::DISABLE - 237))
      | (1ULL << (MySqlParser::DISCARD - 237))
      | (1ULL << (MySqlParser::DISK - 237))
      | (1ULL << (MySqlParser::DO - 237)))) != 0) || ((((_la - 301) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 301)) & ((1ULL << (MySqlParser::DUMPFILE - 301))
      | (1ULL << (MySqlParser::DUPLICATE - 301))
      | (1ULL << (MySqlParser::DYNAMIC - 301))
      | (1ULL << (MySqlParser::ENABLE - 301))
      | (1ULL << (MySqlParser::ENDS - 301))
      | (1ULL << (MySqlParser::ENGINE - 301))
      | (1ULL << (MySqlParser::ENGINES - 301))
      | (1ULL << (MySqlParser::ERRORS - 301))
      | (1ULL << (MySqlParser::ESCAPE - 301))
      | (1ULL << (MySqlParser::EVEN - 301))
      | (1ULL << (MySqlParser::EVENT - 301))
      | (1ULL << (MySqlParser::EVENTS - 301))
      | (1ULL << (MySqlParser::EVERY - 301))
      | (1ULL << (MySqlParser::EXCHANGE - 301))
      | (1ULL << (MySqlParser::EXCLUSIVE - 301))
      | (1ULL << (MySqlParser::EXPIRE - 301))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 301))
      | (1ULL << (MySqlParser::FIELDS - 301))
      | (1ULL << (MySqlParser::FIRST - 301))
      | (1ULL << (MySqlParser::FIXED - 301))
      | (1ULL << (MySqlParser::FLUSH - 301))
      | (1ULL << (MySqlParser::FULL - 301))
      | (1ULL << (MySqlParser::FUNCTION - 301))
      | (1ULL << (MySqlParser::GLOBAL - 301))
      | (1ULL << (MySqlParser::GRANTS - 301))
      | (1ULL << (MySqlParser::HANDLER - 301))
      | (1ULL << (MySqlParser::HASH - 301))
      | (1ULL << (MySqlParser::HELP - 301))
      | (1ULL << (MySqlParser::HOST - 301))
      | (1ULL << (MySqlParser::IDENTIFIED - 301))
      | (1ULL << (MySqlParser::IMPORT - 301))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 301))
      | (1ULL << (MySqlParser::INPLACE - 301))
      | (1ULL << (MySqlParser::INSERT_METHOD - 301))
      | (1ULL << (MySqlParser::INSTALL - 301))
      | (1ULL << (MySqlParser::INVOKER - 301))
      | (1ULL << (MySqlParser::ISOLATION - 301))
      | (1ULL << (MySqlParser::ISSUER - 301))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 301))
      | (1ULL << (MySqlParser::LANGUAGE - 301))
      | (1ULL << (MySqlParser::LAST - 301))
      | (1ULL << (MySqlParser::LESS - 301)))) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 365)) & ((1ULL << (MySqlParser::LEVEL - 365))
      | (1ULL << (MySqlParser::LIST - 365))
      | (1ULL << (MySqlParser::LOCAL - 365))
      | (1ULL << (MySqlParser::LOGFILE - 365))
      | (1ULL << (MySqlParser::LOGS - 365))
      | (1ULL << (MySqlParser::MASTER - 365))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_ROWS - 365))
      | (1ULL << (MySqlParser::MAX_SIZE - 365))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 365))
      | (1ULL << (MySqlParser::MERGE - 365))
      | (1ULL << (MySqlParser::MID - 365))
      | (1ULL << (MySqlParser::MIN_ROWS - 365))
      | (1ULL << (MySqlParser::MODIFY - 365))
      | (1ULL << (MySqlParser::MUTEX - 365))
      | (1ULL << (MySqlParser::MYSQL - 365))
      | (1ULL << (MySqlParser::NAME - 365))
      | (1ULL << (MySqlParser::NAMES - 365))
      | (1ULL << (MySqlParser::NCHAR - 365))
      | (1ULL << (MySqlParser::NO - 365))
      | (1ULL << (MySqlParser::NODEGROUP - 365))
      | (1ULL << (MySqlParser::NONE - 365))
      | (1ULL << (MySqlParser::OFFLINE - 365))
      | (1ULL << (MySqlParser::OFFSET - 365))
      | (1ULL << (MySqlParser::OJ - 365))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 365))
      | (1ULL << (MySqlParser::ONLINE - 365))
      | (1ULL << (MySqlParser::ONLY - 365))
      | (1ULL << (MySqlParser::OPEN - 365))
      | (1ULL << (MySqlParser::OPTIONS - 365))
      | (1ULL << (MySqlParser::OWNER - 365))
      | (1ULL << (MySqlParser::PACK_KEYS - 365))
      | (1ULL << (MySqlParser::PARSER - 365))
      | (1ULL << (MySqlParser::PARTIAL - 365)))) != 0) || ((((_la - 429) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 429)) & ((1ULL << (MySqlParser::PARTITIONING - 429))
      | (1ULL << (MySqlParser::PARTITIONS - 429))
      | (1ULL << (MySqlParser::PASSWORD - 429))
      | (1ULL << (MySqlParser::PLUGINS - 429))
      | (1ULL << (MySqlParser::PORT - 429))
      | (1ULL << (MySqlParser::PREPARE - 429))
      | (1ULL << (MySqlParser::PRESERVE - 429))
      | (1ULL << (MySqlParser::PROCESSLIST - 429))
      | (1ULL << (MySqlParser::PROFILE - 429))
      | (1ULL << (MySqlParser::PROFILES - 429))
      | (1ULL << (MySqlParser::PROXY - 429))
      | (1ULL << (MySqlParser::QUERY - 429))
      | (1ULL << (MySqlParser::QUICK - 429))
      | (1ULL << (MySqlParser::REBUILD - 429))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 429))
      | (1ULL << (MySqlParser::REDUNDANT - 429))
      | (1ULL << (MySqlParser::RELAYLOG - 429))
      | (1ULL << (MySqlParser::REMOVE - 429))
      | (1ULL << (MySqlParser::REORGANIZE - 429))
      | (1ULL << (MySqlParser::REPAIR - 429))
      | (1ULL << (MySqlParser::REPLICATION - 429))
      | (1ULL << (MySqlParser::RESET - 429))
      | (1ULL << (MySqlParser::RETURNS - 429))
      | (1ULL << (MySqlParser::ROLLBACK - 429))
      | (1ULL << (MySqlParser::ROLLUP - 429))
      | (1ULL << (MySqlParser::ROW - 429))
      | (1ULL << (MySqlParser::ROWS - 429))
      | (1ULL << (MySqlParser::ROW_FORMAT - 429))
      | (1ULL << (MySqlParser::SAVEPOINT - 429))
      | (1ULL << (MySqlParser::SCHEDULE - 429))
      | (1ULL << (MySqlParser::SECURITY - 429))
      | (1ULL << (MySqlParser::SERVER - 429))
      | (1ULL << (MySqlParser::SESSION - 429))
      | (1ULL << (MySqlParser::SHARE - 429))
      | (1ULL << (MySqlParser::SHARED - 429))
      | (1ULL << (MySqlParser::SIGNED - 429))
      | (1ULL << (MySqlParser::SIMPLE - 429))
      | (1ULL << (MySqlParser::SLAVE - 429))
      | (1ULL << (MySqlParser::SNAPSHOT - 429))
      | (1ULL << (MySqlParser::SOCKET - 429))
      | (1ULL << (MySqlParser::SOME - 429))
      | (1ULL << (MySqlParser::SOUNDS - 429)))) != 0) || ((((_la - 495) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 495)) & ((1ULL << (MySqlParser::SQL_BUFFER_RESULT - 495))
      | (1ULL << (MySqlParser::SQL_CACHE - 495))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 495))
      | (1ULL << (MySqlParser::START - 495))
      | (1ULL << (MySqlParser::STARTS - 495))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 495))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 495))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 495))
      | (1ULL << (MySqlParser::STATUS - 495))
      | (1ULL << (MySqlParser::STOP - 495))
      | (1ULL << (MySqlParser::STORAGE - 495))
      | (1ULL << (MySqlParser::SUBJECT - 495))
      | (1ULL << (MySqlParser::SUBPARTITION - 495))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 495))
      | (1ULL << (MySqlParser::TABLESPACE - 495))
      | (1ULL << (MySqlParser::TEMPORARY - 495))
      | (1ULL << (MySqlParser::TEMPTABLE - 495))
      | (1ULL << (MySqlParser::THAN - 495))
      | (1ULL << (MySqlParser::TRANSACTION - 495))
      | (1ULL << (MySqlParser::TRUNCATE - 495))
      | (1ULL << (MySqlParser::UNDEFINED - 495))
      | (1ULL << (MySqlParser::UNDOFILE - 495))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 495))
      | (1ULL << (MySqlParser::UNINSTALL - 495))
      | (1ULL << (MySqlParser::UNKNOWN - 495))
      | (1ULL << (MySqlParser::UPGRADE - 495))
      | (1ULL << (MySqlParser::USER - 495))
      | (1ULL << (MySqlParser::VALUE - 495))
      | (1ULL << (MySqlParser::VARIABLES - 495))
      | (1ULL << (MySqlParser::VIEW - 495))
      | (1ULL << (MySqlParser::WAIT - 495))
      | (1ULL << (MySqlParser::WARNINGS - 495))
      | (1ULL << (MySqlParser::WORK - 495))
      | (1ULL << (MySqlParser::WRAPPER - 495))
      | (1ULL << (MySqlParser::X509 - 495))
      | (1ULL << (MySqlParser::XA - 495))
      | (1ULL << (MySqlParser::XML - 495))
      | (1ULL << (MySqlParser::QUARTER - 495))
      | (1ULL << (MySqlParser::MONTH - 495))
      | (1ULL << (MySqlParser::DAY - 495))
      | (1ULL << (MySqlParser::HOUR - 495))
      | (1ULL << (MySqlParser::MINUTE - 495))
      | (1ULL << (MySqlParser::WEEK - 495))
      | (1ULL << (MySqlParser::SECOND - 495))
      | (1ULL << (MySqlParser::MICROSECOND - 495))
      | (1ULL << (MySqlParser::TABLES - 495))
      | (1ULL << (MySqlParser::ROUTINE - 495)))) != 0) || ((((_la - 559) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 559)) & ((1ULL << (MySqlParser::EXECUTE - 559))
      | (1ULL << (MySqlParser::FILE - 559))
      | (1ULL << (MySqlParser::PROCESS - 559))
      | (1ULL << (MySqlParser::RELOAD - 559))
      | (1ULL << (MySqlParser::SHUTDOWN - 559))
      | (1ULL << (MySqlParser::SUPER - 559))
      | (1ULL << (MySqlParser::PRIVILEGES - 559))
      | (1ULL << (MySqlParser::ARMSCII8 - 559))
      | (1ULL << (MySqlParser::ASCII - 559))
      | (1ULL << (MySqlParser::BIG5 - 559))
      | (1ULL << (MySqlParser::CP1250 - 559))
      | (1ULL << (MySqlParser::CP1251 - 559))
      | (1ULL << (MySqlParser::CP1256 - 559))
      | (1ULL << (MySqlParser::CP1257 - 559))
      | (1ULL << (MySqlParser::CP850 - 559))
      | (1ULL << (MySqlParser::CP852 - 559))
      | (1ULL << (MySqlParser::CP866 - 559))
      | (1ULL << (MySqlParser::CP932 - 559))
      | (1ULL << (MySqlParser::DEC8 - 559))
      | (1ULL << (MySqlParser::EUCJPMS - 559))
      | (1ULL << (MySqlParser::EUCKR - 559))
      | (1ULL << (MySqlParser::GB2312 - 559))
      | (1ULL << (MySqlParser::GBK - 559))
      | (1ULL << (MySqlParser::GEOSTD8 - 559))
      | (1ULL << (MySqlParser::GREEK - 559))
      | (1ULL << (MySqlParser::HEBREW - 559))
      | (1ULL << (MySqlParser::HP8 - 559))
      | (1ULL << (MySqlParser::KEYBCS2 - 559))
      | (1ULL << (MySqlParser::KOI8R - 559))
      | (1ULL << (MySqlParser::KOI8U - 559))
      | (1ULL << (MySqlParser::LATIN1 - 559))
      | (1ULL << (MySqlParser::LATIN2 - 559))
      | (1ULL << (MySqlParser::LATIN5 - 559))
      | (1ULL << (MySqlParser::LATIN7 - 559))
      | (1ULL << (MySqlParser::MACCE - 559))
      | (1ULL << (MySqlParser::MACROMAN - 559))
      | (1ULL << (MySqlParser::SJIS - 559))
      | (1ULL << (MySqlParser::SWE7 - 559))
      | (1ULL << (MySqlParser::TIS620 - 559))
      | (1ULL << (MySqlParser::UCS2 - 559))
      | (1ULL << (MySqlParser::UJIS - 559))
      | (1ULL << (MySqlParser::UTF16 - 559))
      | (1ULL << (MySqlParser::UTF16LE - 559))
      | (1ULL << (MySqlParser::UTF32 - 559))
      | (1ULL << (MySqlParser::UTF8 - 559))
      | (1ULL << (MySqlParser::UTF8MB3 - 559))
      | (1ULL << (MySqlParser::UTF8MB4 - 559))
      | (1ULL << (MySqlParser::ARCHIVE - 559))
      | (1ULL << (MySqlParser::BLACKHOLE - 559))
      | (1ULL << (MySqlParser::CSV - 559))
      | (1ULL << (MySqlParser::FEDERATED - 559))
      | (1ULL << (MySqlParser::INNODB - 559))
      | (1ULL << (MySqlParser::MEMORY - 559))
      | (1ULL << (MySqlParser::MRG_MYISAM - 559))
      | (1ULL << (MySqlParser::MYISAM - 559))
      | (1ULL << (MySqlParser::NDB - 559))
      | (1ULL << (MySqlParser::NDBCLUSTER - 559))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 559))
      | (1ULL << (MySqlParser::REPEATABLE - 559))
      | (1ULL << (MySqlParser::COMMITTED - 559))
      | (1ULL << (MySqlParser::UNCOMMITTED - 559))
      | (1ULL << (MySqlParser::SERIALIZABLE - 559))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 559))
      | (1ULL << (MySqlParser::LINESTRING - 559)))) != 0) || ((((_la - 623) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 623)) & ((1ULL << (MySqlParser::MULTILINESTRING - 623))
      | (1ULL << (MySqlParser::MULTIPOINT - 623))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 623))
      | (1ULL << (MySqlParser::POINT - 623))
      | (1ULL << (MySqlParser::POLYGON - 623))
      | (1ULL << (MySqlParser::ABS - 623))
      | (1ULL << (MySqlParser::ACOS - 623))
      | (1ULL << (MySqlParser::ADDDATE - 623))
      | (1ULL << (MySqlParser::ADDTIME - 623))
      | (1ULL << (MySqlParser::AES_DECRYPT - 623))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 623))
      | (1ULL << (MySqlParser::AREA - 623))
      | (1ULL << (MySqlParser::ASBINARY - 623))
      | (1ULL << (MySqlParser::ASIN - 623))
      | (1ULL << (MySqlParser::ASTEXT - 623))
      | (1ULL << (MySqlParser::ASWKB - 623))
      | (1ULL << (MySqlParser::ASWKT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 623))
      | (1ULL << (MySqlParser::ATAN - 623))
      | (1ULL << (MySqlParser::ATAN2 - 623))
      | (1ULL << (MySqlParser::BENCHMARK - 623))
      | (1ULL << (MySqlParser::BIN - 623))
      | (1ULL << (MySqlParser::BIT_COUNT - 623))
      | (1ULL << (MySqlParser::BIT_LENGTH - 623))
      | (1ULL << (MySqlParser::BUFFER - 623))
      | (1ULL << (MySqlParser::CEIL - 623))
      | (1ULL << (MySqlParser::CEILING - 623))
      | (1ULL << (MySqlParser::CENTROID - 623))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 623))
      | (1ULL << (MySqlParser::CHARSET - 623))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 623))
      | (1ULL << (MySqlParser::COERCIBILITY - 623))
      | (1ULL << (MySqlParser::COLLATION - 623))
      | (1ULL << (MySqlParser::COMPRESS - 623))
      | (1ULL << (MySqlParser::CONCAT - 623))
      | (1ULL << (MySqlParser::CONCAT_WS - 623))
      | (1ULL << (MySqlParser::CONNECTION_ID - 623))
      | (1ULL << (MySqlParser::CONV - 623))
      | (1ULL << (MySqlParser::CONVERT_TZ - 623))
      | (1ULL << (MySqlParser::COS - 623))
      | (1ULL << (MySqlParser::COT - 623))
      | (1ULL << (MySqlParser::CRC32 - 623))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 623))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 623))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 623))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 623))
      | (1ULL << (MySqlParser::CROSSES - 623))
      | (1ULL << (MySqlParser::DATEDIFF - 623))
      | (1ULL << (MySqlParser::DATE_FORMAT - 623))
      | (1ULL << (MySqlParser::DAYNAME - 623))
      | (1ULL << (MySqlParser::DAYOFMONTH - 623))
      | (1ULL << (MySqlParser::DAYOFWEEK - 623))
      | (1ULL << (MySqlParser::DAYOFYEAR - 623))
      | (1ULL << (MySqlParser::DECODE - 623))
      | (1ULL << (MySqlParser::DEGREES - 623))
      | (1ULL << (MySqlParser::DES_DECRYPT - 623))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 623))
      | (1ULL << (MySqlParser::DIMENSION - 623))
      | (1ULL << (MySqlParser::DISJOINT - 623))
      | (1ULL << (MySqlParser::ELT - 623)))) != 0) || ((((_la - 687) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 687)) & ((1ULL << (MySqlParser::ENCODE - 687))
      | (1ULL << (MySqlParser::ENCRYPT - 687))
      | (1ULL << (MySqlParser::ENDPOINT - 687))
      | (1ULL << (MySqlParser::ENVELOPE - 687))
      | (1ULL << (MySqlParser::EQUALS - 687))
      | (1ULL << (MySqlParser::EXP - 687))
      | (1ULL << (MySqlParser::EXPORT_SET - 687))
      | (1ULL << (MySqlParser::EXTERIORRING - 687))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 687))
      | (1ULL << (MySqlParser::FIELD - 687))
      | (1ULL << (MySqlParser::FIND_IN_SET - 687))
      | (1ULL << (MySqlParser::FLOOR - 687))
      | (1ULL << (MySqlParser::FORMAT - 687))
      | (1ULL << (MySqlParser::FOUND_ROWS - 687))
      | (1ULL << (MySqlParser::FROM_BASE64 - 687))
      | (1ULL << (MySqlParser::FROM_DAYS - 687))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 687))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYN - 687))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 687))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 687))
      | (1ULL << (MySqlParser::GET_FORMAT - 687))
      | (1ULL << (MySqlParser::GET_LOCK - 687))
      | (1ULL << (MySqlParser::GLENGTH - 687))
      | (1ULL << (MySqlParser::GREATEST - 687))
      | (1ULL << (MySqlParser::GTID_SUBSET - 687))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 687))
      | (1ULL << (MySqlParser::HEX - 687))
      | (1ULL << (MySqlParser::IFNULL - 687))
      | (1ULL << (MySqlParser::INET6_ATON - 687))
      | (1ULL << (MySqlParser::INET6_NTOA - 687))
      | (1ULL << (MySqlParser::INET_ATON - 687))
      | (1ULL << (MySqlParser::INET_NTOA - 687))
      | (1ULL << (MySqlParser::INSTR - 687))
      | (1ULL << (MySqlParser::INTERIORRINGN - 687))
      | (1ULL << (MySqlParser::INTERSECTS - 687))
      | (1ULL << (MySqlParser::ISCLOSED - 687))
      | (1ULL << (MySqlParser::ISEMPTY - 687))
      | (1ULL << (MySqlParser::ISNULL - 687))
      | (1ULL << (MySqlParser::ISSIMPLE - 687))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 687))
      | (1ULL << (MySqlParser::IS_IPV4 - 687))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 687))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 687))
      | (1ULL << (MySqlParser::IS_IPV6 - 687))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 687))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 687))
      | (1ULL << (MySqlParser::LCASE - 687))
      | (1ULL << (MySqlParser::LEAST - 687))
      | (1ULL << (MySqlParser::LENGTH - 687))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 687))
      | (1ULL << (MySqlParser::LINEFROMWKB - 687))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 687))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 687))
      | (1ULL << (MySqlParser::LN - 687))
      | (1ULL << (MySqlParser::LOAD_FILE - 687))
      | (1ULL << (MySqlParser::LOCATE - 687))
      | (1ULL << (MySqlParser::LOG - 687)))) != 0) || ((((_la - 751) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 751)) & ((1ULL << (MySqlParser::LOG10 - 751))
      | (1ULL << (MySqlParser::LOG2 - 751))
      | (1ULL << (MySqlParser::LOWER - 751))
      | (1ULL << (MySqlParser::LPAD - 751))
      | (1ULL << (MySqlParser::LTRIM - 751))
      | (1ULL << (MySqlParser::MAKEDATE - 751))
      | (1ULL << (MySqlParser::MAKETIME - 751))
      | (1ULL << (MySqlParser::MAKE_SET - 751))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 751))
      | (1ULL << (MySqlParser::MBRCONTAINS - 751))
      | (1ULL << (MySqlParser::MBRDISJOINT - 751))
      | (1ULL << (MySqlParser::MBREQUAL - 751))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 751))
      | (1ULL << (MySqlParser::MBROVERLAPS - 751))
      | (1ULL << (MySqlParser::MBRTOUCHES - 751))
      | (1ULL << (MySqlParser::MBRWITHIN - 751))
      | (1ULL << (MySqlParser::MD5 - 751))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 751))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 751))
      | (1ULL << (MySqlParser::MONTHNAME - 751))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 751))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 751))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 751))
      | (1ULL << (MySqlParser::NAME_CONST - 751))
      | (1ULL << (MySqlParser::NULLIF - 751))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 751))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 751))
      | (1ULL << (MySqlParser::NUMPOINTS - 751))
      | (1ULL << (MySqlParser::OCT - 751))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 751))
      | (1ULL << (MySqlParser::ORD - 751))
      | (1ULL << (MySqlParser::OVERLAPS - 751))
      | (1ULL << (MySqlParser::PERIOD_ADD - 751))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 751))
      | (1ULL << (MySqlParser::PI - 751))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::POINTFROMWKB - 751))
      | (1ULL << (MySqlParser::POINTN - 751))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 751))
      | (1ULL << (MySqlParser::POLYFROMWKB - 751))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 751))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 751))
      | (1ULL << (MySqlParser::POW - 751))
      | (1ULL << (MySqlParser::POWER - 751))
      | (1ULL << (MySqlParser::QUOTE - 751))
      | (1ULL << (MySqlParser::RADIANS - 751))
      | (1ULL << (MySqlParser::RAND - 751))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 751))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 751))
      | (1ULL << (MySqlParser::REVERSE - 751))
      | (1ULL << (MySqlParser::ROUND - 751))
      | (1ULL << (MySqlParser::ROW_COUNT - 751))
      | (1ULL << (MySqlParser::RPAD - 751))
      | (1ULL << (MySqlParser::RTRIM - 751))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 751))
      | (1ULL << (MySqlParser::SESSION_USER - 751))
      | (1ULL << (MySqlParser::SHA - 751)))) != 0) || ((((_la - 815) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 815)) & ((1ULL << (MySqlParser::SHA1 - 815))
      | (1ULL << (MySqlParser::SHA2 - 815))
      | (1ULL << (MySqlParser::SIGN - 815))
      | (1ULL << (MySqlParser::SIN - 815))
      | (1ULL << (MySqlParser::SLEEP - 815))
      | (1ULL << (MySqlParser::SOUNDEX - 815))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 815))
      | (1ULL << (MySqlParser::SQRT - 815))
      | (1ULL << (MySqlParser::SRID - 815))
      | (1ULL << (MySqlParser::STARTPOINT - 815))
      | (1ULL << (MySqlParser::STRCMP - 815))
      | (1ULL << (MySqlParser::STR_TO_DATE - 815))
      | (1ULL << (MySqlParser::ST_AREA - 815))
      | (1ULL << (MySqlParser::ST_ASBINARY - 815))
      | (1ULL << (MySqlParser::ST_ASTEXT - 815))
      | (1ULL << (MySqlParser::ST_ASWKB - 815))
      | (1ULL << (MySqlParser::ST_ASWKT - 815))
      | (1ULL << (MySqlParser::ST_BUFFER - 815))
      | (1ULL << (MySqlParser::ST_CENTROID - 815))
      | (1ULL << (MySqlParser::ST_CONTAINS - 815))
      | (1ULL << (MySqlParser::ST_CROSSES - 815))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 815))
      | (1ULL << (MySqlParser::ST_DIMENSION - 815))
      | (1ULL << (MySqlParser::ST_DISJOINT - 815))
      | (1ULL << (MySqlParser::ST_DISTANCE - 815))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 815))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 815))
      | (1ULL << (MySqlParser::ST_EQUALS - 815))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 815))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 815))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 815))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 815))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 815))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 815))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 815))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 815))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 815))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 815))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 815))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 815))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_POINTN - 815))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_SRID - 815))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 815)))) != 0) || ((((_la - 879) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 879)) & ((1ULL << (MySqlParser::ST_SYMDIFFERENCE - 879))
      | (1ULL << (MySqlParser::ST_TOUCHES - 879))
      | (1ULL << (MySqlParser::ST_UNION - 879))
      | (1ULL << (MySqlParser::ST_WITHIN - 879))
      | (1ULL << (MySqlParser::ST_X - 879))
      | (1ULL << (MySqlParser::ST_Y - 879))
      | (1ULL << (MySqlParser::SUBDATE - 879))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 879))
      | (1ULL << (MySqlParser::SUBTIME - 879))
      | (1ULL << (MySqlParser::SYSTEM_USER - 879))
      | (1ULL << (MySqlParser::TAN - 879))
      | (1ULL << (MySqlParser::TIMEDIFF - 879))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 879))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 879))
      | (1ULL << (MySqlParser::TIME_FORMAT - 879))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 879))
      | (1ULL << (MySqlParser::TOUCHES - 879))
      | (1ULL << (MySqlParser::TO_BASE64 - 879))
      | (1ULL << (MySqlParser::TO_DAYS - 879))
      | (1ULL << (MySqlParser::TO_SECONDS - 879))
      | (1ULL << (MySqlParser::UCASE - 879))
      | (1ULL << (MySqlParser::UNCOMPRESS - 879))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 879))
      | (1ULL << (MySqlParser::UNHEX - 879))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 879))
      | (1ULL << (MySqlParser::UPDATEXML - 879))
      | (1ULL << (MySqlParser::UPPER - 879))
      | (1ULL << (MySqlParser::UUID - 879))
      | (1ULL << (MySqlParser::UUID_SHORT - 879))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 879))
      | (1ULL << (MySqlParser::VERSION - 879))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879))
      | (1ULL << (MySqlParser::WEEKDAY - 879))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 879))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 879))
      | (1ULL << (MySqlParser::WITHIN - 879))
      | (1ULL << (MySqlParser::YEARWEEK - 879))
      | (1ULL << (MySqlParser::Y_FUNCTION - 879))
      | (1ULL << (MySqlParser::X_FUNCTION - 879)))) != 0) || ((((_la - 943) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 943)) & ((1ULL << (MySqlParser::LR_BRACKET - 943))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 943))
      | (1ULL << (MySqlParser::ID - 943))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 943)))) != 0));
    setState(3986);
    match(MySqlParser::UNTIL);
    setState(3987);
    expression(0);
    setState(3988);
    match(MySqlParser::END);
    setState(3989);
    match(MySqlParser::REPEAT);
    setState(3991);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519))
      | (1ULL << (MySqlParser::QUARTER - 519))
      | (1ULL << (MySqlParser::MONTH - 519))
      | (1ULL << (MySqlParser::DAY - 519))
      | (1ULL << (MySqlParser::HOUR - 519))
      | (1ULL << (MySqlParser::MINUTE - 519))
      | (1ULL << (MySqlParser::WEEK - 519))
      | (1ULL << (MySqlParser::SECOND - 519))
      | (1ULL << (MySqlParser::MICROSECOND - 519))
      | (1ULL << (MySqlParser::TABLES - 519))
      | (1ULL << (MySqlParser::ROUTINE - 519))
      | (1ULL << (MySqlParser::EXECUTE - 519))
      | (1ULL << (MySqlParser::FILE - 519))
      | (1ULL << (MySqlParser::PROCESS - 519))
      | (1ULL << (MySqlParser::RELOAD - 519))
      | (1ULL << (MySqlParser::SHUTDOWN - 519))
      | (1ULL << (MySqlParser::SUPER - 519))
      | (1ULL << (MySqlParser::PRIVILEGES - 519))
      | (1ULL << (MySqlParser::ARMSCII8 - 519))
      | (1ULL << (MySqlParser::ASCII - 519))
      | (1ULL << (MySqlParser::BIG5 - 519))
      | (1ULL << (MySqlParser::CP1250 - 519))
      | (1ULL << (MySqlParser::CP1251 - 519))
      | (1ULL << (MySqlParser::CP1256 - 519))
      | (1ULL << (MySqlParser::CP1257 - 519))
      | (1ULL << (MySqlParser::CP850 - 519))
      | (1ULL << (MySqlParser::CP852 - 519))
      | (1ULL << (MySqlParser::CP866 - 519))
      | (1ULL << (MySqlParser::CP932 - 519))
      | (1ULL << (MySqlParser::DEC8 - 519))
      | (1ULL << (MySqlParser::EUCJPMS - 519))
      | (1ULL << (MySqlParser::EUCKR - 519))
      | (1ULL << (MySqlParser::GB2312 - 519))
      | (1ULL << (MySqlParser::GBK - 519))
      | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
      | (1ULL << (MySqlParser::HEBREW - 583))
      | (1ULL << (MySqlParser::HP8 - 583))
      | (1ULL << (MySqlParser::KEYBCS2 - 583))
      | (1ULL << (MySqlParser::KOI8R - 583))
      | (1ULL << (MySqlParser::KOI8U - 583))
      | (1ULL << (MySqlParser::LATIN1 - 583))
      | (1ULL << (MySqlParser::LATIN2 - 583))
      | (1ULL << (MySqlParser::LATIN5 - 583))
      | (1ULL << (MySqlParser::LATIN7 - 583))
      | (1ULL << (MySqlParser::MACCE - 583))
      | (1ULL << (MySqlParser::MACROMAN - 583))
      | (1ULL << (MySqlParser::SJIS - 583))
      | (1ULL << (MySqlParser::SWE7 - 583))
      | (1ULL << (MySqlParser::TIS620 - 583))
      | (1ULL << (MySqlParser::UCS2 - 583))
      | (1ULL << (MySqlParser::UJIS - 583))
      | (1ULL << (MySqlParser::UTF16 - 583))
      | (1ULL << (MySqlParser::UTF16LE - 583))
      | (1ULL << (MySqlParser::UTF32 - 583))
      | (1ULL << (MySqlParser::UTF8 - 583))
      | (1ULL << (MySqlParser::UTF8MB3 - 583))
      | (1ULL << (MySqlParser::UTF8MB4 - 583))
      | (1ULL << (MySqlParser::ARCHIVE - 583))
      | (1ULL << (MySqlParser::BLACKHOLE - 583))
      | (1ULL << (MySqlParser::CSV - 583))
      | (1ULL << (MySqlParser::FEDERATED - 583))
      | (1ULL << (MySqlParser::INNODB - 583))
      | (1ULL << (MySqlParser::MEMORY - 583))
      | (1ULL << (MySqlParser::MRG_MYISAM - 583))
      | (1ULL << (MySqlParser::MYISAM - 583))
      | (1ULL << (MySqlParser::NDB - 583))
      | (1ULL << (MySqlParser::NDBCLUSTER - 583))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
      | (1ULL << (MySqlParser::REPEATABLE - 583))
      | (1ULL << (MySqlParser::COMMITTED - 583))
      | (1ULL << (MySqlParser::UNCOMMITTED - 583))
      | (1ULL << (MySqlParser::SERIALIZABLE - 583))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
      | (1ULL << (MySqlParser::LINESTRING - 583))
      | (1ULL << (MySqlParser::MULTILINESTRING - 583))
      | (1ULL << (MySqlParser::MULTIPOINT - 583))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
      | (1ULL << (MySqlParser::POINT - 583))
      | (1ULL << (MySqlParser::POLYGON - 583))
      | (1ULL << (MySqlParser::ABS - 583))
      | (1ULL << (MySqlParser::ACOS - 583))
      | (1ULL << (MySqlParser::ADDDATE - 583))
      | (1ULL << (MySqlParser::ADDTIME - 583))
      | (1ULL << (MySqlParser::AES_DECRYPT - 583))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
      | (1ULL << (MySqlParser::AREA - 583))
      | (1ULL << (MySqlParser::ASBINARY - 583))
      | (1ULL << (MySqlParser::ASIN - 583))
      | (1ULL << (MySqlParser::ASTEXT - 583))
      | (1ULL << (MySqlParser::ASWKB - 583))
      | (1ULL << (MySqlParser::ASWKT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
      | (1ULL << (MySqlParser::ATAN - 583))
      | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
      | (1ULL << (MySqlParser::BIN - 647))
      | (1ULL << (MySqlParser::BIT_COUNT - 647))
      | (1ULL << (MySqlParser::BIT_LENGTH - 647))
      | (1ULL << (MySqlParser::BUFFER - 647))
      | (1ULL << (MySqlParser::CEIL - 647))
      | (1ULL << (MySqlParser::CEILING - 647))
      | (1ULL << (MySqlParser::CENTROID - 647))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
      | (1ULL << (MySqlParser::CHARSET - 647))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
      | (1ULL << (MySqlParser::COERCIBILITY - 647))
      | (1ULL << (MySqlParser::COLLATION - 647))
      | (1ULL << (MySqlParser::COMPRESS - 647))
      | (1ULL << (MySqlParser::CONCAT - 647))
      | (1ULL << (MySqlParser::CONCAT_WS - 647))
      | (1ULL << (MySqlParser::CONNECTION_ID - 647))
      | (1ULL << (MySqlParser::CONV - 647))
      | (1ULL << (MySqlParser::CONVERT_TZ - 647))
      | (1ULL << (MySqlParser::COS - 647))
      | (1ULL << (MySqlParser::COT - 647))
      | (1ULL << (MySqlParser::CRC32 - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
      | (1ULL << (MySqlParser::CROSSES - 647))
      | (1ULL << (MySqlParser::DATEDIFF - 647))
      | (1ULL << (MySqlParser::DATE_FORMAT - 647))
      | (1ULL << (MySqlParser::DAYNAME - 647))
      | (1ULL << (MySqlParser::DAYOFMONTH - 647))
      | (1ULL << (MySqlParser::DAYOFWEEK - 647))
      | (1ULL << (MySqlParser::DAYOFYEAR - 647))
      | (1ULL << (MySqlParser::DECODE - 647))
      | (1ULL << (MySqlParser::DEGREES - 647))
      | (1ULL << (MySqlParser::DES_DECRYPT - 647))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
      | (1ULL << (MySqlParser::DIMENSION - 647))
      | (1ULL << (MySqlParser::DISJOINT - 647))
      | (1ULL << (MySqlParser::ELT - 647))
      | (1ULL << (MySqlParser::ENCODE - 647))
      | (1ULL << (MySqlParser::ENCRYPT - 647))
      | (1ULL << (MySqlParser::ENDPOINT - 647))
      | (1ULL << (MySqlParser::ENVELOPE - 647))
      | (1ULL << (MySqlParser::EQUALS - 647))
      | (1ULL << (MySqlParser::EXP - 647))
      | (1ULL << (MySqlParser::EXPORT_SET - 647))
      | (1ULL << (MySqlParser::EXTERIORRING - 647))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
      | (1ULL << (MySqlParser::FIELD - 647))
      | (1ULL << (MySqlParser::FIND_IN_SET - 647))
      | (1ULL << (MySqlParser::FLOOR - 647))
      | (1ULL << (MySqlParser::FORMAT - 647))
      | (1ULL << (MySqlParser::FOUND_ROWS - 647))
      | (1ULL << (MySqlParser::FROM_BASE64 - 647))
      | (1ULL << (MySqlParser::FROM_DAYS - 647))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
      | (1ULL << (MySqlParser::GET_FORMAT - 711))
      | (1ULL << (MySqlParser::GET_LOCK - 711))
      | (1ULL << (MySqlParser::GLENGTH - 711))
      | (1ULL << (MySqlParser::GREATEST - 711))
      | (1ULL << (MySqlParser::GTID_SUBSET - 711))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
      | (1ULL << (MySqlParser::HEX - 711))
      | (1ULL << (MySqlParser::IFNULL - 711))
      | (1ULL << (MySqlParser::INET6_ATON - 711))
      | (1ULL << (MySqlParser::INET6_NTOA - 711))
      | (1ULL << (MySqlParser::INET_ATON - 711))
      | (1ULL << (MySqlParser::INET_NTOA - 711))
      | (1ULL << (MySqlParser::INSTR - 711))
      | (1ULL << (MySqlParser::INTERIORRINGN - 711))
      | (1ULL << (MySqlParser::INTERSECTS - 711))
      | (1ULL << (MySqlParser::ISCLOSED - 711))
      | (1ULL << (MySqlParser::ISEMPTY - 711))
      | (1ULL << (MySqlParser::ISNULL - 711))
      | (1ULL << (MySqlParser::ISSIMPLE - 711))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
      | (1ULL << (MySqlParser::IS_IPV4 - 711))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
      | (1ULL << (MySqlParser::IS_IPV6 - 711))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
      | (1ULL << (MySqlParser::LCASE - 711))
      | (1ULL << (MySqlParser::LEAST - 711))
      | (1ULL << (MySqlParser::LENGTH - 711))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINEFROMWKB - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
      | (1ULL << (MySqlParser::LN - 711))
      | (1ULL << (MySqlParser::LOAD_FILE - 711))
      | (1ULL << (MySqlParser::LOCATE - 711))
      | (1ULL << (MySqlParser::LOG - 711))
      | (1ULL << (MySqlParser::LOG10 - 711))
      | (1ULL << (MySqlParser::LOG2 - 711))
      | (1ULL << (MySqlParser::LOWER - 711))
      | (1ULL << (MySqlParser::LPAD - 711))
      | (1ULL << (MySqlParser::LTRIM - 711))
      | (1ULL << (MySqlParser::MAKEDATE - 711))
      | (1ULL << (MySqlParser::MAKETIME - 711))
      | (1ULL << (MySqlParser::MAKE_SET - 711))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
      | (1ULL << (MySqlParser::MBRCONTAINS - 711))
      | (1ULL << (MySqlParser::MBRDISJOINT - 711))
      | (1ULL << (MySqlParser::MBREQUAL - 711))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
      | (1ULL << (MySqlParser::MBROVERLAPS - 711))
      | (1ULL << (MySqlParser::MBRTOUCHES - 711))
      | (1ULL << (MySqlParser::MBRWITHIN - 711))
      | (1ULL << (MySqlParser::MD5 - 711))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
      | (1ULL << (MySqlParser::MONTHNAME - 711))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::NAME_CONST - 775))
      | (1ULL << (MySqlParser::NULLIF - 775))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
      | (1ULL << (MySqlParser::NUMPOINTS - 775))
      | (1ULL << (MySqlParser::OCT - 775))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
      | (1ULL << (MySqlParser::ORD - 775))
      | (1ULL << (MySqlParser::OVERLAPS - 775))
      | (1ULL << (MySqlParser::PERIOD_ADD - 775))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
      | (1ULL << (MySqlParser::PI - 775))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::POINTFROMWKB - 775))
      | (1ULL << (MySqlParser::POINTN - 775))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYFROMWKB - 775))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::POW - 775))
      | (1ULL << (MySqlParser::POWER - 775))
      | (1ULL << (MySqlParser::QUOTE - 775))
      | (1ULL << (MySqlParser::RADIANS - 775))
      | (1ULL << (MySqlParser::RAND - 775))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
      | (1ULL << (MySqlParser::REVERSE - 775))
      | (1ULL << (MySqlParser::ROUND - 775))
      | (1ULL << (MySqlParser::ROW_COUNT - 775))
      | (1ULL << (MySqlParser::RPAD - 775))
      | (1ULL << (MySqlParser::RTRIM - 775))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
      | (1ULL << (MySqlParser::SESSION_USER - 775))
      | (1ULL << (MySqlParser::SHA - 775))
      | (1ULL << (MySqlParser::SHA1 - 775))
      | (1ULL << (MySqlParser::SHA2 - 775))
      | (1ULL << (MySqlParser::SIGN - 775))
      | (1ULL << (MySqlParser::SIN - 775))
      | (1ULL << (MySqlParser::SLEEP - 775))
      | (1ULL << (MySqlParser::SOUNDEX - 775))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
      | (1ULL << (MySqlParser::SQRT - 775))
      | (1ULL << (MySqlParser::SRID - 775))
      | (1ULL << (MySqlParser::STARTPOINT - 775))
      | (1ULL << (MySqlParser::STRCMP - 775))
      | (1ULL << (MySqlParser::STR_TO_DATE - 775))
      | (1ULL << (MySqlParser::ST_AREA - 775))
      | (1ULL << (MySqlParser::ST_ASBINARY - 775))
      | (1ULL << (MySqlParser::ST_ASTEXT - 775))
      | (1ULL << (MySqlParser::ST_ASWKB - 775))
      | (1ULL << (MySqlParser::ST_ASWKT - 775))
      | (1ULL << (MySqlParser::ST_BUFFER - 775))
      | (1ULL << (MySqlParser::ST_CENTROID - 775))
      | (1ULL << (MySqlParser::ST_CONTAINS - 775))
      | (1ULL << (MySqlParser::ST_CROSSES - 775))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
      | (1ULL << (MySqlParser::ST_DIMENSION - 775))
      | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
      | (1ULL << (MySqlParser::ST_EQUALS - 839))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POINTN - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_SRID - 839))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
      | (1ULL << (MySqlParser::ST_TOUCHES - 839))
      | (1ULL << (MySqlParser::ST_UNION - 839))
      | (1ULL << (MySqlParser::ST_WITHIN - 839))
      | (1ULL << (MySqlParser::ST_X - 839))
      | (1ULL << (MySqlParser::ST_Y - 839))
      | (1ULL << (MySqlParser::SUBDATE - 839))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
      | (1ULL << (MySqlParser::SUBTIME - 839))
      | (1ULL << (MySqlParser::SYSTEM_USER - 839))
      | (1ULL << (MySqlParser::TAN - 839))
      | (1ULL << (MySqlParser::TIMEDIFF - 839))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
      | (1ULL << (MySqlParser::TIME_FORMAT - 839))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
      | (1ULL << (MySqlParser::TOUCHES - 839))
      | (1ULL << (MySqlParser::TO_BASE64 - 839))
      | (1ULL << (MySqlParser::TO_DAYS - 839))
      | (1ULL << (MySqlParser::TO_SECONDS - 839))
      | (1ULL << (MySqlParser::UCASE - 839))
      | (1ULL << (MySqlParser::UNCOMPRESS - 839))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
      | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
      | (1ULL << (MySqlParser::UPDATEXML - 903))
      | (1ULL << (MySqlParser::UPPER - 903))
      | (1ULL << (MySqlParser::UUID - 903))
      | (1ULL << (MySqlParser::UUID_SHORT - 903))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
      | (1ULL << (MySqlParser::VERSION - 903))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
      | (1ULL << (MySqlParser::WEEKDAY - 903))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
      | (1ULL << (MySqlParser::WITHIN - 903))
      | (1ULL << (MySqlParser::YEARWEEK - 903))
      | (1ULL << (MySqlParser::Y_FUNCTION - 903))
      | (1ULL << (MySqlParser::X_FUNCTION - 903))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
      | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
      setState(3990);
      id_();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_statementContext ------------------------------------------------------------------

MySqlParser::Return_statementContext::Return_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Return_statementContext::RETURN() {
  return getToken(MySqlParser::RETURN, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Return_statementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::Return_statementContext::getRuleIndex() const {
  return MySqlParser::RuleReturn_statement;
}

void MySqlParser::Return_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_statement(this);
}

void MySqlParser::Return_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_statement(this);
}

MySqlParser::Return_statementContext* MySqlParser::return_statement() {
  Return_statementContext *_localctx = _tracker.createInstance<Return_statementContext>(_ctx, getState());
  enterRule(_localctx, 338, MySqlParser::RuleReturn_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3993);
    match(MySqlParser::RETURN);
    setState(3994);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- While_statementContext ------------------------------------------------------------------

MySqlParser::While_statementContext::While_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::While_statementContext::WHILE() {
  return getTokens(MySqlParser::WHILE);
}

tree::TerminalNode* MySqlParser::While_statementContext::WHILE(size_t i) {
  return getToken(MySqlParser::WHILE, i);
}

MySqlParser::ExpressionContext* MySqlParser::While_statementContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::While_statementContext::DO() {
  return getToken(MySqlParser::DO, 0);
}

tree::TerminalNode* MySqlParser::While_statementContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<MySqlParser::Id_Context *> MySqlParser::While_statementContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::While_statementContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

std::vector<MySqlParser::Procedure_sql_statementContext *> MySqlParser::While_statementContext::procedure_sql_statement() {
  return getRuleContexts<MySqlParser::Procedure_sql_statementContext>();
}

MySqlParser::Procedure_sql_statementContext* MySqlParser::While_statementContext::procedure_sql_statement(size_t i) {
  return getRuleContext<MySqlParser::Procedure_sql_statementContext>(i);
}


size_t MySqlParser::While_statementContext::getRuleIndex() const {
  return MySqlParser::RuleWhile_statement;
}

void MySqlParser::While_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile_statement(this);
}

void MySqlParser::While_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile_statement(this);
}

MySqlParser::While_statementContext* MySqlParser::while_statement() {
  While_statementContext *_localctx = _tracker.createInstance<While_statementContext>(_ctx, getState());
  enterRule(_localctx, 340, MySqlParser::RuleWhile_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3999);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519))
      | (1ULL << (MySqlParser::QUARTER - 519))
      | (1ULL << (MySqlParser::MONTH - 519))
      | (1ULL << (MySqlParser::DAY - 519))
      | (1ULL << (MySqlParser::HOUR - 519))
      | (1ULL << (MySqlParser::MINUTE - 519))
      | (1ULL << (MySqlParser::WEEK - 519))
      | (1ULL << (MySqlParser::SECOND - 519))
      | (1ULL << (MySqlParser::MICROSECOND - 519))
      | (1ULL << (MySqlParser::TABLES - 519))
      | (1ULL << (MySqlParser::ROUTINE - 519))
      | (1ULL << (MySqlParser::EXECUTE - 519))
      | (1ULL << (MySqlParser::FILE - 519))
      | (1ULL << (MySqlParser::PROCESS - 519))
      | (1ULL << (MySqlParser::RELOAD - 519))
      | (1ULL << (MySqlParser::SHUTDOWN - 519))
      | (1ULL << (MySqlParser::SUPER - 519))
      | (1ULL << (MySqlParser::PRIVILEGES - 519))
      | (1ULL << (MySqlParser::ARMSCII8 - 519))
      | (1ULL << (MySqlParser::ASCII - 519))
      | (1ULL << (MySqlParser::BIG5 - 519))
      | (1ULL << (MySqlParser::CP1250 - 519))
      | (1ULL << (MySqlParser::CP1251 - 519))
      | (1ULL << (MySqlParser::CP1256 - 519))
      | (1ULL << (MySqlParser::CP1257 - 519))
      | (1ULL << (MySqlParser::CP850 - 519))
      | (1ULL << (MySqlParser::CP852 - 519))
      | (1ULL << (MySqlParser::CP866 - 519))
      | (1ULL << (MySqlParser::CP932 - 519))
      | (1ULL << (MySqlParser::DEC8 - 519))
      | (1ULL << (MySqlParser::EUCJPMS - 519))
      | (1ULL << (MySqlParser::EUCKR - 519))
      | (1ULL << (MySqlParser::GB2312 - 519))
      | (1ULL << (MySqlParser::GBK - 519))
      | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
      | (1ULL << (MySqlParser::HEBREW - 583))
      | (1ULL << (MySqlParser::HP8 - 583))
      | (1ULL << (MySqlParser::KEYBCS2 - 583))
      | (1ULL << (MySqlParser::KOI8R - 583))
      | (1ULL << (MySqlParser::KOI8U - 583))
      | (1ULL << (MySqlParser::LATIN1 - 583))
      | (1ULL << (MySqlParser::LATIN2 - 583))
      | (1ULL << (MySqlParser::LATIN5 - 583))
      | (1ULL << (MySqlParser::LATIN7 - 583))
      | (1ULL << (MySqlParser::MACCE - 583))
      | (1ULL << (MySqlParser::MACROMAN - 583))
      | (1ULL << (MySqlParser::SJIS - 583))
      | (1ULL << (MySqlParser::SWE7 - 583))
      | (1ULL << (MySqlParser::TIS620 - 583))
      | (1ULL << (MySqlParser::UCS2 - 583))
      | (1ULL << (MySqlParser::UJIS - 583))
      | (1ULL << (MySqlParser::UTF16 - 583))
      | (1ULL << (MySqlParser::UTF16LE - 583))
      | (1ULL << (MySqlParser::UTF32 - 583))
      | (1ULL << (MySqlParser::UTF8 - 583))
      | (1ULL << (MySqlParser::UTF8MB3 - 583))
      | (1ULL << (MySqlParser::UTF8MB4 - 583))
      | (1ULL << (MySqlParser::ARCHIVE - 583))
      | (1ULL << (MySqlParser::BLACKHOLE - 583))
      | (1ULL << (MySqlParser::CSV - 583))
      | (1ULL << (MySqlParser::FEDERATED - 583))
      | (1ULL << (MySqlParser::INNODB - 583))
      | (1ULL << (MySqlParser::MEMORY - 583))
      | (1ULL << (MySqlParser::MRG_MYISAM - 583))
      | (1ULL << (MySqlParser::MYISAM - 583))
      | (1ULL << (MySqlParser::NDB - 583))
      | (1ULL << (MySqlParser::NDBCLUSTER - 583))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
      | (1ULL << (MySqlParser::REPEATABLE - 583))
      | (1ULL << (MySqlParser::COMMITTED - 583))
      | (1ULL << (MySqlParser::UNCOMMITTED - 583))
      | (1ULL << (MySqlParser::SERIALIZABLE - 583))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
      | (1ULL << (MySqlParser::LINESTRING - 583))
      | (1ULL << (MySqlParser::MULTILINESTRING - 583))
      | (1ULL << (MySqlParser::MULTIPOINT - 583))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
      | (1ULL << (MySqlParser::POINT - 583))
      | (1ULL << (MySqlParser::POLYGON - 583))
      | (1ULL << (MySqlParser::ABS - 583))
      | (1ULL << (MySqlParser::ACOS - 583))
      | (1ULL << (MySqlParser::ADDDATE - 583))
      | (1ULL << (MySqlParser::ADDTIME - 583))
      | (1ULL << (MySqlParser::AES_DECRYPT - 583))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
      | (1ULL << (MySqlParser::AREA - 583))
      | (1ULL << (MySqlParser::ASBINARY - 583))
      | (1ULL << (MySqlParser::ASIN - 583))
      | (1ULL << (MySqlParser::ASTEXT - 583))
      | (1ULL << (MySqlParser::ASWKB - 583))
      | (1ULL << (MySqlParser::ASWKT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
      | (1ULL << (MySqlParser::ATAN - 583))
      | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
      | (1ULL << (MySqlParser::BIN - 647))
      | (1ULL << (MySqlParser::BIT_COUNT - 647))
      | (1ULL << (MySqlParser::BIT_LENGTH - 647))
      | (1ULL << (MySqlParser::BUFFER - 647))
      | (1ULL << (MySqlParser::CEIL - 647))
      | (1ULL << (MySqlParser::CEILING - 647))
      | (1ULL << (MySqlParser::CENTROID - 647))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
      | (1ULL << (MySqlParser::CHARSET - 647))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
      | (1ULL << (MySqlParser::COERCIBILITY - 647))
      | (1ULL << (MySqlParser::COLLATION - 647))
      | (1ULL << (MySqlParser::COMPRESS - 647))
      | (1ULL << (MySqlParser::CONCAT - 647))
      | (1ULL << (MySqlParser::CONCAT_WS - 647))
      | (1ULL << (MySqlParser::CONNECTION_ID - 647))
      | (1ULL << (MySqlParser::CONV - 647))
      | (1ULL << (MySqlParser::CONVERT_TZ - 647))
      | (1ULL << (MySqlParser::COS - 647))
      | (1ULL << (MySqlParser::COT - 647))
      | (1ULL << (MySqlParser::CRC32 - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
      | (1ULL << (MySqlParser::CROSSES - 647))
      | (1ULL << (MySqlParser::DATEDIFF - 647))
      | (1ULL << (MySqlParser::DATE_FORMAT - 647))
      | (1ULL << (MySqlParser::DAYNAME - 647))
      | (1ULL << (MySqlParser::DAYOFMONTH - 647))
      | (1ULL << (MySqlParser::DAYOFWEEK - 647))
      | (1ULL << (MySqlParser::DAYOFYEAR - 647))
      | (1ULL << (MySqlParser::DECODE - 647))
      | (1ULL << (MySqlParser::DEGREES - 647))
      | (1ULL << (MySqlParser::DES_DECRYPT - 647))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
      | (1ULL << (MySqlParser::DIMENSION - 647))
      | (1ULL << (MySqlParser::DISJOINT - 647))
      | (1ULL << (MySqlParser::ELT - 647))
      | (1ULL << (MySqlParser::ENCODE - 647))
      | (1ULL << (MySqlParser::ENCRYPT - 647))
      | (1ULL << (MySqlParser::ENDPOINT - 647))
      | (1ULL << (MySqlParser::ENVELOPE - 647))
      | (1ULL << (MySqlParser::EQUALS - 647))
      | (1ULL << (MySqlParser::EXP - 647))
      | (1ULL << (MySqlParser::EXPORT_SET - 647))
      | (1ULL << (MySqlParser::EXTERIORRING - 647))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
      | (1ULL << (MySqlParser::FIELD - 647))
      | (1ULL << (MySqlParser::FIND_IN_SET - 647))
      | (1ULL << (MySqlParser::FLOOR - 647))
      | (1ULL << (MySqlParser::FORMAT - 647))
      | (1ULL << (MySqlParser::FOUND_ROWS - 647))
      | (1ULL << (MySqlParser::FROM_BASE64 - 647))
      | (1ULL << (MySqlParser::FROM_DAYS - 647))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
      | (1ULL << (MySqlParser::GET_FORMAT - 711))
      | (1ULL << (MySqlParser::GET_LOCK - 711))
      | (1ULL << (MySqlParser::GLENGTH - 711))
      | (1ULL << (MySqlParser::GREATEST - 711))
      | (1ULL << (MySqlParser::GTID_SUBSET - 711))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
      | (1ULL << (MySqlParser::HEX - 711))
      | (1ULL << (MySqlParser::IFNULL - 711))
      | (1ULL << (MySqlParser::INET6_ATON - 711))
      | (1ULL << (MySqlParser::INET6_NTOA - 711))
      | (1ULL << (MySqlParser::INET_ATON - 711))
      | (1ULL << (MySqlParser::INET_NTOA - 711))
      | (1ULL << (MySqlParser::INSTR - 711))
      | (1ULL << (MySqlParser::INTERIORRINGN - 711))
      | (1ULL << (MySqlParser::INTERSECTS - 711))
      | (1ULL << (MySqlParser::ISCLOSED - 711))
      | (1ULL << (MySqlParser::ISEMPTY - 711))
      | (1ULL << (MySqlParser::ISNULL - 711))
      | (1ULL << (MySqlParser::ISSIMPLE - 711))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
      | (1ULL << (MySqlParser::IS_IPV4 - 711))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
      | (1ULL << (MySqlParser::IS_IPV6 - 711))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
      | (1ULL << (MySqlParser::LCASE - 711))
      | (1ULL << (MySqlParser::LEAST - 711))
      | (1ULL << (MySqlParser::LENGTH - 711))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINEFROMWKB - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
      | (1ULL << (MySqlParser::LN - 711))
      | (1ULL << (MySqlParser::LOAD_FILE - 711))
      | (1ULL << (MySqlParser::LOCATE - 711))
      | (1ULL << (MySqlParser::LOG - 711))
      | (1ULL << (MySqlParser::LOG10 - 711))
      | (1ULL << (MySqlParser::LOG2 - 711))
      | (1ULL << (MySqlParser::LOWER - 711))
      | (1ULL << (MySqlParser::LPAD - 711))
      | (1ULL << (MySqlParser::LTRIM - 711))
      | (1ULL << (MySqlParser::MAKEDATE - 711))
      | (1ULL << (MySqlParser::MAKETIME - 711))
      | (1ULL << (MySqlParser::MAKE_SET - 711))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
      | (1ULL << (MySqlParser::MBRCONTAINS - 711))
      | (1ULL << (MySqlParser::MBRDISJOINT - 711))
      | (1ULL << (MySqlParser::MBREQUAL - 711))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
      | (1ULL << (MySqlParser::MBROVERLAPS - 711))
      | (1ULL << (MySqlParser::MBRTOUCHES - 711))
      | (1ULL << (MySqlParser::MBRWITHIN - 711))
      | (1ULL << (MySqlParser::MD5 - 711))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
      | (1ULL << (MySqlParser::MONTHNAME - 711))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::NAME_CONST - 775))
      | (1ULL << (MySqlParser::NULLIF - 775))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
      | (1ULL << (MySqlParser::NUMPOINTS - 775))
      | (1ULL << (MySqlParser::OCT - 775))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
      | (1ULL << (MySqlParser::ORD - 775))
      | (1ULL << (MySqlParser::OVERLAPS - 775))
      | (1ULL << (MySqlParser::PERIOD_ADD - 775))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
      | (1ULL << (MySqlParser::PI - 775))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::POINTFROMWKB - 775))
      | (1ULL << (MySqlParser::POINTN - 775))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYFROMWKB - 775))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::POW - 775))
      | (1ULL << (MySqlParser::POWER - 775))
      | (1ULL << (MySqlParser::QUOTE - 775))
      | (1ULL << (MySqlParser::RADIANS - 775))
      | (1ULL << (MySqlParser::RAND - 775))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
      | (1ULL << (MySqlParser::REVERSE - 775))
      | (1ULL << (MySqlParser::ROUND - 775))
      | (1ULL << (MySqlParser::ROW_COUNT - 775))
      | (1ULL << (MySqlParser::RPAD - 775))
      | (1ULL << (MySqlParser::RTRIM - 775))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
      | (1ULL << (MySqlParser::SESSION_USER - 775))
      | (1ULL << (MySqlParser::SHA - 775))
      | (1ULL << (MySqlParser::SHA1 - 775))
      | (1ULL << (MySqlParser::SHA2 - 775))
      | (1ULL << (MySqlParser::SIGN - 775))
      | (1ULL << (MySqlParser::SIN - 775))
      | (1ULL << (MySqlParser::SLEEP - 775))
      | (1ULL << (MySqlParser::SOUNDEX - 775))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
      | (1ULL << (MySqlParser::SQRT - 775))
      | (1ULL << (MySqlParser::SRID - 775))
      | (1ULL << (MySqlParser::STARTPOINT - 775))
      | (1ULL << (MySqlParser::STRCMP - 775))
      | (1ULL << (MySqlParser::STR_TO_DATE - 775))
      | (1ULL << (MySqlParser::ST_AREA - 775))
      | (1ULL << (MySqlParser::ST_ASBINARY - 775))
      | (1ULL << (MySqlParser::ST_ASTEXT - 775))
      | (1ULL << (MySqlParser::ST_ASWKB - 775))
      | (1ULL << (MySqlParser::ST_ASWKT - 775))
      | (1ULL << (MySqlParser::ST_BUFFER - 775))
      | (1ULL << (MySqlParser::ST_CENTROID - 775))
      | (1ULL << (MySqlParser::ST_CONTAINS - 775))
      | (1ULL << (MySqlParser::ST_CROSSES - 775))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
      | (1ULL << (MySqlParser::ST_DIMENSION - 775))
      | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
      | (1ULL << (MySqlParser::ST_EQUALS - 839))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POINTN - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_SRID - 839))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
      | (1ULL << (MySqlParser::ST_TOUCHES - 839))
      | (1ULL << (MySqlParser::ST_UNION - 839))
      | (1ULL << (MySqlParser::ST_WITHIN - 839))
      | (1ULL << (MySqlParser::ST_X - 839))
      | (1ULL << (MySqlParser::ST_Y - 839))
      | (1ULL << (MySqlParser::SUBDATE - 839))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
      | (1ULL << (MySqlParser::SUBTIME - 839))
      | (1ULL << (MySqlParser::SYSTEM_USER - 839))
      | (1ULL << (MySqlParser::TAN - 839))
      | (1ULL << (MySqlParser::TIMEDIFF - 839))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
      | (1ULL << (MySqlParser::TIME_FORMAT - 839))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
      | (1ULL << (MySqlParser::TOUCHES - 839))
      | (1ULL << (MySqlParser::TO_BASE64 - 839))
      | (1ULL << (MySqlParser::TO_DAYS - 839))
      | (1ULL << (MySqlParser::TO_SECONDS - 839))
      | (1ULL << (MySqlParser::UCASE - 839))
      | (1ULL << (MySqlParser::UNCOMPRESS - 839))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
      | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
      | (1ULL << (MySqlParser::UPDATEXML - 903))
      | (1ULL << (MySqlParser::UPPER - 903))
      | (1ULL << (MySqlParser::UUID - 903))
      | (1ULL << (MySqlParser::UUID_SHORT - 903))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
      | (1ULL << (MySqlParser::VERSION - 903))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
      | (1ULL << (MySqlParser::WEEKDAY - 903))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
      | (1ULL << (MySqlParser::WITHIN - 903))
      | (1ULL << (MySqlParser::YEARWEEK - 903))
      | (1ULL << (MySqlParser::Y_FUNCTION - 903))
      | (1ULL << (MySqlParser::X_FUNCTION - 903))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
      | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
      setState(3996);
      id_();
      setState(3997);
      match(MySqlParser::COLON_SYMB);
    }
    setState(4001);
    match(MySqlParser::WHILE);
    setState(4002);
    expression(0);
    setState(4003);
    match(MySqlParser::DO);
    setState(4005); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4004);
      procedure_sql_statement();
      setState(4007); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 7) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 7)) & ((1ULL << (MySqlParser::ALTER - 7))
      | (1ULL << (MySqlParser::ANALYZE - 7))
      | (1ULL << (MySqlParser::CALL - 7))
      | (1ULL << (MySqlParser::CASE - 7))
      | (1ULL << (MySqlParser::CHANGE - 7))
      | (1ULL << (MySqlParser::CHECK - 7))
      | (1ULL << (MySqlParser::CREATE - 7))
      | (1ULL << (MySqlParser::DELETE - 7))
      | (1ULL << (MySqlParser::DESC - 7))
      | (1ULL << (MySqlParser::DESCRIBE - 7))
      | (1ULL << (MySqlParser::DROP - 7))
      | (1ULL << (MySqlParser::EXPLAIN - 7))
      | (1ULL << (MySqlParser::FETCH - 7))
      | (1ULL << (MySqlParser::GRANT - 7))
      | (1ULL << (MySqlParser::IF - 7)))) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & ((1ULL << (MySqlParser::INSERT - 71))
      | (1ULL << (MySqlParser::ITERATE - 71))
      | (1ULL << (MySqlParser::KILL - 71))
      | (1ULL << (MySqlParser::LEAVE - 71))
      | (1ULL << (MySqlParser::LEFT - 71))
      | (1ULL << (MySqlParser::LOAD - 71))
      | (1ULL << (MySqlParser::LOCK - 71))
      | (1ULL << (MySqlParser::LOOP - 71))
      | (1ULL << (MySqlParser::OPTIMIZE - 71))
      | (1ULL << (MySqlParser::PURGE - 71))
      | (1ULL << (MySqlParser::RELEASE - 71))
      | (1ULL << (MySqlParser::RENAME - 71))
      | (1ULL << (MySqlParser::REPEAT - 71))
      | (1ULL << (MySqlParser::REPLACE - 71))
      | (1ULL << (MySqlParser::RETURN - 71))
      | (1ULL << (MySqlParser::REVOKE - 71))
      | (1ULL << (MySqlParser::RIGHT - 71))
      | (1ULL << (MySqlParser::SELECT - 71))
      | (1ULL << (MySqlParser::SET - 71))
      | (1ULL << (MySqlParser::SHOW - 71)))) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & ((1ULL << (MySqlParser::UNLOCK - 156))
      | (1ULL << (MySqlParser::UPDATE - 156))
      | (1ULL << (MySqlParser::USE - 156))
      | (1ULL << (MySqlParser::WHILE - 156))
      | (1ULL << (MySqlParser::DATE - 156))
      | (1ULL << (MySqlParser::TIME - 156))
      | (1ULL << (MySqlParser::TIMESTAMP - 156))
      | (1ULL << (MySqlParser::DATETIME - 156))
      | (1ULL << (MySqlParser::YEAR - 156))
      | (1ULL << (MySqlParser::TEXT - 156))
      | (1ULL << (MySqlParser::ENUM - 156))
      | (1ULL << (MySqlParser::COUNT - 156)))) != 0) || ((((_la - 237) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 237)) & ((1ULL << (MySqlParser::POSITION - 237))
      | (1ULL << (MySqlParser::ACTION - 237))
      | (1ULL << (MySqlParser::AFTER - 237))
      | (1ULL << (MySqlParser::ALGORITHM - 237))
      | (1ULL << (MySqlParser::ANY - 237))
      | (1ULL << (MySqlParser::AT - 237))
      | (1ULL << (MySqlParser::AUTHORS - 237))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 237))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 237))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 237))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 237))
      | (1ULL << (MySqlParser::BEGIN - 237))
      | (1ULL << (MySqlParser::BINLOG - 237))
      | (1ULL << (MySqlParser::BIT - 237))
      | (1ULL << (MySqlParser::BTREE - 237))
      | (1ULL << (MySqlParser::CACHE - 237))
      | (1ULL << (MySqlParser::CASCADED - 237))
      | (1ULL << (MySqlParser::CHAIN - 237))
      | (1ULL << (MySqlParser::CHECKSUM - 237))
      | (1ULL << (MySqlParser::CIPHER - 237))
      | (1ULL << (MySqlParser::CLIENT - 237))
      | (1ULL << (MySqlParser::CLOSE - 237))
      | (1ULL << (MySqlParser::COALESCE - 237))
      | (1ULL << (MySqlParser::CODE - 237))
      | (1ULL << (MySqlParser::COLUMNS - 237))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 237))
      | (1ULL << (MySqlParser::COMMENT - 237))
      | (1ULL << (MySqlParser::COMMIT - 237))
      | (1ULL << (MySqlParser::COMPACT - 237))
      | (1ULL << (MySqlParser::COMPLETION - 237))
      | (1ULL << (MySqlParser::COMPRESSED - 237))
      | (1ULL << (MySqlParser::CONCURRENT - 237))
      | (1ULL << (MySqlParser::CONNECTION - 237))
      | (1ULL << (MySqlParser::CONSISTENT - 237))
      | (1ULL << (MySqlParser::CONTAINS - 237))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 237))
      | (1ULL << (MySqlParser::COPY - 237))
      | (1ULL << (MySqlParser::DATA - 237))
      | (1ULL << (MySqlParser::DATAFILE - 237))
      | (1ULL << (MySqlParser::DEALLOCATE - 237))
      | (1ULL << (MySqlParser::DEFINER - 237))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 237))
      | (1ULL << (MySqlParser::DIRECTORY - 237))
      | (1ULL << (MySqlParser::DISABLE - 237))
      | (1ULL << (MySqlParser::DISCARD - 237))
      | (1ULL << (MySqlParser::DISK - 237))
      | (1ULL << (MySqlParser::DO - 237)))) != 0) || ((((_la - 301) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 301)) & ((1ULL << (MySqlParser::DUMPFILE - 301))
      | (1ULL << (MySqlParser::DUPLICATE - 301))
      | (1ULL << (MySqlParser::DYNAMIC - 301))
      | (1ULL << (MySqlParser::ENABLE - 301))
      | (1ULL << (MySqlParser::ENDS - 301))
      | (1ULL << (MySqlParser::ENGINE - 301))
      | (1ULL << (MySqlParser::ENGINES - 301))
      | (1ULL << (MySqlParser::ERRORS - 301))
      | (1ULL << (MySqlParser::ESCAPE - 301))
      | (1ULL << (MySqlParser::EVEN - 301))
      | (1ULL << (MySqlParser::EVENT - 301))
      | (1ULL << (MySqlParser::EVENTS - 301))
      | (1ULL << (MySqlParser::EVERY - 301))
      | (1ULL << (MySqlParser::EXCHANGE - 301))
      | (1ULL << (MySqlParser::EXCLUSIVE - 301))
      | (1ULL << (MySqlParser::EXPIRE - 301))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 301))
      | (1ULL << (MySqlParser::FIELDS - 301))
      | (1ULL << (MySqlParser::FIRST - 301))
      | (1ULL << (MySqlParser::FIXED - 301))
      | (1ULL << (MySqlParser::FLUSH - 301))
      | (1ULL << (MySqlParser::FULL - 301))
      | (1ULL << (MySqlParser::FUNCTION - 301))
      | (1ULL << (MySqlParser::GLOBAL - 301))
      | (1ULL << (MySqlParser::GRANTS - 301))
      | (1ULL << (MySqlParser::HANDLER - 301))
      | (1ULL << (MySqlParser::HASH - 301))
      | (1ULL << (MySqlParser::HELP - 301))
      | (1ULL << (MySqlParser::HOST - 301))
      | (1ULL << (MySqlParser::IDENTIFIED - 301))
      | (1ULL << (MySqlParser::IMPORT - 301))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 301))
      | (1ULL << (MySqlParser::INPLACE - 301))
      | (1ULL << (MySqlParser::INSERT_METHOD - 301))
      | (1ULL << (MySqlParser::INSTALL - 301))
      | (1ULL << (MySqlParser::INVOKER - 301))
      | (1ULL << (MySqlParser::ISOLATION - 301))
      | (1ULL << (MySqlParser::ISSUER - 301))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 301))
      | (1ULL << (MySqlParser::LANGUAGE - 301))
      | (1ULL << (MySqlParser::LAST - 301))
      | (1ULL << (MySqlParser::LESS - 301)))) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 365)) & ((1ULL << (MySqlParser::LEVEL - 365))
      | (1ULL << (MySqlParser::LIST - 365))
      | (1ULL << (MySqlParser::LOCAL - 365))
      | (1ULL << (MySqlParser::LOGFILE - 365))
      | (1ULL << (MySqlParser::LOGS - 365))
      | (1ULL << (MySqlParser::MASTER - 365))
      | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_ROWS - 365))
      | (1ULL << (MySqlParser::MAX_SIZE - 365))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 365))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 365))
      | (1ULL << (MySqlParser::MERGE - 365))
      | (1ULL << (MySqlParser::MID - 365))
      | (1ULL << (MySqlParser::MIN_ROWS - 365))
      | (1ULL << (MySqlParser::MODIFY - 365))
      | (1ULL << (MySqlParser::MUTEX - 365))
      | (1ULL << (MySqlParser::MYSQL - 365))
      | (1ULL << (MySqlParser::NAME - 365))
      | (1ULL << (MySqlParser::NAMES - 365))
      | (1ULL << (MySqlParser::NCHAR - 365))
      | (1ULL << (MySqlParser::NO - 365))
      | (1ULL << (MySqlParser::NODEGROUP - 365))
      | (1ULL << (MySqlParser::NONE - 365))
      | (1ULL << (MySqlParser::OFFLINE - 365))
      | (1ULL << (MySqlParser::OFFSET - 365))
      | (1ULL << (MySqlParser::OJ - 365))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 365))
      | (1ULL << (MySqlParser::ONLINE - 365))
      | (1ULL << (MySqlParser::ONLY - 365))
      | (1ULL << (MySqlParser::OPEN - 365))
      | (1ULL << (MySqlParser::OPTIONS - 365))
      | (1ULL << (MySqlParser::OWNER - 365))
      | (1ULL << (MySqlParser::PACK_KEYS - 365))
      | (1ULL << (MySqlParser::PARSER - 365))
      | (1ULL << (MySqlParser::PARTIAL - 365)))) != 0) || ((((_la - 429) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 429)) & ((1ULL << (MySqlParser::PARTITIONING - 429))
      | (1ULL << (MySqlParser::PARTITIONS - 429))
      | (1ULL << (MySqlParser::PASSWORD - 429))
      | (1ULL << (MySqlParser::PLUGINS - 429))
      | (1ULL << (MySqlParser::PORT - 429))
      | (1ULL << (MySqlParser::PREPARE - 429))
      | (1ULL << (MySqlParser::PRESERVE - 429))
      | (1ULL << (MySqlParser::PROCESSLIST - 429))
      | (1ULL << (MySqlParser::PROFILE - 429))
      | (1ULL << (MySqlParser::PROFILES - 429))
      | (1ULL << (MySqlParser::PROXY - 429))
      | (1ULL << (MySqlParser::QUERY - 429))
      | (1ULL << (MySqlParser::QUICK - 429))
      | (1ULL << (MySqlParser::REBUILD - 429))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 429))
      | (1ULL << (MySqlParser::REDUNDANT - 429))
      | (1ULL << (MySqlParser::RELAYLOG - 429))
      | (1ULL << (MySqlParser::REMOVE - 429))
      | (1ULL << (MySqlParser::REORGANIZE - 429))
      | (1ULL << (MySqlParser::REPAIR - 429))
      | (1ULL << (MySqlParser::REPLICATION - 429))
      | (1ULL << (MySqlParser::RESET - 429))
      | (1ULL << (MySqlParser::RETURNS - 429))
      | (1ULL << (MySqlParser::ROLLBACK - 429))
      | (1ULL << (MySqlParser::ROLLUP - 429))
      | (1ULL << (MySqlParser::ROW - 429))
      | (1ULL << (MySqlParser::ROWS - 429))
      | (1ULL << (MySqlParser::ROW_FORMAT - 429))
      | (1ULL << (MySqlParser::SAVEPOINT - 429))
      | (1ULL << (MySqlParser::SCHEDULE - 429))
      | (1ULL << (MySqlParser::SECURITY - 429))
      | (1ULL << (MySqlParser::SERVER - 429))
      | (1ULL << (MySqlParser::SESSION - 429))
      | (1ULL << (MySqlParser::SHARE - 429))
      | (1ULL << (MySqlParser::SHARED - 429))
      | (1ULL << (MySqlParser::SIGNED - 429))
      | (1ULL << (MySqlParser::SIMPLE - 429))
      | (1ULL << (MySqlParser::SLAVE - 429))
      | (1ULL << (MySqlParser::SNAPSHOT - 429))
      | (1ULL << (MySqlParser::SOCKET - 429))
      | (1ULL << (MySqlParser::SOME - 429))
      | (1ULL << (MySqlParser::SOUNDS - 429)))) != 0) || ((((_la - 495) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 495)) & ((1ULL << (MySqlParser::SQL_BUFFER_RESULT - 495))
      | (1ULL << (MySqlParser::SQL_CACHE - 495))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 495))
      | (1ULL << (MySqlParser::START - 495))
      | (1ULL << (MySqlParser::STARTS - 495))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 495))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 495))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 495))
      | (1ULL << (MySqlParser::STATUS - 495))
      | (1ULL << (MySqlParser::STOP - 495))
      | (1ULL << (MySqlParser::STORAGE - 495))
      | (1ULL << (MySqlParser::SUBJECT - 495))
      | (1ULL << (MySqlParser::SUBPARTITION - 495))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 495))
      | (1ULL << (MySqlParser::TABLESPACE - 495))
      | (1ULL << (MySqlParser::TEMPORARY - 495))
      | (1ULL << (MySqlParser::TEMPTABLE - 495))
      | (1ULL << (MySqlParser::THAN - 495))
      | (1ULL << (MySqlParser::TRANSACTION - 495))
      | (1ULL << (MySqlParser::TRUNCATE - 495))
      | (1ULL << (MySqlParser::UNDEFINED - 495))
      | (1ULL << (MySqlParser::UNDOFILE - 495))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 495))
      | (1ULL << (MySqlParser::UNINSTALL - 495))
      | (1ULL << (MySqlParser::UNKNOWN - 495))
      | (1ULL << (MySqlParser::UPGRADE - 495))
      | (1ULL << (MySqlParser::USER - 495))
      | (1ULL << (MySqlParser::VALUE - 495))
      | (1ULL << (MySqlParser::VARIABLES - 495))
      | (1ULL << (MySqlParser::VIEW - 495))
      | (1ULL << (MySqlParser::WAIT - 495))
      | (1ULL << (MySqlParser::WARNINGS - 495))
      | (1ULL << (MySqlParser::WORK - 495))
      | (1ULL << (MySqlParser::WRAPPER - 495))
      | (1ULL << (MySqlParser::X509 - 495))
      | (1ULL << (MySqlParser::XA - 495))
      | (1ULL << (MySqlParser::XML - 495))
      | (1ULL << (MySqlParser::QUARTER - 495))
      | (1ULL << (MySqlParser::MONTH - 495))
      | (1ULL << (MySqlParser::DAY - 495))
      | (1ULL << (MySqlParser::HOUR - 495))
      | (1ULL << (MySqlParser::MINUTE - 495))
      | (1ULL << (MySqlParser::WEEK - 495))
      | (1ULL << (MySqlParser::SECOND - 495))
      | (1ULL << (MySqlParser::MICROSECOND - 495))
      | (1ULL << (MySqlParser::TABLES - 495))
      | (1ULL << (MySqlParser::ROUTINE - 495)))) != 0) || ((((_la - 559) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 559)) & ((1ULL << (MySqlParser::EXECUTE - 559))
      | (1ULL << (MySqlParser::FILE - 559))
      | (1ULL << (MySqlParser::PROCESS - 559))
      | (1ULL << (MySqlParser::RELOAD - 559))
      | (1ULL << (MySqlParser::SHUTDOWN - 559))
      | (1ULL << (MySqlParser::SUPER - 559))
      | (1ULL << (MySqlParser::PRIVILEGES - 559))
      | (1ULL << (MySqlParser::ARMSCII8 - 559))
      | (1ULL << (MySqlParser::ASCII - 559))
      | (1ULL << (MySqlParser::BIG5 - 559))
      | (1ULL << (MySqlParser::CP1250 - 559))
      | (1ULL << (MySqlParser::CP1251 - 559))
      | (1ULL << (MySqlParser::CP1256 - 559))
      | (1ULL << (MySqlParser::CP1257 - 559))
      | (1ULL << (MySqlParser::CP850 - 559))
      | (1ULL << (MySqlParser::CP852 - 559))
      | (1ULL << (MySqlParser::CP866 - 559))
      | (1ULL << (MySqlParser::CP932 - 559))
      | (1ULL << (MySqlParser::DEC8 - 559))
      | (1ULL << (MySqlParser::EUCJPMS - 559))
      | (1ULL << (MySqlParser::EUCKR - 559))
      | (1ULL << (MySqlParser::GB2312 - 559))
      | (1ULL << (MySqlParser::GBK - 559))
      | (1ULL << (MySqlParser::GEOSTD8 - 559))
      | (1ULL << (MySqlParser::GREEK - 559))
      | (1ULL << (MySqlParser::HEBREW - 559))
      | (1ULL << (MySqlParser::HP8 - 559))
      | (1ULL << (MySqlParser::KEYBCS2 - 559))
      | (1ULL << (MySqlParser::KOI8R - 559))
      | (1ULL << (MySqlParser::KOI8U - 559))
      | (1ULL << (MySqlParser::LATIN1 - 559))
      | (1ULL << (MySqlParser::LATIN2 - 559))
      | (1ULL << (MySqlParser::LATIN5 - 559))
      | (1ULL << (MySqlParser::LATIN7 - 559))
      | (1ULL << (MySqlParser::MACCE - 559))
      | (1ULL << (MySqlParser::MACROMAN - 559))
      | (1ULL << (MySqlParser::SJIS - 559))
      | (1ULL << (MySqlParser::SWE7 - 559))
      | (1ULL << (MySqlParser::TIS620 - 559))
      | (1ULL << (MySqlParser::UCS2 - 559))
      | (1ULL << (MySqlParser::UJIS - 559))
      | (1ULL << (MySqlParser::UTF16 - 559))
      | (1ULL << (MySqlParser::UTF16LE - 559))
      | (1ULL << (MySqlParser::UTF32 - 559))
      | (1ULL << (MySqlParser::UTF8 - 559))
      | (1ULL << (MySqlParser::UTF8MB3 - 559))
      | (1ULL << (MySqlParser::UTF8MB4 - 559))
      | (1ULL << (MySqlParser::ARCHIVE - 559))
      | (1ULL << (MySqlParser::BLACKHOLE - 559))
      | (1ULL << (MySqlParser::CSV - 559))
      | (1ULL << (MySqlParser::FEDERATED - 559))
      | (1ULL << (MySqlParser::INNODB - 559))
      | (1ULL << (MySqlParser::MEMORY - 559))
      | (1ULL << (MySqlParser::MRG_MYISAM - 559))
      | (1ULL << (MySqlParser::MYISAM - 559))
      | (1ULL << (MySqlParser::NDB - 559))
      | (1ULL << (MySqlParser::NDBCLUSTER - 559))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 559))
      | (1ULL << (MySqlParser::REPEATABLE - 559))
      | (1ULL << (MySqlParser::COMMITTED - 559))
      | (1ULL << (MySqlParser::UNCOMMITTED - 559))
      | (1ULL << (MySqlParser::SERIALIZABLE - 559))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 559))
      | (1ULL << (MySqlParser::LINESTRING - 559)))) != 0) || ((((_la - 623) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 623)) & ((1ULL << (MySqlParser::MULTILINESTRING - 623))
      | (1ULL << (MySqlParser::MULTIPOINT - 623))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 623))
      | (1ULL << (MySqlParser::POINT - 623))
      | (1ULL << (MySqlParser::POLYGON - 623))
      | (1ULL << (MySqlParser::ABS - 623))
      | (1ULL << (MySqlParser::ACOS - 623))
      | (1ULL << (MySqlParser::ADDDATE - 623))
      | (1ULL << (MySqlParser::ADDTIME - 623))
      | (1ULL << (MySqlParser::AES_DECRYPT - 623))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 623))
      | (1ULL << (MySqlParser::AREA - 623))
      | (1ULL << (MySqlParser::ASBINARY - 623))
      | (1ULL << (MySqlParser::ASIN - 623))
      | (1ULL << (MySqlParser::ASTEXT - 623))
      | (1ULL << (MySqlParser::ASWKB - 623))
      | (1ULL << (MySqlParser::ASWKT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 623))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 623))
      | (1ULL << (MySqlParser::ATAN - 623))
      | (1ULL << (MySqlParser::ATAN2 - 623))
      | (1ULL << (MySqlParser::BENCHMARK - 623))
      | (1ULL << (MySqlParser::BIN - 623))
      | (1ULL << (MySqlParser::BIT_COUNT - 623))
      | (1ULL << (MySqlParser::BIT_LENGTH - 623))
      | (1ULL << (MySqlParser::BUFFER - 623))
      | (1ULL << (MySqlParser::CEIL - 623))
      | (1ULL << (MySqlParser::CEILING - 623))
      | (1ULL << (MySqlParser::CENTROID - 623))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 623))
      | (1ULL << (MySqlParser::CHARSET - 623))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 623))
      | (1ULL << (MySqlParser::COERCIBILITY - 623))
      | (1ULL << (MySqlParser::COLLATION - 623))
      | (1ULL << (MySqlParser::COMPRESS - 623))
      | (1ULL << (MySqlParser::CONCAT - 623))
      | (1ULL << (MySqlParser::CONCAT_WS - 623))
      | (1ULL << (MySqlParser::CONNECTION_ID - 623))
      | (1ULL << (MySqlParser::CONV - 623))
      | (1ULL << (MySqlParser::CONVERT_TZ - 623))
      | (1ULL << (MySqlParser::COS - 623))
      | (1ULL << (MySqlParser::COT - 623))
      | (1ULL << (MySqlParser::CRC32 - 623))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 623))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 623))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 623))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 623))
      | (1ULL << (MySqlParser::CROSSES - 623))
      | (1ULL << (MySqlParser::DATEDIFF - 623))
      | (1ULL << (MySqlParser::DATE_FORMAT - 623))
      | (1ULL << (MySqlParser::DAYNAME - 623))
      | (1ULL << (MySqlParser::DAYOFMONTH - 623))
      | (1ULL << (MySqlParser::DAYOFWEEK - 623))
      | (1ULL << (MySqlParser::DAYOFYEAR - 623))
      | (1ULL << (MySqlParser::DECODE - 623))
      | (1ULL << (MySqlParser::DEGREES - 623))
      | (1ULL << (MySqlParser::DES_DECRYPT - 623))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 623))
      | (1ULL << (MySqlParser::DIMENSION - 623))
      | (1ULL << (MySqlParser::DISJOINT - 623))
      | (1ULL << (MySqlParser::ELT - 623)))) != 0) || ((((_la - 687) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 687)) & ((1ULL << (MySqlParser::ENCODE - 687))
      | (1ULL << (MySqlParser::ENCRYPT - 687))
      | (1ULL << (MySqlParser::ENDPOINT - 687))
      | (1ULL << (MySqlParser::ENVELOPE - 687))
      | (1ULL << (MySqlParser::EQUALS - 687))
      | (1ULL << (MySqlParser::EXP - 687))
      | (1ULL << (MySqlParser::EXPORT_SET - 687))
      | (1ULL << (MySqlParser::EXTERIORRING - 687))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 687))
      | (1ULL << (MySqlParser::FIELD - 687))
      | (1ULL << (MySqlParser::FIND_IN_SET - 687))
      | (1ULL << (MySqlParser::FLOOR - 687))
      | (1ULL << (MySqlParser::FORMAT - 687))
      | (1ULL << (MySqlParser::FOUND_ROWS - 687))
      | (1ULL << (MySqlParser::FROM_BASE64 - 687))
      | (1ULL << (MySqlParser::FROM_DAYS - 687))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 687))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 687))
      | (1ULL << (MySqlParser::GEOMETRYN - 687))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 687))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 687))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 687))
      | (1ULL << (MySqlParser::GET_FORMAT - 687))
      | (1ULL << (MySqlParser::GET_LOCK - 687))
      | (1ULL << (MySqlParser::GLENGTH - 687))
      | (1ULL << (MySqlParser::GREATEST - 687))
      | (1ULL << (MySqlParser::GTID_SUBSET - 687))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 687))
      | (1ULL << (MySqlParser::HEX - 687))
      | (1ULL << (MySqlParser::IFNULL - 687))
      | (1ULL << (MySqlParser::INET6_ATON - 687))
      | (1ULL << (MySqlParser::INET6_NTOA - 687))
      | (1ULL << (MySqlParser::INET_ATON - 687))
      | (1ULL << (MySqlParser::INET_NTOA - 687))
      | (1ULL << (MySqlParser::INSTR - 687))
      | (1ULL << (MySqlParser::INTERIORRINGN - 687))
      | (1ULL << (MySqlParser::INTERSECTS - 687))
      | (1ULL << (MySqlParser::ISCLOSED - 687))
      | (1ULL << (MySqlParser::ISEMPTY - 687))
      | (1ULL << (MySqlParser::ISNULL - 687))
      | (1ULL << (MySqlParser::ISSIMPLE - 687))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 687))
      | (1ULL << (MySqlParser::IS_IPV4 - 687))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 687))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 687))
      | (1ULL << (MySqlParser::IS_IPV6 - 687))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 687))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 687))
      | (1ULL << (MySqlParser::LCASE - 687))
      | (1ULL << (MySqlParser::LEAST - 687))
      | (1ULL << (MySqlParser::LENGTH - 687))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 687))
      | (1ULL << (MySqlParser::LINEFROMWKB - 687))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 687))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 687))
      | (1ULL << (MySqlParser::LN - 687))
      | (1ULL << (MySqlParser::LOAD_FILE - 687))
      | (1ULL << (MySqlParser::LOCATE - 687))
      | (1ULL << (MySqlParser::LOG - 687)))) != 0) || ((((_la - 751) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 751)) & ((1ULL << (MySqlParser::LOG10 - 751))
      | (1ULL << (MySqlParser::LOG2 - 751))
      | (1ULL << (MySqlParser::LOWER - 751))
      | (1ULL << (MySqlParser::LPAD - 751))
      | (1ULL << (MySqlParser::LTRIM - 751))
      | (1ULL << (MySqlParser::MAKEDATE - 751))
      | (1ULL << (MySqlParser::MAKETIME - 751))
      | (1ULL << (MySqlParser::MAKE_SET - 751))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 751))
      | (1ULL << (MySqlParser::MBRCONTAINS - 751))
      | (1ULL << (MySqlParser::MBRDISJOINT - 751))
      | (1ULL << (MySqlParser::MBREQUAL - 751))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 751))
      | (1ULL << (MySqlParser::MBROVERLAPS - 751))
      | (1ULL << (MySqlParser::MBRTOUCHES - 751))
      | (1ULL << (MySqlParser::MBRWITHIN - 751))
      | (1ULL << (MySqlParser::MD5 - 751))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 751))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 751))
      | (1ULL << (MySqlParser::MONTHNAME - 751))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 751))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 751))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 751))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 751))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 751))
      | (1ULL << (MySqlParser::NAME_CONST - 751))
      | (1ULL << (MySqlParser::NULLIF - 751))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 751))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 751))
      | (1ULL << (MySqlParser::NUMPOINTS - 751))
      | (1ULL << (MySqlParser::OCT - 751))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 751))
      | (1ULL << (MySqlParser::ORD - 751))
      | (1ULL << (MySqlParser::OVERLAPS - 751))
      | (1ULL << (MySqlParser::PERIOD_ADD - 751))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 751))
      | (1ULL << (MySqlParser::PI - 751))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 751))
      | (1ULL << (MySqlParser::POINTFROMWKB - 751))
      | (1ULL << (MySqlParser::POINTN - 751))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 751))
      | (1ULL << (MySqlParser::POLYFROMWKB - 751))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 751))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 751))
      | (1ULL << (MySqlParser::POW - 751))
      | (1ULL << (MySqlParser::POWER - 751))
      | (1ULL << (MySqlParser::QUOTE - 751))
      | (1ULL << (MySqlParser::RADIANS - 751))
      | (1ULL << (MySqlParser::RAND - 751))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 751))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 751))
      | (1ULL << (MySqlParser::REVERSE - 751))
      | (1ULL << (MySqlParser::ROUND - 751))
      | (1ULL << (MySqlParser::ROW_COUNT - 751))
      | (1ULL << (MySqlParser::RPAD - 751))
      | (1ULL << (MySqlParser::RTRIM - 751))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 751))
      | (1ULL << (MySqlParser::SESSION_USER - 751))
      | (1ULL << (MySqlParser::SHA - 751)))) != 0) || ((((_la - 815) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 815)) & ((1ULL << (MySqlParser::SHA1 - 815))
      | (1ULL << (MySqlParser::SHA2 - 815))
      | (1ULL << (MySqlParser::SIGN - 815))
      | (1ULL << (MySqlParser::SIN - 815))
      | (1ULL << (MySqlParser::SLEEP - 815))
      | (1ULL << (MySqlParser::SOUNDEX - 815))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 815))
      | (1ULL << (MySqlParser::SQRT - 815))
      | (1ULL << (MySqlParser::SRID - 815))
      | (1ULL << (MySqlParser::STARTPOINT - 815))
      | (1ULL << (MySqlParser::STRCMP - 815))
      | (1ULL << (MySqlParser::STR_TO_DATE - 815))
      | (1ULL << (MySqlParser::ST_AREA - 815))
      | (1ULL << (MySqlParser::ST_ASBINARY - 815))
      | (1ULL << (MySqlParser::ST_ASTEXT - 815))
      | (1ULL << (MySqlParser::ST_ASWKB - 815))
      | (1ULL << (MySqlParser::ST_ASWKT - 815))
      | (1ULL << (MySqlParser::ST_BUFFER - 815))
      | (1ULL << (MySqlParser::ST_CENTROID - 815))
      | (1ULL << (MySqlParser::ST_CONTAINS - 815))
      | (1ULL << (MySqlParser::ST_CROSSES - 815))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 815))
      | (1ULL << (MySqlParser::ST_DIMENSION - 815))
      | (1ULL << (MySqlParser::ST_DISJOINT - 815))
      | (1ULL << (MySqlParser::ST_DISTANCE - 815))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 815))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 815))
      | (1ULL << (MySqlParser::ST_EQUALS - 815))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 815))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 815))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 815))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 815))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 815))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 815))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 815))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 815))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 815))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 815))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 815))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 815))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 815))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_POINTN - 815))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 815))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 815))
      | (1ULL << (MySqlParser::ST_SRID - 815))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 815)))) != 0) || ((((_la - 879) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 879)) & ((1ULL << (MySqlParser::ST_SYMDIFFERENCE - 879))
      | (1ULL << (MySqlParser::ST_TOUCHES - 879))
      | (1ULL << (MySqlParser::ST_UNION - 879))
      | (1ULL << (MySqlParser::ST_WITHIN - 879))
      | (1ULL << (MySqlParser::ST_X - 879))
      | (1ULL << (MySqlParser::ST_Y - 879))
      | (1ULL << (MySqlParser::SUBDATE - 879))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 879))
      | (1ULL << (MySqlParser::SUBTIME - 879))
      | (1ULL << (MySqlParser::SYSTEM_USER - 879))
      | (1ULL << (MySqlParser::TAN - 879))
      | (1ULL << (MySqlParser::TIMEDIFF - 879))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 879))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 879))
      | (1ULL << (MySqlParser::TIME_FORMAT - 879))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 879))
      | (1ULL << (MySqlParser::TOUCHES - 879))
      | (1ULL << (MySqlParser::TO_BASE64 - 879))
      | (1ULL << (MySqlParser::TO_DAYS - 879))
      | (1ULL << (MySqlParser::TO_SECONDS - 879))
      | (1ULL << (MySqlParser::UCASE - 879))
      | (1ULL << (MySqlParser::UNCOMPRESS - 879))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 879))
      | (1ULL << (MySqlParser::UNHEX - 879))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 879))
      | (1ULL << (MySqlParser::UPDATEXML - 879))
      | (1ULL << (MySqlParser::UPPER - 879))
      | (1ULL << (MySqlParser::UUID - 879))
      | (1ULL << (MySqlParser::UUID_SHORT - 879))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 879))
      | (1ULL << (MySqlParser::VERSION - 879))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 879))
      | (1ULL << (MySqlParser::WEEKDAY - 879))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 879))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 879))
      | (1ULL << (MySqlParser::WITHIN - 879))
      | (1ULL << (MySqlParser::YEARWEEK - 879))
      | (1ULL << (MySqlParser::Y_FUNCTION - 879))
      | (1ULL << (MySqlParser::X_FUNCTION - 879)))) != 0) || ((((_la - 943) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 943)) & ((1ULL << (MySqlParser::LR_BRACKET - 943))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 943))
      | (1ULL << (MySqlParser::ID - 943))
      | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 943)))) != 0));
    setState(4009);
    match(MySqlParser::END);
    setState(4010);
    match(MySqlParser::WHILE);
    setState(4012);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519))
      | (1ULL << (MySqlParser::QUARTER - 519))
      | (1ULL << (MySqlParser::MONTH - 519))
      | (1ULL << (MySqlParser::DAY - 519))
      | (1ULL << (MySqlParser::HOUR - 519))
      | (1ULL << (MySqlParser::MINUTE - 519))
      | (1ULL << (MySqlParser::WEEK - 519))
      | (1ULL << (MySqlParser::SECOND - 519))
      | (1ULL << (MySqlParser::MICROSECOND - 519))
      | (1ULL << (MySqlParser::TABLES - 519))
      | (1ULL << (MySqlParser::ROUTINE - 519))
      | (1ULL << (MySqlParser::EXECUTE - 519))
      | (1ULL << (MySqlParser::FILE - 519))
      | (1ULL << (MySqlParser::PROCESS - 519))
      | (1ULL << (MySqlParser::RELOAD - 519))
      | (1ULL << (MySqlParser::SHUTDOWN - 519))
      | (1ULL << (MySqlParser::SUPER - 519))
      | (1ULL << (MySqlParser::PRIVILEGES - 519))
      | (1ULL << (MySqlParser::ARMSCII8 - 519))
      | (1ULL << (MySqlParser::ASCII - 519))
      | (1ULL << (MySqlParser::BIG5 - 519))
      | (1ULL << (MySqlParser::CP1250 - 519))
      | (1ULL << (MySqlParser::CP1251 - 519))
      | (1ULL << (MySqlParser::CP1256 - 519))
      | (1ULL << (MySqlParser::CP1257 - 519))
      | (1ULL << (MySqlParser::CP850 - 519))
      | (1ULL << (MySqlParser::CP852 - 519))
      | (1ULL << (MySqlParser::CP866 - 519))
      | (1ULL << (MySqlParser::CP932 - 519))
      | (1ULL << (MySqlParser::DEC8 - 519))
      | (1ULL << (MySqlParser::EUCJPMS - 519))
      | (1ULL << (MySqlParser::EUCKR - 519))
      | (1ULL << (MySqlParser::GB2312 - 519))
      | (1ULL << (MySqlParser::GBK - 519))
      | (1ULL << (MySqlParser::GEOSTD8 - 519)))) != 0) || ((((_la - 583) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 583)) & ((1ULL << (MySqlParser::GREEK - 583))
      | (1ULL << (MySqlParser::HEBREW - 583))
      | (1ULL << (MySqlParser::HP8 - 583))
      | (1ULL << (MySqlParser::KEYBCS2 - 583))
      | (1ULL << (MySqlParser::KOI8R - 583))
      | (1ULL << (MySqlParser::KOI8U - 583))
      | (1ULL << (MySqlParser::LATIN1 - 583))
      | (1ULL << (MySqlParser::LATIN2 - 583))
      | (1ULL << (MySqlParser::LATIN5 - 583))
      | (1ULL << (MySqlParser::LATIN7 - 583))
      | (1ULL << (MySqlParser::MACCE - 583))
      | (1ULL << (MySqlParser::MACROMAN - 583))
      | (1ULL << (MySqlParser::SJIS - 583))
      | (1ULL << (MySqlParser::SWE7 - 583))
      | (1ULL << (MySqlParser::TIS620 - 583))
      | (1ULL << (MySqlParser::UCS2 - 583))
      | (1ULL << (MySqlParser::UJIS - 583))
      | (1ULL << (MySqlParser::UTF16 - 583))
      | (1ULL << (MySqlParser::UTF16LE - 583))
      | (1ULL << (MySqlParser::UTF32 - 583))
      | (1ULL << (MySqlParser::UTF8 - 583))
      | (1ULL << (MySqlParser::UTF8MB3 - 583))
      | (1ULL << (MySqlParser::UTF8MB4 - 583))
      | (1ULL << (MySqlParser::ARCHIVE - 583))
      | (1ULL << (MySqlParser::BLACKHOLE - 583))
      | (1ULL << (MySqlParser::CSV - 583))
      | (1ULL << (MySqlParser::FEDERATED - 583))
      | (1ULL << (MySqlParser::INNODB - 583))
      | (1ULL << (MySqlParser::MEMORY - 583))
      | (1ULL << (MySqlParser::MRG_MYISAM - 583))
      | (1ULL << (MySqlParser::MYISAM - 583))
      | (1ULL << (MySqlParser::NDB - 583))
      | (1ULL << (MySqlParser::NDBCLUSTER - 583))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 583))
      | (1ULL << (MySqlParser::REPEATABLE - 583))
      | (1ULL << (MySqlParser::COMMITTED - 583))
      | (1ULL << (MySqlParser::UNCOMMITTED - 583))
      | (1ULL << (MySqlParser::SERIALIZABLE - 583))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 583))
      | (1ULL << (MySqlParser::LINESTRING - 583))
      | (1ULL << (MySqlParser::MULTILINESTRING - 583))
      | (1ULL << (MySqlParser::MULTIPOINT - 583))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 583))
      | (1ULL << (MySqlParser::POINT - 583))
      | (1ULL << (MySqlParser::POLYGON - 583))
      | (1ULL << (MySqlParser::ABS - 583))
      | (1ULL << (MySqlParser::ACOS - 583))
      | (1ULL << (MySqlParser::ADDDATE - 583))
      | (1ULL << (MySqlParser::ADDTIME - 583))
      | (1ULL << (MySqlParser::AES_DECRYPT - 583))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 583))
      | (1ULL << (MySqlParser::AREA - 583))
      | (1ULL << (MySqlParser::ASBINARY - 583))
      | (1ULL << (MySqlParser::ASIN - 583))
      | (1ULL << (MySqlParser::ASTEXT - 583))
      | (1ULL << (MySqlParser::ASWKB - 583))
      | (1ULL << (MySqlParser::ASWKT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 583))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 583))
      | (1ULL << (MySqlParser::ATAN - 583))
      | (1ULL << (MySqlParser::ATAN2 - 583)))) != 0) || ((((_la - 647) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 647)) & ((1ULL << (MySqlParser::BENCHMARK - 647))
      | (1ULL << (MySqlParser::BIN - 647))
      | (1ULL << (MySqlParser::BIT_COUNT - 647))
      | (1ULL << (MySqlParser::BIT_LENGTH - 647))
      | (1ULL << (MySqlParser::BUFFER - 647))
      | (1ULL << (MySqlParser::CEIL - 647))
      | (1ULL << (MySqlParser::CEILING - 647))
      | (1ULL << (MySqlParser::CENTROID - 647))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 647))
      | (1ULL << (MySqlParser::CHARSET - 647))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 647))
      | (1ULL << (MySqlParser::COERCIBILITY - 647))
      | (1ULL << (MySqlParser::COLLATION - 647))
      | (1ULL << (MySqlParser::COMPRESS - 647))
      | (1ULL << (MySqlParser::CONCAT - 647))
      | (1ULL << (MySqlParser::CONCAT_WS - 647))
      | (1ULL << (MySqlParser::CONNECTION_ID - 647))
      | (1ULL << (MySqlParser::CONV - 647))
      | (1ULL << (MySqlParser::CONVERT_TZ - 647))
      | (1ULL << (MySqlParser::COS - 647))
      | (1ULL << (MySqlParser::COT - 647))
      | (1ULL << (MySqlParser::CRC32 - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 647))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 647))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 647))
      | (1ULL << (MySqlParser::CROSSES - 647))
      | (1ULL << (MySqlParser::DATEDIFF - 647))
      | (1ULL << (MySqlParser::DATE_FORMAT - 647))
      | (1ULL << (MySqlParser::DAYNAME - 647))
      | (1ULL << (MySqlParser::DAYOFMONTH - 647))
      | (1ULL << (MySqlParser::DAYOFWEEK - 647))
      | (1ULL << (MySqlParser::DAYOFYEAR - 647))
      | (1ULL << (MySqlParser::DECODE - 647))
      | (1ULL << (MySqlParser::DEGREES - 647))
      | (1ULL << (MySqlParser::DES_DECRYPT - 647))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 647))
      | (1ULL << (MySqlParser::DIMENSION - 647))
      | (1ULL << (MySqlParser::DISJOINT - 647))
      | (1ULL << (MySqlParser::ELT - 647))
      | (1ULL << (MySqlParser::ENCODE - 647))
      | (1ULL << (MySqlParser::ENCRYPT - 647))
      | (1ULL << (MySqlParser::ENDPOINT - 647))
      | (1ULL << (MySqlParser::ENVELOPE - 647))
      | (1ULL << (MySqlParser::EQUALS - 647))
      | (1ULL << (MySqlParser::EXP - 647))
      | (1ULL << (MySqlParser::EXPORT_SET - 647))
      | (1ULL << (MySqlParser::EXTERIORRING - 647))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 647))
      | (1ULL << (MySqlParser::FIELD - 647))
      | (1ULL << (MySqlParser::FIND_IN_SET - 647))
      | (1ULL << (MySqlParser::FLOOR - 647))
      | (1ULL << (MySqlParser::FORMAT - 647))
      | (1ULL << (MySqlParser::FOUND_ROWS - 647))
      | (1ULL << (MySqlParser::FROM_BASE64 - 647))
      | (1ULL << (MySqlParser::FROM_DAYS - 647))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 647))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 647))
      | (1ULL << (MySqlParser::GEOMETRYN - 647)))) != 0) || ((((_la - 711) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 711)) & ((1ULL << (MySqlParser::GEOMETRYTYPE - 711))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 711))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 711))
      | (1ULL << (MySqlParser::GET_FORMAT - 711))
      | (1ULL << (MySqlParser::GET_LOCK - 711))
      | (1ULL << (MySqlParser::GLENGTH - 711))
      | (1ULL << (MySqlParser::GREATEST - 711))
      | (1ULL << (MySqlParser::GTID_SUBSET - 711))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 711))
      | (1ULL << (MySqlParser::HEX - 711))
      | (1ULL << (MySqlParser::IFNULL - 711))
      | (1ULL << (MySqlParser::INET6_ATON - 711))
      | (1ULL << (MySqlParser::INET6_NTOA - 711))
      | (1ULL << (MySqlParser::INET_ATON - 711))
      | (1ULL << (MySqlParser::INET_NTOA - 711))
      | (1ULL << (MySqlParser::INSTR - 711))
      | (1ULL << (MySqlParser::INTERIORRINGN - 711))
      | (1ULL << (MySqlParser::INTERSECTS - 711))
      | (1ULL << (MySqlParser::ISCLOSED - 711))
      | (1ULL << (MySqlParser::ISEMPTY - 711))
      | (1ULL << (MySqlParser::ISNULL - 711))
      | (1ULL << (MySqlParser::ISSIMPLE - 711))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 711))
      | (1ULL << (MySqlParser::IS_IPV4 - 711))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 711))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 711))
      | (1ULL << (MySqlParser::IS_IPV6 - 711))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 711))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 711))
      | (1ULL << (MySqlParser::LCASE - 711))
      | (1ULL << (MySqlParser::LEAST - 711))
      | (1ULL << (MySqlParser::LENGTH - 711))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINEFROMWKB - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 711))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 711))
      | (1ULL << (MySqlParser::LN - 711))
      | (1ULL << (MySqlParser::LOAD_FILE - 711))
      | (1ULL << (MySqlParser::LOCATE - 711))
      | (1ULL << (MySqlParser::LOG - 711))
      | (1ULL << (MySqlParser::LOG10 - 711))
      | (1ULL << (MySqlParser::LOG2 - 711))
      | (1ULL << (MySqlParser::LOWER - 711))
      | (1ULL << (MySqlParser::LPAD - 711))
      | (1ULL << (MySqlParser::LTRIM - 711))
      | (1ULL << (MySqlParser::MAKEDATE - 711))
      | (1ULL << (MySqlParser::MAKETIME - 711))
      | (1ULL << (MySqlParser::MAKE_SET - 711))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 711))
      | (1ULL << (MySqlParser::MBRCONTAINS - 711))
      | (1ULL << (MySqlParser::MBRDISJOINT - 711))
      | (1ULL << (MySqlParser::MBREQUAL - 711))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 711))
      | (1ULL << (MySqlParser::MBROVERLAPS - 711))
      | (1ULL << (MySqlParser::MBRTOUCHES - 711))
      | (1ULL << (MySqlParser::MBRWITHIN - 711))
      | (1ULL << (MySqlParser::MD5 - 711))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 711))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 711))
      | (1ULL << (MySqlParser::MONTHNAME - 711))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 711))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 711))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 711)))) != 0) || ((((_la - 775) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 775)) & ((1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::NAME_CONST - 775))
      | (1ULL << (MySqlParser::NULLIF - 775))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 775))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 775))
      | (1ULL << (MySqlParser::NUMPOINTS - 775))
      | (1ULL << (MySqlParser::OCT - 775))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 775))
      | (1ULL << (MySqlParser::ORD - 775))
      | (1ULL << (MySqlParser::OVERLAPS - 775))
      | (1ULL << (MySqlParser::PERIOD_ADD - 775))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 775))
      | (1ULL << (MySqlParser::PI - 775))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 775))
      | (1ULL << (MySqlParser::POINTFROMWKB - 775))
      | (1ULL << (MySqlParser::POINTN - 775))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYFROMWKB - 775))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 775))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 775))
      | (1ULL << (MySqlParser::POW - 775))
      | (1ULL << (MySqlParser::POWER - 775))
      | (1ULL << (MySqlParser::QUOTE - 775))
      | (1ULL << (MySqlParser::RADIANS - 775))
      | (1ULL << (MySqlParser::RAND - 775))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 775))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 775))
      | (1ULL << (MySqlParser::REVERSE - 775))
      | (1ULL << (MySqlParser::ROUND - 775))
      | (1ULL << (MySqlParser::ROW_COUNT - 775))
      | (1ULL << (MySqlParser::RPAD - 775))
      | (1ULL << (MySqlParser::RTRIM - 775))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 775))
      | (1ULL << (MySqlParser::SESSION_USER - 775))
      | (1ULL << (MySqlParser::SHA - 775))
      | (1ULL << (MySqlParser::SHA1 - 775))
      | (1ULL << (MySqlParser::SHA2 - 775))
      | (1ULL << (MySqlParser::SIGN - 775))
      | (1ULL << (MySqlParser::SIN - 775))
      | (1ULL << (MySqlParser::SLEEP - 775))
      | (1ULL << (MySqlParser::SOUNDEX - 775))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 775))
      | (1ULL << (MySqlParser::SQRT - 775))
      | (1ULL << (MySqlParser::SRID - 775))
      | (1ULL << (MySqlParser::STARTPOINT - 775))
      | (1ULL << (MySqlParser::STRCMP - 775))
      | (1ULL << (MySqlParser::STR_TO_DATE - 775))
      | (1ULL << (MySqlParser::ST_AREA - 775))
      | (1ULL << (MySqlParser::ST_ASBINARY - 775))
      | (1ULL << (MySqlParser::ST_ASTEXT - 775))
      | (1ULL << (MySqlParser::ST_ASWKB - 775))
      | (1ULL << (MySqlParser::ST_ASWKT - 775))
      | (1ULL << (MySqlParser::ST_BUFFER - 775))
      | (1ULL << (MySqlParser::ST_CENTROID - 775))
      | (1ULL << (MySqlParser::ST_CONTAINS - 775))
      | (1ULL << (MySqlParser::ST_CROSSES - 775))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 775))
      | (1ULL << (MySqlParser::ST_DIMENSION - 775))
      | (1ULL << (MySqlParser::ST_DISJOINT - 775)))) != 0) || ((((_la - 839) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 839)) & ((1ULL << (MySqlParser::ST_DISTANCE - 839))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 839))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 839))
      | (1ULL << (MySqlParser::ST_EQUALS - 839))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 839))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 839))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 839))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 839))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 839))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 839))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 839))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 839))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POINTN - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 839))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 839))
      | (1ULL << (MySqlParser::ST_SRID - 839))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 839))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 839))
      | (1ULL << (MySqlParser::ST_TOUCHES - 839))
      | (1ULL << (MySqlParser::ST_UNION - 839))
      | (1ULL << (MySqlParser::ST_WITHIN - 839))
      | (1ULL << (MySqlParser::ST_X - 839))
      | (1ULL << (MySqlParser::ST_Y - 839))
      | (1ULL << (MySqlParser::SUBDATE - 839))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 839))
      | (1ULL << (MySqlParser::SUBTIME - 839))
      | (1ULL << (MySqlParser::SYSTEM_USER - 839))
      | (1ULL << (MySqlParser::TAN - 839))
      | (1ULL << (MySqlParser::TIMEDIFF - 839))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 839))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 839))
      | (1ULL << (MySqlParser::TIME_FORMAT - 839))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 839))
      | (1ULL << (MySqlParser::TOUCHES - 839))
      | (1ULL << (MySqlParser::TO_BASE64 - 839))
      | (1ULL << (MySqlParser::TO_DAYS - 839))
      | (1ULL << (MySqlParser::TO_SECONDS - 839))
      | (1ULL << (MySqlParser::UCASE - 839))
      | (1ULL << (MySqlParser::UNCOMPRESS - 839))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 839))
      | (1ULL << (MySqlParser::UNHEX - 839)))) != 0) || ((((_la - 903) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 903)) & ((1ULL << (MySqlParser::UNIX_TIMESTAMP - 903))
      | (1ULL << (MySqlParser::UPDATEXML - 903))
      | (1ULL << (MySqlParser::UPPER - 903))
      | (1ULL << (MySqlParser::UUID - 903))
      | (1ULL << (MySqlParser::UUID_SHORT - 903))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 903))
      | (1ULL << (MySqlParser::VERSION - 903))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 903))
      | (1ULL << (MySqlParser::WEEKDAY - 903))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 903))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 903))
      | (1ULL << (MySqlParser::WITHIN - 903))
      | (1ULL << (MySqlParser::YEARWEEK - 903))
      | (1ULL << (MySqlParser::Y_FUNCTION - 903))
      | (1ULL << (MySqlParser::X_FUNCTION - 903))
      | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 903))
      | (1ULL << (MySqlParser::ID - 903)))) != 0) || _la == MySqlParser::REVERSE_QUOTE_ID) {
      setState(4011);
      id_();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cursor_statementContext ------------------------------------------------------------------

MySqlParser::Cursor_statementContext::Cursor_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Cursor_statementContext::CLOSE() {
  return getToken(MySqlParser::CLOSE, 0);
}

MySqlParser::Id_Context* MySqlParser::Cursor_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Cursor_statementContext::FETCH() {
  return getToken(MySqlParser::FETCH, 0);
}

tree::TerminalNode* MySqlParser::Cursor_statementContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

MySqlParser::Id_listContext* MySqlParser::Cursor_statementContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::Cursor_statementContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::Cursor_statementContext::NEXT() {
  return getToken(MySqlParser::NEXT, 0);
}

tree::TerminalNode* MySqlParser::Cursor_statementContext::OPEN() {
  return getToken(MySqlParser::OPEN, 0);
}


size_t MySqlParser::Cursor_statementContext::getRuleIndex() const {
  return MySqlParser::RuleCursor_statement;
}

void MySqlParser::Cursor_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCursor_statement(this);
}

void MySqlParser::Cursor_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCursor_statement(this);
}

MySqlParser::Cursor_statementContext* MySqlParser::cursor_statement() {
  Cursor_statementContext *_localctx = _tracker.createInstance<Cursor_statementContext>(_ctx, getState());
  enterRule(_localctx, 342, MySqlParser::RuleCursor_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4029);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::CLOSE: {
        enterOuterAlt(_localctx, 1);
        setState(4014);
        match(MySqlParser::CLOSE);
        setState(4015);
        id_();
        break;
      }

      case MySqlParser::FETCH: {
        enterOuterAlt(_localctx, 2);
        setState(4016);
        match(MySqlParser::FETCH);
        setState(4021);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::FROM || _la == MySqlParser::NEXT) {
          setState(4018);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::NEXT) {
            setState(4017);
            match(MySqlParser::NEXT);
          }
          setState(4020);
          match(MySqlParser::FROM);
        }
        setState(4023);
        id_();
        setState(4024);
        match(MySqlParser::INTO);
        setState(4025);
        id_list();
        break;
      }

      case MySqlParser::OPEN: {
        enterOuterAlt(_localctx, 3);
        setState(4027);
        match(MySqlParser::OPEN);
        setState(4028);
        id_();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_variableContext ------------------------------------------------------------------

MySqlParser::Declare_variableContext::Declare_variableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Declare_variableContext::DECLARE() {
  return getToken(MySqlParser::DECLARE, 0);
}

MySqlParser::Id_listContext* MySqlParser::Declare_variableContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

MySqlParser::Data_typeContext* MySqlParser::Declare_variableContext::data_type() {
  return getRuleContext<MySqlParser::Data_typeContext>(0);
}

tree::TerminalNode* MySqlParser::Declare_variableContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::Default_valueContext* MySqlParser::Declare_variableContext::default_value() {
  return getRuleContext<MySqlParser::Default_valueContext>(0);
}


size_t MySqlParser::Declare_variableContext::getRuleIndex() const {
  return MySqlParser::RuleDeclare_variable;
}

void MySqlParser::Declare_variableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_variable(this);
}

void MySqlParser::Declare_variableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_variable(this);
}

MySqlParser::Declare_variableContext* MySqlParser::declare_variable() {
  Declare_variableContext *_localctx = _tracker.createInstance<Declare_variableContext>(_ctx, getState());
  enterRule(_localctx, 344, MySqlParser::RuleDeclare_variable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4031);
    match(MySqlParser::DECLARE);
    setState(4032);
    id_list();
    setState(4033);
    data_type();
    setState(4036);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::DEFAULT) {
      setState(4034);
      match(MySqlParser::DEFAULT);
      setState(4035);
      default_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_conditionContext ------------------------------------------------------------------

MySqlParser::Declare_conditionContext::Declare_conditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Declare_conditionContext::DECLARE() {
  return getToken(MySqlParser::DECLARE, 0);
}

MySqlParser::Id_Context* MySqlParser::Declare_conditionContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Declare_conditionContext::CONDITION() {
  return getToken(MySqlParser::CONDITION, 0);
}

tree::TerminalNode* MySqlParser::Declare_conditionContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::Declare_conditionContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

tree::TerminalNode* MySqlParser::Declare_conditionContext::SQLSTATE() {
  return getToken(MySqlParser::SQLSTATE, 0);
}

tree::TerminalNode* MySqlParser::Declare_conditionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Declare_conditionContext::VALUE() {
  return getToken(MySqlParser::VALUE, 0);
}


size_t MySqlParser::Declare_conditionContext::getRuleIndex() const {
  return MySqlParser::RuleDeclare_condition;
}

void MySqlParser::Declare_conditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_condition(this);
}

void MySqlParser::Declare_conditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_condition(this);
}

MySqlParser::Declare_conditionContext* MySqlParser::declare_condition() {
  Declare_conditionContext *_localctx = _tracker.createInstance<Declare_conditionContext>(_ctx, getState());
  enterRule(_localctx, 346, MySqlParser::RuleDeclare_condition);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4038);
    match(MySqlParser::DECLARE);
    setState(4039);
    id_();
    setState(4040);
    match(MySqlParser::CONDITION);
    setState(4041);
    match(MySqlParser::FOR);
    setState(4048);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ZERO_DECIMAL:
      case MySqlParser::ONE_DECIMAL:
      case MySqlParser::TWO_DECIMAL:
      case MySqlParser::DECIMAL_LITERAL: {
        setState(4042);
        decimal_literal();
        break;
      }

      case MySqlParser::SQLSTATE: {
        setState(4043);
        match(MySqlParser::SQLSTATE);
        setState(4045);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::VALUE) {
          setState(4044);
          match(MySqlParser::VALUE);
        }
        setState(4047);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_cursorContext ------------------------------------------------------------------

MySqlParser::Declare_cursorContext::Declare_cursorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Declare_cursorContext::DECLARE() {
  return getToken(MySqlParser::DECLARE, 0);
}

MySqlParser::Id_Context* MySqlParser::Declare_cursorContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Declare_cursorContext::CURSOR() {
  return getToken(MySqlParser::CURSOR, 0);
}

tree::TerminalNode* MySqlParser::Declare_cursorContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

MySqlParser::Select_statementContext* MySqlParser::Declare_cursorContext::select_statement() {
  return getRuleContext<MySqlParser::Select_statementContext>(0);
}


size_t MySqlParser::Declare_cursorContext::getRuleIndex() const {
  return MySqlParser::RuleDeclare_cursor;
}

void MySqlParser::Declare_cursorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_cursor(this);
}

void MySqlParser::Declare_cursorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_cursor(this);
}

MySqlParser::Declare_cursorContext* MySqlParser::declare_cursor() {
  Declare_cursorContext *_localctx = _tracker.createInstance<Declare_cursorContext>(_ctx, getState());
  enterRule(_localctx, 348, MySqlParser::RuleDeclare_cursor);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4050);
    match(MySqlParser::DECLARE);
    setState(4051);
    id_();
    setState(4052);
    match(MySqlParser::CURSOR);
    setState(4053);
    match(MySqlParser::FOR);
    setState(4054);
    select_statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_handlerContext ------------------------------------------------------------------

MySqlParser::Declare_handlerContext::Declare_handlerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Declare_handlerContext::DECLARE() {
  return getToken(MySqlParser::DECLARE, 0);
}

tree::TerminalNode* MySqlParser::Declare_handlerContext::HANDLER() {
  return getToken(MySqlParser::HANDLER, 0);
}

tree::TerminalNode* MySqlParser::Declare_handlerContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

std::vector<MySqlParser::Handler_condition_valueContext *> MySqlParser::Declare_handlerContext::handler_condition_value() {
  return getRuleContexts<MySqlParser::Handler_condition_valueContext>();
}

MySqlParser::Handler_condition_valueContext* MySqlParser::Declare_handlerContext::handler_condition_value(size_t i) {
  return getRuleContext<MySqlParser::Handler_condition_valueContext>(i);
}

MySqlParser::Routine_bodyContext* MySqlParser::Declare_handlerContext::routine_body() {
  return getRuleContext<MySqlParser::Routine_bodyContext>(0);
}

tree::TerminalNode* MySqlParser::Declare_handlerContext::CONTINUE() {
  return getToken(MySqlParser::CONTINUE, 0);
}

tree::TerminalNode* MySqlParser::Declare_handlerContext::EXIT() {
  return getToken(MySqlParser::EXIT, 0);
}

tree::TerminalNode* MySqlParser::Declare_handlerContext::UNDO() {
  return getToken(MySqlParser::UNDO, 0);
}


size_t MySqlParser::Declare_handlerContext::getRuleIndex() const {
  return MySqlParser::RuleDeclare_handler;
}

void MySqlParser::Declare_handlerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclare_handler(this);
}

void MySqlParser::Declare_handlerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclare_handler(this);
}

MySqlParser::Declare_handlerContext* MySqlParser::declare_handler() {
  Declare_handlerContext *_localctx = _tracker.createInstance<Declare_handlerContext>(_ctx, getState());
  enterRule(_localctx, 350, MySqlParser::RuleDeclare_handler);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4056);
    match(MySqlParser::DECLARE);
    setState(4057);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::CONTINUE

    || _la == MySqlParser::EXIT || _la == MySqlParser::UNDO)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4058);
    match(MySqlParser::HANDLER);
    setState(4059);
    match(MySqlParser::FOR);
    setState(4060);
    handler_condition_value();
    setState(4065);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4061);
      match(MySqlParser::COMMA);
      setState(4062);
      handler_condition_value();
      setState(4067);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4068);
    routine_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_condition_valueContext ------------------------------------------------------------------

MySqlParser::Handler_condition_valueContext::Handler_condition_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Decimal_literalContext* MySqlParser::Handler_condition_valueContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

tree::TerminalNode* MySqlParser::Handler_condition_valueContext::SQLSTATE() {
  return getToken(MySqlParser::SQLSTATE, 0);
}

tree::TerminalNode* MySqlParser::Handler_condition_valueContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Handler_condition_valueContext::VALUE() {
  return getToken(MySqlParser::VALUE, 0);
}

MySqlParser::Id_Context* MySqlParser::Handler_condition_valueContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Handler_condition_valueContext::SQLWARNING() {
  return getToken(MySqlParser::SQLWARNING, 0);
}

tree::TerminalNode* MySqlParser::Handler_condition_valueContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

tree::TerminalNode* MySqlParser::Handler_condition_valueContext::FOUND() {
  return getToken(MySqlParser::FOUND, 0);
}

tree::TerminalNode* MySqlParser::Handler_condition_valueContext::SQLEXCEPTION() {
  return getToken(MySqlParser::SQLEXCEPTION, 0);
}


size_t MySqlParser::Handler_condition_valueContext::getRuleIndex() const {
  return MySqlParser::RuleHandler_condition_value;
}

void MySqlParser::Handler_condition_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_condition_value(this);
}

void MySqlParser::Handler_condition_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_condition_value(this);
}

MySqlParser::Handler_condition_valueContext* MySqlParser::handler_condition_value() {
  Handler_condition_valueContext *_localctx = _tracker.createInstance<Handler_condition_valueContext>(_ctx, getState());
  enterRule(_localctx, 352, MySqlParser::RuleHandler_condition_value);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4081);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ZERO_DECIMAL:
      case MySqlParser::ONE_DECIMAL:
      case MySqlParser::TWO_DECIMAL:
      case MySqlParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(4070);
        decimal_literal();
        break;
      }

      case MySqlParser::SQLSTATE: {
        enterOuterAlt(_localctx, 2);
        setState(4071);
        match(MySqlParser::SQLSTATE);
        setState(4073);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::VALUE) {
          setState(4072);
          match(MySqlParser::VALUE);
        }
        setState(4075);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::LEFT:
      case MySqlParser::RIGHT:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::COUNT:
      case MySqlParser::POSITION:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BTREE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLIENT:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FIELDS:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::HASH:
      case MySqlParser::HOST:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IMPORT:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INVOKER:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MERGE:
      case MySqlParser::MID:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRESERVE:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATION:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STORAGE:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XML:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFOMANCE_SCHEMA:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        enterOuterAlt(_localctx, 3);
        setState(4076);
        id_();
        break;
      }

      case MySqlParser::SQLWARNING: {
        enterOuterAlt(_localctx, 4);
        setState(4077);
        match(MySqlParser::SQLWARNING);
        break;
      }

      case MySqlParser::NOT: {
        enterOuterAlt(_localctx, 5);
        setState(4078);
        match(MySqlParser::NOT);
        setState(4079);
        match(MySqlParser::FOUND);
        break;
      }

      case MySqlParser::SQLEXCEPTION: {
        enterOuterAlt(_localctx, 6);
        setState(4080);
        match(MySqlParser::SQLEXCEPTION);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Procedure_sql_statementContext ------------------------------------------------------------------

MySqlParser::Procedure_sql_statementContext::Procedure_sql_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Procedure_sql_statementContext::SEMI() {
  return getToken(MySqlParser::SEMI, 0);
}

MySqlParser::Compound_statementContext* MySqlParser::Procedure_sql_statementContext::compound_statement() {
  return getRuleContext<MySqlParser::Compound_statementContext>(0);
}

MySqlParser::Sql_statementContext* MySqlParser::Procedure_sql_statementContext::sql_statement() {
  return getRuleContext<MySqlParser::Sql_statementContext>(0);
}


size_t MySqlParser::Procedure_sql_statementContext::getRuleIndex() const {
  return MySqlParser::RuleProcedure_sql_statement;
}

void MySqlParser::Procedure_sql_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedure_sql_statement(this);
}

void MySqlParser::Procedure_sql_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedure_sql_statement(this);
}

MySqlParser::Procedure_sql_statementContext* MySqlParser::procedure_sql_statement() {
  Procedure_sql_statementContext *_localctx = _tracker.createInstance<Procedure_sql_statementContext>(_ctx, getState());
  enterRule(_localctx, 354, MySqlParser::RuleProcedure_sql_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4085);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 597, _ctx)) {
    case 1: {
      setState(4083);
      compound_statement();
      break;
    }

    case 2: {
      setState(4084);
      sql_statement();
      break;
    }

    }
    setState(4087);
    match(MySqlParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_userContext ------------------------------------------------------------------

MySqlParser::Alter_userContext::Alter_userContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Alter_userContext::getRuleIndex() const {
  return MySqlParser::RuleAlter_user;
}

void MySqlParser::Alter_userContext::copyFrom(Alter_userContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AlterUserMysql57Context ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterUserMysql57Context::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterUserMysql57Context::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::User_auth_optionContext *> MySqlParser::AlterUserMysql57Context::user_auth_option() {
  return getRuleContexts<MySqlParser::User_auth_optionContext>();
}

MySqlParser::User_auth_optionContext* MySqlParser::AlterUserMysql57Context::user_auth_option(size_t i) {
  return getRuleContext<MySqlParser::User_auth_optionContext>(i);
}

MySqlParser::If_existsContext* MySqlParser::AlterUserMysql57Context::if_exists() {
  return getRuleContext<MySqlParser::If_existsContext>(0);
}

tree::TerminalNode* MySqlParser::AlterUserMysql57Context::REQUIRE() {
  return getToken(MySqlParser::REQUIRE, 0);
}

tree::TerminalNode* MySqlParser::AlterUserMysql57Context::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

std::vector<MySqlParser::User_password_optionContext *> MySqlParser::AlterUserMysql57Context::user_password_option() {
  return getRuleContexts<MySqlParser::User_password_optionContext>();
}

MySqlParser::User_password_optionContext* MySqlParser::AlterUserMysql57Context::user_password_option(size_t i) {
  return getRuleContext<MySqlParser::User_password_optionContext>(i);
}

std::vector<MySqlParser::User_lock_optionContext *> MySqlParser::AlterUserMysql57Context::user_lock_option() {
  return getRuleContexts<MySqlParser::User_lock_optionContext>();
}

MySqlParser::User_lock_optionContext* MySqlParser::AlterUserMysql57Context::user_lock_option(size_t i) {
  return getRuleContext<MySqlParser::User_lock_optionContext>(i);
}

tree::TerminalNode* MySqlParser::AlterUserMysql57Context::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

std::vector<MySqlParser::Tls_optionContext *> MySqlParser::AlterUserMysql57Context::tls_option() {
  return getRuleContexts<MySqlParser::Tls_optionContext>();
}

MySqlParser::Tls_optionContext* MySqlParser::AlterUserMysql57Context::tls_option(size_t i) {
  return getRuleContext<MySqlParser::Tls_optionContext>(i);
}

std::vector<MySqlParser::User_resource_optionContext *> MySqlParser::AlterUserMysql57Context::user_resource_option() {
  return getRuleContexts<MySqlParser::User_resource_optionContext>();
}

MySqlParser::User_resource_optionContext* MySqlParser::AlterUserMysql57Context::user_resource_option(size_t i) {
  return getRuleContext<MySqlParser::User_resource_optionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::AlterUserMysql57Context::AND() {
  return getTokens(MySqlParser::AND);
}

tree::TerminalNode* MySqlParser::AlterUserMysql57Context::AND(size_t i) {
  return getToken(MySqlParser::AND, i);
}

MySqlParser::AlterUserMysql57Context::AlterUserMysql57Context(Alter_userContext *ctx) { copyFrom(ctx); }

void MySqlParser::AlterUserMysql57Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterUserMysql57(this);
}
void MySqlParser::AlterUserMysql57Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterUserMysql57(this);
}
//----------------- AlterUserMysql56Context ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::AlterUserMysql56Context::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::AlterUserMysql56Context::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::User_nameContext *> MySqlParser::AlterUserMysql56Context::user_name() {
  return getRuleContexts<MySqlParser::User_nameContext>();
}

MySqlParser::User_nameContext* MySqlParser::AlterUserMysql56Context::user_name(size_t i) {
  return getRuleContext<MySqlParser::User_nameContext>(i);
}

std::vector<MySqlParser::User_password_optionContext *> MySqlParser::AlterUserMysql56Context::user_password_option() {
  return getRuleContexts<MySqlParser::User_password_optionContext>();
}

MySqlParser::User_password_optionContext* MySqlParser::AlterUserMysql56Context::user_password_option(size_t i) {
  return getRuleContext<MySqlParser::User_password_optionContext>(i);
}

MySqlParser::AlterUserMysql56Context::AlterUserMysql56Context(Alter_userContext *ctx) { copyFrom(ctx); }

void MySqlParser::AlterUserMysql56Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterUserMysql56(this);
}
void MySqlParser::AlterUserMysql56Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterUserMysql56(this);
}
MySqlParser::Alter_userContext* MySqlParser::alter_user() {
  Alter_userContext *_localctx = _tracker.createInstance<Alter_userContext>(_ctx, getState());
  enterRule(_localctx, 356, MySqlParser::RuleAlter_user);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4146);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 609, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Alter_userContext *>(_tracker.createInstance<MySqlParser::AlterUserMysql56Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4089);
      match(MySqlParser::ALTER);
      setState(4090);
      match(MySqlParser::USER);
      setState(4091);
      user_name();
      setState(4092);
      user_password_option();
      setState(4099);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4093);
        match(MySqlParser::COMMA);
        setState(4094);
        user_name();
        setState(4095);
        user_password_option();
        setState(4101);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Alter_userContext *>(_tracker.createInstance<MySqlParser::AlterUserMysql57Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4102);
      match(MySqlParser::ALTER);
      setState(4103);
      match(MySqlParser::USER);
      setState(4105);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(4104);
        if_exists();
      }
      setState(4107);
      user_auth_option();
      setState(4112);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4108);
        match(MySqlParser::COMMA);
        setState(4109);
        user_auth_option();
        setState(4114);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4129);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::REQUIRE) {
        setState(4115);
        match(MySqlParser::REQUIRE);
        setState(4127);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::NONE: {
            setState(4116);
            match(MySqlParser::NONE);
            break;
          }

          case MySqlParser::SSL:
          case MySqlParser::CIPHER:
          case MySqlParser::ISSUER:
          case MySqlParser::SUBJECT:
          case MySqlParser::X509: {
            setState(4117);
            tls_option();
            setState(4124);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == MySqlParser::AND || _la == MySqlParser::SSL || _la == MySqlParser::CIPHER || _la == MySqlParser::ISSUER || _la == MySqlParser::SUBJECT

            || _la == MySqlParser::X509) {
              setState(4119);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == MySqlParser::AND) {
                setState(4118);
                match(MySqlParser::AND);
              }
              setState(4121);
              tls_option();
              setState(4126);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      setState(4137);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::WITH) {
        setState(4131);
        match(MySqlParser::WITH);
        setState(4133); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(4132);
          user_resource_option();
          setState(4135); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 391) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391)))) != 0));
      }
      setState(4143);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::ACCOUNT || _la == MySqlParser::PASSWORD) {
        setState(4141);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::PASSWORD: {
            setState(4139);
            user_password_option();
            break;
          }

          case MySqlParser::ACCOUNT: {
            setState(4140);
            user_lock_option();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4145);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_userContext ------------------------------------------------------------------

MySqlParser::Create_userContext::Create_userContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Create_userContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_user;
}

void MySqlParser::Create_userContext::copyFrom(Create_userContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- CreateUserMysql57Context ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CreateUserMysql57Context::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateUserMysql57Context::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::User_auth_optionContext *> MySqlParser::CreateUserMysql57Context::user_auth_option() {
  return getRuleContexts<MySqlParser::User_auth_optionContext>();
}

MySqlParser::User_auth_optionContext* MySqlParser::CreateUserMysql57Context::user_auth_option(size_t i) {
  return getRuleContext<MySqlParser::User_auth_optionContext>(i);
}

MySqlParser::If_not_existsContext* MySqlParser::CreateUserMysql57Context::if_not_exists() {
  return getRuleContext<MySqlParser::If_not_existsContext>(0);
}

tree::TerminalNode* MySqlParser::CreateUserMysql57Context::REQUIRE() {
  return getToken(MySqlParser::REQUIRE, 0);
}

tree::TerminalNode* MySqlParser::CreateUserMysql57Context::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

std::vector<MySqlParser::User_password_optionContext *> MySqlParser::CreateUserMysql57Context::user_password_option() {
  return getRuleContexts<MySqlParser::User_password_optionContext>();
}

MySqlParser::User_password_optionContext* MySqlParser::CreateUserMysql57Context::user_password_option(size_t i) {
  return getRuleContext<MySqlParser::User_password_optionContext>(i);
}

std::vector<MySqlParser::User_lock_optionContext *> MySqlParser::CreateUserMysql57Context::user_lock_option() {
  return getRuleContexts<MySqlParser::User_lock_optionContext>();
}

MySqlParser::User_lock_optionContext* MySqlParser::CreateUserMysql57Context::user_lock_option(size_t i) {
  return getRuleContext<MySqlParser::User_lock_optionContext>(i);
}

tree::TerminalNode* MySqlParser::CreateUserMysql57Context::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

std::vector<MySqlParser::Tls_optionContext *> MySqlParser::CreateUserMysql57Context::tls_option() {
  return getRuleContexts<MySqlParser::Tls_optionContext>();
}

MySqlParser::Tls_optionContext* MySqlParser::CreateUserMysql57Context::tls_option(size_t i) {
  return getRuleContext<MySqlParser::Tls_optionContext>(i);
}

std::vector<MySqlParser::User_resource_optionContext *> MySqlParser::CreateUserMysql57Context::user_resource_option() {
  return getRuleContexts<MySqlParser::User_resource_optionContext>();
}

MySqlParser::User_resource_optionContext* MySqlParser::CreateUserMysql57Context::user_resource_option(size_t i) {
  return getRuleContext<MySqlParser::User_resource_optionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::CreateUserMysql57Context::AND() {
  return getTokens(MySqlParser::AND);
}

tree::TerminalNode* MySqlParser::CreateUserMysql57Context::AND(size_t i) {
  return getToken(MySqlParser::AND, i);
}

MySqlParser::CreateUserMysql57Context::CreateUserMysql57Context(Create_userContext *ctx) { copyFrom(ctx); }

void MySqlParser::CreateUserMysql57Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateUserMysql57(this);
}
void MySqlParser::CreateUserMysql57Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateUserMysql57(this);
}
//----------------- CreateUserMysql56Context ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CreateUserMysql56Context::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::CreateUserMysql56Context::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::User_auth_optionContext *> MySqlParser::CreateUserMysql56Context::user_auth_option() {
  return getRuleContexts<MySqlParser::User_auth_optionContext>();
}

MySqlParser::User_auth_optionContext* MySqlParser::CreateUserMysql56Context::user_auth_option(size_t i) {
  return getRuleContext<MySqlParser::User_auth_optionContext>(i);
}

MySqlParser::CreateUserMysql56Context::CreateUserMysql56Context(Create_userContext *ctx) { copyFrom(ctx); }

void MySqlParser::CreateUserMysql56Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreateUserMysql56(this);
}
void MySqlParser::CreateUserMysql56Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreateUserMysql56(this);
}
MySqlParser::Create_userContext* MySqlParser::create_user() {
  Create_userContext *_localctx = _tracker.createInstance<Create_userContext>(_ctx, getState());
  enterRule(_localctx, 358, MySqlParser::RuleCreate_user);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4202);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 621, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Create_userContext *>(_tracker.createInstance<MySqlParser::CreateUserMysql56Context>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4148);
      match(MySqlParser::CREATE);
      setState(4149);
      match(MySqlParser::USER);
      setState(4150);
      user_auth_option();
      setState(4155);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4151);
        match(MySqlParser::COMMA);
        setState(4152);
        user_auth_option();
        setState(4157);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Create_userContext *>(_tracker.createInstance<MySqlParser::CreateUserMysql57Context>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4158);
      match(MySqlParser::CREATE);
      setState(4159);
      match(MySqlParser::USER);
      setState(4161);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(4160);
        if_not_exists();
      }
      setState(4163);
      user_auth_option();
      setState(4168);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4164);
        match(MySqlParser::COMMA);
        setState(4165);
        user_auth_option();
        setState(4170);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4185);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::REQUIRE) {
        setState(4171);
        match(MySqlParser::REQUIRE);
        setState(4183);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::NONE: {
            setState(4172);
            match(MySqlParser::NONE);
            break;
          }

          case MySqlParser::SSL:
          case MySqlParser::CIPHER:
          case MySqlParser::ISSUER:
          case MySqlParser::SUBJECT:
          case MySqlParser::X509: {
            setState(4173);
            tls_option();
            setState(4180);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == MySqlParser::AND || _la == MySqlParser::SSL || _la == MySqlParser::CIPHER || _la == MySqlParser::ISSUER || _la == MySqlParser::SUBJECT

            || _la == MySqlParser::X509) {
              setState(4175);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == MySqlParser::AND) {
                setState(4174);
                match(MySqlParser::AND);
              }
              setState(4177);
              tls_option();
              setState(4182);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      setState(4193);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::WITH) {
        setState(4187);
        match(MySqlParser::WITH);
        setState(4189); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(4188);
          user_resource_option();
          setState(4191); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 391) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
          | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391)))) != 0));
      }
      setState(4199);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::ACCOUNT || _la == MySqlParser::PASSWORD) {
        setState(4197);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::PASSWORD: {
            setState(4195);
            user_password_option();
            break;
          }

          case MySqlParser::ACCOUNT: {
            setState(4196);
            user_lock_option();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4201);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_userContext ------------------------------------------------------------------

MySqlParser::Drop_userContext::Drop_userContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Drop_userContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::Drop_userContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::User_nameContext *> MySqlParser::Drop_userContext::user_name() {
  return getRuleContexts<MySqlParser::User_nameContext>();
}

MySqlParser::User_nameContext* MySqlParser::Drop_userContext::user_name(size_t i) {
  return getRuleContext<MySqlParser::User_nameContext>(i);
}

MySqlParser::If_existsContext* MySqlParser::Drop_userContext::if_exists() {
  return getRuleContext<MySqlParser::If_existsContext>(0);
}


size_t MySqlParser::Drop_userContext::getRuleIndex() const {
  return MySqlParser::RuleDrop_user;
}

void MySqlParser::Drop_userContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_user(this);
}

void MySqlParser::Drop_userContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_user(this);
}

MySqlParser::Drop_userContext* MySqlParser::drop_user() {
  Drop_userContext *_localctx = _tracker.createInstance<Drop_userContext>(_ctx, getState());
  enterRule(_localctx, 360, MySqlParser::RuleDrop_user);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4204);
    match(MySqlParser::DROP);
    setState(4205);
    match(MySqlParser::USER);
    setState(4207);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IF) {
      setState(4206);
      if_exists();
    }
    setState(4209);
    user_name();
    setState(4214);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4210);
      match(MySqlParser::COMMA);
      setState(4211);
      user_name();
      setState(4216);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_statementContext ------------------------------------------------------------------

MySqlParser::Grant_statementContext::Grant_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::Grant_statementContext::GRANT() {
  return getTokens(MySqlParser::GRANT);
}

tree::TerminalNode* MySqlParser::Grant_statementContext::GRANT(size_t i) {
  return getToken(MySqlParser::GRANT, i);
}

std::vector<MySqlParser::Privelege_clauseContext *> MySqlParser::Grant_statementContext::privelege_clause() {
  return getRuleContexts<MySqlParser::Privelege_clauseContext>();
}

MySqlParser::Privelege_clauseContext* MySqlParser::Grant_statementContext::privelege_clause(size_t i) {
  return getRuleContext<MySqlParser::Privelege_clauseContext>(i);
}

tree::TerminalNode* MySqlParser::Grant_statementContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::Privilege_levelContext* MySqlParser::Grant_statementContext::privilege_level() {
  return getRuleContext<MySqlParser::Privilege_levelContext>(0);
}

tree::TerminalNode* MySqlParser::Grant_statementContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

std::vector<MySqlParser::User_auth_optionContext *> MySqlParser::Grant_statementContext::user_auth_option() {
  return getRuleContexts<MySqlParser::User_auth_optionContext>();
}

MySqlParser::User_auth_optionContext* MySqlParser::Grant_statementContext::user_auth_option(size_t i) {
  return getRuleContext<MySqlParser::User_auth_optionContext>(i);
}

tree::TerminalNode* MySqlParser::Grant_statementContext::REQUIRE() {
  return getToken(MySqlParser::REQUIRE, 0);
}

tree::TerminalNode* MySqlParser::Grant_statementContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::Grant_statementContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

tree::TerminalNode* MySqlParser::Grant_statementContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::Grant_statementContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

tree::TerminalNode* MySqlParser::Grant_statementContext::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

std::vector<MySqlParser::Tls_optionContext *> MySqlParser::Grant_statementContext::tls_option() {
  return getRuleContexts<MySqlParser::Tls_optionContext>();
}

MySqlParser::Tls_optionContext* MySqlParser::Grant_statementContext::tls_option(size_t i) {
  return getRuleContext<MySqlParser::Tls_optionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::Grant_statementContext::OPTION() {
  return getTokens(MySqlParser::OPTION);
}

tree::TerminalNode* MySqlParser::Grant_statementContext::OPTION(size_t i) {
  return getToken(MySqlParser::OPTION, i);
}

std::vector<MySqlParser::User_resource_optionContext *> MySqlParser::Grant_statementContext::user_resource_option() {
  return getRuleContexts<MySqlParser::User_resource_optionContext>();
}

MySqlParser::User_resource_optionContext* MySqlParser::Grant_statementContext::user_resource_option(size_t i) {
  return getRuleContext<MySqlParser::User_resource_optionContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::Grant_statementContext::AND() {
  return getTokens(MySqlParser::AND);
}

tree::TerminalNode* MySqlParser::Grant_statementContext::AND(size_t i) {
  return getToken(MySqlParser::AND, i);
}


size_t MySqlParser::Grant_statementContext::getRuleIndex() const {
  return MySqlParser::RuleGrant_statement;
}

void MySqlParser::Grant_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_statement(this);
}

void MySqlParser::Grant_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_statement(this);
}

MySqlParser::Grant_statementContext* MySqlParser::grant_statement() {
  Grant_statementContext *_localctx = _tracker.createInstance<Grant_statementContext>(_ctx, getState());
  enterRule(_localctx, 362, MySqlParser::RuleGrant_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4217);
    match(MySqlParser::GRANT);
    setState(4218);
    privelege_clause();
    setState(4223);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4219);
      match(MySqlParser::COMMA);
      setState(4220);
      privelege_clause();
      setState(4225);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4226);
    match(MySqlParser::ON);
    setState(4228);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 625, _ctx)) {
    case 1: {
      setState(4227);
      dynamic_cast<Grant_statementContext *>(_localctx)->priv_obj_type = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::PROCEDURE

      || _la == MySqlParser::TABLE || _la == MySqlParser::FUNCTION)) {
        dynamic_cast<Grant_statementContext *>(_localctx)->priv_obj_type = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
    setState(4230);
    privilege_level();
    setState(4231);
    match(MySqlParser::TO);
    setState(4232);
    user_auth_option();
    setState(4237);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4233);
      match(MySqlParser::COMMA);
      setState(4234);
      user_auth_option();
      setState(4239);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4254);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::REQUIRE) {
      setState(4240);
      match(MySqlParser::REQUIRE);
      setState(4252);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::NONE: {
          setState(4241);
          match(MySqlParser::NONE);
          break;
        }

        case MySqlParser::SSL:
        case MySqlParser::CIPHER:
        case MySqlParser::ISSUER:
        case MySqlParser::SUBJECT:
        case MySqlParser::X509: {
          setState(4242);
          tls_option();
          setState(4249);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == MySqlParser::AND || _la == MySqlParser::SSL || _la == MySqlParser::CIPHER || _la == MySqlParser::ISSUER || _la == MySqlParser::SUBJECT

          || _la == MySqlParser::X509) {
            setState(4244);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == MySqlParser::AND) {
              setState(4243);
              match(MySqlParser::AND);
            }
            setState(4246);
            tls_option();
            setState(4251);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
    }
    setState(4265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WITH) {
      setState(4256);
      match(MySqlParser::WITH);
      setState(4262);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::GRANT || ((((_la - 391) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391)))) != 0)) {
        setState(4260);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::GRANT: {
            setState(4257);
            match(MySqlParser::GRANT);
            setState(4258);
            match(MySqlParser::OPTION);
            break;
          }

          case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
          case MySqlParser::MAX_QUERIES_PER_HOUR:
          case MySqlParser::MAX_UPDATES_PER_HOUR:
          case MySqlParser::MAX_USER_CONNECTIONS: {
            setState(4259);
            user_resource_option();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4264);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_proxyContext ------------------------------------------------------------------

MySqlParser::Grant_proxyContext::Grant_proxyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::Grant_proxyContext::GRANT() {
  return getTokens(MySqlParser::GRANT);
}

tree::TerminalNode* MySqlParser::Grant_proxyContext::GRANT(size_t i) {
  return getToken(MySqlParser::GRANT, i);
}

tree::TerminalNode* MySqlParser::Grant_proxyContext::PROXY() {
  return getToken(MySqlParser::PROXY, 0);
}

tree::TerminalNode* MySqlParser::Grant_proxyContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

std::vector<MySqlParser::User_nameContext *> MySqlParser::Grant_proxyContext::user_name() {
  return getRuleContexts<MySqlParser::User_nameContext>();
}

MySqlParser::User_nameContext* MySqlParser::Grant_proxyContext::user_name(size_t i) {
  return getRuleContext<MySqlParser::User_nameContext>(i);
}

tree::TerminalNode* MySqlParser::Grant_proxyContext::TO() {
  return getToken(MySqlParser::TO, 0);
}

tree::TerminalNode* MySqlParser::Grant_proxyContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::Grant_proxyContext::OPTION() {
  return getToken(MySqlParser::OPTION, 0);
}


size_t MySqlParser::Grant_proxyContext::getRuleIndex() const {
  return MySqlParser::RuleGrant_proxy;
}

void MySqlParser::Grant_proxyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrant_proxy(this);
}

void MySqlParser::Grant_proxyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrant_proxy(this);
}

MySqlParser::Grant_proxyContext* MySqlParser::grant_proxy() {
  Grant_proxyContext *_localctx = _tracker.createInstance<Grant_proxyContext>(_ctx, getState());
  enterRule(_localctx, 364, MySqlParser::RuleGrant_proxy);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4267);
    match(MySqlParser::GRANT);
    setState(4268);
    match(MySqlParser::PROXY);
    setState(4269);
    match(MySqlParser::ON);
    setState(4270);
    user_name();
    setState(4271);
    match(MySqlParser::TO);
    setState(4272);
    user_name();
    setState(4277);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4273);
      match(MySqlParser::COMMA);
      setState(4274);
      user_name();
      setState(4279);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::WITH) {
      setState(4280);
      match(MySqlParser::WITH);
      setState(4281);
      match(MySqlParser::GRANT);
      setState(4282);
      match(MySqlParser::OPTION);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rename_userContext ------------------------------------------------------------------

MySqlParser::Rename_userContext::Rename_userContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Rename_userContext::RENAME() {
  return getToken(MySqlParser::RENAME, 0);
}

tree::TerminalNode* MySqlParser::Rename_userContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

std::vector<MySqlParser::User_nameContext *> MySqlParser::Rename_userContext::user_name() {
  return getRuleContexts<MySqlParser::User_nameContext>();
}

MySqlParser::User_nameContext* MySqlParser::Rename_userContext::user_name(size_t i) {
  return getRuleContext<MySqlParser::User_nameContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::Rename_userContext::TO() {
  return getTokens(MySqlParser::TO);
}

tree::TerminalNode* MySqlParser::Rename_userContext::TO(size_t i) {
  return getToken(MySqlParser::TO, i);
}


size_t MySqlParser::Rename_userContext::getRuleIndex() const {
  return MySqlParser::RuleRename_user;
}

void MySqlParser::Rename_userContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRename_user(this);
}

void MySqlParser::Rename_userContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRename_user(this);
}

MySqlParser::Rename_userContext* MySqlParser::rename_user() {
  Rename_userContext *_localctx = _tracker.createInstance<Rename_userContext>(_ctx, getState());
  enterRule(_localctx, 366, MySqlParser::RuleRename_user);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4285);
    match(MySqlParser::RENAME);
    setState(4286);
    match(MySqlParser::USER);
    setState(4287);
    user_name();
    setState(4288);
    match(MySqlParser::TO);
    setState(4289);
    user_name();

    setState(4290);
    match(MySqlParser::COMMA);
    setState(4291);
    user_name();
    setState(4292);
    match(MySqlParser::TO);
    setState(4293);
    user_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Revoke_statementContext ------------------------------------------------------------------

MySqlParser::Revoke_statementContext::Revoke_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Revoke_statementContext::getRuleIndex() const {
  return MySqlParser::RuleRevoke_statement;
}

void MySqlParser::Revoke_statementContext::copyFrom(Revoke_statementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DetailRevokeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::DetailRevokeContext::REVOKE() {
  return getToken(MySqlParser::REVOKE, 0);
}

std::vector<MySqlParser::Privelege_clauseContext *> MySqlParser::DetailRevokeContext::privelege_clause() {
  return getRuleContexts<MySqlParser::Privelege_clauseContext>();
}

MySqlParser::Privelege_clauseContext* MySqlParser::DetailRevokeContext::privelege_clause(size_t i) {
  return getRuleContext<MySqlParser::Privelege_clauseContext>(i);
}

tree::TerminalNode* MySqlParser::DetailRevokeContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

MySqlParser::Privilege_levelContext* MySqlParser::DetailRevokeContext::privilege_level() {
  return getRuleContext<MySqlParser::Privilege_levelContext>(0);
}

tree::TerminalNode* MySqlParser::DetailRevokeContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

std::vector<MySqlParser::User_nameContext *> MySqlParser::DetailRevokeContext::user_name() {
  return getRuleContexts<MySqlParser::User_nameContext>();
}

MySqlParser::User_nameContext* MySqlParser::DetailRevokeContext::user_name(size_t i) {
  return getRuleContext<MySqlParser::User_nameContext>(i);
}

tree::TerminalNode* MySqlParser::DetailRevokeContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

tree::TerminalNode* MySqlParser::DetailRevokeContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::DetailRevokeContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

MySqlParser::DetailRevokeContext::DetailRevokeContext(Revoke_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::DetailRevokeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDetailRevoke(this);
}
void MySqlParser::DetailRevokeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDetailRevoke(this);
}
//----------------- ShortRevokeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShortRevokeContext::REVOKE() {
  return getToken(MySqlParser::REVOKE, 0);
}

tree::TerminalNode* MySqlParser::ShortRevokeContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::ShortRevokeContext::GRANT() {
  return getToken(MySqlParser::GRANT, 0);
}

tree::TerminalNode* MySqlParser::ShortRevokeContext::OPTION() {
  return getToken(MySqlParser::OPTION, 0);
}

tree::TerminalNode* MySqlParser::ShortRevokeContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

std::vector<MySqlParser::User_nameContext *> MySqlParser::ShortRevokeContext::user_name() {
  return getRuleContexts<MySqlParser::User_nameContext>();
}

MySqlParser::User_nameContext* MySqlParser::ShortRevokeContext::user_name(size_t i) {
  return getRuleContext<MySqlParser::User_nameContext>(i);
}

tree::TerminalNode* MySqlParser::ShortRevokeContext::PRIVILEGES() {
  return getToken(MySqlParser::PRIVILEGES, 0);
}

MySqlParser::ShortRevokeContext::ShortRevokeContext(Revoke_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShortRevokeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShortRevoke(this);
}
void MySqlParser::ShortRevokeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShortRevoke(this);
}
MySqlParser::Revoke_statementContext* MySqlParser::revoke_statement() {
  Revoke_statementContext *_localctx = _tracker.createInstance<Revoke_statementContext>(_ctx, getState());
  enterRule(_localctx, 368, MySqlParser::RuleRevoke_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4335);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 641, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Revoke_statementContext *>(_tracker.createInstance<MySqlParser::DetailRevokeContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4295);
      match(MySqlParser::REVOKE);
      setState(4296);
      privelege_clause();
      setState(4301);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4297);
        match(MySqlParser::COMMA);
        setState(4298);
        privelege_clause();
        setState(4303);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4304);
      match(MySqlParser::ON);
      setState(4306);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 637, _ctx)) {
      case 1: {
        setState(4305);
        dynamic_cast<DetailRevokeContext *>(_localctx)->priv_obj_type = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::PROCEDURE

        || _la == MySqlParser::TABLE || _la == MySqlParser::FUNCTION)) {
          dynamic_cast<DetailRevokeContext *>(_localctx)->priv_obj_type = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      }
      setState(4308);
      privilege_level();
      setState(4309);
      match(MySqlParser::FROM);
      setState(4310);
      user_name();
      setState(4315);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4311);
        match(MySqlParser::COMMA);
        setState(4312);
        user_name();
        setState(4317);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Revoke_statementContext *>(_tracker.createInstance<MySqlParser::ShortRevokeContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4318);
      match(MySqlParser::REVOKE);
      setState(4319);
      match(MySqlParser::ALL);
      setState(4321);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::PRIVILEGES) {
        setState(4320);
        match(MySqlParser::PRIVILEGES);
      }
      setState(4323);
      match(MySqlParser::COMMA);
      setState(4324);
      match(MySqlParser::GRANT);
      setState(4325);
      match(MySqlParser::OPTION);
      setState(4326);
      match(MySqlParser::FROM);
      setState(4327);
      user_name();
      setState(4332);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4328);
        match(MySqlParser::COMMA);
        setState(4329);
        user_name();
        setState(4334);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Revoke_proxyContext ------------------------------------------------------------------

MySqlParser::Revoke_proxyContext::Revoke_proxyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Revoke_proxyContext::REVOKE() {
  return getToken(MySqlParser::REVOKE, 0);
}

tree::TerminalNode* MySqlParser::Revoke_proxyContext::PROXY() {
  return getToken(MySqlParser::PROXY, 0);
}

tree::TerminalNode* MySqlParser::Revoke_proxyContext::ON() {
  return getToken(MySqlParser::ON, 0);
}

std::vector<MySqlParser::User_nameContext *> MySqlParser::Revoke_proxyContext::user_name() {
  return getRuleContexts<MySqlParser::User_nameContext>();
}

MySqlParser::User_nameContext* MySqlParser::Revoke_proxyContext::user_name(size_t i) {
  return getRuleContext<MySqlParser::User_nameContext>(i);
}

tree::TerminalNode* MySqlParser::Revoke_proxyContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}


size_t MySqlParser::Revoke_proxyContext::getRuleIndex() const {
  return MySqlParser::RuleRevoke_proxy;
}

void MySqlParser::Revoke_proxyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRevoke_proxy(this);
}

void MySqlParser::Revoke_proxyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRevoke_proxy(this);
}

MySqlParser::Revoke_proxyContext* MySqlParser::revoke_proxy() {
  Revoke_proxyContext *_localctx = _tracker.createInstance<Revoke_proxyContext>(_ctx, getState());
  enterRule(_localctx, 370, MySqlParser::RuleRevoke_proxy);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4337);
    match(MySqlParser::REVOKE);
    setState(4338);
    match(MySqlParser::PROXY);
    setState(4339);
    match(MySqlParser::ON);
    setState(4340);
    user_name();
    setState(4341);
    match(MySqlParser::FROM);
    setState(4342);
    user_name();
    setState(4347);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4343);
      match(MySqlParser::COMMA);
      setState(4344);
      user_name();
      setState(4349);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_password_statementContext ------------------------------------------------------------------

MySqlParser::Set_password_statementContext::Set_password_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Set_password_statementContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::Set_password_statementContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

MySqlParser::Set_password_optionContext* MySqlParser::Set_password_statementContext::set_password_option() {
  return getRuleContext<MySqlParser::Set_password_optionContext>(0);
}

tree::TerminalNode* MySqlParser::Set_password_statementContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

MySqlParser::User_nameContext* MySqlParser::Set_password_statementContext::user_name() {
  return getRuleContext<MySqlParser::User_nameContext>(0);
}


size_t MySqlParser::Set_password_statementContext::getRuleIndex() const {
  return MySqlParser::RuleSet_password_statement;
}

void MySqlParser::Set_password_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_password_statement(this);
}

void MySqlParser::Set_password_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_password_statement(this);
}

MySqlParser::Set_password_statementContext* MySqlParser::set_password_statement() {
  Set_password_statementContext *_localctx = _tracker.createInstance<Set_password_statementContext>(_ctx, getState());
  enterRule(_localctx, 372, MySqlParser::RuleSet_password_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4350);
    match(MySqlParser::SET);
    setState(4351);
    match(MySqlParser::PASSWORD);
    setState(4354);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::FOR) {
      setState(4352);
      match(MySqlParser::FOR);
      setState(4353);
      user_name();
    }
    setState(4356);
    match(MySqlParser::EQUAL_SYMBOL);
    setState(4357);
    set_password_option();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- User_password_optionContext ------------------------------------------------------------------

MySqlParser::User_password_optionContext::User_password_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::User_password_optionContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::User_password_optionContext::EXPIRE() {
  return getToken(MySqlParser::EXPIRE, 0);
}

tree::TerminalNode* MySqlParser::User_password_optionContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::User_password_optionContext::NEVER() {
  return getToken(MySqlParser::NEVER, 0);
}

tree::TerminalNode* MySqlParser::User_password_optionContext::INTERVAL() {
  return getToken(MySqlParser::INTERVAL, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::User_password_optionContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

tree::TerminalNode* MySqlParser::User_password_optionContext::DAY() {
  return getToken(MySqlParser::DAY, 0);
}


size_t MySqlParser::User_password_optionContext::getRuleIndex() const {
  return MySqlParser::RuleUser_password_option;
}

void MySqlParser::User_password_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUser_password_option(this);
}

void MySqlParser::User_password_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUser_password_option(this);
}

MySqlParser::User_password_optionContext* MySqlParser::user_password_option() {
  User_password_optionContext *_localctx = _tracker.createInstance<User_password_optionContext>(_ctx, getState());
  enterRule(_localctx, 374, MySqlParser::RuleUser_password_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4359);
    match(MySqlParser::PASSWORD);
    setState(4360);
    match(MySqlParser::EXPIRE);
    setState(4367);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::DEFAULT: {
        setState(4361);
        match(MySqlParser::DEFAULT);
        break;
      }

      case MySqlParser::NEVER: {
        setState(4362);
        match(MySqlParser::NEVER);
        break;
      }

      case MySqlParser::INTERVAL: {
        setState(4363);
        match(MySqlParser::INTERVAL);
        setState(4364);
        decimal_literal();
        setState(4365);
        match(MySqlParser::DAY);
        break;
      }

      case MySqlParser::EOF:
      case MySqlParser::ACCOUNT:
      case MySqlParser::PASSWORD:
      case MySqlParser::MINUS:
      case MySqlParser::COMMA:
      case MySqlParser::SEMI: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- User_auth_optionContext ------------------------------------------------------------------

MySqlParser::User_auth_optionContext::User_auth_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::User_auth_optionContext::getRuleIndex() const {
  return MySqlParser::RuleUser_auth_option;
}

void MySqlParser::User_auth_optionContext::copyFrom(User_auth_optionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AuthByStringContext ------------------------------------------------------------------

MySqlParser::User_nameContext* MySqlParser::AuthByStringContext::user_name() {
  return getRuleContext<MySqlParser::User_nameContext>(0);
}

tree::TerminalNode* MySqlParser::AuthByStringContext::IDENTIFIED() {
  return getToken(MySqlParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySqlParser::AuthByStringContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

tree::TerminalNode* MySqlParser::AuthByStringContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::AuthByStringContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

MySqlParser::Auth_pluginContext* MySqlParser::AuthByStringContext::auth_plugin() {
  return getRuleContext<MySqlParser::Auth_pluginContext>(0);
}

MySqlParser::AuthByStringContext::AuthByStringContext(User_auth_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::AuthByStringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAuthByString(this);
}
void MySqlParser::AuthByStringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAuthByString(this);
}
//----------------- AuthByPasswordContext ------------------------------------------------------------------

MySqlParser::User_nameContext* MySqlParser::AuthByPasswordContext::user_name() {
  return getRuleContext<MySqlParser::User_nameContext>(0);
}

tree::TerminalNode* MySqlParser::AuthByPasswordContext::IDENTIFIED() {
  return getToken(MySqlParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySqlParser::AuthByPasswordContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

tree::TerminalNode* MySqlParser::AuthByPasswordContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::AuthByPasswordContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::AuthByPasswordContext::AuthByPasswordContext(User_auth_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::AuthByPasswordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAuthByPassword(this);
}
void MySqlParser::AuthByPasswordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAuthByPassword(this);
}
//----------------- AuthByHashContext ------------------------------------------------------------------

MySqlParser::User_nameContext* MySqlParser::AuthByHashContext::user_name() {
  return getRuleContext<MySqlParser::User_nameContext>(0);
}

tree::TerminalNode* MySqlParser::AuthByHashContext::IDENTIFIED() {
  return getToken(MySqlParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySqlParser::AuthByHashContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

MySqlParser::Auth_pluginContext* MySqlParser::AuthByHashContext::auth_plugin() {
  return getRuleContext<MySqlParser::Auth_pluginContext>(0);
}

tree::TerminalNode* MySqlParser::AuthByHashContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

tree::TerminalNode* MySqlParser::AuthByHashContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::AuthByHashContext::AuthByHashContext(User_auth_optionContext *ctx) { copyFrom(ctx); }

void MySqlParser::AuthByHashContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAuthByHash(this);
}
void MySqlParser::AuthByHashContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAuthByHash(this);
}
MySqlParser::User_auth_optionContext* MySqlParser::user_auth_option() {
  User_auth_optionContext *_localctx = _tracker.createInstance<User_auth_optionContext>(_ctx, getState());
  enterRule(_localctx, 376, MySqlParser::RuleUser_auth_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4392);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 647, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<User_auth_optionContext *>(_tracker.createInstance<MySqlParser::AuthByPasswordContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4369);
      user_name();
      setState(4370);
      match(MySqlParser::IDENTIFIED);
      setState(4371);
      match(MySqlParser::BY);
      setState(4372);
      match(MySqlParser::PASSWORD);
      setState(4373);
      dynamic_cast<AuthByPasswordContext *>(_localctx)->hashedpwd = match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<User_auth_optionContext *>(_tracker.createInstance<MySqlParser::AuthByStringContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4375);
      user_name();
      setState(4376);
      match(MySqlParser::IDENTIFIED);
      setState(4379);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::WITH) {
        setState(4377);
        match(MySqlParser::WITH);
        setState(4378);
        auth_plugin();
      }
      setState(4381);
      match(MySqlParser::BY);
      setState(4382);
      match(MySqlParser::STRING_LITERAL);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<User_auth_optionContext *>(_tracker.createInstance<MySqlParser::AuthByHashContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(4384);
      user_name();
      setState(4385);
      match(MySqlParser::IDENTIFIED);
      setState(4386);
      match(MySqlParser::WITH);
      setState(4387);
      auth_plugin();
      setState(4390);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(4388);
        match(MySqlParser::AS);
        setState(4389);
        match(MySqlParser::STRING_LITERAL);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tls_optionContext ------------------------------------------------------------------

MySqlParser::Tls_optionContext::Tls_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Tls_optionContext::SSL() {
  return getToken(MySqlParser::SSL, 0);
}

tree::TerminalNode* MySqlParser::Tls_optionContext::X509() {
  return getToken(MySqlParser::X509, 0);
}

tree::TerminalNode* MySqlParser::Tls_optionContext::CIPHER() {
  return getToken(MySqlParser::CIPHER, 0);
}

tree::TerminalNode* MySqlParser::Tls_optionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Tls_optionContext::ISSUER() {
  return getToken(MySqlParser::ISSUER, 0);
}

tree::TerminalNode* MySqlParser::Tls_optionContext::SUBJECT() {
  return getToken(MySqlParser::SUBJECT, 0);
}


size_t MySqlParser::Tls_optionContext::getRuleIndex() const {
  return MySqlParser::RuleTls_option;
}

void MySqlParser::Tls_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTls_option(this);
}

void MySqlParser::Tls_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTls_option(this);
}

MySqlParser::Tls_optionContext* MySqlParser::tls_option() {
  Tls_optionContext *_localctx = _tracker.createInstance<Tls_optionContext>(_ctx, getState());
  enterRule(_localctx, 378, MySqlParser::RuleTls_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4402);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::SSL: {
        enterOuterAlt(_localctx, 1);
        setState(4394);
        match(MySqlParser::SSL);
        break;
      }

      case MySqlParser::X509: {
        enterOuterAlt(_localctx, 2);
        setState(4395);
        match(MySqlParser::X509);
        break;
      }

      case MySqlParser::CIPHER: {
        enterOuterAlt(_localctx, 3);
        setState(4396);
        match(MySqlParser::CIPHER);
        setState(4397);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::ISSUER: {
        enterOuterAlt(_localctx, 4);
        setState(4398);
        match(MySqlParser::ISSUER);
        setState(4399);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::SUBJECT: {
        enterOuterAlt(_localctx, 5);
        setState(4400);
        match(MySqlParser::SUBJECT);
        setState(4401);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- User_resource_optionContext ------------------------------------------------------------------

MySqlParser::User_resource_optionContext::User_resource_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::User_resource_optionContext::MAX_QUERIES_PER_HOUR() {
  return getToken(MySqlParser::MAX_QUERIES_PER_HOUR, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::User_resource_optionContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

tree::TerminalNode* MySqlParser::User_resource_optionContext::MAX_UPDATES_PER_HOUR() {
  return getToken(MySqlParser::MAX_UPDATES_PER_HOUR, 0);
}

tree::TerminalNode* MySqlParser::User_resource_optionContext::MAX_CONNECTIONS_PER_HOUR() {
  return getToken(MySqlParser::MAX_CONNECTIONS_PER_HOUR, 0);
}

tree::TerminalNode* MySqlParser::User_resource_optionContext::MAX_USER_CONNECTIONS() {
  return getToken(MySqlParser::MAX_USER_CONNECTIONS, 0);
}


size_t MySqlParser::User_resource_optionContext::getRuleIndex() const {
  return MySqlParser::RuleUser_resource_option;
}

void MySqlParser::User_resource_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUser_resource_option(this);
}

void MySqlParser::User_resource_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUser_resource_option(this);
}

MySqlParser::User_resource_optionContext* MySqlParser::user_resource_option() {
  User_resource_optionContext *_localctx = _tracker.createInstance<User_resource_optionContext>(_ctx, getState());
  enterRule(_localctx, 380, MySqlParser::RuleUser_resource_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4412);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::MAX_QUERIES_PER_HOUR: {
        enterOuterAlt(_localctx, 1);
        setState(4404);
        match(MySqlParser::MAX_QUERIES_PER_HOUR);
        setState(4405);
        decimal_literal();
        break;
      }

      case MySqlParser::MAX_UPDATES_PER_HOUR: {
        enterOuterAlt(_localctx, 2);
        setState(4406);
        match(MySqlParser::MAX_UPDATES_PER_HOUR);
        setState(4407);
        decimal_literal();
        break;
      }

      case MySqlParser::MAX_CONNECTIONS_PER_HOUR: {
        enterOuterAlt(_localctx, 3);
        setState(4408);
        match(MySqlParser::MAX_CONNECTIONS_PER_HOUR);
        setState(4409);
        decimal_literal();
        break;
      }

      case MySqlParser::MAX_USER_CONNECTIONS: {
        enterOuterAlt(_localctx, 4);
        setState(4410);
        match(MySqlParser::MAX_USER_CONNECTIONS);
        setState(4411);
        decimal_literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- User_lock_optionContext ------------------------------------------------------------------

MySqlParser::User_lock_optionContext::User_lock_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::User_lock_optionContext::ACCOUNT() {
  return getToken(MySqlParser::ACCOUNT, 0);
}

tree::TerminalNode* MySqlParser::User_lock_optionContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::User_lock_optionContext::UNLOCK() {
  return getToken(MySqlParser::UNLOCK, 0);
}


size_t MySqlParser::User_lock_optionContext::getRuleIndex() const {
  return MySqlParser::RuleUser_lock_option;
}

void MySqlParser::User_lock_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUser_lock_option(this);
}

void MySqlParser::User_lock_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUser_lock_option(this);
}

MySqlParser::User_lock_optionContext* MySqlParser::user_lock_option() {
  User_lock_optionContext *_localctx = _tracker.createInstance<User_lock_optionContext>(_ctx, getState());
  enterRule(_localctx, 382, MySqlParser::RuleUser_lock_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4414);
    match(MySqlParser::ACCOUNT);
    setState(4415);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::LOCK || _la == MySqlParser::UNLOCK)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Privelege_clauseContext ------------------------------------------------------------------

MySqlParser::Privelege_clauseContext::Privelege_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::PrivilegeContext* MySqlParser::Privelege_clauseContext::privilege() {
  return getRuleContext<MySqlParser::PrivilegeContext>(0);
}

MySqlParser::Id_listContext* MySqlParser::Privelege_clauseContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}


size_t MySqlParser::Privelege_clauseContext::getRuleIndex() const {
  return MySqlParser::RulePrivelege_clause;
}

void MySqlParser::Privelege_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivelege_clause(this);
}

void MySqlParser::Privelege_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivelege_clause(this);
}

MySqlParser::Privelege_clauseContext* MySqlParser::privelege_clause() {
  Privelege_clauseContext *_localctx = _tracker.createInstance<Privelege_clauseContext>(_ctx, getState());
  enterRule(_localctx, 384, MySqlParser::RulePrivelege_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4417);
    privilege();
    setState(4422);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LR_BRACKET) {
      setState(4418);
      match(MySqlParser::LR_BRACKET);
      setState(4419);
      id_list();
      setState(4420);
      match(MySqlParser::RR_BRACKET);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivilegeContext ------------------------------------------------------------------

MySqlParser::PrivilegeContext::PrivilegeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::PrivilegeContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::PRIVILEGES() {
  return getToken(MySqlParser::PRIVILEGES, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::ALTER() {
  return getToken(MySqlParser::ALTER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::ROUTINE() {
  return getToken(MySqlParser::ROUTINE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::DELETE() {
  return getToken(MySqlParser::DELETE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::DROP() {
  return getToken(MySqlParser::DROP, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::EXECUTE() {
  return getToken(MySqlParser::EXECUTE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::FILE() {
  return getToken(MySqlParser::FILE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::GRANT() {
  return getToken(MySqlParser::GRANT, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::OPTION() {
  return getToken(MySqlParser::OPTION, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::INSERT() {
  return getToken(MySqlParser::INSERT, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::PROCESS() {
  return getToken(MySqlParser::PROCESS, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::PROXY() {
  return getToken(MySqlParser::PROXY, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::REFERENCES() {
  return getToken(MySqlParser::REFERENCES, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::RELOAD() {
  return getToken(MySqlParser::RELOAD, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::REPLICATION() {
  return getToken(MySqlParser::REPLICATION, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::CLIENT() {
  return getToken(MySqlParser::CLIENT, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SELECT() {
  return getToken(MySqlParser::SELECT, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::DATABASES() {
  return getToken(MySqlParser::DATABASES, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SHUTDOWN() {
  return getToken(MySqlParser::SHUTDOWN, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::SUPER() {
  return getToken(MySqlParser::SUPER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::TRIGGER() {
  return getToken(MySqlParser::TRIGGER, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::UPDATE() {
  return getToken(MySqlParser::UPDATE, 0);
}

tree::TerminalNode* MySqlParser::PrivilegeContext::USAGE() {
  return getToken(MySqlParser::USAGE, 0);
}


size_t MySqlParser::PrivilegeContext::getRuleIndex() const {
  return MySqlParser::RulePrivilege;
}

void MySqlParser::PrivilegeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivilege(this);
}

void MySqlParser::PrivilegeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivilege(this);
}

MySqlParser::PrivilegeContext* MySqlParser::privilege() {
  PrivilegeContext *_localctx = _tracker.createInstance<PrivilegeContext>(_ctx, getState());
  enterRule(_localctx, 386, MySqlParser::RulePrivilege);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4466);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ALL: {
        enterOuterAlt(_localctx, 1);
        setState(4424);
        match(MySqlParser::ALL);
        setState(4426);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::PRIVILEGES) {
          setState(4425);
          match(MySqlParser::PRIVILEGES);
        }
        break;
      }

      case MySqlParser::ALTER: {
        enterOuterAlt(_localctx, 2);
        setState(4428);
        match(MySqlParser::ALTER);
        setState(4430);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ROUTINE) {
          setState(4429);
          match(MySqlParser::ROUTINE);
        }
        break;
      }

      case MySqlParser::CREATE: {
        enterOuterAlt(_localctx, 3);
        setState(4432);
        match(MySqlParser::CREATE);
        setState(4439);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::TEMPORARY: {
            setState(4433);
            match(MySqlParser::TEMPORARY);
            setState(4434);
            match(MySqlParser::TABLES);
            break;
          }

          case MySqlParser::ROUTINE: {
            setState(4435);
            match(MySqlParser::ROUTINE);
            break;
          }

          case MySqlParser::VIEW: {
            setState(4436);
            match(MySqlParser::VIEW);
            break;
          }

          case MySqlParser::USER: {
            setState(4437);
            match(MySqlParser::USER);
            break;
          }

          case MySqlParser::TABLESPACE: {
            setState(4438);
            match(MySqlParser::TABLESPACE);
            break;
          }

          case MySqlParser::ON:
          case MySqlParser::LR_BRACKET:
          case MySqlParser::COMMA: {
            break;
          }

        default:
          break;
        }
        break;
      }

      case MySqlParser::DELETE: {
        enterOuterAlt(_localctx, 4);
        setState(4441);
        match(MySqlParser::DELETE);
        break;
      }

      case MySqlParser::DROP: {
        enterOuterAlt(_localctx, 5);
        setState(4442);
        match(MySqlParser::DROP);
        break;
      }

      case MySqlParser::EVENT: {
        enterOuterAlt(_localctx, 6);
        setState(4443);
        match(MySqlParser::EVENT);
        break;
      }

      case MySqlParser::EXECUTE: {
        enterOuterAlt(_localctx, 7);
        setState(4444);
        match(MySqlParser::EXECUTE);
        break;
      }

      case MySqlParser::FILE: {
        enterOuterAlt(_localctx, 8);
        setState(4445);
        match(MySqlParser::FILE);
        break;
      }

      case MySqlParser::GRANT: {
        enterOuterAlt(_localctx, 9);
        setState(4446);
        match(MySqlParser::GRANT);
        setState(4447);
        match(MySqlParser::OPTION);
        break;
      }

      case MySqlParser::INDEX: {
        enterOuterAlt(_localctx, 10);
        setState(4448);
        match(MySqlParser::INDEX);
        break;
      }

      case MySqlParser::INSERT: {
        enterOuterAlt(_localctx, 11);
        setState(4449);
        match(MySqlParser::INSERT);
        break;
      }

      case MySqlParser::LOCK: {
        enterOuterAlt(_localctx, 12);
        setState(4450);
        match(MySqlParser::LOCK);
        setState(4451);
        match(MySqlParser::TABLES);
        break;
      }

      case MySqlParser::PROCESS: {
        enterOuterAlt(_localctx, 13);
        setState(4452);
        match(MySqlParser::PROCESS);
        break;
      }

      case MySqlParser::PROXY: {
        enterOuterAlt(_localctx, 14);
        setState(4453);
        match(MySqlParser::PROXY);
        break;
      }

      case MySqlParser::REFERENCES: {
        enterOuterAlt(_localctx, 15);
        setState(4454);
        match(MySqlParser::REFERENCES);
        break;
      }

      case MySqlParser::RELOAD: {
        enterOuterAlt(_localctx, 16);
        setState(4455);
        match(MySqlParser::RELOAD);
        break;
      }

      case MySqlParser::REPLICATION: {
        enterOuterAlt(_localctx, 17);
        setState(4456);
        match(MySqlParser::REPLICATION);
        setState(4457);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::CLIENT || _la == MySqlParser::SLAVE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::SELECT: {
        enterOuterAlt(_localctx, 18);
        setState(4458);
        match(MySqlParser::SELECT);
        break;
      }

      case MySqlParser::SHOW: {
        enterOuterAlt(_localctx, 19);
        setState(4459);
        match(MySqlParser::SHOW);
        setState(4460);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DATABASES || _la == MySqlParser::VIEW)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::SHUTDOWN: {
        enterOuterAlt(_localctx, 20);
        setState(4461);
        match(MySqlParser::SHUTDOWN);
        break;
      }

      case MySqlParser::SUPER: {
        enterOuterAlt(_localctx, 21);
        setState(4462);
        match(MySqlParser::SUPER);
        break;
      }

      case MySqlParser::TRIGGER: {
        enterOuterAlt(_localctx, 22);
        setState(4463);
        match(MySqlParser::TRIGGER);
        break;
      }

      case MySqlParser::UPDATE: {
        enterOuterAlt(_localctx, 23);
        setState(4464);
        match(MySqlParser::UPDATE);
        break;
      }

      case MySqlParser::USAGE: {
        enterOuterAlt(_localctx, 24);
        setState(4465);
        match(MySqlParser::USAGE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Privilege_levelContext ------------------------------------------------------------------

MySqlParser::Privilege_levelContext::Privilege_levelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Id_Context *> MySqlParser::Privilege_levelContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::Privilege_levelContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}


size_t MySqlParser::Privilege_levelContext::getRuleIndex() const {
  return MySqlParser::RulePrivilege_level;
}

void MySqlParser::Privilege_levelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivilege_level(this);
}

void MySqlParser::Privilege_levelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivilege_level(this);
}

MySqlParser::Privilege_levelContext* MySqlParser::privilege_level() {
  Privilege_levelContext *_localctx = _tracker.createInstance<Privilege_levelContext>(_ctx, getState());
  enterRule(_localctx, 388, MySqlParser::RulePrivilege_level);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4481);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 655, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4468);
      match(MySqlParser::STAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4469);
      match(MySqlParser::STAR);
      setState(4470);
      match(MySqlParser::DOT);
      setState(4471);
      match(MySqlParser::STAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4472);
      id_();
      setState(4473);
      match(MySqlParser::DOT);
      setState(4474);
      match(MySqlParser::STAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4476);
      id_();
      setState(4477);
      match(MySqlParser::DOT);
      setState(4478);
      id_();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4480);
      id_();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_password_optionContext ------------------------------------------------------------------

MySqlParser::Set_password_optionContext::Set_password_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Set_password_optionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Set_password_optionContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::Set_password_optionContext::OLD_PASSWORD() {
  return getToken(MySqlParser::OLD_PASSWORD, 0);
}


size_t MySqlParser::Set_password_optionContext::getRuleIndex() const {
  return MySqlParser::RuleSet_password_option;
}

void MySqlParser::Set_password_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_password_option(this);
}

void MySqlParser::Set_password_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_password_option(this);
}

MySqlParser::Set_password_optionContext* MySqlParser::set_password_option() {
  Set_password_optionContext *_localctx = _tracker.createInstance<Set_password_optionContext>(_ctx, getState());
  enterRule(_localctx, 390, MySqlParser::RuleSet_password_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4488);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::PASSWORD: {
        enterOuterAlt(_localctx, 1);
        setState(4483);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::OLD_PASSWORD

        || _la == MySqlParser::PASSWORD)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4484);
        match(MySqlParser::LR_BRACKET);
        setState(4485);
        match(MySqlParser::STRING_LITERAL);
        setState(4486);
        match(MySqlParser::RR_BRACKET);
        break;
      }

      case MySqlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(4487);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Analyze_tableContext ------------------------------------------------------------------

MySqlParser::Analyze_tableContext::Analyze_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Analyze_tableContext::ANALYZE() {
  return getToken(MySqlParser::ANALYZE, 0);
}

tree::TerminalNode* MySqlParser::Analyze_tableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_listContext* MySqlParser::Analyze_tableContext::table_list() {
  return getRuleContext<MySqlParser::Table_listContext>(0);
}

tree::TerminalNode* MySqlParser::Analyze_tableContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySqlParser::Analyze_tableContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::Analyze_tableContext::getRuleIndex() const {
  return MySqlParser::RuleAnalyze_table;
}

void MySqlParser::Analyze_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnalyze_table(this);
}

void MySqlParser::Analyze_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnalyze_table(this);
}

MySqlParser::Analyze_tableContext* MySqlParser::analyze_table() {
  Analyze_tableContext *_localctx = _tracker.createInstance<Analyze_tableContext>(_ctx, getState());
  enterRule(_localctx, 392, MySqlParser::RuleAnalyze_table);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4490);
    match(MySqlParser::ANALYZE);
    setState(4492);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL) {
      setState(4491);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4494);
    match(MySqlParser::TABLE);
    setState(4495);
    table_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Check_tableContext ------------------------------------------------------------------

MySqlParser::Check_tableContext::Check_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Check_tableContext::CHECK() {
  return getToken(MySqlParser::CHECK, 0);
}

tree::TerminalNode* MySqlParser::Check_tableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_listContext* MySqlParser::Check_tableContext::table_list() {
  return getRuleContext<MySqlParser::Table_listContext>(0);
}

std::vector<MySqlParser::Check_table_optionContext *> MySqlParser::Check_tableContext::check_table_option() {
  return getRuleContexts<MySqlParser::Check_table_optionContext>();
}

MySqlParser::Check_table_optionContext* MySqlParser::Check_tableContext::check_table_option(size_t i) {
  return getRuleContext<MySqlParser::Check_table_optionContext>(i);
}


size_t MySqlParser::Check_tableContext::getRuleIndex() const {
  return MySqlParser::RuleCheck_table;
}

void MySqlParser::Check_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCheck_table(this);
}

void MySqlParser::Check_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCheck_table(this);
}

MySqlParser::Check_tableContext* MySqlParser::check_table() {
  Check_tableContext *_localctx = _tracker.createInstance<Check_tableContext>(_ctx, getState());
  enterRule(_localctx, 394, MySqlParser::RuleCheck_table);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4497);
    match(MySqlParser::CHECK);
    setState(4498);
    match(MySqlParser::TABLE);
    setState(4499);
    table_list();
    setState(4503);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::FOR || ((((_la - 265) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 265)) & ((1ULL << (MySqlParser::CHANGED - 265))
      | (1ULL << (MySqlParser::EXTENDED - 265))
      | (1ULL << (MySqlParser::FAST - 265)))) != 0) || _la == MySqlParser::MEDIUM

    || _la == MySqlParser::QUICK) {
      setState(4500);
      check_table_option();
      setState(4505);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Checksum_tableContext ------------------------------------------------------------------

MySqlParser::Checksum_tableContext::Checksum_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Checksum_tableContext::CHECKSUM() {
  return getToken(MySqlParser::CHECKSUM, 0);
}

tree::TerminalNode* MySqlParser::Checksum_tableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_listContext* MySqlParser::Checksum_tableContext::table_list() {
  return getRuleContext<MySqlParser::Table_listContext>(0);
}

tree::TerminalNode* MySqlParser::Checksum_tableContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::Checksum_tableContext::EXTENDED() {
  return getToken(MySqlParser::EXTENDED, 0);
}


size_t MySqlParser::Checksum_tableContext::getRuleIndex() const {
  return MySqlParser::RuleChecksum_table;
}

void MySqlParser::Checksum_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChecksum_table(this);
}

void MySqlParser::Checksum_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChecksum_table(this);
}

MySqlParser::Checksum_tableContext* MySqlParser::checksum_table() {
  Checksum_tableContext *_localctx = _tracker.createInstance<Checksum_tableContext>(_ctx, getState());
  enterRule(_localctx, 396, MySqlParser::RuleChecksum_table);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4506);
    match(MySqlParser::CHECKSUM);
    setState(4507);
    match(MySqlParser::TABLE);
    setState(4508);
    table_list();
    setState(4510);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EXTENDED || _la == MySqlParser::QUICK) {
      setState(4509);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::EXTENDED || _la == MySqlParser::QUICK)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Optimize_tableContext ------------------------------------------------------------------

MySqlParser::Optimize_tableContext::Optimize_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Optimize_tableContext::OPTIMIZE() {
  return getToken(MySqlParser::OPTIMIZE, 0);
}

tree::TerminalNode* MySqlParser::Optimize_tableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_listContext* MySqlParser::Optimize_tableContext::table_list() {
  return getRuleContext<MySqlParser::Table_listContext>(0);
}

tree::TerminalNode* MySqlParser::Optimize_tableContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySqlParser::Optimize_tableContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::Optimize_tableContext::getRuleIndex() const {
  return MySqlParser::RuleOptimize_table;
}

void MySqlParser::Optimize_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptimize_table(this);
}

void MySqlParser::Optimize_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptimize_table(this);
}

MySqlParser::Optimize_tableContext* MySqlParser::optimize_table() {
  Optimize_tableContext *_localctx = _tracker.createInstance<Optimize_tableContext>(_ctx, getState());
  enterRule(_localctx, 398, MySqlParser::RuleOptimize_table);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4512);
    match(MySqlParser::OPTIMIZE);
    setState(4514);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL) {
      setState(4513);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4516);
    match(MySqlParser::TABLE);
    setState(4517);
    table_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Repair_tableContext ------------------------------------------------------------------

MySqlParser::Repair_tableContext::Repair_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Repair_tableContext::REPAIR() {
  return getToken(MySqlParser::REPAIR, 0);
}

tree::TerminalNode* MySqlParser::Repair_tableContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

MySqlParser::Table_listContext* MySqlParser::Repair_tableContext::table_list() {
  return getRuleContext<MySqlParser::Table_listContext>(0);
}

tree::TerminalNode* MySqlParser::Repair_tableContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::Repair_tableContext::EXTENDED() {
  return getToken(MySqlParser::EXTENDED, 0);
}

tree::TerminalNode* MySqlParser::Repair_tableContext::USE_FRM() {
  return getToken(MySqlParser::USE_FRM, 0);
}

tree::TerminalNode* MySqlParser::Repair_tableContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySqlParser::Repair_tableContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::Repair_tableContext::getRuleIndex() const {
  return MySqlParser::RuleRepair_table;
}

void MySqlParser::Repair_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRepair_table(this);
}

void MySqlParser::Repair_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRepair_table(this);
}

MySqlParser::Repair_tableContext* MySqlParser::repair_table() {
  Repair_tableContext *_localctx = _tracker.createInstance<Repair_tableContext>(_ctx, getState());
  enterRule(_localctx, 400, MySqlParser::RuleRepair_table);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4519);
    match(MySqlParser::REPAIR);
    setState(4521);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL) {
      setState(4520);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4523);
    match(MySqlParser::TABLE);
    setState(4524);
    table_list();
    setState(4526);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::QUICK) {
      setState(4525);
      match(MySqlParser::QUICK);
    }
    setState(4529);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::EXTENDED) {
      setState(4528);
      match(MySqlParser::EXTENDED);
    }
    setState(4532);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::USE_FRM) {
      setState(4531);
      match(MySqlParser::USE_FRM);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Check_table_optionContext ------------------------------------------------------------------

MySqlParser::Check_table_optionContext::Check_table_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Check_table_optionContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::Check_table_optionContext::UPGRADE() {
  return getToken(MySqlParser::UPGRADE, 0);
}

tree::TerminalNode* MySqlParser::Check_table_optionContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::Check_table_optionContext::FAST() {
  return getToken(MySqlParser::FAST, 0);
}

tree::TerminalNode* MySqlParser::Check_table_optionContext::MEDIUM() {
  return getToken(MySqlParser::MEDIUM, 0);
}

tree::TerminalNode* MySqlParser::Check_table_optionContext::EXTENDED() {
  return getToken(MySqlParser::EXTENDED, 0);
}

tree::TerminalNode* MySqlParser::Check_table_optionContext::CHANGED() {
  return getToken(MySqlParser::CHANGED, 0);
}


size_t MySqlParser::Check_table_optionContext::getRuleIndex() const {
  return MySqlParser::RuleCheck_table_option;
}

void MySqlParser::Check_table_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCheck_table_option(this);
}

void MySqlParser::Check_table_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCheck_table_option(this);
}

MySqlParser::Check_table_optionContext* MySqlParser::check_table_option() {
  Check_table_optionContext *_localctx = _tracker.createInstance<Check_table_optionContext>(_ctx, getState());
  enterRule(_localctx, 402, MySqlParser::RuleCheck_table_option);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4541);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::FOR: {
        enterOuterAlt(_localctx, 1);
        setState(4534);
        match(MySqlParser::FOR);
        setState(4535);
        match(MySqlParser::UPGRADE);
        break;
      }

      case MySqlParser::QUICK: {
        enterOuterAlt(_localctx, 2);
        setState(4536);
        match(MySqlParser::QUICK);
        break;
      }

      case MySqlParser::FAST: {
        enterOuterAlt(_localctx, 3);
        setState(4537);
        match(MySqlParser::FAST);
        break;
      }

      case MySqlParser::MEDIUM: {
        enterOuterAlt(_localctx, 4);
        setState(4538);
        match(MySqlParser::MEDIUM);
        break;
      }

      case MySqlParser::EXTENDED: {
        enterOuterAlt(_localctx, 5);
        setState(4539);
        match(MySqlParser::EXTENDED);
        break;
      }

      case MySqlParser::CHANGED: {
        enterOuterAlt(_localctx, 6);
        setState(4540);
        match(MySqlParser::CHANGED);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_udfunctionContext ------------------------------------------------------------------

MySqlParser::Create_udfunctionContext::Create_udfunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Create_udfunctionContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::Create_udfunctionContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

MySqlParser::Id_Context* MySqlParser::Create_udfunctionContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Create_udfunctionContext::RETURNS() {
  return getToken(MySqlParser::RETURNS, 0);
}

tree::TerminalNode* MySqlParser::Create_udfunctionContext::SONAME() {
  return getToken(MySqlParser::SONAME, 0);
}

tree::TerminalNode* MySqlParser::Create_udfunctionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Create_udfunctionContext::STRING() {
  return getToken(MySqlParser::STRING, 0);
}

tree::TerminalNode* MySqlParser::Create_udfunctionContext::INTEGER() {
  return getToken(MySqlParser::INTEGER, 0);
}

tree::TerminalNode* MySqlParser::Create_udfunctionContext::REAL() {
  return getToken(MySqlParser::REAL, 0);
}

tree::TerminalNode* MySqlParser::Create_udfunctionContext::DECIMAL() {
  return getToken(MySqlParser::DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::Create_udfunctionContext::AGGREGATE() {
  return getToken(MySqlParser::AGGREGATE, 0);
}


size_t MySqlParser::Create_udfunctionContext::getRuleIndex() const {
  return MySqlParser::RuleCreate_udfunction;
}

void MySqlParser::Create_udfunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_udfunction(this);
}

void MySqlParser::Create_udfunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_udfunction(this);
}

MySqlParser::Create_udfunctionContext* MySqlParser::create_udfunction() {
  Create_udfunctionContext *_localctx = _tracker.createInstance<Create_udfunctionContext>(_ctx, getState());
  enterRule(_localctx, 404, MySqlParser::RuleCreate_udfunction);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4543);
    match(MySqlParser::CREATE);
    setState(4545);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::AGGREGATE) {
      setState(4544);
      match(MySqlParser::AGGREGATE);
    }
    setState(4547);
    match(MySqlParser::FUNCTION);
    setState(4548);
    id_();
    setState(4549);
    match(MySqlParser::RETURNS);
    setState(4550);
    _la = _input->LA(1);
    if (!(((((_la - 174) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 174)) & ((1ULL << (MySqlParser::INTEGER - 174))
      | (1ULL << (MySqlParser::REAL - 174))
      | (1ULL << (MySqlParser::DECIMAL - 174)))) != 0) || _la == MySqlParser::STRING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4551);
    match(MySqlParser::SONAME);
    setState(4552);
    match(MySqlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Install_pluginContext ------------------------------------------------------------------

MySqlParser::Install_pluginContext::Install_pluginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Install_pluginContext::INSTALL() {
  return getToken(MySqlParser::INSTALL, 0);
}

tree::TerminalNode* MySqlParser::Install_pluginContext::PLUGIN() {
  return getToken(MySqlParser::PLUGIN, 0);
}

MySqlParser::Id_Context* MySqlParser::Install_pluginContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Install_pluginContext::SONAME() {
  return getToken(MySqlParser::SONAME, 0);
}

tree::TerminalNode* MySqlParser::Install_pluginContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::Install_pluginContext::getRuleIndex() const {
  return MySqlParser::RuleInstall_plugin;
}

void MySqlParser::Install_pluginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstall_plugin(this);
}

void MySqlParser::Install_pluginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstall_plugin(this);
}

MySqlParser::Install_pluginContext* MySqlParser::install_plugin() {
  Install_pluginContext *_localctx = _tracker.createInstance<Install_pluginContext>(_ctx, getState());
  enterRule(_localctx, 406, MySqlParser::RuleInstall_plugin);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4554);
    match(MySqlParser::INSTALL);
    setState(4555);
    match(MySqlParser::PLUGIN);
    setState(4556);
    id_();
    setState(4557);
    match(MySqlParser::SONAME);
    setState(4558);
    match(MySqlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Uninstall_pluginContext ------------------------------------------------------------------

MySqlParser::Uninstall_pluginContext::Uninstall_pluginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Uninstall_pluginContext::UNINSTALL() {
  return getToken(MySqlParser::UNINSTALL, 0);
}

tree::TerminalNode* MySqlParser::Uninstall_pluginContext::PLUGIN() {
  return getToken(MySqlParser::PLUGIN, 0);
}

MySqlParser::Id_Context* MySqlParser::Uninstall_pluginContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}


size_t MySqlParser::Uninstall_pluginContext::getRuleIndex() const {
  return MySqlParser::RuleUninstall_plugin;
}

void MySqlParser::Uninstall_pluginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUninstall_plugin(this);
}

void MySqlParser::Uninstall_pluginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUninstall_plugin(this);
}

MySqlParser::Uninstall_pluginContext* MySqlParser::uninstall_plugin() {
  Uninstall_pluginContext *_localctx = _tracker.createInstance<Uninstall_pluginContext>(_ctx, getState());
  enterRule(_localctx, 408, MySqlParser::RuleUninstall_plugin);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4560);
    match(MySqlParser::UNINSTALL);
    setState(4561);
    match(MySqlParser::PLUGIN);
    setState(4562);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_statementContext ------------------------------------------------------------------

MySqlParser::Set_statementContext::Set_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Set_statementContext::getRuleIndex() const {
  return MySqlParser::RuleSet_statement;
}

void MySqlParser::Set_statementContext::copyFrom(Set_statementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SetPasswordStatementContext ------------------------------------------------------------------

MySqlParser::Set_password_statementContext* MySqlParser::SetPasswordStatementContext::set_password_statement() {
  return getRuleContext<MySqlParser::Set_password_statementContext>(0);
}

MySqlParser::SetPasswordStatementContext::SetPasswordStatementContext(Set_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::SetPasswordStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetPasswordStatement(this);
}
void MySqlParser::SetPasswordStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetPasswordStatement(this);
}
//----------------- SetTransactionContext ------------------------------------------------------------------

MySqlParser::Set_transaction_statementContext* MySqlParser::SetTransactionContext::set_transaction_statement() {
  return getRuleContext<MySqlParser::Set_transaction_statementContext>(0);
}

MySqlParser::SetTransactionContext::SetTransactionContext(Set_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::SetTransactionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetTransaction(this);
}
void MySqlParser::SetTransactionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetTransaction(this);
}
//----------------- SetCharsetContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MySqlParser::SetCharsetContext::SET() {
  return getTokens(MySqlParser::SET);
}

tree::TerminalNode* MySqlParser::SetCharsetContext::SET(size_t i) {
  return getToken(MySqlParser::SET, i);
}

tree::TerminalNode* MySqlParser::SetCharsetContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::SetCharsetContext::CHARSET() {
  return getToken(MySqlParser::CHARSET, 0);
}

MySqlParser::Charset_nameContext* MySqlParser::SetCharsetContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::SetCharsetContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::SetCharsetContext::SetCharsetContext(Set_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::SetCharsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetCharset(this);
}
void MySqlParser::SetCharsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetCharset(this);
}
//----------------- SetNamesContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SetNamesContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::SetNamesContext::NAMES() {
  return getToken(MySqlParser::NAMES, 0);
}

MySqlParser::Charset_nameContext* MySqlParser::SetNamesContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::SetNamesContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

tree::TerminalNode* MySqlParser::SetNamesContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::Collation_nameContext* MySqlParser::SetNamesContext::collation_name() {
  return getRuleContext<MySqlParser::Collation_nameContext>(0);
}

MySqlParser::SetNamesContext::SetNamesContext(Set_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::SetNamesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetNames(this);
}
void MySqlParser::SetNamesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetNames(this);
}
//----------------- SetAutocommitContext ------------------------------------------------------------------

MySqlParser::Set_autocommit_statementContext* MySqlParser::SetAutocommitContext::set_autocommit_statement() {
  return getRuleContext<MySqlParser::Set_autocommit_statementContext>(0);
}

MySqlParser::SetAutocommitContext::SetAutocommitContext(Set_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::SetAutocommitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetAutocommit(this);
}
void MySqlParser::SetAutocommitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetAutocommit(this);
}
//----------------- SetVariableAssignmentContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SetVariableAssignmentContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

std::vector<MySqlParser::Variable_clauseContext *> MySqlParser::SetVariableAssignmentContext::variable_clause() {
  return getRuleContexts<MySqlParser::Variable_clauseContext>();
}

MySqlParser::Variable_clauseContext* MySqlParser::SetVariableAssignmentContext::variable_clause(size_t i) {
  return getRuleContext<MySqlParser::Variable_clauseContext>(i);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::SetVariableAssignmentContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::SetVariableAssignmentContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

MySqlParser::SetVariableAssignmentContext::SetVariableAssignmentContext(Set_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::SetVariableAssignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetVariableAssignment(this);
}
void MySqlParser::SetVariableAssignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetVariableAssignment(this);
}
MySqlParser::Set_statementContext* MySqlParser::set_statement() {
  Set_statementContext *_localctx = _tracker.createInstance<Set_statementContext>(_ctx, getState());
  enterRule(_localctx, 410, MySqlParser::RuleSet_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4601);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 672, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Set_statementContext *>(_tracker.createInstance<MySqlParser::SetVariableAssignmentContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4564);
      match(MySqlParser::SET);
      setState(4565);
      variable_clause();
      setState(4566);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(4567);
      expression(0);
      setState(4575);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4568);
        match(MySqlParser::COMMA);
        setState(4569);
        variable_clause();
        setState(4570);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4571);
        expression(0);
        setState(4577);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Set_statementContext *>(_tracker.createInstance<MySqlParser::SetCharsetContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4578);
      match(MySqlParser::SET);
      setState(4582);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CHARACTER: {
          setState(4579);
          match(MySqlParser::CHARACTER);
          setState(4580);
          match(MySqlParser::SET);
          break;
        }

        case MySqlParser::CHARSET: {
          setState(4581);
          match(MySqlParser::CHARSET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4586);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::BINARY:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL: {
          setState(4584);
          charset_name();
          break;
        }

        case MySqlParser::DEFAULT: {
          setState(4585);
          match(MySqlParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Set_statementContext *>(_tracker.createInstance<MySqlParser::SetNamesContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(4588);
      match(MySqlParser::SET);
      setState(4589);
      match(MySqlParser::NAMES);
      setState(4596);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::BINARY:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::STRING_LITERAL: {
          setState(4590);
          charset_name();
          setState(4593);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::COLLATE) {
            setState(4591);
            match(MySqlParser::COLLATE);
            setState(4592);
            collation_name();
          }
          break;
        }

        case MySqlParser::DEFAULT: {
          setState(4595);
          match(MySqlParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Set_statementContext *>(_tracker.createInstance<MySqlParser::SetPasswordStatementContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(4598);
      set_password_statement();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<Set_statementContext *>(_tracker.createInstance<MySqlParser::SetTransactionContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(4599);
      set_transaction_statement();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<Set_statementContext *>(_tracker.createInstance<MySqlParser::SetAutocommitContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(4600);
      set_autocommit_statement();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_statementContext ------------------------------------------------------------------

MySqlParser::Show_statementContext::Show_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Show_statementContext::getRuleIndex() const {
  return MySqlParser::RuleShow_statement;
}

void MySqlParser::Show_statementContext::copyFrom(Show_statementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ShowCreateUserContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowCreateUserContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateUserContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateUserContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

MySqlParser::User_nameContext* MySqlParser::ShowCreateUserContext::user_name() {
  return getRuleContext<MySqlParser::User_nameContext>(0);
}

MySqlParser::ShowCreateUserContext::ShowCreateUserContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowCreateUserContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowCreateUser(this);
}
void MySqlParser::ShowCreateUserContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowCreateUser(this);
}
//----------------- ShowCreateFullidobjContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowCreateFullidobjContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullidobjContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

MySqlParser::Full_idContext* MySqlParser::ShowCreateFullidobjContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullidobjContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullidobjContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullidobjContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullidobjContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullidobjContext::TRIGGER() {
  return getToken(MySqlParser::TRIGGER, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateFullidobjContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

MySqlParser::ShowCreateFullidobjContext::ShowCreateFullidobjContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowCreateFullidobjContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowCreateFullidobj(this);
}
void MySqlParser::ShowCreateFullidobjContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowCreateFullidobj(this);
}
//----------------- ShowSlavestatusContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowSlavestatusContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowSlavestatusContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::ShowSlavestatusContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::ShowSlavestatusContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::ShowSlavestatusContext::CHANNEL() {
  return getToken(MySqlParser::CHANNEL, 0);
}

tree::TerminalNode* MySqlParser::ShowSlavestatusContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

MySqlParser::ShowSlavestatusContext::ShowSlavestatusContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowSlavestatusContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowSlavestatus(this);
}
void MySqlParser::ShowSlavestatusContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowSlavestatus(this);
}
//----------------- ShowOpentablesContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowOpentablesContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowOpentablesContext::OPEN() {
  return getToken(MySqlParser::OPEN, 0);
}

tree::TerminalNode* MySqlParser::ShowOpentablesContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

MySqlParser::Id_Context* MySqlParser::ShowOpentablesContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::Show_filterContext* MySqlParser::ShowOpentablesContext::show_filter() {
  return getRuleContext<MySqlParser::Show_filterContext>(0);
}

tree::TerminalNode* MySqlParser::ShowOpentablesContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::ShowOpentablesContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

MySqlParser::ShowOpentablesContext::ShowOpentablesContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowOpentablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowOpentables(this);
}
void MySqlParser::ShowOpentablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowOpentables(this);
}
//----------------- ShowObjWithFilterContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::COLLATION() {
  return getToken(MySqlParser::COLLATION, 0);
}

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::DATABASES() {
  return getToken(MySqlParser::DATABASES, 0);
}

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::SCHEMAS() {
  return getToken(MySqlParser::SCHEMAS, 0);
}

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::VARIABLES() {
  return getToken(MySqlParser::VARIABLES, 0);
}

MySqlParser::Show_filterContext* MySqlParser::ShowObjWithFilterContext::show_filter() {
  return getRuleContext<MySqlParser::Show_filterContext>(0);
}

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::GLOBAL() {
  return getToken(MySqlParser::GLOBAL, 0);
}

tree::TerminalNode* MySqlParser::ShowObjWithFilterContext::SESSION() {
  return getToken(MySqlParser::SESSION, 0);
}

MySqlParser::ShowObjWithFilterContext::ShowObjWithFilterContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowObjWithFilterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowObjWithFilter(this);
}
void MySqlParser::ShowObjWithFilterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowObjWithFilter(this);
}
//----------------- ShowFromschemaFilterContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowFromschemaFilterContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowFromschemaFilterContext::EVENTS() {
  return getToken(MySqlParser::EVENTS, 0);
}

tree::TerminalNode* MySqlParser::ShowFromschemaFilterContext::TABLE() {
  return getToken(MySqlParser::TABLE, 0);
}

tree::TerminalNode* MySqlParser::ShowFromschemaFilterContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::ShowFromschemaFilterContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

tree::TerminalNode* MySqlParser::ShowFromschemaFilterContext::TRIGGERS() {
  return getToken(MySqlParser::TRIGGERS, 0);
}

MySqlParser::Id_Context* MySqlParser::ShowFromschemaFilterContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::Show_filterContext* MySqlParser::ShowFromschemaFilterContext::show_filter() {
  return getRuleContext<MySqlParser::Show_filterContext>(0);
}

tree::TerminalNode* MySqlParser::ShowFromschemaFilterContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::ShowFromschemaFilterContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::ShowFromschemaFilterContext::FULL() {
  return getToken(MySqlParser::FULL, 0);
}

MySqlParser::ShowFromschemaFilterContext::ShowFromschemaFilterContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowFromschemaFilterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowFromschemaFilter(this);
}
void MySqlParser::ShowFromschemaFilterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowFromschemaFilter(this);
}
//----------------- ShowRoutinecodeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowRoutinecodeContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowRoutinecodeContext::CODE() {
  return getToken(MySqlParser::CODE, 0);
}

MySqlParser::Full_idContext* MySqlParser::ShowRoutinecodeContext::full_id() {
  return getRuleContext<MySqlParser::Full_idContext>(0);
}

tree::TerminalNode* MySqlParser::ShowRoutinecodeContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::ShowRoutinecodeContext::PROCEDURE() {
  return getToken(MySqlParser::PROCEDURE, 0);
}

MySqlParser::ShowRoutinecodeContext::ShowRoutinecodeContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowRoutinecodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowRoutinecode(this);
}
void MySqlParser::ShowRoutinecodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowRoutinecode(this);
}
//----------------- ShowMasterlogsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowMasterlogsContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowMasterlogsContext::LOGS() {
  return getToken(MySqlParser::LOGS, 0);
}

tree::TerminalNode* MySqlParser::ShowMasterlogsContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::ShowMasterlogsContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

MySqlParser::ShowMasterlogsContext::ShowMasterlogsContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowMasterlogsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowMasterlogs(this);
}
void MySqlParser::ShowMasterlogsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowMasterlogs(this);
}
//----------------- ShowCreateDbContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowCreateDbContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateDbContext::CREATE() {
  return getToken(MySqlParser::CREATE, 0);
}

MySqlParser::Id_Context* MySqlParser::ShowCreateDbContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::ShowCreateDbContext::DATABASE() {
  return getToken(MySqlParser::DATABASE, 0);
}

tree::TerminalNode* MySqlParser::ShowCreateDbContext::SCHEMA() {
  return getToken(MySqlParser::SCHEMA, 0);
}

MySqlParser::If_not_existsContext* MySqlParser::ShowCreateDbContext::if_not_exists() {
  return getRuleContext<MySqlParser::If_not_existsContext>(0);
}

MySqlParser::ShowCreateDbContext::ShowCreateDbContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowCreateDbContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowCreateDb(this);
}
void MySqlParser::ShowCreateDbContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowCreateDb(this);
}
//----------------- ShowEngineContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowEngineContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowEngineContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

MySqlParser::Engine_nameContext* MySqlParser::ShowEngineContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}

tree::TerminalNode* MySqlParser::ShowEngineContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::ShowEngineContext::MUTEX() {
  return getToken(MySqlParser::MUTEX, 0);
}

MySqlParser::ShowEngineContext::ShowEngineContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowEngineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowEngine(this);
}
void MySqlParser::ShowEngineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowEngine(this);
}
//----------------- ShowLogeventsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowLogeventsContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowLogeventsContext::EVENTS() {
  return getToken(MySqlParser::EVENTS, 0);
}

tree::TerminalNode* MySqlParser::ShowLogeventsContext::BINLOG() {
  return getToken(MySqlParser::BINLOG, 0);
}

tree::TerminalNode* MySqlParser::ShowLogeventsContext::RELAYLOG() {
  return getToken(MySqlParser::RELAYLOG, 0);
}

tree::TerminalNode* MySqlParser::ShowLogeventsContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

tree::TerminalNode* MySqlParser::ShowLogeventsContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::ShowLogeventsContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::ShowLogeventsContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::ShowLogeventsContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::ShowLogeventsContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}

MySqlParser::ShowLogeventsContext::ShowLogeventsContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowLogeventsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowLogevents(this);
}
void MySqlParser::ShowLogeventsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowLogevents(this);
}
//----------------- ShowGlobalinfoContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::ENGINES() {
  return getToken(MySqlParser::ENGINES, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::PLUGINS() {
  return getToken(MySqlParser::PLUGINS, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::PRIVILEGES() {
  return getToken(MySqlParser::PRIVILEGES, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::PROCESSLIST() {
  return getToken(MySqlParser::PROCESSLIST, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::PROFILES() {
  return getToken(MySqlParser::PROFILES, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::HOSTS() {
  return getToken(MySqlParser::HOSTS, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::AUTHORS() {
  return getToken(MySqlParser::AUTHORS, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::CONTRIBUTORS() {
  return getToken(MySqlParser::CONTRIBUTORS, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::STORAGE() {
  return getToken(MySqlParser::STORAGE, 0);
}

tree::TerminalNode* MySqlParser::ShowGlobalinfoContext::FULL() {
  return getToken(MySqlParser::FULL, 0);
}

MySqlParser::ShowGlobalinfoContext::ShowGlobalinfoContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowGlobalinfoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowGlobalinfo(this);
}
void MySqlParser::ShowGlobalinfoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowGlobalinfo(this);
}
//----------------- ShowCountErrWarnContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowCountErrWarnContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowCountErrWarnContext::COUNT() {
  return getToken(MySqlParser::COUNT, 0);
}

tree::TerminalNode* MySqlParser::ShowCountErrWarnContext::ERRORS() {
  return getToken(MySqlParser::ERRORS, 0);
}

tree::TerminalNode* MySqlParser::ShowCountErrWarnContext::WARNINGS() {
  return getToken(MySqlParser::WARNINGS, 0);
}

MySqlParser::ShowCountErrWarnContext::ShowCountErrWarnContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowCountErrWarnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowCountErrWarn(this);
}
void MySqlParser::ShowCountErrWarnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowCountErrWarn(this);
}
//----------------- ShowIndexesContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowIndexesContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

MySqlParser::Table_nameContext* MySqlParser::ShowIndexesContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::INDEXES() {
  return getToken(MySqlParser::INDEXES, 0);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::KEYS() {
  return getToken(MySqlParser::KEYS, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::ShowIndexesContext::FROM() {
  return getTokens(MySqlParser::FROM);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::FROM(size_t i) {
  return getToken(MySqlParser::FROM, i);
}

std::vector<tree::TerminalNode *> MySqlParser::ShowIndexesContext::IN() {
  return getTokens(MySqlParser::IN);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::IN(size_t i) {
  return getToken(MySqlParser::IN, i);
}

MySqlParser::Id_Context* MySqlParser::ShowIndexesContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::ShowIndexesContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::ShowIndexesContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::ShowIndexesContext::ShowIndexesContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowIndexesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowIndexes(this);
}
void MySqlParser::ShowIndexesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowIndexes(this);
}
//----------------- ShowGrantsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowGrantsContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowGrantsContext::GRANTS() {
  return getToken(MySqlParser::GRANTS, 0);
}

tree::TerminalNode* MySqlParser::ShowGrantsContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

MySqlParser::User_nameContext* MySqlParser::ShowGrantsContext::user_name() {
  return getRuleContext<MySqlParser::User_nameContext>(0);
}

MySqlParser::ShowGrantsContext::ShowGrantsContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowGrantsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowGrants(this);
}
void MySqlParser::ShowGrantsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowGrants(this);
}
//----------------- ShowProfileContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowProfileContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileContext::PROFILE() {
  return getToken(MySqlParser::PROFILE, 0);
}

std::vector<MySqlParser::Show_profile_typeContext *> MySqlParser::ShowProfileContext::show_profile_type() {
  return getRuleContexts<MySqlParser::Show_profile_typeContext>();
}

MySqlParser::Show_profile_typeContext* MySqlParser::ShowProfileContext::show_profile_type(size_t i) {
  return getRuleContext<MySqlParser::Show_profile_typeContext>(i);
}

tree::TerminalNode* MySqlParser::ShowProfileContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::ShowProfileContext::QUERY() {
  return getToken(MySqlParser::QUERY, 0);
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::ShowProfileContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::ShowProfileContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}

MySqlParser::ShowProfileContext::ShowProfileContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowProfileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowProfile(this);
}
void MySqlParser::ShowProfileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowProfile(this);
}
//----------------- ShowColumnsContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowColumnsContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

MySqlParser::Table_nameContext* MySqlParser::ShowColumnsContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::ShowColumnsContext::COLUMNS() {
  return getToken(MySqlParser::COLUMNS, 0);
}

tree::TerminalNode* MySqlParser::ShowColumnsContext::FIELDS() {
  return getToken(MySqlParser::FIELDS, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::ShowColumnsContext::FROM() {
  return getTokens(MySqlParser::FROM);
}

tree::TerminalNode* MySqlParser::ShowColumnsContext::FROM(size_t i) {
  return getToken(MySqlParser::FROM, i);
}

std::vector<tree::TerminalNode *> MySqlParser::ShowColumnsContext::IN() {
  return getTokens(MySqlParser::IN);
}

tree::TerminalNode* MySqlParser::ShowColumnsContext::IN(size_t i) {
  return getToken(MySqlParser::IN, i);
}

tree::TerminalNode* MySqlParser::ShowColumnsContext::FULL() {
  return getToken(MySqlParser::FULL, 0);
}

MySqlParser::Id_Context* MySqlParser::ShowColumnsContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::Show_filterContext* MySqlParser::ShowColumnsContext::show_filter() {
  return getRuleContext<MySqlParser::Show_filterContext>(0);
}

MySqlParser::ShowColumnsContext::ShowColumnsContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowColumnsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowColumns(this);
}
void MySqlParser::ShowColumnsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowColumns(this);
}
//----------------- ShowErrWarnContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ShowErrWarnContext::SHOW() {
  return getToken(MySqlParser::SHOW, 0);
}

tree::TerminalNode* MySqlParser::ShowErrWarnContext::ERRORS() {
  return getToken(MySqlParser::ERRORS, 0);
}

tree::TerminalNode* MySqlParser::ShowErrWarnContext::WARNINGS() {
  return getToken(MySqlParser::WARNINGS, 0);
}

tree::TerminalNode* MySqlParser::ShowErrWarnContext::LIMIT() {
  return getToken(MySqlParser::LIMIT, 0);
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::ShowErrWarnContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::ShowErrWarnContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}

MySqlParser::ShowErrWarnContext::ShowErrWarnContext(Show_statementContext *ctx) { copyFrom(ctx); }

void MySqlParser::ShowErrWarnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShowErrWarn(this);
}
void MySqlParser::ShowErrWarnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShowErrWarn(this);
}
MySqlParser::Show_statementContext* MySqlParser::show_statement() {
  Show_statementContext *_localctx = _tracker.createInstance<Show_statementContext>(_ctx, getState());
  enterRule(_localctx, 412, MySqlParser::RuleShow_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4795);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 701, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowMasterlogsContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(4603);
      match(MySqlParser::SHOW);
      setState(4604);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::BINARY || _la == MySqlParser::MASTER)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4605);
      match(MySqlParser::LOGS);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowLogeventsContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(4606);
      match(MySqlParser::SHOW);
      setState(4607);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::BINLOG || _la == MySqlParser::RELAYLOG)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4608);
      match(MySqlParser::EVENTS);
      setState(4611);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IN) {
        setState(4609);
        match(MySqlParser::IN);
        setState(4610);
        match(MySqlParser::STRING_LITERAL);
      }
      setState(4615);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM) {
        setState(4613);
        match(MySqlParser::FROM);
        setState(4614);
        dynamic_cast<ShowLogeventsContext *>(_localctx)->from_pos = decimal_literal();
      }
      setState(4624);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIMIT) {
        setState(4617);
        match(MySqlParser::LIMIT);
        setState(4621);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 675, _ctx)) {
        case 1: {
          setState(4618);
          dynamic_cast<ShowLogeventsContext *>(_localctx)->offset = decimal_literal();
          setState(4619);
          match(MySqlParser::COMMA);
          break;
        }

        }
        setState(4623);
        dynamic_cast<ShowLogeventsContext *>(_localctx)->row_count = decimal_literal();
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowObjWithFilterContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(4626);
      match(MySqlParser::SHOW);
      setState(4640);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::CHARACTER: {
          setState(4627);
          match(MySqlParser::CHARACTER);
          setState(4628);
          match(MySqlParser::SET);
          break;
        }

        case MySqlParser::COLLATION: {
          setState(4629);
          match(MySqlParser::COLLATION);
          break;
        }

        case MySqlParser::DATABASES: {
          setState(4630);
          match(MySqlParser::DATABASES);
          break;
        }

        case MySqlParser::SCHEMAS: {
          setState(4631);
          match(MySqlParser::SCHEMAS);
          break;
        }

        case MySqlParser::FUNCTION: {
          setState(4632);
          match(MySqlParser::FUNCTION);
          setState(4633);
          match(MySqlParser::STATUS);
          break;
        }

        case MySqlParser::PROCEDURE: {
          setState(4634);
          match(MySqlParser::PROCEDURE);
          setState(4635);
          match(MySqlParser::STATUS);
          break;
        }

        case MySqlParser::GLOBAL:
        case MySqlParser::SESSION:
        case MySqlParser::STATUS:
        case MySqlParser::VARIABLES: {
          setState(4637);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::GLOBAL || _la == MySqlParser::SESSION) {
            setState(4636);
            _la = _input->LA(1);
            if (!(_la == MySqlParser::GLOBAL || _la == MySqlParser::SESSION)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
          }
          setState(4639);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::STATUS

          || _la == MySqlParser::VARIABLES)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4643);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIKE || _la == MySqlParser::WHERE) {
        setState(4642);
        show_filter();
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowColumnsContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(4645);
      match(MySqlParser::SHOW);
      setState(4647);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FULL) {
        setState(4646);
        match(MySqlParser::FULL);
      }
      setState(4649);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::COLUMNS

      || _la == MySqlParser::FIELDS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4650);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FROM

      || _la == MySqlParser::IN)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4651);
      table_name();
      setState(4654);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM

      || _la == MySqlParser::IN) {
        setState(4652);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FROM

        || _la == MySqlParser::IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4653);
        id_();
      }
      setState(4657);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIKE || _la == MySqlParser::WHERE) {
        setState(4656);
        show_filter();
      }
      break;
    }

    case 5: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowCreateDbContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(4659);
      match(MySqlParser::SHOW);
      setState(4660);
      match(MySqlParser::CREATE);
      setState(4661);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::DATABASE || _la == MySqlParser::SCHEMA)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4663);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::IF) {
        setState(4662);
        if_not_exists();
      }
      setState(4665);
      id_();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowCreateFullidobjContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(4666);
      match(MySqlParser::SHOW);
      setState(4667);
      match(MySqlParser::CREATE);
      setState(4668);
      _la = _input->LA(1);
      if (!(((((_la - 112) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 112)) & ((1ULL << (MySqlParser::PROCEDURE - 112))
        | (1ULL << (MySqlParser::TABLE - 112))
        | (1ULL << (MySqlParser::TRIGGER - 112)))) != 0) || _la == MySqlParser::EVENT

      || _la == MySqlParser::FUNCTION || _la == MySqlParser::VIEW)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4669);
      full_id();
      break;
    }

    case 7: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowCreateUserContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(4670);
      match(MySqlParser::SHOW);
      setState(4671);
      match(MySqlParser::CREATE);
      setState(4672);
      match(MySqlParser::USER);
      setState(4673);
      user_name();
      break;
    }

    case 8: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowEngineContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(4674);
      match(MySqlParser::SHOW);
      setState(4675);
      match(MySqlParser::ENGINE);
      setState(4676);
      engine_name();
      setState(4677);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::MUTEX || _la == MySqlParser::STATUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 9: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowGlobalinfoContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(4679);
      match(MySqlParser::SHOW);
      setState(4697);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::ENGINES:
        case MySqlParser::STORAGE: {
          setState(4681);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::STORAGE) {
            setState(4680);
            match(MySqlParser::STORAGE);
          }
          setState(4683);
          match(MySqlParser::ENGINES);
          break;
        }

        case MySqlParser::MASTER: {
          setState(4684);
          match(MySqlParser::MASTER);
          setState(4685);
          match(MySqlParser::STATUS);
          break;
        }

        case MySqlParser::PLUGINS: {
          setState(4686);
          match(MySqlParser::PLUGINS);
          break;
        }

        case MySqlParser::PRIVILEGES: {
          setState(4687);
          match(MySqlParser::PRIVILEGES);
          break;
        }

        case MySqlParser::FULL:
        case MySqlParser::PROCESSLIST: {
          setState(4689);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::FULL) {
            setState(4688);
            match(MySqlParser::FULL);
          }
          setState(4691);
          match(MySqlParser::PROCESSLIST);
          break;
        }

        case MySqlParser::PROFILES: {
          setState(4692);
          match(MySqlParser::PROFILES);
          break;
        }

        case MySqlParser::SLAVE: {
          setState(4693);
          match(MySqlParser::SLAVE);
          setState(4694);
          match(MySqlParser::HOSTS);
          break;
        }

        case MySqlParser::AUTHORS: {
          setState(4695);
          match(MySqlParser::AUTHORS);
          break;
        }

        case MySqlParser::CONTRIBUTORS: {
          setState(4696);
          match(MySqlParser::CONTRIBUTORS);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 10: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowErrWarnContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(4699);
      match(MySqlParser::SHOW);
      setState(4700);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ERRORS || _la == MySqlParser::WARNINGS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }

      setState(4701);
      match(MySqlParser::LIMIT);
      setState(4705);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 687, _ctx)) {
      case 1: {
        setState(4702);
        dynamic_cast<ShowErrWarnContext *>(_localctx)->offset = decimal_literal();
        setState(4703);
        match(MySqlParser::COMMA);
        break;
      }

      }
      setState(4707);
      dynamic_cast<ShowErrWarnContext *>(_localctx)->row_count = decimal_literal();
      break;
    }

    case 11: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowCountErrWarnContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(4708);
      match(MySqlParser::SHOW);
      setState(4709);
      match(MySqlParser::COUNT);
      setState(4710);
      match(MySqlParser::LR_BRACKET);
      setState(4711);
      match(MySqlParser::STAR);
      setState(4712);
      match(MySqlParser::RR_BRACKET);
      setState(4713);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ERRORS || _la == MySqlParser::WARNINGS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 12: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowFromschemaFilterContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(4714);
      match(MySqlParser::SHOW);
      setState(4723);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::EVENTS: {
          setState(4715);
          match(MySqlParser::EVENTS);
          break;
        }

        case MySqlParser::TABLE: {
          setState(4716);
          match(MySqlParser::TABLE);
          setState(4717);
          match(MySqlParser::STATUS);
          break;
        }

        case MySqlParser::FULL:
        case MySqlParser::TABLES: {
          setState(4719);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::FULL) {
            setState(4718);
            match(MySqlParser::FULL);
          }
          setState(4721);
          match(MySqlParser::TABLES);
          break;
        }

        case MySqlParser::TRIGGERS: {
          setState(4722);
          match(MySqlParser::TRIGGERS);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4727);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM

      || _la == MySqlParser::IN) {
        setState(4725);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FROM

        || _la == MySqlParser::IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4726);
        id_();
      }
      setState(4730);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIKE || _la == MySqlParser::WHERE) {
        setState(4729);
        show_filter();
      }
      break;
    }

    case 13: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowRoutinecodeContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(4732);
      match(MySqlParser::SHOW);
      setState(4733);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::PROCEDURE || _la == MySqlParser::FUNCTION)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4734);
      match(MySqlParser::CODE);
      setState(4735);
      full_id();
      break;
    }

    case 14: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowGrantsContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(4736);
      match(MySqlParser::SHOW);
      setState(4737);
      match(MySqlParser::GRANTS);
      setState(4740);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(4738);
        match(MySqlParser::FOR);
        setState(4739);
        user_name();
      }
      break;
    }

    case 15: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowIndexesContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(4742);
      match(MySqlParser::SHOW);
      setState(4743);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::INDEX

      || _la == MySqlParser::KEYS || _la == MySqlParser::INDEXES)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4744);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FROM

      || _la == MySqlParser::IN)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4745);
      table_name();
      setState(4748);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM

      || _la == MySqlParser::IN) {
        setState(4746);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FROM

        || _la == MySqlParser::IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4747);
        id_();
      }
      setState(4752);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::WHERE) {
        setState(4750);
        match(MySqlParser::WHERE);
        setState(4751);
        expression(0);
      }
      break;
    }

    case 16: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowOpentablesContext>(_localctx));
      enterOuterAlt(_localctx, 16);
      setState(4754);
      match(MySqlParser::SHOW);
      setState(4755);
      match(MySqlParser::OPEN);
      setState(4756);
      match(MySqlParser::TABLES);
      setState(4759);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FROM

      || _la == MySqlParser::IN) {
        setState(4757);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::FROM

        || _la == MySqlParser::IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4758);
        id_();
      }
      setState(4762);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LIKE || _la == MySqlParser::WHERE) {
        setState(4761);
        show_filter();
      }
      break;
    }

    case 17: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowProfileContext>(_localctx));
      enterOuterAlt(_localctx, 17);
      setState(4764);
      match(MySqlParser::SHOW);
      setState(4765);
      match(MySqlParser::PROFILE);
      setState(4766);
      show_profile_type();
      setState(4771);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(4767);
        match(MySqlParser::COMMA);
        setState(4768);
        show_profile_type();
        setState(4773);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4777);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(4774);
        match(MySqlParser::FOR);
        setState(4775);
        match(MySqlParser::QUERY);
        setState(4776);
        decimal_literal();
      }

      setState(4779);
      match(MySqlParser::LIMIT);
      setState(4783);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 699, _ctx)) {
      case 1: {
        setState(4780);
        dynamic_cast<ShowProfileContext *>(_localctx)->offset = decimal_literal();
        setState(4781);
        match(MySqlParser::COMMA);
        break;
      }

      }
      setState(4785);
      dynamic_cast<ShowProfileContext *>(_localctx)->row_count = decimal_literal();
      break;
    }

    case 18: {
      _localctx = dynamic_cast<Show_statementContext *>(_tracker.createInstance<MySqlParser::ShowSlavestatusContext>(_localctx));
      enterOuterAlt(_localctx, 18);
      setState(4787);
      match(MySqlParser::SHOW);
      setState(4788);
      match(MySqlParser::SLAVE);
      setState(4789);
      match(MySqlParser::STATUS);
      setState(4793);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(4790);
        match(MySqlParser::FOR);
        setState(4791);
        match(MySqlParser::CHANNEL);
        setState(4792);
        match(MySqlParser::STRING_LITERAL);
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_clauseContext ------------------------------------------------------------------

MySqlParser::Variable_clauseContext::Variable_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Variable_clauseContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySqlParser::Variable_clauseContext::GLOBAL_ID() {
  return getToken(MySqlParser::GLOBAL_ID, 0);
}

MySqlParser::Id_Context* MySqlParser::Variable_clauseContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Variable_clauseContext::GLOBAL() {
  return getToken(MySqlParser::GLOBAL, 0);
}

tree::TerminalNode* MySqlParser::Variable_clauseContext::SESSION() {
  return getToken(MySqlParser::SESSION, 0);
}


size_t MySqlParser::Variable_clauseContext::getRuleIndex() const {
  return MySqlParser::RuleVariable_clause;
}

void MySqlParser::Variable_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_clause(this);
}

void MySqlParser::Variable_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_clause(this);
}

MySqlParser::Variable_clauseContext* MySqlParser::variable_clause() {
  Variable_clauseContext *_localctx = _tracker.createInstance<Variable_clauseContext>(_ctx, getState());
  enterRule(_localctx, 414, MySqlParser::RuleVariable_clause);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4807);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LOCAL_ID: {
        enterOuterAlt(_localctx, 1);
        setState(4797);
        match(MySqlParser::LOCAL_ID);
        break;
      }

      case MySqlParser::GLOBAL_ID: {
        enterOuterAlt(_localctx, 2);
        setState(4798);
        match(MySqlParser::GLOBAL_ID);
        break;
      }

      case MySqlParser::LEFT:
      case MySqlParser::RIGHT:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::COUNT:
      case MySqlParser::POSITION:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BTREE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLIENT:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FIELDS:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::HASH:
      case MySqlParser::HOST:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IMPORT:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INVOKER:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MERGE:
      case MySqlParser::MID:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRESERVE:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATION:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STORAGE:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XML:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFOMANCE_SCHEMA:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::AT_SIGN:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        enterOuterAlt(_localctx, 3);
        setState(4804);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 703, _ctx)) {
        case 1: {
          setState(4801);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::AT_SIGN) {
            setState(4799);
            match(MySqlParser::AT_SIGN);
            setState(4800);
            match(MySqlParser::AT_SIGN);
          }
          setState(4803);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::GLOBAL || _la == MySqlParser::SESSION)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        }
        setState(4806);
        id_();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_filterContext ------------------------------------------------------------------

MySqlParser::Show_filterContext::Show_filterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Show_filterContext::LIKE() {
  return getToken(MySqlParser::LIKE, 0);
}

tree::TerminalNode* MySqlParser::Show_filterContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Show_filterContext::WHERE() {
  return getToken(MySqlParser::WHERE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::Show_filterContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::Show_filterContext::getRuleIndex() const {
  return MySqlParser::RuleShow_filter;
}

void MySqlParser::Show_filterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_filter(this);
}

void MySqlParser::Show_filterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_filter(this);
}

MySqlParser::Show_filterContext* MySqlParser::show_filter() {
  Show_filterContext *_localctx = _tracker.createInstance<Show_filterContext>(_ctx, getState());
  enterRule(_localctx, 416, MySqlParser::RuleShow_filter);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4813);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LIKE: {
        enterOuterAlt(_localctx, 1);
        setState(4809);
        match(MySqlParser::LIKE);
        setState(4810);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::WHERE: {
        enterOuterAlt(_localctx, 2);
        setState(4811);
        match(MySqlParser::WHERE);
        setState(4812);
        expression(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_profile_typeContext ------------------------------------------------------------------

MySqlParser::Show_profile_typeContext::Show_profile_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::BLOCK() {
  return getToken(MySqlParser::BLOCK, 0);
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::IO() {
  return getToken(MySqlParser::IO, 0);
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::CONTEXT() {
  return getToken(MySqlParser::CONTEXT, 0);
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::SWITCHES() {
  return getToken(MySqlParser::SWITCHES, 0);
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::CPU() {
  return getToken(MySqlParser::CPU, 0);
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::IPC() {
  return getToken(MySqlParser::IPC, 0);
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::MEMORY() {
  return getToken(MySqlParser::MEMORY, 0);
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::PAGE() {
  return getToken(MySqlParser::PAGE, 0);
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::FAULTS() {
  return getToken(MySqlParser::FAULTS, 0);
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::SOURCE() {
  return getToken(MySqlParser::SOURCE, 0);
}

tree::TerminalNode* MySqlParser::Show_profile_typeContext::SWAPS() {
  return getToken(MySqlParser::SWAPS, 0);
}


size_t MySqlParser::Show_profile_typeContext::getRuleIndex() const {
  return MySqlParser::RuleShow_profile_type;
}

void MySqlParser::Show_profile_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_profile_type(this);
}

void MySqlParser::Show_profile_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_profile_type(this);
}

MySqlParser::Show_profile_typeContext* MySqlParser::show_profile_type() {
  Show_profile_typeContext *_localctx = _tracker.createInstance<Show_profile_typeContext>(_ctx, getState());
  enterRule(_localctx, 418, MySqlParser::RuleShow_profile_type);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4827);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::ALL: {
        enterOuterAlt(_localctx, 1);
        setState(4815);
        match(MySqlParser::ALL);
        break;
      }

      case MySqlParser::BLOCK: {
        enterOuterAlt(_localctx, 2);
        setState(4816);
        match(MySqlParser::BLOCK);
        setState(4817);
        match(MySqlParser::IO);
        break;
      }

      case MySqlParser::CONTEXT: {
        enterOuterAlt(_localctx, 3);
        setState(4818);
        match(MySqlParser::CONTEXT);
        setState(4819);
        match(MySqlParser::SWITCHES);
        break;
      }

      case MySqlParser::CPU: {
        enterOuterAlt(_localctx, 4);
        setState(4820);
        match(MySqlParser::CPU);
        break;
      }

      case MySqlParser::IPC: {
        enterOuterAlt(_localctx, 5);
        setState(4821);
        match(MySqlParser::IPC);
        break;
      }

      case MySqlParser::MEMORY: {
        enterOuterAlt(_localctx, 6);
        setState(4822);
        match(MySqlParser::MEMORY);
        break;
      }

      case MySqlParser::PAGE: {
        enterOuterAlt(_localctx, 7);
        setState(4823);
        match(MySqlParser::PAGE);
        setState(4824);
        match(MySqlParser::FAULTS);
        break;
      }

      case MySqlParser::SOURCE: {
        enterOuterAlt(_localctx, 8);
        setState(4825);
        match(MySqlParser::SOURCE);
        break;
      }

      case MySqlParser::SWAPS: {
        enterOuterAlt(_localctx, 9);
        setState(4826);
        match(MySqlParser::SWAPS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binlog_statementContext ------------------------------------------------------------------

MySqlParser::Binlog_statementContext::Binlog_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Binlog_statementContext::BINLOG() {
  return getToken(MySqlParser::BINLOG, 0);
}

tree::TerminalNode* MySqlParser::Binlog_statementContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::Binlog_statementContext::getRuleIndex() const {
  return MySqlParser::RuleBinlog_statement;
}

void MySqlParser::Binlog_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinlog_statement(this);
}

void MySqlParser::Binlog_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinlog_statement(this);
}

MySqlParser::Binlog_statementContext* MySqlParser::binlog_statement() {
  Binlog_statementContext *_localctx = _tracker.createInstance<Binlog_statementContext>(_ctx, getState());
  enterRule(_localctx, 420, MySqlParser::RuleBinlog_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4829);
    match(MySqlParser::BINLOG);
    setState(4830);
    match(MySqlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cache_index_statementContext ------------------------------------------------------------------

MySqlParser::Cache_index_statementContext::Cache_index_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Cache_index_statementContext::CACHE() {
  return getToken(MySqlParser::CACHE, 0);
}

tree::TerminalNode* MySqlParser::Cache_index_statementContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

std::vector<MySqlParser::Tbl_index_listContext *> MySqlParser::Cache_index_statementContext::tbl_index_list() {
  return getRuleContexts<MySqlParser::Tbl_index_listContext>();
}

MySqlParser::Tbl_index_listContext* MySqlParser::Cache_index_statementContext::tbl_index_list(size_t i) {
  return getRuleContext<MySqlParser::Tbl_index_listContext>(i);
}

tree::TerminalNode* MySqlParser::Cache_index_statementContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

MySqlParser::Id_Context* MySqlParser::Cache_index_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Cache_index_statementContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

MySqlParser::Id_listContext* MySqlParser::Cache_index_statementContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::Cache_index_statementContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}


size_t MySqlParser::Cache_index_statementContext::getRuleIndex() const {
  return MySqlParser::RuleCache_index_statement;
}

void MySqlParser::Cache_index_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCache_index_statement(this);
}

void MySqlParser::Cache_index_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCache_index_statement(this);
}

MySqlParser::Cache_index_statementContext* MySqlParser::cache_index_statement() {
  Cache_index_statementContext *_localctx = _tracker.createInstance<Cache_index_statementContext>(_ctx, getState());
  enterRule(_localctx, 422, MySqlParser::RuleCache_index_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4832);
    match(MySqlParser::CACHE);
    setState(4833);
    match(MySqlParser::INDEX);
    setState(4834);
    tbl_index_list();
    setState(4839);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4835);
      match(MySqlParser::COMMA);
      setState(4836);
      tbl_index_list();
      setState(4841);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4849);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(4842);
      match(MySqlParser::PARTITION);
      setState(4843);
      match(MySqlParser::LR_BRACKET);
      setState(4846);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LEFT:
        case MySqlParser::RIGHT:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(4844);
          id_list();
          break;
        }

        case MySqlParser::ALL: {
          setState(4845);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4848);
      match(MySqlParser::RR_BRACKET);
    }
    setState(4851);
    match(MySqlParser::IN);
    setState(4852);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flush_statementContext ------------------------------------------------------------------

MySqlParser::Flush_statementContext::Flush_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Flush_statementContext::FLUSH() {
  return getToken(MySqlParser::FLUSH, 0);
}

std::vector<MySqlParser::Flush_optionContext *> MySqlParser::Flush_statementContext::flush_option() {
  return getRuleContexts<MySqlParser::Flush_optionContext>();
}

MySqlParser::Flush_optionContext* MySqlParser::Flush_statementContext::flush_option(size_t i) {
  return getRuleContext<MySqlParser::Flush_optionContext>(i);
}

tree::TerminalNode* MySqlParser::Flush_statementContext::NO_WRITE_TO_BINLOG() {
  return getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
}

tree::TerminalNode* MySqlParser::Flush_statementContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}


size_t MySqlParser::Flush_statementContext::getRuleIndex() const {
  return MySqlParser::RuleFlush_statement;
}

void MySqlParser::Flush_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlush_statement(this);
}

void MySqlParser::Flush_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlush_statement(this);
}

MySqlParser::Flush_statementContext* MySqlParser::flush_statement() {
  Flush_statementContext *_localctx = _tracker.createInstance<Flush_statementContext>(_ctx, getState());
  enterRule(_localctx, 424, MySqlParser::RuleFlush_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4854);
    match(MySqlParser::FLUSH);
    setState(4856);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL) {
      setState(4855);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NO_WRITE_TO_BINLOG || _la == MySqlParser::LOCAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4858);
    flush_option();
    setState(4863);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4859);
      match(MySqlParser::COMMA);
      setState(4860);
      flush_option();
      setState(4865);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kill_statementContext ------------------------------------------------------------------

MySqlParser::Kill_statementContext::Kill_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Kill_statementContext::KILL() {
  return getToken(MySqlParser::KILL, 0);
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::Kill_statementContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::Kill_statementContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}

tree::TerminalNode* MySqlParser::Kill_statementContext::CONNECTION() {
  return getToken(MySqlParser::CONNECTION, 0);
}

tree::TerminalNode* MySqlParser::Kill_statementContext::QUERY() {
  return getToken(MySqlParser::QUERY, 0);
}


size_t MySqlParser::Kill_statementContext::getRuleIndex() const {
  return MySqlParser::RuleKill_statement;
}

void MySqlParser::Kill_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKill_statement(this);
}

void MySqlParser::Kill_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKill_statement(this);
}

MySqlParser::Kill_statementContext* MySqlParser::kill_statement() {
  Kill_statementContext *_localctx = _tracker.createInstance<Kill_statementContext>(_ctx, getState());
  enterRule(_localctx, 426, MySqlParser::RuleKill_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4866);
    match(MySqlParser::KILL);
    setState(4868);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::CONNECTION || _la == MySqlParser::QUERY) {
      setState(4867);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CONNECTION || _la == MySqlParser::QUERY)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4871); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4870);
      decimal_literal();
      setState(4873); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 948) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 948)) & ((1ULL << (MySqlParser::ZERO_DECIMAL - 948))
      | (1ULL << (MySqlParser::ONE_DECIMAL - 948))
      | (1ULL << (MySqlParser::TWO_DECIMAL - 948))
      | (1ULL << (MySqlParser::DECIMAL_LITERAL - 948)))) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Load_index_into_cacheContext ------------------------------------------------------------------

MySqlParser::Load_index_into_cacheContext::Load_index_into_cacheContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Load_index_into_cacheContext::LOAD() {
  return getToken(MySqlParser::LOAD, 0);
}

tree::TerminalNode* MySqlParser::Load_index_into_cacheContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::Load_index_into_cacheContext::INTO() {
  return getToken(MySqlParser::INTO, 0);
}

tree::TerminalNode* MySqlParser::Load_index_into_cacheContext::CACHE() {
  return getToken(MySqlParser::CACHE, 0);
}

std::vector<MySqlParser::Load_tbl_index_listContext *> MySqlParser::Load_index_into_cacheContext::load_tbl_index_list() {
  return getRuleContexts<MySqlParser::Load_tbl_index_listContext>();
}

MySqlParser::Load_tbl_index_listContext* MySqlParser::Load_index_into_cacheContext::load_tbl_index_list(size_t i) {
  return getRuleContext<MySqlParser::Load_tbl_index_listContext>(i);
}


size_t MySqlParser::Load_index_into_cacheContext::getRuleIndex() const {
  return MySqlParser::RuleLoad_index_into_cache;
}

void MySqlParser::Load_index_into_cacheContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoad_index_into_cache(this);
}

void MySqlParser::Load_index_into_cacheContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoad_index_into_cache(this);
}

MySqlParser::Load_index_into_cacheContext* MySqlParser::load_index_into_cache() {
  Load_index_into_cacheContext *_localctx = _tracker.createInstance<Load_index_into_cacheContext>(_ctx, getState());
  enterRule(_localctx, 428, MySqlParser::RuleLoad_index_into_cache);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4875);
    match(MySqlParser::LOAD);
    setState(4876);
    match(MySqlParser::INDEX);
    setState(4877);
    match(MySqlParser::INTO);
    setState(4878);
    match(MySqlParser::CACHE);
    setState(4879);
    load_tbl_index_list();
    setState(4884);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(4880);
      match(MySqlParser::COMMA);
      setState(4881);
      load_tbl_index_list();
      setState(4886);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reset_statementContext ------------------------------------------------------------------

MySqlParser::Reset_statementContext::Reset_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Reset_statementContext::RESET() {
  return getToken(MySqlParser::RESET, 0);
}

tree::TerminalNode* MySqlParser::Reset_statementContext::QUERY() {
  return getToken(MySqlParser::QUERY, 0);
}

tree::TerminalNode* MySqlParser::Reset_statementContext::CACHE() {
  return getToken(MySqlParser::CACHE, 0);
}


size_t MySqlParser::Reset_statementContext::getRuleIndex() const {
  return MySqlParser::RuleReset_statement;
}

void MySqlParser::Reset_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReset_statement(this);
}

void MySqlParser::Reset_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReset_statement(this);
}

MySqlParser::Reset_statementContext* MySqlParser::reset_statement() {
  Reset_statementContext *_localctx = _tracker.createInstance<Reset_statementContext>(_ctx, getState());
  enterRule(_localctx, 430, MySqlParser::RuleReset_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4887);
    match(MySqlParser::RESET);
    setState(4888);
    match(MySqlParser::QUERY);
    setState(4889);
    match(MySqlParser::CACHE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Shutdown_statementContext ------------------------------------------------------------------

MySqlParser::Shutdown_statementContext::Shutdown_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Shutdown_statementContext::SHUTDOWN() {
  return getToken(MySqlParser::SHUTDOWN, 0);
}


size_t MySqlParser::Shutdown_statementContext::getRuleIndex() const {
  return MySqlParser::RuleShutdown_statement;
}

void MySqlParser::Shutdown_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShutdown_statement(this);
}

void MySqlParser::Shutdown_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShutdown_statement(this);
}

MySqlParser::Shutdown_statementContext* MySqlParser::shutdown_statement() {
  Shutdown_statementContext *_localctx = _tracker.createInstance<Shutdown_statementContext>(_ctx, getState());
  enterRule(_localctx, 432, MySqlParser::RuleShutdown_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4891);
    match(MySqlParser::SHUTDOWN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tbl_index_listContext ------------------------------------------------------------------

MySqlParser::Tbl_index_listContext::Tbl_index_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Table_nameContext* MySqlParser::Tbl_index_listContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

MySqlParser::Id_listContext* MySqlParser::Tbl_index_listContext::id_list() {
  return getRuleContext<MySqlParser::Id_listContext>(0);
}

tree::TerminalNode* MySqlParser::Tbl_index_listContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::Tbl_index_listContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}


size_t MySqlParser::Tbl_index_listContext::getRuleIndex() const {
  return MySqlParser::RuleTbl_index_list;
}

void MySqlParser::Tbl_index_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTbl_index_list(this);
}

void MySqlParser::Tbl_index_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTbl_index_list(this);
}

MySqlParser::Tbl_index_listContext* MySqlParser::tbl_index_list() {
  Tbl_index_listContext *_localctx = _tracker.createInstance<Tbl_index_listContext>(_ctx, getState());
  enterRule(_localctx, 434, MySqlParser::RuleTbl_index_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4893);
    table_name();
    setState(4901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INDEX

    || _la == MySqlParser::KEY || _la == MySqlParser::LR_BRACKET) {
      setState(4895);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY) {
        setState(4894);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(4897);
      match(MySqlParser::LR_BRACKET);
      setState(4898);
      id_list();
      setState(4899);
      match(MySqlParser::RR_BRACKET);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flush_optionContext ------------------------------------------------------------------

MySqlParser::Flush_optionContext::Flush_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Flush_optionContext::DES_KEY_FILE() {
  return getToken(MySqlParser::DES_KEY_FILE, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::HOSTS() {
  return getToken(MySqlParser::HOSTS, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::LOGS() {
  return getToken(MySqlParser::LOGS, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::ERROR() {
  return getToken(MySqlParser::ERROR, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::GENERAL() {
  return getToken(MySqlParser::GENERAL, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::RELAY() {
  return getToken(MySqlParser::RELAY, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::SLOW() {
  return getToken(MySqlParser::SLOW, 0);
}

MySqlParser::Channel_optionContext* MySqlParser::Flush_optionContext::channel_option() {
  return getRuleContext<MySqlParser::Channel_optionContext>(0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::OPTIMIZER_COSTS() {
  return getToken(MySqlParser::OPTIMIZER_COSTS, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::PRIVILEGES() {
  return getToken(MySqlParser::PRIVILEGES, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::QUERY() {
  return getToken(MySqlParser::QUERY, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::CACHE() {
  return getToken(MySqlParser::CACHE, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::USER_RESOURCES() {
  return getToken(MySqlParser::USER_RESOURCES, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::WITH() {
  return getToken(MySqlParser::WITH, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::READ() {
  return getToken(MySqlParser::READ, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::LOCK() {
  return getToken(MySqlParser::LOCK, 0);
}

MySqlParser::Table_listContext* MySqlParser::Flush_optionContext::table_list() {
  return getRuleContext<MySqlParser::Table_listContext>(0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::Flush_optionContext::EXPORT() {
  return getToken(MySqlParser::EXPORT, 0);
}


size_t MySqlParser::Flush_optionContext::getRuleIndex() const {
  return MySqlParser::RuleFlush_option;
}

void MySqlParser::Flush_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlush_option(this);
}

void MySqlParser::Flush_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlush_option(this);
}

MySqlParser::Flush_optionContext* MySqlParser::flush_option() {
  Flush_optionContext *_localctx = _tracker.createInstance<Flush_optionContext>(_ctx, getState());
  enterRule(_localctx, 436, MySqlParser::RuleFlush_option);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4935);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 721, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4903);
      match(MySqlParser::DES_KEY_FILE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4904);
      match(MySqlParser::HOSTS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4906);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::BINARY || ((((_la - 308) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 308)) & ((1ULL << (MySqlParser::ENGINE - 308))
        | (1ULL << (MySqlParser::ERROR - 308))
        | (1ULL << (MySqlParser::GENERAL - 308)))) != 0) || _la == MySqlParser::RELAY

      || _la == MySqlParser::SLOW) {
        setState(4905);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::BINARY || ((((_la - 308) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 308)) & ((1ULL << (MySqlParser::ENGINE - 308))
          | (1ULL << (MySqlParser::ERROR - 308))
          | (1ULL << (MySqlParser::GENERAL - 308)))) != 0) || _la == MySqlParser::RELAY

        || _la == MySqlParser::SLOW)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(4908);
      match(MySqlParser::LOGS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4909);
      match(MySqlParser::RELAY);
      setState(4910);
      match(MySqlParser::LOGS);
      setState(4912);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(4911);
        channel_option();
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4914);
      match(MySqlParser::OPTIMIZER_COSTS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4915);
      match(MySqlParser::PRIVILEGES);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(4916);
      match(MySqlParser::QUERY);
      setState(4917);
      match(MySqlParser::CACHE);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(4918);
      match(MySqlParser::STATUS);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(4919);
      match(MySqlParser::USER_RESOURCES);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(4920);
      match(MySqlParser::TABLES);
      setState(4924);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::WITH) {
        setState(4921);
        match(MySqlParser::WITH);
        setState(4922);
        match(MySqlParser::READ);
        setState(4923);
        match(MySqlParser::LOCK);
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(4926);
      match(MySqlParser::TABLES);
      setState(4927);
      table_list();
      setState(4933);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::WITH: {
          setState(4928);
          match(MySqlParser::WITH);
          setState(4929);
          match(MySqlParser::READ);
          setState(4930);
          match(MySqlParser::LOCK);
          break;
        }

        case MySqlParser::FOR: {
          setState(4931);
          match(MySqlParser::FOR);
          setState(4932);
          match(MySqlParser::EXPORT);
          break;
        }

        case MySqlParser::EOF:
        case MySqlParser::MINUS:
        case MySqlParser::COMMA:
        case MySqlParser::SEMI: {
          break;
        }

      default:
        break;
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Load_tbl_index_listContext ------------------------------------------------------------------

MySqlParser::Load_tbl_index_listContext::Load_tbl_index_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Table_nameContext* MySqlParser::Load_tbl_index_listContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Load_tbl_index_listContext::PARTITION() {
  return getToken(MySqlParser::PARTITION, 0);
}

tree::TerminalNode* MySqlParser::Load_tbl_index_listContext::IGNORE() {
  return getToken(MySqlParser::IGNORE, 0);
}

tree::TerminalNode* MySqlParser::Load_tbl_index_listContext::LEAVES() {
  return getToken(MySqlParser::LEAVES, 0);
}

std::vector<MySqlParser::Id_listContext *> MySqlParser::Load_tbl_index_listContext::id_list() {
  return getRuleContexts<MySqlParser::Id_listContext>();
}

MySqlParser::Id_listContext* MySqlParser::Load_tbl_index_listContext::id_list(size_t i) {
  return getRuleContext<MySqlParser::Id_listContext>(i);
}

tree::TerminalNode* MySqlParser::Load_tbl_index_listContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::Load_tbl_index_listContext::INDEX() {
  return getToken(MySqlParser::INDEX, 0);
}

tree::TerminalNode* MySqlParser::Load_tbl_index_listContext::KEY() {
  return getToken(MySqlParser::KEY, 0);
}


size_t MySqlParser::Load_tbl_index_listContext::getRuleIndex() const {
  return MySqlParser::RuleLoad_tbl_index_list;
}

void MySqlParser::Load_tbl_index_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoad_tbl_index_list(this);
}

void MySqlParser::Load_tbl_index_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoad_tbl_index_list(this);
}

MySqlParser::Load_tbl_index_listContext* MySqlParser::load_tbl_index_list() {
  Load_tbl_index_listContext *_localctx = _tracker.createInstance<Load_tbl_index_listContext>(_ctx, getState());
  enterRule(_localctx, 438, MySqlParser::RuleLoad_tbl_index_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4937);
    table_name();
    setState(4945);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::PARTITION) {
      setState(4938);
      match(MySqlParser::PARTITION);
      setState(4939);
      match(MySqlParser::LR_BRACKET);
      setState(4942);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::LEFT:
        case MySqlParser::RIGHT:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::COUNT:
        case MySqlParser::POSITION:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID: {
          setState(4940);
          dynamic_cast<Load_tbl_index_listContext *>(_localctx)->partition_list = id_list();
          break;
        }

        case MySqlParser::ALL: {
          setState(4941);
          match(MySqlParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4944);
      match(MySqlParser::RR_BRACKET);
    }
    setState(4954);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::INDEX

    || _la == MySqlParser::KEY || _la == MySqlParser::LR_BRACKET) {
      setState(4948);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::INDEX

      || _la == MySqlParser::KEY) {
        setState(4947);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::INDEX

        || _la == MySqlParser::KEY)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(4950);
      match(MySqlParser::LR_BRACKET);
      setState(4951);
      dynamic_cast<Load_tbl_index_listContext *>(_localctx)->index_list = id_list();
      setState(4952);
      match(MySqlParser::RR_BRACKET);
    }
    setState(4958);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::IGNORE) {
      setState(4956);
      match(MySqlParser::IGNORE);
      setState(4957);
      match(MySqlParser::LEAVES);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_describe_statementContext ------------------------------------------------------------------

MySqlParser::Simple_describe_statementContext::Simple_describe_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Table_nameContext* MySqlParser::Simple_describe_statementContext::table_name() {
  return getRuleContext<MySqlParser::Table_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Simple_describe_statementContext::EXPLAIN() {
  return getToken(MySqlParser::EXPLAIN, 0);
}

tree::TerminalNode* MySqlParser::Simple_describe_statementContext::DESCRIBE() {
  return getToken(MySqlParser::DESCRIBE, 0);
}

tree::TerminalNode* MySqlParser::Simple_describe_statementContext::DESC() {
  return getToken(MySqlParser::DESC, 0);
}

MySqlParser::Id_Context* MySqlParser::Simple_describe_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Simple_describe_statementContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::Simple_describe_statementContext::getRuleIndex() const {
  return MySqlParser::RuleSimple_describe_statement;
}

void MySqlParser::Simple_describe_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_describe_statement(this);
}

void MySqlParser::Simple_describe_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_describe_statement(this);
}

MySqlParser::Simple_describe_statementContext* MySqlParser::simple_describe_statement() {
  Simple_describe_statementContext *_localctx = _tracker.createInstance<Simple_describe_statementContext>(_ctx, getState());
  enterRule(_localctx, 440, MySqlParser::RuleSimple_describe_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4960);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySqlParser::DESC)
      | (1ULL << MySqlParser::DESCRIBE)
      | (1ULL << MySqlParser::EXPLAIN))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4961);
    table_name();
    setState(4964);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LEFT:
      case MySqlParser::RIGHT:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::COUNT:
      case MySqlParser::POSITION:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BTREE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLIENT:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FIELDS:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::HASH:
      case MySqlParser::HOST:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IMPORT:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INVOKER:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MERGE:
      case MySqlParser::MID:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRESERVE:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATION:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STORAGE:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XML:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFOMANCE_SCHEMA:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        setState(4962);
        dynamic_cast<Simple_describe_statementContext *>(_localctx)->colname = id_();
        break;
      }

      case MySqlParser::STRING_LITERAL: {
        setState(4963);
        dynamic_cast<Simple_describe_statementContext *>(_localctx)->col_wildcard = match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::EOF:
      case MySqlParser::MINUS:
      case MySqlParser::SEMI: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Full_describe_statementContext ------------------------------------------------------------------

MySqlParser::Full_describe_statementContext::Full_describe_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Describe_object_clauseContext* MySqlParser::Full_describe_statementContext::describe_object_clause() {
  return getRuleContext<MySqlParser::Describe_object_clauseContext>(0);
}

tree::TerminalNode* MySqlParser::Full_describe_statementContext::EXPLAIN() {
  return getToken(MySqlParser::EXPLAIN, 0);
}

tree::TerminalNode* MySqlParser::Full_describe_statementContext::DESCRIBE() {
  return getToken(MySqlParser::DESCRIBE, 0);
}

tree::TerminalNode* MySqlParser::Full_describe_statementContext::DESC() {
  return getToken(MySqlParser::DESC, 0);
}

tree::TerminalNode* MySqlParser::Full_describe_statementContext::EXTENDED() {
  return getToken(MySqlParser::EXTENDED, 0);
}

tree::TerminalNode* MySqlParser::Full_describe_statementContext::PARTITIONS() {
  return getToken(MySqlParser::PARTITIONS, 0);
}

tree::TerminalNode* MySqlParser::Full_describe_statementContext::FORMAT() {
  return getToken(MySqlParser::FORMAT, 0);
}

tree::TerminalNode* MySqlParser::Full_describe_statementContext::TRADITIONAL() {
  return getToken(MySqlParser::TRADITIONAL, 0);
}

tree::TerminalNode* MySqlParser::Full_describe_statementContext::JSON() {
  return getToken(MySqlParser::JSON, 0);
}


size_t MySqlParser::Full_describe_statementContext::getRuleIndex() const {
  return MySqlParser::RuleFull_describe_statement;
}

void MySqlParser::Full_describe_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFull_describe_statement(this);
}

void MySqlParser::Full_describe_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFull_describe_statement(this);
}

MySqlParser::Full_describe_statementContext* MySqlParser::full_describe_statement() {
  Full_describe_statementContext *_localctx = _tracker.createInstance<Full_describe_statementContext>(_ctx, getState());
  enterRule(_localctx, 442, MySqlParser::RuleFull_describe_statement);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4966);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << MySqlParser::DESC)
      | (1ULL << MySqlParser::DESCRIBE)
      | (1ULL << MySqlParser::EXPLAIN))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4972);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::EXTENDED: {
        setState(4967);
        match(MySqlParser::EXTENDED);
        break;
      }

      case MySqlParser::PARTITIONS: {
        setState(4968);
        match(MySqlParser::PARTITIONS);
        break;
      }

      case MySqlParser::FORMAT: {
        setState(4969);
        match(MySqlParser::FORMAT);
        setState(4970);
        match(MySqlParser::EQUAL_SYMBOL);
        setState(4971);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::JSON || _la == MySqlParser::TRADITIONAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::DELETE:
      case MySqlParser::FOR:
      case MySqlParser::INSERT:
      case MySqlParser::REPLACE:
      case MySqlParser::SELECT:
      case MySqlParser::UPDATE:
      case MySqlParser::LR_BRACKET: {
        break;
      }

    default:
      break;
    }
    setState(4974);
    describe_object_clause();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Help_statementContext ------------------------------------------------------------------

MySqlParser::Help_statementContext::Help_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Help_statementContext::HELP() {
  return getToken(MySqlParser::HELP, 0);
}

tree::TerminalNode* MySqlParser::Help_statementContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::Help_statementContext::getRuleIndex() const {
  return MySqlParser::RuleHelp_statement;
}

void MySqlParser::Help_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHelp_statement(this);
}

void MySqlParser::Help_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHelp_statement(this);
}

MySqlParser::Help_statementContext* MySqlParser::help_statement() {
  Help_statementContext *_localctx = _tracker.createInstance<Help_statementContext>(_ctx, getState());
  enterRule(_localctx, 444, MySqlParser::RuleHelp_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4976);
    match(MySqlParser::HELP);
    setState(4977);
    match(MySqlParser::STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Use_statementContext ------------------------------------------------------------------

MySqlParser::Use_statementContext::Use_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Use_statementContext::USE() {
  return getToken(MySqlParser::USE, 0);
}

MySqlParser::Id_Context* MySqlParser::Use_statementContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}


size_t MySqlParser::Use_statementContext::getRuleIndex() const {
  return MySqlParser::RuleUse_statement;
}

void MySqlParser::Use_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUse_statement(this);
}

void MySqlParser::Use_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUse_statement(this);
}

MySqlParser::Use_statementContext* MySqlParser::use_statement() {
  Use_statementContext *_localctx = _tracker.createInstance<Use_statementContext>(_ctx, getState());
  enterRule(_localctx, 446, MySqlParser::RuleUse_statement);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4979);
    match(MySqlParser::USE);
    setState(4980);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Describe_object_clauseContext ------------------------------------------------------------------

MySqlParser::Describe_object_clauseContext::Describe_object_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Describe_object_clauseContext::getRuleIndex() const {
  return MySqlParser::RuleDescribe_object_clause;
}

void MySqlParser::Describe_object_clauseContext::copyFrom(Describe_object_clauseContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ConnectionDescObjContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ConnectionDescObjContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

tree::TerminalNode* MySqlParser::ConnectionDescObjContext::CONNECTION() {
  return getToken(MySqlParser::CONNECTION, 0);
}

MySqlParser::Id_Context* MySqlParser::ConnectionDescObjContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::ConnectionDescObjContext::ConnectionDescObjContext(Describe_object_clauseContext *ctx) { copyFrom(ctx); }

void MySqlParser::ConnectionDescObjContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnectionDescObj(this);
}
void MySqlParser::ConnectionDescObjContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnectionDescObj(this);
}
//----------------- DescstmtDescObjContext ------------------------------------------------------------------

MySqlParser::Select_statementContext* MySqlParser::DescstmtDescObjContext::select_statement() {
  return getRuleContext<MySqlParser::Select_statementContext>(0);
}

MySqlParser::Delete_statementContext* MySqlParser::DescstmtDescObjContext::delete_statement() {
  return getRuleContext<MySqlParser::Delete_statementContext>(0);
}

MySqlParser::Insert_statementContext* MySqlParser::DescstmtDescObjContext::insert_statement() {
  return getRuleContext<MySqlParser::Insert_statementContext>(0);
}

MySqlParser::Replace_statementContext* MySqlParser::DescstmtDescObjContext::replace_statement() {
  return getRuleContext<MySqlParser::Replace_statementContext>(0);
}

MySqlParser::Update_statementContext* MySqlParser::DescstmtDescObjContext::update_statement() {
  return getRuleContext<MySqlParser::Update_statementContext>(0);
}

MySqlParser::DescstmtDescObjContext::DescstmtDescObjContext(Describe_object_clauseContext *ctx) { copyFrom(ctx); }

void MySqlParser::DescstmtDescObjContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDescstmtDescObj(this);
}
void MySqlParser::DescstmtDescObjContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDescstmtDescObj(this);
}
MySqlParser::Describe_object_clauseContext* MySqlParser::describe_object_clause() {
  Describe_object_clauseContext *_localctx = _tracker.createInstance<Describe_object_clauseContext>(_ctx, getState());
  enterRule(_localctx, 448, MySqlParser::RuleDescribe_object_clause);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(4992);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::DELETE:
      case MySqlParser::INSERT:
      case MySqlParser::REPLACE:
      case MySqlParser::SELECT:
      case MySqlParser::UPDATE:
      case MySqlParser::LR_BRACKET: {
        _localctx = dynamic_cast<Describe_object_clauseContext *>(_tracker.createInstance<MySqlParser::DescstmtDescObjContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(4987);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case MySqlParser::SELECT:
          case MySqlParser::LR_BRACKET: {
            setState(4982);
            select_statement();
            break;
          }

          case MySqlParser::DELETE: {
            setState(4983);
            delete_statement();
            break;
          }

          case MySqlParser::INSERT: {
            setState(4984);
            insert_statement();
            break;
          }

          case MySqlParser::REPLACE: {
            setState(4985);
            replace_statement();
            break;
          }

          case MySqlParser::UPDATE: {
            setState(4986);
            update_statement();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case MySqlParser::FOR: {
        _localctx = dynamic_cast<Describe_object_clauseContext *>(_tracker.createInstance<MySqlParser::ConnectionDescObjContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(4989);
        match(MySqlParser::FOR);
        setState(4990);
        match(MySqlParser::CONNECTION);
        setState(4991);
        id_();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_nameContext ------------------------------------------------------------------

MySqlParser::Table_nameContext::Table_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Id_Context *> MySqlParser::Table_nameContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::Table_nameContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

tree::TerminalNode* MySqlParser::Table_nameContext::DOT_ID() {
  return getToken(MySqlParser::DOT_ID, 0);
}


size_t MySqlParser::Table_nameContext::getRuleIndex() const {
  return MySqlParser::RuleTable_name;
}

void MySqlParser::Table_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_name(this);
}

void MySqlParser::Table_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_name(this);
}

MySqlParser::Table_nameContext* MySqlParser::table_name() {
  Table_nameContext *_localctx = _tracker.createInstance<Table_nameContext>(_ctx, getState());
  enterRule(_localctx, 450, MySqlParser::RuleTable_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4994);
    id_();
    setState(4998);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 731, _ctx)) {
    case 1: {
      setState(4995);
      match(MySqlParser::DOT_ID);
      break;
    }

    case 2: {
      setState(4996);
      match(MySqlParser::DOT);
      setState(4997);
      id_();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Full_idContext ------------------------------------------------------------------

MySqlParser::Full_idContext::Full_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Id_Context *> MySqlParser::Full_idContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::Full_idContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}

tree::TerminalNode* MySqlParser::Full_idContext::DOT_ID() {
  return getToken(MySqlParser::DOT_ID, 0);
}


size_t MySqlParser::Full_idContext::getRuleIndex() const {
  return MySqlParser::RuleFull_id;
}

void MySqlParser::Full_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFull_id(this);
}

void MySqlParser::Full_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFull_id(this);
}

MySqlParser::Full_idContext* MySqlParser::full_id() {
  Full_idContext *_localctx = _tracker.createInstance<Full_idContext>(_ctx, getState());
  enterRule(_localctx, 452, MySqlParser::RuleFull_id);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5000);
    id_();
    setState(5004);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 732, _ctx)) {
    case 1: {
      setState(5001);
      match(MySqlParser::DOT_ID);
      break;
    }

    case 2: {
      setState(5002);
      match(MySqlParser::DOT);
      setState(5003);
      id_();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Full_column_nameContext ------------------------------------------------------------------

MySqlParser::Full_column_nameContext::Full_column_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Id_Context* MySqlParser::Full_column_nameContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

std::vector<MySqlParser::Dot_ext_idContext *> MySqlParser::Full_column_nameContext::dot_ext_id() {
  return getRuleContexts<MySqlParser::Dot_ext_idContext>();
}

MySqlParser::Dot_ext_idContext* MySqlParser::Full_column_nameContext::dot_ext_id(size_t i) {
  return getRuleContext<MySqlParser::Dot_ext_idContext>(i);
}


size_t MySqlParser::Full_column_nameContext::getRuleIndex() const {
  return MySqlParser::RuleFull_column_name;
}

void MySqlParser::Full_column_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFull_column_name(this);
}

void MySqlParser::Full_column_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFull_column_name(this);
}

MySqlParser::Full_column_nameContext* MySqlParser::full_column_name() {
  Full_column_nameContext *_localctx = _tracker.createInstance<Full_column_nameContext>(_ctx, getState());
  enterRule(_localctx, 454, MySqlParser::RuleFull_column_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5006);
    id_();
    setState(5011);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 734, _ctx)) {
    case 1: {
      setState(5007);
      dot_ext_id();
      setState(5009);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 733, _ctx)) {
      case 1: {
        setState(5008);
        dot_ext_id();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_col_nameContext ------------------------------------------------------------------

MySqlParser::Index_col_nameContext::Index_col_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Id_Context* MySqlParser::Index_col_nameContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::Decimal_literalContext* MySqlParser::Index_col_nameContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

tree::TerminalNode* MySqlParser::Index_col_nameContext::ASC() {
  return getToken(MySqlParser::ASC, 0);
}

tree::TerminalNode* MySqlParser::Index_col_nameContext::DESC() {
  return getToken(MySqlParser::DESC, 0);
}


size_t MySqlParser::Index_col_nameContext::getRuleIndex() const {
  return MySqlParser::RuleIndex_col_name;
}

void MySqlParser::Index_col_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_col_name(this);
}

void MySqlParser::Index_col_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_col_name(this);
}

MySqlParser::Index_col_nameContext* MySqlParser::index_col_name() {
  Index_col_nameContext *_localctx = _tracker.createInstance<Index_col_nameContext>(_ctx, getState());
  enterRule(_localctx, 456, MySqlParser::RuleIndex_col_name);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5013);
    id_();
    setState(5018);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::LR_BRACKET) {
      setState(5014);
      match(MySqlParser::LR_BRACKET);
      setState(5015);
      decimal_literal();
      setState(5016);
      match(MySqlParser::RR_BRACKET);
    }
    setState(5021);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::ASC

    || _la == MySqlParser::DESC) {
      setState(5020);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::ASC

      || _la == MySqlParser::DESC)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- User_nameContext ------------------------------------------------------------------

MySqlParser::User_nameContext::User_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::User_nameContext::STRING_USER_NAME() {
  return getToken(MySqlParser::STRING_USER_NAME, 0);
}


size_t MySqlParser::User_nameContext::getRuleIndex() const {
  return MySqlParser::RuleUser_name;
}

void MySqlParser::User_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUser_name(this);
}

void MySqlParser::User_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUser_name(this);
}

MySqlParser::User_nameContext* MySqlParser::user_name() {
  User_nameContext *_localctx = _tracker.createInstance<User_nameContext>(_ctx, getState());
  enterRule(_localctx, 458, MySqlParser::RuleUser_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5023);
    match(MySqlParser::STRING_USER_NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mysql_variableContext ------------------------------------------------------------------

MySqlParser::Mysql_variableContext::Mysql_variableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Mysql_variableContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySqlParser::Mysql_variableContext::GLOBAL_ID() {
  return getToken(MySqlParser::GLOBAL_ID, 0);
}


size_t MySqlParser::Mysql_variableContext::getRuleIndex() const {
  return MySqlParser::RuleMysql_variable;
}

void MySqlParser::Mysql_variableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMysql_variable(this);
}

void MySqlParser::Mysql_variableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMysql_variable(this);
}

MySqlParser::Mysql_variableContext* MySqlParser::mysql_variable() {
  Mysql_variableContext *_localctx = _tracker.createInstance<Mysql_variableContext>(_ctx, getState());
  enterRule(_localctx, 460, MySqlParser::RuleMysql_variable);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5025);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::LOCAL_ID

    || _la == MySqlParser::GLOBAL_ID)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Charset_nameContext ------------------------------------------------------------------

MySqlParser::Charset_nameContext::Charset_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Charset_nameContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

MySqlParser::Charset_name_baseContext* MySqlParser::Charset_nameContext::charset_name_base() {
  return getRuleContext<MySqlParser::Charset_name_baseContext>(0);
}

tree::TerminalNode* MySqlParser::Charset_nameContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Charset_nameContext::CHARSET_REVERSE_QOUTE_STRING() {
  return getToken(MySqlParser::CHARSET_REVERSE_QOUTE_STRING, 0);
}


size_t MySqlParser::Charset_nameContext::getRuleIndex() const {
  return MySqlParser::RuleCharset_name;
}

void MySqlParser::Charset_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharset_name(this);
}

void MySqlParser::Charset_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharset_name(this);
}

MySqlParser::Charset_nameContext* MySqlParser::charset_name() {
  Charset_nameContext *_localctx = _tracker.createInstance<Charset_nameContext>(_ctx, getState());
  enterRule(_localctx, 462, MySqlParser::RuleCharset_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5031);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::BINARY: {
        enterOuterAlt(_localctx, 1);
        setState(5027);
        match(MySqlParser::BINARY);
        break;
      }

      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4: {
        enterOuterAlt(_localctx, 2);
        setState(5028);
        charset_name_base();
        break;
      }

      case MySqlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(5029);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING: {
        enterOuterAlt(_localctx, 4);
        setState(5030);
        match(MySqlParser::CHARSET_REVERSE_QOUTE_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Collation_nameContext ------------------------------------------------------------------

MySqlParser::Collation_nameContext::Collation_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Id_Context* MySqlParser::Collation_nameContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Collation_nameContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::Collation_nameContext::getRuleIndex() const {
  return MySqlParser::RuleCollation_name;
}

void MySqlParser::Collation_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollation_name(this);
}

void MySqlParser::Collation_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollation_name(this);
}

MySqlParser::Collation_nameContext* MySqlParser::collation_name() {
  Collation_nameContext *_localctx = _tracker.createInstance<Collation_nameContext>(_ctx, getState());
  enterRule(_localctx, 464, MySqlParser::RuleCollation_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5035);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LEFT:
      case MySqlParser::RIGHT:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::COUNT:
      case MySqlParser::POSITION:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BTREE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLIENT:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FIELDS:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::HASH:
      case MySqlParser::HOST:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IMPORT:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INVOKER:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MERGE:
      case MySqlParser::MID:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRESERVE:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATION:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STORAGE:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XML:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFOMANCE_SCHEMA:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        enterOuterAlt(_localctx, 1);
        setState(5033);
        id_();
        break;
      }

      case MySqlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(5034);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Engine_nameContext ------------------------------------------------------------------

MySqlParser::Engine_nameContext::Engine_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Engine_nameContext::ARCHIVE() {
  return getToken(MySqlParser::ARCHIVE, 0);
}

tree::TerminalNode* MySqlParser::Engine_nameContext::BLACKHOLE() {
  return getToken(MySqlParser::BLACKHOLE, 0);
}

tree::TerminalNode* MySqlParser::Engine_nameContext::CSV() {
  return getToken(MySqlParser::CSV, 0);
}

tree::TerminalNode* MySqlParser::Engine_nameContext::FEDERATED() {
  return getToken(MySqlParser::FEDERATED, 0);
}

tree::TerminalNode* MySqlParser::Engine_nameContext::INNODB() {
  return getToken(MySqlParser::INNODB, 0);
}

tree::TerminalNode* MySqlParser::Engine_nameContext::MEMORY() {
  return getToken(MySqlParser::MEMORY, 0);
}

tree::TerminalNode* MySqlParser::Engine_nameContext::MRG_MYISAM() {
  return getToken(MySqlParser::MRG_MYISAM, 0);
}

tree::TerminalNode* MySqlParser::Engine_nameContext::MYISAM() {
  return getToken(MySqlParser::MYISAM, 0);
}

tree::TerminalNode* MySqlParser::Engine_nameContext::NDB() {
  return getToken(MySqlParser::NDB, 0);
}

tree::TerminalNode* MySqlParser::Engine_nameContext::NDBCLUSTER() {
  return getToken(MySqlParser::NDBCLUSTER, 0);
}

tree::TerminalNode* MySqlParser::Engine_nameContext::PERFOMANCE_SCHEMA() {
  return getToken(MySqlParser::PERFOMANCE_SCHEMA, 0);
}


size_t MySqlParser::Engine_nameContext::getRuleIndex() const {
  return MySqlParser::RuleEngine_name;
}

void MySqlParser::Engine_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEngine_name(this);
}

void MySqlParser::Engine_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEngine_name(this);
}

MySqlParser::Engine_nameContext* MySqlParser::engine_name() {
  Engine_nameContext *_localctx = _tracker.createInstance<Engine_nameContext>(_ctx, getState());
  enterRule(_localctx, 466, MySqlParser::RuleEngine_name);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5037);
    _la = _input->LA(1);
    if (!(((((_la - 606) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 606)) & ((1ULL << (MySqlParser::ARCHIVE - 606))
      | (1ULL << (MySqlParser::BLACKHOLE - 606))
      | (1ULL << (MySqlParser::CSV - 606))
      | (1ULL << (MySqlParser::FEDERATED - 606))
      | (1ULL << (MySqlParser::INNODB - 606))
      | (1ULL << (MySqlParser::MEMORY - 606))
      | (1ULL << (MySqlParser::MRG_MYISAM - 606))
      | (1ULL << (MySqlParser::MYISAM - 606))
      | (1ULL << (MySqlParser::NDB - 606))
      | (1ULL << (MySqlParser::NDBCLUSTER - 606))
      | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 606)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Uuid_setContext ------------------------------------------------------------------

MySqlParser::Uuid_setContext::Uuid_setContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::Uuid_setContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::Uuid_setContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}


size_t MySqlParser::Uuid_setContext::getRuleIndex() const {
  return MySqlParser::RuleUuid_set;
}

void MySqlParser::Uuid_setContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUuid_set(this);
}

void MySqlParser::Uuid_setContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUuid_set(this);
}

MySqlParser::Uuid_setContext* MySqlParser::uuid_set() {
  Uuid_setContext *_localctx = _tracker.createInstance<Uuid_setContext>(_ctx, getState());
  enterRule(_localctx, 468, MySqlParser::RuleUuid_set);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5039);
    decimal_literal();
    setState(5040);
    match(MySqlParser::MINUS);
    setState(5041);
    decimal_literal();
    setState(5042);
    match(MySqlParser::MINUS);
    setState(5043);
    decimal_literal();
    setState(5044);
    match(MySqlParser::MINUS);
    setState(5045);
    decimal_literal();
    setState(5046);
    match(MySqlParser::MINUS);
    setState(5047);
    decimal_literal();
    setState(5053); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5048);
      match(MySqlParser::COLON_SYMB);
      setState(5049);
      decimal_literal();
      setState(5050);
      match(MySqlParser::MINUS);
      setState(5051);
      decimal_literal();
      setState(5055); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == MySqlParser::COLON_SYMB);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- XidContext ------------------------------------------------------------------

MySqlParser::XidContext::XidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Xid_string_idContext *> MySqlParser::XidContext::xid_string_id() {
  return getRuleContexts<MySqlParser::Xid_string_idContext>();
}

MySqlParser::Xid_string_idContext* MySqlParser::XidContext::xid_string_id(size_t i) {
  return getRuleContext<MySqlParser::Xid_string_idContext>(i);
}

MySqlParser::Decimal_literalContext* MySqlParser::XidContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}


size_t MySqlParser::XidContext::getRuleIndex() const {
  return MySqlParser::RuleXid;
}

void MySqlParser::XidContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXid(this);
}

void MySqlParser::XidContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXid(this);
}

MySqlParser::XidContext* MySqlParser::xid() {
  XidContext *_localctx = _tracker.createInstance<XidContext>(_ctx, getState());
  enterRule(_localctx, 470, MySqlParser::RuleXid);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5057);
    dynamic_cast<XidContext *>(_localctx)->xid_gtrid = xid_string_id();
    setState(5064);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMA) {
      setState(5058);
      match(MySqlParser::COMMA);
      setState(5059);
      dynamic_cast<XidContext *>(_localctx)->xid_bqual = xid_string_id();
      setState(5062);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::COMMA) {
        setState(5060);
        match(MySqlParser::COMMA);
        setState(5061);
        dynamic_cast<XidContext *>(_localctx)->xid_formatID = decimal_literal();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xid_string_idContext ------------------------------------------------------------------

MySqlParser::Xid_string_idContext::Xid_string_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Xid_string_idContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Xid_string_idContext::BIT_STRING() {
  return getToken(MySqlParser::BIT_STRING, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::Xid_string_idContext::HEXADECIMAL_LITERAL() {
  return getTokens(MySqlParser::HEXADECIMAL_LITERAL);
}

tree::TerminalNode* MySqlParser::Xid_string_idContext::HEXADECIMAL_LITERAL(size_t i) {
  return getToken(MySqlParser::HEXADECIMAL_LITERAL, i);
}


size_t MySqlParser::Xid_string_idContext::getRuleIndex() const {
  return MySqlParser::RuleXid_string_id;
}

void MySqlParser::Xid_string_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXid_string_id(this);
}

void MySqlParser::Xid_string_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXid_string_id(this);
}

MySqlParser::Xid_string_idContext* MySqlParser::xid_string_id() {
  Xid_string_idContext *_localctx = _tracker.createInstance<Xid_string_idContext>(_ctx, getState());
  enterRule(_localctx, 472, MySqlParser::RuleXid_string_id);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5073);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(5066);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

      case MySqlParser::BIT_STRING: {
        enterOuterAlt(_localctx, 2);
        setState(5067);
        match(MySqlParser::BIT_STRING);
        break;
      }

      case MySqlParser::HEXADECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(5069); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(5068);
          match(MySqlParser::HEXADECIMAL_LITERAL);
          setState(5071); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == MySqlParser::HEXADECIMAL_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Auth_pluginContext ------------------------------------------------------------------

MySqlParser::Auth_pluginContext::Auth_pluginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Id_Context* MySqlParser::Auth_pluginContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

tree::TerminalNode* MySqlParser::Auth_pluginContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::Auth_pluginContext::getRuleIndex() const {
  return MySqlParser::RuleAuth_plugin;
}

void MySqlParser::Auth_pluginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAuth_plugin(this);
}

void MySqlParser::Auth_pluginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAuth_plugin(this);
}

MySqlParser::Auth_pluginContext* MySqlParser::auth_plugin() {
  Auth_pluginContext *_localctx = _tracker.createInstance<Auth_pluginContext>(_ctx, getState());
  enterRule(_localctx, 474, MySqlParser::RuleAuth_plugin);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5077);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LEFT:
      case MySqlParser::RIGHT:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::COUNT:
      case MySqlParser::POSITION:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BTREE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLIENT:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FIELDS:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::HASH:
      case MySqlParser::HOST:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IMPORT:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INVOKER:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MERGE:
      case MySqlParser::MID:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRESERVE:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATION:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STORAGE:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XML:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFOMANCE_SCHEMA:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
      case MySqlParser::ID:
      case MySqlParser::REVERSE_QUOTE_ID: {
        enterOuterAlt(_localctx, 1);
        setState(5075);
        id_();
        break;
      }

      case MySqlParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(5076);
        match(MySqlParser::STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Id_Context ------------------------------------------------------------------

MySqlParser::Id_Context::Id_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Simple_idContext* MySqlParser::Id_Context::simple_id() {
  return getRuleContext<MySqlParser::Simple_idContext>(0);
}

tree::TerminalNode* MySqlParser::Id_Context::REVERSE_QUOTE_ID() {
  return getToken(MySqlParser::REVERSE_QUOTE_ID, 0);
}

tree::TerminalNode* MySqlParser::Id_Context::CHARSET_REVERSE_QOUTE_STRING() {
  return getToken(MySqlParser::CHARSET_REVERSE_QOUTE_STRING, 0);
}


size_t MySqlParser::Id_Context::getRuleIndex() const {
  return MySqlParser::RuleId_;
}

void MySqlParser::Id_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterId_(this);
}

void MySqlParser::Id_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitId_(this);
}

MySqlParser::Id_Context* MySqlParser::id_() {
  Id_Context *_localctx = _tracker.createInstance<Id_Context>(_ctx, getState());
  enterRule(_localctx, 476, MySqlParser::RuleId_);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5082);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LEFT:
      case MySqlParser::RIGHT:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::YEAR:
      case MySqlParser::TEXT:
      case MySqlParser::ENUM:
      case MySqlParser::COUNT:
      case MySqlParser::POSITION:
      case MySqlParser::ACTION:
      case MySqlParser::AFTER:
      case MySqlParser::ALGORITHM:
      case MySqlParser::ANY:
      case MySqlParser::AT:
      case MySqlParser::AUTHORS:
      case MySqlParser::AUTOCOMMIT:
      case MySqlParser::AUTOEXTEND_SIZE:
      case MySqlParser::AUTO_INCREMENT:
      case MySqlParser::AVG_ROW_LENGTH:
      case MySqlParser::BEGIN:
      case MySqlParser::BINLOG:
      case MySqlParser::BIT:
      case MySqlParser::BTREE:
      case MySqlParser::CASCADED:
      case MySqlParser::CHAIN:
      case MySqlParser::CHECKSUM:
      case MySqlParser::CIPHER:
      case MySqlParser::CLIENT:
      case MySqlParser::COALESCE:
      case MySqlParser::CODE:
      case MySqlParser::COLUMNS:
      case MySqlParser::COLUMN_FORMAT:
      case MySqlParser::COMMENT:
      case MySqlParser::COMMIT:
      case MySqlParser::COMPACT:
      case MySqlParser::COMPLETION:
      case MySqlParser::COMPRESSED:
      case MySqlParser::CONCURRENT:
      case MySqlParser::CONNECTION:
      case MySqlParser::CONSISTENT:
      case MySqlParser::CONTAINS:
      case MySqlParser::CONTRIBUTORS:
      case MySqlParser::COPY:
      case MySqlParser::DATA:
      case MySqlParser::DATAFILE:
      case MySqlParser::DEFINER:
      case MySqlParser::DELAY_KEY_WRITE:
      case MySqlParser::DIRECTORY:
      case MySqlParser::DISABLE:
      case MySqlParser::DISCARD:
      case MySqlParser::DISK:
      case MySqlParser::DO:
      case MySqlParser::DUMPFILE:
      case MySqlParser::DUPLICATE:
      case MySqlParser::DYNAMIC:
      case MySqlParser::ENABLE:
      case MySqlParser::ENDS:
      case MySqlParser::ENGINE:
      case MySqlParser::ENGINES:
      case MySqlParser::ERRORS:
      case MySqlParser::ESCAPE:
      case MySqlParser::EVEN:
      case MySqlParser::EVENT:
      case MySqlParser::EVENTS:
      case MySqlParser::EVERY:
      case MySqlParser::EXCHANGE:
      case MySqlParser::EXCLUSIVE:
      case MySqlParser::EXPIRE:
      case MySqlParser::EXTENT_SIZE:
      case MySqlParser::FIELDS:
      case MySqlParser::FIRST:
      case MySqlParser::FIXED:
      case MySqlParser::FULL:
      case MySqlParser::FUNCTION:
      case MySqlParser::GLOBAL:
      case MySqlParser::GRANTS:
      case MySqlParser::HASH:
      case MySqlParser::HOST:
      case MySqlParser::IDENTIFIED:
      case MySqlParser::IMPORT:
      case MySqlParser::INITIAL_SIZE:
      case MySqlParser::INPLACE:
      case MySqlParser::INSERT_METHOD:
      case MySqlParser::INVOKER:
      case MySqlParser::ISOLATION:
      case MySqlParser::ISSUER:
      case MySqlParser::KEY_BLOCK_SIZE:
      case MySqlParser::LANGUAGE:
      case MySqlParser::LAST:
      case MySqlParser::LESS:
      case MySqlParser::LEVEL:
      case MySqlParser::LIST:
      case MySqlParser::LOCAL:
      case MySqlParser::LOGFILE:
      case MySqlParser::LOGS:
      case MySqlParser::MASTER:
      case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
      case MySqlParser::MAX_QUERIES_PER_HOUR:
      case MySqlParser::MAX_ROWS:
      case MySqlParser::MAX_SIZE:
      case MySqlParser::MAX_UPDATES_PER_HOUR:
      case MySqlParser::MAX_USER_CONNECTIONS:
      case MySqlParser::MERGE:
      case MySqlParser::MID:
      case MySqlParser::MIN_ROWS:
      case MySqlParser::MODIFY:
      case MySqlParser::MUTEX:
      case MySqlParser::MYSQL:
      case MySqlParser::NAME:
      case MySqlParser::NAMES:
      case MySqlParser::NCHAR:
      case MySqlParser::NO:
      case MySqlParser::NODEGROUP:
      case MySqlParser::NONE:
      case MySqlParser::OFFLINE:
      case MySqlParser::OFFSET:
      case MySqlParser::OJ:
      case MySqlParser::OLD_PASSWORD:
      case MySqlParser::ONLINE:
      case MySqlParser::ONLY:
      case MySqlParser::OPTIONS:
      case MySqlParser::OWNER:
      case MySqlParser::PACK_KEYS:
      case MySqlParser::PARSER:
      case MySqlParser::PARTIAL:
      case MySqlParser::PARTITIONING:
      case MySqlParser::PARTITIONS:
      case MySqlParser::PASSWORD:
      case MySqlParser::PLUGINS:
      case MySqlParser::PORT:
      case MySqlParser::PRESERVE:
      case MySqlParser::PROCESSLIST:
      case MySqlParser::PROFILE:
      case MySqlParser::PROFILES:
      case MySqlParser::PROXY:
      case MySqlParser::QUERY:
      case MySqlParser::QUICK:
      case MySqlParser::REBUILD:
      case MySqlParser::REDO_BUFFER_SIZE:
      case MySqlParser::REDUNDANT:
      case MySqlParser::RELAYLOG:
      case MySqlParser::REMOVE:
      case MySqlParser::REORGANIZE:
      case MySqlParser::REPAIR:
      case MySqlParser::REPLICATION:
      case MySqlParser::RETURNS:
      case MySqlParser::ROLLBACK:
      case MySqlParser::ROLLUP:
      case MySqlParser::ROW:
      case MySqlParser::ROWS:
      case MySqlParser::ROW_FORMAT:
      case MySqlParser::SAVEPOINT:
      case MySqlParser::SCHEDULE:
      case MySqlParser::SECURITY:
      case MySqlParser::SERVER:
      case MySqlParser::SESSION:
      case MySqlParser::SHARE:
      case MySqlParser::SHARED:
      case MySqlParser::SIGNED:
      case MySqlParser::SIMPLE:
      case MySqlParser::SLAVE:
      case MySqlParser::SNAPSHOT:
      case MySqlParser::SOCKET:
      case MySqlParser::SOME:
      case MySqlParser::SOUNDS:
      case MySqlParser::SQL_BUFFER_RESULT:
      case MySqlParser::SQL_CACHE:
      case MySqlParser::SQL_NO_CACHE:
      case MySqlParser::START:
      case MySqlParser::STARTS:
      case MySqlParser::STATS_AUTO_RECALC:
      case MySqlParser::STATS_PERSISTENT:
      case MySqlParser::STATS_SAMPLE_PAGES:
      case MySqlParser::STATUS:
      case MySqlParser::STORAGE:
      case MySqlParser::SUBJECT:
      case MySqlParser::SUBPARTITION:
      case MySqlParser::SUBPARTITIONS:
      case MySqlParser::TABLESPACE:
      case MySqlParser::TEMPORARY:
      case MySqlParser::TEMPTABLE:
      case MySqlParser::THAN:
      case MySqlParser::TRANSACTION:
      case MySqlParser::TRUNCATE:
      case MySqlParser::UNDEFINED:
      case MySqlParser::UNDOFILE:
      case MySqlParser::UNDO_BUFFER_SIZE:
      case MySqlParser::UNKNOWN:
      case MySqlParser::UPGRADE:
      case MySqlParser::USER:
      case MySqlParser::VALUE:
      case MySqlParser::VARIABLES:
      case MySqlParser::VIEW:
      case MySqlParser::WAIT:
      case MySqlParser::WARNINGS:
      case MySqlParser::WORK:
      case MySqlParser::WRAPPER:
      case MySqlParser::X509:
      case MySqlParser::XML:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::TABLES:
      case MySqlParser::ROUTINE:
      case MySqlParser::EXECUTE:
      case MySqlParser::FILE:
      case MySqlParser::PROCESS:
      case MySqlParser::RELOAD:
      case MySqlParser::SHUTDOWN:
      case MySqlParser::SUPER:
      case MySqlParser::PRIVILEGES:
      case MySqlParser::ARMSCII8:
      case MySqlParser::ASCII:
      case MySqlParser::BIG5:
      case MySqlParser::CP1250:
      case MySqlParser::CP1251:
      case MySqlParser::CP1256:
      case MySqlParser::CP1257:
      case MySqlParser::CP850:
      case MySqlParser::CP852:
      case MySqlParser::CP866:
      case MySqlParser::CP932:
      case MySqlParser::DEC8:
      case MySqlParser::EUCJPMS:
      case MySqlParser::EUCKR:
      case MySqlParser::GB2312:
      case MySqlParser::GBK:
      case MySqlParser::GEOSTD8:
      case MySqlParser::GREEK:
      case MySqlParser::HEBREW:
      case MySqlParser::HP8:
      case MySqlParser::KEYBCS2:
      case MySqlParser::KOI8R:
      case MySqlParser::KOI8U:
      case MySqlParser::LATIN1:
      case MySqlParser::LATIN2:
      case MySqlParser::LATIN5:
      case MySqlParser::LATIN7:
      case MySqlParser::MACCE:
      case MySqlParser::MACROMAN:
      case MySqlParser::SJIS:
      case MySqlParser::SWE7:
      case MySqlParser::TIS620:
      case MySqlParser::UCS2:
      case MySqlParser::UJIS:
      case MySqlParser::UTF16:
      case MySqlParser::UTF16LE:
      case MySqlParser::UTF32:
      case MySqlParser::UTF8:
      case MySqlParser::UTF8MB3:
      case MySqlParser::UTF8MB4:
      case MySqlParser::ARCHIVE:
      case MySqlParser::BLACKHOLE:
      case MySqlParser::CSV:
      case MySqlParser::FEDERATED:
      case MySqlParser::INNODB:
      case MySqlParser::MEMORY:
      case MySqlParser::MRG_MYISAM:
      case MySqlParser::MYISAM:
      case MySqlParser::NDB:
      case MySqlParser::NDBCLUSTER:
      case MySqlParser::PERFOMANCE_SCHEMA:
      case MySqlParser::REPEATABLE:
      case MySqlParser::COMMITTED:
      case MySqlParser::UNCOMMITTED:
      case MySqlParser::SERIALIZABLE:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION:
      case MySqlParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(5079);
        simple_id();
        break;
      }

      case MySqlParser::REVERSE_QUOTE_ID: {
        enterOuterAlt(_localctx, 2);
        setState(5080);
        match(MySqlParser::REVERSE_QUOTE_ID);
        break;
      }

      case MySqlParser::CHARSET_REVERSE_QOUTE_STRING: {
        enterOuterAlt(_localctx, 3);
        setState(5081);
        match(MySqlParser::CHARSET_REVERSE_QOUTE_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_idContext ------------------------------------------------------------------

MySqlParser::Simple_idContext::Simple_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Simple_idContext::ID() {
  return getToken(MySqlParser::ID, 0);
}

MySqlParser::Charset_name_baseContext* MySqlParser::Simple_idContext::charset_name_base() {
  return getRuleContext<MySqlParser::Charset_name_baseContext>(0);
}

MySqlParser::Transaction_level_baseContext* MySqlParser::Simple_idContext::transaction_level_base() {
  return getRuleContext<MySqlParser::Transaction_level_baseContext>(0);
}

MySqlParser::Engine_nameContext* MySqlParser::Simple_idContext::engine_name() {
  return getRuleContext<MySqlParser::Engine_nameContext>(0);
}

MySqlParser::Privileges_baseContext* MySqlParser::Simple_idContext::privileges_base() {
  return getRuleContext<MySqlParser::Privileges_baseContext>(0);
}

MySqlParser::Interval_type_baseContext* MySqlParser::Simple_idContext::interval_type_base() {
  return getRuleContext<MySqlParser::Interval_type_baseContext>(0);
}

MySqlParser::Data_type_baseContext* MySqlParser::Simple_idContext::data_type_base() {
  return getRuleContext<MySqlParser::Data_type_baseContext>(0);
}

MySqlParser::Keywords_can_be_idContext* MySqlParser::Simple_idContext::keywords_can_be_id() {
  return getRuleContext<MySqlParser::Keywords_can_be_idContext>(0);
}

MySqlParser::Function_name_baseContext* MySqlParser::Simple_idContext::function_name_base() {
  return getRuleContext<MySqlParser::Function_name_baseContext>(0);
}

MySqlParser::Spatial_data_typeContext* MySqlParser::Simple_idContext::spatial_data_type() {
  return getRuleContext<MySqlParser::Spatial_data_typeContext>(0);
}


size_t MySqlParser::Simple_idContext::getRuleIndex() const {
  return MySqlParser::RuleSimple_id;
}

void MySqlParser::Simple_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_id(this);
}

void MySqlParser::Simple_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_id(this);
}

MySqlParser::Simple_idContext* MySqlParser::simple_id() {
  Simple_idContext *_localctx = _tracker.createInstance<Simple_idContext>(_ctx, getState());
  enterRule(_localctx, 478, MySqlParser::RuleSimple_id);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5094);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 746, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5084);
      match(MySqlParser::ID);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5085);
      charset_name_base();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5086);
      transaction_level_base();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5087);
      engine_name();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5088);
      privileges_base();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5089);
      interval_type_base();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5090);
      data_type_base();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5091);
      keywords_can_be_id();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(5092);
      function_name_base();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(5093);
      spatial_data_type();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dot_ext_idContext ------------------------------------------------------------------

MySqlParser::Dot_ext_idContext::Dot_ext_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Dot_ext_idContext::DOT_ID() {
  return getToken(MySqlParser::DOT_ID, 0);
}

MySqlParser::Id_Context* MySqlParser::Dot_ext_idContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}


size_t MySqlParser::Dot_ext_idContext::getRuleIndex() const {
  return MySqlParser::RuleDot_ext_id;
}

void MySqlParser::Dot_ext_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDot_ext_id(this);
}

void MySqlParser::Dot_ext_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDot_ext_id(this);
}

MySqlParser::Dot_ext_idContext* MySqlParser::dot_ext_id() {
  Dot_ext_idContext *_localctx = _tracker.createInstance<Dot_ext_idContext>(_ctx, getState());
  enterRule(_localctx, 480, MySqlParser::RuleDot_ext_id);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5099);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::DOT_ID: {
        enterOuterAlt(_localctx, 1);
        setState(5096);
        match(MySqlParser::DOT_ID);
        break;
      }

      case MySqlParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(5097);
        match(MySqlParser::DOT);
        setState(5098);
        id_();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decimal_literalContext ------------------------------------------------------------------

MySqlParser::Decimal_literalContext::Decimal_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Decimal_literalContext::DECIMAL_LITERAL() {
  return getToken(MySqlParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Decimal_literalContext::ZERO_DECIMAL() {
  return getToken(MySqlParser::ZERO_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::Decimal_literalContext::ONE_DECIMAL() {
  return getToken(MySqlParser::ONE_DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::Decimal_literalContext::TWO_DECIMAL() {
  return getToken(MySqlParser::TWO_DECIMAL, 0);
}


size_t MySqlParser::Decimal_literalContext::getRuleIndex() const {
  return MySqlParser::RuleDecimal_literal;
}

void MySqlParser::Decimal_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecimal_literal(this);
}

void MySqlParser::Decimal_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecimal_literal(this);
}

MySqlParser::Decimal_literalContext* MySqlParser::decimal_literal() {
  Decimal_literalContext *_localctx = _tracker.createInstance<Decimal_literalContext>(_ctx, getState());
  enterRule(_localctx, 482, MySqlParser::RuleDecimal_literal);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5101);
    _la = _input->LA(1);
    if (!(((((_la - 948) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 948)) & ((1ULL << (MySqlParser::ZERO_DECIMAL - 948))
      | (1ULL << (MySqlParser::ONE_DECIMAL - 948))
      | (1ULL << (MySqlParser::TWO_DECIMAL - 948))
      | (1ULL << (MySqlParser::DECIMAL_LITERAL - 948)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Filesize_literalContext ------------------------------------------------------------------

MySqlParser::Filesize_literalContext::Filesize_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Filesize_literalContext::FILESIZE_LITERAL() {
  return getToken(MySqlParser::FILESIZE_LITERAL, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::Filesize_literalContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}


size_t MySqlParser::Filesize_literalContext::getRuleIndex() const {
  return MySqlParser::RuleFilesize_literal;
}

void MySqlParser::Filesize_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFilesize_literal(this);
}

void MySqlParser::Filesize_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFilesize_literal(this);
}

MySqlParser::Filesize_literalContext* MySqlParser::filesize_literal() {
  Filesize_literalContext *_localctx = _tracker.createInstance<Filesize_literalContext>(_ctx, getState());
  enterRule(_localctx, 484, MySqlParser::RuleFilesize_literal);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5105);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::FILESIZE_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(5103);
        match(MySqlParser::FILESIZE_LITERAL);
        break;
      }

      case MySqlParser::ZERO_DECIMAL:
      case MySqlParser::ONE_DECIMAL:
      case MySqlParser::TWO_DECIMAL:
      case MySqlParser::DECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(5104);
        decimal_literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- String_literalContext ------------------------------------------------------------------

MySqlParser::String_literalContext::String_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::String_literalContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::String_literalContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::String_literalContext::START_NATIONAL_STRING_LITERAL() {
  return getToken(MySqlParser::START_NATIONAL_STRING_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::String_literalContext::STRING_CHARSET_NAME() {
  return getToken(MySqlParser::STRING_CHARSET_NAME, 0);
}

tree::TerminalNode* MySqlParser::String_literalContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::Collation_nameContext* MySqlParser::String_literalContext::collation_name() {
  return getRuleContext<MySqlParser::Collation_nameContext>(0);
}


size_t MySqlParser::String_literalContext::getRuleIndex() const {
  return MySqlParser::RuleString_literal;
}

void MySqlParser::String_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_literal(this);
}

void MySqlParser::String_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_literal(this);
}

MySqlParser::String_literalContext* MySqlParser::string_literal() {
  String_literalContext *_localctx = _tracker.createInstance<String_literalContext>(_ctx, getState());
  enterRule(_localctx, 486, MySqlParser::RuleString_literal);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    setState(5130);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 755, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5112);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::STRING_CHARSET_NAME: {
          setState(5108);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::STRING_CHARSET_NAME) {
            setState(5107);
            match(MySqlParser::STRING_CHARSET_NAME);
          }
          setState(5110);
          match(MySqlParser::STRING_LITERAL);
          break;
        }

        case MySqlParser::START_NATIONAL_STRING_LITERAL: {
          setState(5111);
          match(MySqlParser::START_NATIONAL_STRING_LITERAL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5115); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(5114);
                match(MySqlParser::STRING_LITERAL);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(5117); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 751, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5124);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::STRING_CHARSET_NAME: {
          setState(5120);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::STRING_CHARSET_NAME) {
            setState(5119);
            match(MySqlParser::STRING_CHARSET_NAME);
          }
          setState(5122);
          match(MySqlParser::STRING_LITERAL);
          break;
        }

        case MySqlParser::START_NATIONAL_STRING_LITERAL: {
          setState(5123);
          match(MySqlParser::START_NATIONAL_STRING_LITERAL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5128);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 754, _ctx)) {
      case 1: {
        setState(5126);
        match(MySqlParser::COLLATE);
        setState(5127);
        collation_name();
        break;
      }

      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_literalContext ------------------------------------------------------------------

MySqlParser::Boolean_literalContext::Boolean_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Boolean_literalContext::TRUE() {
  return getToken(MySqlParser::TRUE, 0);
}

tree::TerminalNode* MySqlParser::Boolean_literalContext::FALSE() {
  return getToken(MySqlParser::FALSE, 0);
}


size_t MySqlParser::Boolean_literalContext::getRuleIndex() const {
  return MySqlParser::RuleBoolean_literal;
}

void MySqlParser::Boolean_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_literal(this);
}

void MySqlParser::Boolean_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_literal(this);
}

MySqlParser::Boolean_literalContext* MySqlParser::boolean_literal() {
  Boolean_literalContext *_localctx = _tracker.createInstance<Boolean_literalContext>(_ctx, getState());
  enterRule(_localctx, 488, MySqlParser::RuleBoolean_literal);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5132);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::FALSE || _la == MySqlParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Hexadecimal_literalContext ------------------------------------------------------------------

MySqlParser::Hexadecimal_literalContext::Hexadecimal_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Hexadecimal_literalContext::HEXADECIMAL_LITERAL() {
  return getToken(MySqlParser::HEXADECIMAL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Hexadecimal_literalContext::STRING_CHARSET_NAME() {
  return getToken(MySqlParser::STRING_CHARSET_NAME, 0);
}


size_t MySqlParser::Hexadecimal_literalContext::getRuleIndex() const {
  return MySqlParser::RuleHexadecimal_literal;
}

void MySqlParser::Hexadecimal_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHexadecimal_literal(this);
}

void MySqlParser::Hexadecimal_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHexadecimal_literal(this);
}

MySqlParser::Hexadecimal_literalContext* MySqlParser::hexadecimal_literal() {
  Hexadecimal_literalContext *_localctx = _tracker.createInstance<Hexadecimal_literalContext>(_ctx, getState());
  enterRule(_localctx, 490, MySqlParser::RuleHexadecimal_literal);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5135);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::STRING_CHARSET_NAME) {
      setState(5134);
      match(MySqlParser::STRING_CHARSET_NAME);
    }
    setState(5137);
    match(MySqlParser::HEXADECIMAL_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_notnullContext ------------------------------------------------------------------

MySqlParser::Null_notnullContext::Null_notnullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Null_notnullContext::NOTNULL() {
  return getToken(MySqlParser::NOTNULL, 0);
}

tree::TerminalNode* MySqlParser::Null_notnullContext::NULL_LITERAL() {
  return getToken(MySqlParser::NULL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::Null_notnullContext::NULL_SPEC_LITERAL() {
  return getToken(MySqlParser::NULL_SPEC_LITERAL, 0);
}


size_t MySqlParser::Null_notnullContext::getRuleIndex() const {
  return MySqlParser::RuleNull_notnull;
}

void MySqlParser::Null_notnullContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_notnull(this);
}

void MySqlParser::Null_notnullContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_notnull(this);
}

MySqlParser::Null_notnullContext* MySqlParser::null_notnull() {
  Null_notnullContext *_localctx = _tracker.createInstance<Null_notnullContext>(_ctx, getState());
  enterRule(_localctx, 492, MySqlParser::RuleNull_notnull);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5141);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::NOTNULL: {
        enterOuterAlt(_localctx, 1);
        setState(5139);
        match(MySqlParser::NOTNULL);
        break;
      }

      case MySqlParser::NULL_LITERAL:
      case MySqlParser::NULL_SPEC_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(5140);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::NULL_LITERAL || _la == MySqlParser::NULL_SPEC_LITERAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantContext ------------------------------------------------------------------

MySqlParser::ConstantContext::ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::String_literalContext* MySqlParser::ConstantContext::string_literal() {
  return getRuleContext<MySqlParser::String_literalContext>(0);
}

MySqlParser::Decimal_literalContext* MySqlParser::ConstantContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::Hexadecimal_literalContext* MySqlParser::ConstantContext::hexadecimal_literal() {
  return getRuleContext<MySqlParser::Hexadecimal_literalContext>(0);
}

MySqlParser::Boolean_literalContext* MySqlParser::ConstantContext::boolean_literal() {
  return getRuleContext<MySqlParser::Boolean_literalContext>(0);
}

tree::TerminalNode* MySqlParser::ConstantContext::REAL_LITERAL() {
  return getToken(MySqlParser::REAL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::ConstantContext::BIT_STRING() {
  return getToken(MySqlParser::BIT_STRING, 0);
}

tree::TerminalNode* MySqlParser::ConstantContext::NOTNULL() {
  return getToken(MySqlParser::NOTNULL, 0);
}

tree::TerminalNode* MySqlParser::ConstantContext::NULL_LITERAL() {
  return getToken(MySqlParser::NULL_LITERAL, 0);
}

tree::TerminalNode* MySqlParser::ConstantContext::NULL_SPEC_LITERAL() {
  return getToken(MySqlParser::NULL_SPEC_LITERAL, 0);
}


size_t MySqlParser::ConstantContext::getRuleIndex() const {
  return MySqlParser::RuleConstant;
}

void MySqlParser::ConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant(this);
}

void MySqlParser::ConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant(this);
}

MySqlParser::ConstantContext* MySqlParser::constant() {
  ConstantContext *_localctx = _tracker.createInstance<ConstantContext>(_ctx, getState());
  enterRule(_localctx, 494, MySqlParser::RuleConstant);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5151);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 758, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5143);
      string_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5144);
      decimal_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5145);
      hexadecimal_literal();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5146);
      boolean_literal();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5147);
      match(MySqlParser::REAL_LITERAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5148);
      match(MySqlParser::BIT_STRING);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5149);
      match(MySqlParser::NOTNULL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5150);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NULL_LITERAL || _la == MySqlParser::NULL_SPEC_LITERAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Data_typeContext ------------------------------------------------------------------

MySqlParser::Data_typeContext::Data_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Data_typeContext::getRuleIndex() const {
  return MySqlParser::RuleData_type;
}

void MySqlParser::Data_typeContext::copyFrom(Data_typeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SpatialDatatypeContext ------------------------------------------------------------------

MySqlParser::Spatial_data_typeContext* MySqlParser::SpatialDatatypeContext::spatial_data_type() {
  return getRuleContext<MySqlParser::Spatial_data_typeContext>(0);
}

MySqlParser::SpatialDatatypeContext::SpatialDatatypeContext(Data_typeContext *ctx) { copyFrom(ctx); }

void MySqlParser::SpatialDatatypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpatialDatatype(this);
}
void MySqlParser::SpatialDatatypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpatialDatatype(this);
}
//----------------- DimensionDatatypeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::TINYINT() {
  return getToken(MySqlParser::TINYINT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::SMALLINT() {
  return getToken(MySqlParser::SMALLINT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::MEDIUMINT() {
  return getToken(MySqlParser::MEDIUMINT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::INT() {
  return getToken(MySqlParser::INT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::INTEGER() {
  return getToken(MySqlParser::INTEGER, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::BIGINT() {
  return getToken(MySqlParser::BIGINT, 0);
}

MySqlParser::Length_one_dimensionContext* MySqlParser::DimensionDatatypeContext::length_one_dimension() {
  return getRuleContext<MySqlParser::Length_one_dimensionContext>(0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::UNSIGNED() {
  return getToken(MySqlParser::UNSIGNED, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::ZEROFILL() {
  return getToken(MySqlParser::ZEROFILL, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::REAL() {
  return getToken(MySqlParser::REAL, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::DOUBLE() {
  return getToken(MySqlParser::DOUBLE, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::FLOAT() {
  return getToken(MySqlParser::FLOAT, 0);
}

MySqlParser::Length_two_dimensionContext* MySqlParser::DimensionDatatypeContext::length_two_dimension() {
  return getRuleContext<MySqlParser::Length_two_dimensionContext>(0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::DECIMAL() {
  return getToken(MySqlParser::DECIMAL, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::NUMERIC() {
  return getToken(MySqlParser::NUMERIC, 0);
}

MySqlParser::Length_two_optional_dimensionContext* MySqlParser::DimensionDatatypeContext::length_two_optional_dimension() {
  return getRuleContext<MySqlParser::Length_two_optional_dimensionContext>(0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::BIT() {
  return getToken(MySqlParser::BIT, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::TIME() {
  return getToken(MySqlParser::TIME, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::TIMESTAMP() {
  return getToken(MySqlParser::TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::DATETIME() {
  return getToken(MySqlParser::DATETIME, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::DimensionDatatypeContext::VARBINARY() {
  return getToken(MySqlParser::VARBINARY, 0);
}

MySqlParser::DimensionDatatypeContext::DimensionDatatypeContext(Data_typeContext *ctx) { copyFrom(ctx); }

void MySqlParser::DimensionDatatypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDimensionDatatype(this);
}
void MySqlParser::DimensionDatatypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDimensionDatatype(this);
}
//----------------- CollectCharDatatypeContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MySqlParser::CollectCharDatatypeContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::CollectCharDatatypeContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}

tree::TerminalNode* MySqlParser::CollectCharDatatypeContext::ENUM() {
  return getToken(MySqlParser::ENUM, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CollectCharDatatypeContext::SET() {
  return getTokens(MySqlParser::SET);
}

tree::TerminalNode* MySqlParser::CollectCharDatatypeContext::SET(size_t i) {
  return getToken(MySqlParser::SET, i);
}

tree::TerminalNode* MySqlParser::CollectCharDatatypeContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::CollectCharDatatypeContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

MySqlParser::Charset_nameContext* MySqlParser::CollectCharDatatypeContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::CollectCharDatatypeContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::Collation_nameContext* MySqlParser::CollectCharDatatypeContext::collation_name() {
  return getRuleContext<MySqlParser::Collation_nameContext>(0);
}

MySqlParser::CollectCharDatatypeContext::CollectCharDatatypeContext(Data_typeContext *ctx) { copyFrom(ctx); }

void MySqlParser::CollectCharDatatypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollectCharDatatype(this);
}
void MySqlParser::CollectCharDatatypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollectCharDatatype(this);
}
//----------------- CharDatatypeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CharDatatypeContext::CHAR() {
  return getToken(MySqlParser::CHAR, 0);
}

tree::TerminalNode* MySqlParser::CharDatatypeContext::VARCHAR() {
  return getToken(MySqlParser::VARCHAR, 0);
}

tree::TerminalNode* MySqlParser::CharDatatypeContext::TINYTEXT() {
  return getToken(MySqlParser::TINYTEXT, 0);
}

tree::TerminalNode* MySqlParser::CharDatatypeContext::TEXT() {
  return getToken(MySqlParser::TEXT, 0);
}

tree::TerminalNode* MySqlParser::CharDatatypeContext::MEDIUMTEXT() {
  return getToken(MySqlParser::MEDIUMTEXT, 0);
}

tree::TerminalNode* MySqlParser::CharDatatypeContext::LONGTEXT() {
  return getToken(MySqlParser::LONGTEXT, 0);
}

MySqlParser::Length_one_dimensionContext* MySqlParser::CharDatatypeContext::length_one_dimension() {
  return getRuleContext<MySqlParser::Length_one_dimensionContext>(0);
}

tree::TerminalNode* MySqlParser::CharDatatypeContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::CharDatatypeContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::CharDatatypeContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

MySqlParser::Charset_nameContext* MySqlParser::CharDatatypeContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::CharDatatypeContext::COLLATE() {
  return getToken(MySqlParser::COLLATE, 0);
}

MySqlParser::Collation_nameContext* MySqlParser::CharDatatypeContext::collation_name() {
  return getRuleContext<MySqlParser::Collation_nameContext>(0);
}

MySqlParser::CharDatatypeContext::CharDatatypeContext(Data_typeContext *ctx) { copyFrom(ctx); }

void MySqlParser::CharDatatypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharDatatype(this);
}
void MySqlParser::CharDatatypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharDatatype(this);
}
//----------------- SimpleDatatypeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SimpleDatatypeContext::DATE() {
  return getToken(MySqlParser::DATE, 0);
}

tree::TerminalNode* MySqlParser::SimpleDatatypeContext::YEAR() {
  return getToken(MySqlParser::YEAR, 0);
}

tree::TerminalNode* MySqlParser::SimpleDatatypeContext::TINYBLOB() {
  return getToken(MySqlParser::TINYBLOB, 0);
}

tree::TerminalNode* MySqlParser::SimpleDatatypeContext::BLOB() {
  return getToken(MySqlParser::BLOB, 0);
}

tree::TerminalNode* MySqlParser::SimpleDatatypeContext::MEDIUMBLOB() {
  return getToken(MySqlParser::MEDIUMBLOB, 0);
}

tree::TerminalNode* MySqlParser::SimpleDatatypeContext::LONGBLOB() {
  return getToken(MySqlParser::LONGBLOB, 0);
}

MySqlParser::SimpleDatatypeContext::SimpleDatatypeContext(Data_typeContext *ctx) { copyFrom(ctx); }

void MySqlParser::SimpleDatatypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleDatatype(this);
}
void MySqlParser::SimpleDatatypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleDatatype(this);
}
MySqlParser::Data_typeContext* MySqlParser::data_type() {
  Data_typeContext *_localctx = _tracker.createInstance<Data_typeContext>(_ctx, getState());
  enterRule(_localctx, 496, MySqlParser::RuleData_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5228);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::CHAR:
      case MySqlParser::VARCHAR:
      case MySqlParser::TINYTEXT:
      case MySqlParser::TEXT:
      case MySqlParser::MEDIUMTEXT:
      case MySqlParser::LONGTEXT: {
        _localctx = dynamic_cast<Data_typeContext *>(_tracker.createInstance<MySqlParser::CharDatatypeContext>(_localctx));
        enterOuterAlt(_localctx, 1);
        setState(5153);
        _la = _input->LA(1);
        if (!(((((_la - 186) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 186)) & ((1ULL << (MySqlParser::CHAR - 186))
          | (1ULL << (MySqlParser::VARCHAR - 186))
          | (1ULL << (MySqlParser::TINYTEXT - 186))
          | (1ULL << (MySqlParser::TEXT - 186))
          | (1ULL << (MySqlParser::MEDIUMTEXT - 186))
          | (1ULL << (MySqlParser::LONGTEXT - 186)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5155);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 759, _ctx)) {
        case 1: {
          setState(5154);
          length_one_dimension();
          break;
        }

        }
        setState(5158);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::BINARY) {
          setState(5157);
          match(MySqlParser::BINARY);
        }
        setState(5163);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::CHARACTER) {
          setState(5160);
          match(MySqlParser::CHARACTER);
          setState(5161);
          match(MySqlParser::SET);
          setState(5162);
          charset_name();
        }
        setState(5167);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::COLLATE) {
          setState(5165);
          match(MySqlParser::COLLATE);
          setState(5166);
          collation_name();
        }
        break;
      }

      case MySqlParser::TINYINT:
      case MySqlParser::SMALLINT:
      case MySqlParser::MEDIUMINT:
      case MySqlParser::INT:
      case MySqlParser::INTEGER:
      case MySqlParser::BIGINT: {
        _localctx = dynamic_cast<Data_typeContext *>(_tracker.createInstance<MySqlParser::DimensionDatatypeContext>(_localctx));
        enterOuterAlt(_localctx, 2);
        setState(5169);
        _la = _input->LA(1);
        if (!(((((_la - 170) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 170)) & ((1ULL << (MySqlParser::TINYINT - 170))
          | (1ULL << (MySqlParser::SMALLINT - 170))
          | (1ULL << (MySqlParser::MEDIUMINT - 170))
          | (1ULL << (MySqlParser::INT - 170))
          | (1ULL << (MySqlParser::INTEGER - 170))
          | (1ULL << (MySqlParser::BIGINT - 170)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5171);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 763, _ctx)) {
        case 1: {
          setState(5170);
          length_one_dimension();
          break;
        }

        }
        setState(5174);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::UNSIGNED) {
          setState(5173);
          match(MySqlParser::UNSIGNED);
        }
        setState(5177);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ZEROFILL) {
          setState(5176);
          match(MySqlParser::ZEROFILL);
        }
        break;
      }

      case MySqlParser::REAL:
      case MySqlParser::DOUBLE:
      case MySqlParser::FLOAT: {
        _localctx = dynamic_cast<Data_typeContext *>(_tracker.createInstance<MySqlParser::DimensionDatatypeContext>(_localctx));
        enterOuterAlt(_localctx, 3);
        setState(5179);
        _la = _input->LA(1);
        if (!(((((_la - 176) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 176)) & ((1ULL << (MySqlParser::REAL - 176))
          | (1ULL << (MySqlParser::DOUBLE - 176))
          | (1ULL << (MySqlParser::FLOAT - 176)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5181);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 766, _ctx)) {
        case 1: {
          setState(5180);
          length_two_dimension();
          break;
        }

        }
        setState(5184);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::UNSIGNED) {
          setState(5183);
          match(MySqlParser::UNSIGNED);
        }
        setState(5187);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ZEROFILL) {
          setState(5186);
          match(MySqlParser::ZEROFILL);
        }
        break;
      }

      case MySqlParser::DECIMAL:
      case MySqlParser::NUMERIC: {
        _localctx = dynamic_cast<Data_typeContext *>(_tracker.createInstance<MySqlParser::DimensionDatatypeContext>(_localctx));
        enterOuterAlt(_localctx, 4);
        setState(5189);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::DECIMAL

        || _la == MySqlParser::NUMERIC)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5191);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 769, _ctx)) {
        case 1: {
          setState(5190);
          length_two_optional_dimension();
          break;
        }

        }
        setState(5194);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::UNSIGNED) {
          setState(5193);
          match(MySqlParser::UNSIGNED);
        }
        setState(5197);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ZEROFILL) {
          setState(5196);
          match(MySqlParser::ZEROFILL);
        }
        break;
      }

      case MySqlParser::DATE:
      case MySqlParser::YEAR:
      case MySqlParser::TINYBLOB:
      case MySqlParser::BLOB:
      case MySqlParser::MEDIUMBLOB:
      case MySqlParser::LONGBLOB: {
        _localctx = dynamic_cast<Data_typeContext *>(_tracker.createInstance<MySqlParser::SimpleDatatypeContext>(_localctx));
        enterOuterAlt(_localctx, 5);
        setState(5199);
        _la = _input->LA(1);
        if (!(((((_la - 181) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
          | (1ULL << (MySqlParser::YEAR - 181))
          | (1ULL << (MySqlParser::TINYBLOB - 181))
          | (1ULL << (MySqlParser::BLOB - 181))
          | (1ULL << (MySqlParser::MEDIUMBLOB - 181))
          | (1ULL << (MySqlParser::LONGBLOB - 181)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::DATETIME:
      case MySqlParser::BINARY:
      case MySqlParser::VARBINARY:
      case MySqlParser::BIT: {
        _localctx = dynamic_cast<Data_typeContext *>(_tracker.createInstance<MySqlParser::DimensionDatatypeContext>(_localctx));
        enterOuterAlt(_localctx, 6);
        setState(5200);
        _la = _input->LA(1);
        if (!(((((_la - 182) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 182)) & ((1ULL << (MySqlParser::TIME - 182))
          | (1ULL << (MySqlParser::TIMESTAMP - 182))
          | (1ULL << (MySqlParser::DATETIME - 182))
          | (1ULL << (MySqlParser::BINARY - 182))
          | (1ULL << (MySqlParser::VARBINARY - 182)))) != 0) || _la == MySqlParser::BIT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5202);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 772, _ctx)) {
        case 1: {
          setState(5201);
          length_one_dimension();
          break;
        }

        }
        break;
      }

      case MySqlParser::SET:
      case MySqlParser::ENUM: {
        _localctx = dynamic_cast<Data_typeContext *>(_tracker.createInstance<MySqlParser::CollectCharDatatypeContext>(_localctx));
        enterOuterAlt(_localctx, 7);
        setState(5204);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::SET || _la == MySqlParser::ENUM)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5205);
        match(MySqlParser::LR_BRACKET);
        setState(5206);
        match(MySqlParser::STRING_LITERAL);
        setState(5211);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(5207);
          match(MySqlParser::COMMA);
          setState(5208);
          match(MySqlParser::STRING_LITERAL);
          setState(5213);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(5214);
        match(MySqlParser::RR_BRACKET);
        setState(5216);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::BINARY) {
          setState(5215);
          match(MySqlParser::BINARY);
        }
        setState(5221);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::CHARACTER) {
          setState(5218);
          match(MySqlParser::CHARACTER);
          setState(5219);
          match(MySqlParser::SET);
          setState(5220);
          charset_name();
        }
        setState(5225);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::COLLATE) {
          setState(5223);
          match(MySqlParser::COLLATE);
          setState(5224);
          collation_name();
        }
        break;
      }

      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON: {
        _localctx = dynamic_cast<Data_typeContext *>(_tracker.createInstance<MySqlParser::SpatialDatatypeContext>(_localctx));
        enterOuterAlt(_localctx, 8);
        setState(5227);
        spatial_data_type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Data_type_to_convertContext ------------------------------------------------------------------

MySqlParser::Data_type_to_convertContext::Data_type_to_convertContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::NCHAR() {
  return getToken(MySqlParser::NCHAR, 0);
}

MySqlParser::Length_one_dimensionContext* MySqlParser::Data_type_to_convertContext::length_one_dimension() {
  return getRuleContext<MySqlParser::Length_one_dimensionContext>(0);
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::CHAR() {
  return getToken(MySqlParser::CHAR, 0);
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::CHARACTER() {
  return getToken(MySqlParser::CHARACTER, 0);
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::SET() {
  return getToken(MySqlParser::SET, 0);
}

MySqlParser::Charset_nameContext* MySqlParser::Data_type_to_convertContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::DATE() {
  return getToken(MySqlParser::DATE, 0);
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::DATETIME() {
  return getToken(MySqlParser::DATETIME, 0);
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::TIME() {
  return getToken(MySqlParser::TIME, 0);
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::DECIMAL() {
  return getToken(MySqlParser::DECIMAL, 0);
}

MySqlParser::Length_two_dimensionContext* MySqlParser::Data_type_to_convertContext::length_two_dimension() {
  return getRuleContext<MySqlParser::Length_two_dimensionContext>(0);
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::SIGNED() {
  return getToken(MySqlParser::SIGNED, 0);
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::UNSIGNED() {
  return getToken(MySqlParser::UNSIGNED, 0);
}

tree::TerminalNode* MySqlParser::Data_type_to_convertContext::INTEGER() {
  return getToken(MySqlParser::INTEGER, 0);
}


size_t MySqlParser::Data_type_to_convertContext::getRuleIndex() const {
  return MySqlParser::RuleData_type_to_convert;
}

void MySqlParser::Data_type_to_convertContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData_type_to_convert(this);
}

void MySqlParser::Data_type_to_convertContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData_type_to_convert(this);
}

MySqlParser::Data_type_to_convertContext* MySqlParser::data_type_to_convert() {
  Data_type_to_convertContext *_localctx = _tracker.createInstance<Data_type_to_convertContext>(_ctx, getState());
  enterRule(_localctx, 498, MySqlParser::RuleData_type_to_convert);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5254);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::BINARY:
      case MySqlParser::NCHAR: {
        enterOuterAlt(_localctx, 1);
        setState(5230);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::BINARY || _la == MySqlParser::NCHAR)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5232);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LR_BRACKET) {
          setState(5231);
          length_one_dimension();
        }
        break;
      }

      case MySqlParser::CHAR: {
        enterOuterAlt(_localctx, 2);
        setState(5234);
        match(MySqlParser::CHAR);
        setState(5236);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LR_BRACKET) {
          setState(5235);
          length_one_dimension();
        }
        setState(5241);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::CHARACTER) {
          setState(5238);
          match(MySqlParser::CHARACTER);
          setState(5239);
          match(MySqlParser::SET);
          setState(5240);
          charset_name();
        }
        break;
      }

      case MySqlParser::DATE: {
        enterOuterAlt(_localctx, 3);
        setState(5243);
        match(MySqlParser::DATE);
        break;
      }

      case MySqlParser::DATETIME: {
        enterOuterAlt(_localctx, 4);
        setState(5244);
        match(MySqlParser::DATETIME);
        break;
      }

      case MySqlParser::TIME: {
        enterOuterAlt(_localctx, 5);
        setState(5245);
        match(MySqlParser::TIME);
        break;
      }

      case MySqlParser::DECIMAL: {
        enterOuterAlt(_localctx, 6);
        setState(5246);
        match(MySqlParser::DECIMAL);
        setState(5248);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::LR_BRACKET) {
          setState(5247);
          length_two_dimension();
        }
        break;
      }

      case MySqlParser::UNSIGNED:
      case MySqlParser::SIGNED: {
        enterOuterAlt(_localctx, 7);
        setState(5250);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::UNSIGNED || _la == MySqlParser::SIGNED)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5252);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::INTEGER) {
          setState(5251);
          match(MySqlParser::INTEGER);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Spatial_data_typeContext ------------------------------------------------------------------

MySqlParser::Spatial_data_typeContext::Spatial_data_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Spatial_data_typeContext::GEOMETRYCOLLECTION() {
  return getToken(MySqlParser::GEOMETRYCOLLECTION, 0);
}

tree::TerminalNode* MySqlParser::Spatial_data_typeContext::LINESTRING() {
  return getToken(MySqlParser::LINESTRING, 0);
}

tree::TerminalNode* MySqlParser::Spatial_data_typeContext::MULTILINESTRING() {
  return getToken(MySqlParser::MULTILINESTRING, 0);
}

tree::TerminalNode* MySqlParser::Spatial_data_typeContext::MULTIPOINT() {
  return getToken(MySqlParser::MULTIPOINT, 0);
}

tree::TerminalNode* MySqlParser::Spatial_data_typeContext::MULTIPOLYGON() {
  return getToken(MySqlParser::MULTIPOLYGON, 0);
}

tree::TerminalNode* MySqlParser::Spatial_data_typeContext::POINT() {
  return getToken(MySqlParser::POINT, 0);
}

tree::TerminalNode* MySqlParser::Spatial_data_typeContext::POLYGON() {
  return getToken(MySqlParser::POLYGON, 0);
}


size_t MySqlParser::Spatial_data_typeContext::getRuleIndex() const {
  return MySqlParser::RuleSpatial_data_type;
}

void MySqlParser::Spatial_data_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpatial_data_type(this);
}

void MySqlParser::Spatial_data_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpatial_data_type(this);
}

MySqlParser::Spatial_data_typeContext* MySqlParser::spatial_data_type() {
  Spatial_data_typeContext *_localctx = _tracker.createInstance<Spatial_data_typeContext>(_ctx, getState());
  enterRule(_localctx, 500, MySqlParser::RuleSpatial_data_type);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5256);
    _la = _input->LA(1);
    if (!(((((_la - 621) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 621)) & ((1ULL << (MySqlParser::GEOMETRYCOLLECTION - 621))
      | (1ULL << (MySqlParser::LINESTRING - 621))
      | (1ULL << (MySqlParser::MULTILINESTRING - 621))
      | (1ULL << (MySqlParser::MULTIPOINT - 621))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 621))
      | (1ULL << (MySqlParser::POINT - 621))
      | (1ULL << (MySqlParser::POLYGON - 621)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Length_one_dimensionContext ------------------------------------------------------------------

MySqlParser::Length_one_dimensionContext::Length_one_dimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Decimal_literalContext* MySqlParser::Length_one_dimensionContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}


size_t MySqlParser::Length_one_dimensionContext::getRuleIndex() const {
  return MySqlParser::RuleLength_one_dimension;
}

void MySqlParser::Length_one_dimensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLength_one_dimension(this);
}

void MySqlParser::Length_one_dimensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLength_one_dimension(this);
}

MySqlParser::Length_one_dimensionContext* MySqlParser::length_one_dimension() {
  Length_one_dimensionContext *_localctx = _tracker.createInstance<Length_one_dimensionContext>(_ctx, getState());
  enterRule(_localctx, 502, MySqlParser::RuleLength_one_dimension);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5258);
    match(MySqlParser::LR_BRACKET);
    setState(5259);
    decimal_literal();
    setState(5260);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Length_two_dimensionContext ------------------------------------------------------------------

MySqlParser::Length_two_dimensionContext::Length_two_dimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::Length_two_dimensionContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::Length_two_dimensionContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}


size_t MySqlParser::Length_two_dimensionContext::getRuleIndex() const {
  return MySqlParser::RuleLength_two_dimension;
}

void MySqlParser::Length_two_dimensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLength_two_dimension(this);
}

void MySqlParser::Length_two_dimensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLength_two_dimension(this);
}

MySqlParser::Length_two_dimensionContext* MySqlParser::length_two_dimension() {
  Length_two_dimensionContext *_localctx = _tracker.createInstance<Length_two_dimensionContext>(_ctx, getState());
  enterRule(_localctx, 504, MySqlParser::RuleLength_two_dimension);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5262);
    match(MySqlParser::LR_BRACKET);
    setState(5263);
    decimal_literal();
    setState(5264);
    match(MySqlParser::COMMA);
    setState(5265);
    decimal_literal();
    setState(5266);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Length_two_optional_dimensionContext ------------------------------------------------------------------

MySqlParser::Length_two_optional_dimensionContext::Length_two_optional_dimensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::Length_two_optional_dimensionContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::Length_two_optional_dimensionContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}


size_t MySqlParser::Length_two_optional_dimensionContext::getRuleIndex() const {
  return MySqlParser::RuleLength_two_optional_dimension;
}

void MySqlParser::Length_two_optional_dimensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLength_two_optional_dimension(this);
}

void MySqlParser::Length_two_optional_dimensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLength_two_optional_dimension(this);
}

MySqlParser::Length_two_optional_dimensionContext* MySqlParser::length_two_optional_dimension() {
  Length_two_optional_dimensionContext *_localctx = _tracker.createInstance<Length_two_optional_dimensionContext>(_ctx, getState());
  enterRule(_localctx, 506, MySqlParser::RuleLength_two_optional_dimension);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5268);
    match(MySqlParser::LR_BRACKET);
    setState(5269);
    decimal_literal();
    setState(5272);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MySqlParser::COMMA) {
      setState(5270);
      match(MySqlParser::COMMA);
      setState(5271);
      decimal_literal();
    }
    setState(5274);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Id_listContext ------------------------------------------------------------------

MySqlParser::Id_listContext::Id_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Id_Context *> MySqlParser::Id_listContext::id_() {
  return getRuleContexts<MySqlParser::Id_Context>();
}

MySqlParser::Id_Context* MySqlParser::Id_listContext::id_(size_t i) {
  return getRuleContext<MySqlParser::Id_Context>(i);
}


size_t MySqlParser::Id_listContext::getRuleIndex() const {
  return MySqlParser::RuleId_list;
}

void MySqlParser::Id_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterId_list(this);
}

void MySqlParser::Id_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitId_list(this);
}

MySqlParser::Id_listContext* MySqlParser::id_list() {
  Id_listContext *_localctx = _tracker.createInstance<Id_listContext>(_ctx, getState());
  enterRule(_localctx, 508, MySqlParser::RuleId_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5276);
    id_();
    setState(5281);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 785, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5277);
        match(MySqlParser::COMMA);
        setState(5278);
        id_(); 
      }
      setState(5283);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 785, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_listContext ------------------------------------------------------------------

MySqlParser::Table_listContext::Table_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Table_nameContext *> MySqlParser::Table_listContext::table_name() {
  return getRuleContexts<MySqlParser::Table_nameContext>();
}

MySqlParser::Table_nameContext* MySqlParser::Table_listContext::table_name(size_t i) {
  return getRuleContext<MySqlParser::Table_nameContext>(i);
}


size_t MySqlParser::Table_listContext::getRuleIndex() const {
  return MySqlParser::RuleTable_list;
}

void MySqlParser::Table_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_list(this);
}

void MySqlParser::Table_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_list(this);
}

MySqlParser::Table_listContext* MySqlParser::table_list() {
  Table_listContext *_localctx = _tracker.createInstance<Table_listContext>(_ctx, getState());
  enterRule(_localctx, 510, MySqlParser::RuleTable_list);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5284);
    table_name();
    setState(5289);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 786, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5285);
        match(MySqlParser::COMMA);
        setState(5286);
        table_name(); 
      }
      setState(5291);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 786, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_pair_listContext ------------------------------------------------------------------

MySqlParser::Table_pair_listContext::Table_pair_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Table_nameContext *> MySqlParser::Table_pair_listContext::table_name() {
  return getRuleContexts<MySqlParser::Table_nameContext>();
}

MySqlParser::Table_nameContext* MySqlParser::Table_pair_listContext::table_name(size_t i) {
  return getRuleContext<MySqlParser::Table_nameContext>(i);
}


size_t MySqlParser::Table_pair_listContext::getRuleIndex() const {
  return MySqlParser::RuleTable_pair_list;
}

void MySqlParser::Table_pair_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_pair_list(this);
}

void MySqlParser::Table_pair_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_pair_list(this);
}

MySqlParser::Table_pair_listContext* MySqlParser::table_pair_list() {
  Table_pair_listContext *_localctx = _tracker.createInstance<Table_pair_listContext>(_ctx, getState());
  enterRule(_localctx, 512, MySqlParser::RuleTable_pair_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5292);
    match(MySqlParser::LR_BRACKET);
    setState(5293);
    table_name();
    setState(5294);
    match(MySqlParser::COMMA);
    setState(5295);
    table_name();
    setState(5296);
    match(MySqlParser::RR_BRACKET);
    setState(5306);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5297);
      match(MySqlParser::COMMA);
      setState(5298);
      match(MySqlParser::LR_BRACKET);
      setState(5299);
      table_name();
      setState(5300);
      match(MySqlParser::COMMA);
      setState(5301);
      table_name();
      setState(5302);
      match(MySqlParser::RR_BRACKET);
      setState(5308);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_colname_listContext ------------------------------------------------------------------

MySqlParser::Index_colname_listContext::Index_colname_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::Index_col_nameContext *> MySqlParser::Index_colname_listContext::index_col_name() {
  return getRuleContexts<MySqlParser::Index_col_nameContext>();
}

MySqlParser::Index_col_nameContext* MySqlParser::Index_colname_listContext::index_col_name(size_t i) {
  return getRuleContext<MySqlParser::Index_col_nameContext>(i);
}


size_t MySqlParser::Index_colname_listContext::getRuleIndex() const {
  return MySqlParser::RuleIndex_colname_list;
}

void MySqlParser::Index_colname_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_colname_list(this);
}

void MySqlParser::Index_colname_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_colname_list(this);
}

MySqlParser::Index_colname_listContext* MySqlParser::index_colname_list() {
  Index_colname_listContext *_localctx = _tracker.createInstance<Index_colname_listContext>(_ctx, getState());
  enterRule(_localctx, 514, MySqlParser::RuleIndex_colname_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5309);
    match(MySqlParser::LR_BRACKET);
    setState(5310);
    index_col_name();
    setState(5315);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5311);
      match(MySqlParser::COMMA);
      setState(5312);
      index_col_name();
      setState(5317);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5318);
    match(MySqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_listContext ------------------------------------------------------------------

MySqlParser::Expression_listContext::Expression_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::Expression_listContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::Expression_listContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}


size_t MySqlParser::Expression_listContext::getRuleIndex() const {
  return MySqlParser::RuleExpression_list;
}

void MySqlParser::Expression_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_list(this);
}

void MySqlParser::Expression_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_list(this);
}

MySqlParser::Expression_listContext* MySqlParser::expression_list() {
  Expression_listContext *_localctx = _tracker.createInstance<Expression_listContext>(_ctx, getState());
  enterRule(_localctx, 516, MySqlParser::RuleExpression_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5320);
    expression(0);
    setState(5325);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5321);
      match(MySqlParser::COMMA);
      setState(5322);
      expression(0);
      setState(5327);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constant_listContext ------------------------------------------------------------------

MySqlParser::Constant_listContext::Constant_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::ConstantContext *> MySqlParser::Constant_listContext::constant() {
  return getRuleContexts<MySqlParser::ConstantContext>();
}

MySqlParser::ConstantContext* MySqlParser::Constant_listContext::constant(size_t i) {
  return getRuleContext<MySqlParser::ConstantContext>(i);
}


size_t MySqlParser::Constant_listContext::getRuleIndex() const {
  return MySqlParser::RuleConstant_list;
}

void MySqlParser::Constant_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant_list(this);
}

void MySqlParser::Constant_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant_list(this);
}

MySqlParser::Constant_listContext* MySqlParser::constant_list() {
  Constant_listContext *_localctx = _tracker.createInstance<Constant_listContext>(_ctx, getState());
  enterRule(_localctx, 518, MySqlParser::RuleConstant_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5328);
    constant();
    setState(5333);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5329);
      match(MySqlParser::COMMA);
      setState(5330);
      constant();
      setState(5335);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_string_listContext ------------------------------------------------------------------

MySqlParser::Simple_string_listContext::Simple_string_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::Simple_string_listContext::STRING_LITERAL() {
  return getTokens(MySqlParser::STRING_LITERAL);
}

tree::TerminalNode* MySqlParser::Simple_string_listContext::STRING_LITERAL(size_t i) {
  return getToken(MySqlParser::STRING_LITERAL, i);
}


size_t MySqlParser::Simple_string_listContext::getRuleIndex() const {
  return MySqlParser::RuleSimple_string_list;
}

void MySqlParser::Simple_string_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_string_list(this);
}

void MySqlParser::Simple_string_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_string_list(this);
}

MySqlParser::Simple_string_listContext* MySqlParser::simple_string_list() {
  Simple_string_listContext *_localctx = _tracker.createInstance<Simple_string_listContext>(_ctx, getState());
  enterRule(_localctx, 520, MySqlParser::RuleSimple_string_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5336);
    match(MySqlParser::STRING_LITERAL);
    setState(5341);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5337);
      match(MySqlParser::COMMA);
      setState(5338);
      match(MySqlParser::STRING_LITERAL);
      setState(5343);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- User_var_listContext ------------------------------------------------------------------

MySqlParser::User_var_listContext::User_var_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MySqlParser::User_var_listContext::LOCAL_ID() {
  return getTokens(MySqlParser::LOCAL_ID);
}

tree::TerminalNode* MySqlParser::User_var_listContext::LOCAL_ID(size_t i) {
  return getToken(MySqlParser::LOCAL_ID, i);
}


size_t MySqlParser::User_var_listContext::getRuleIndex() const {
  return MySqlParser::RuleUser_var_list;
}

void MySqlParser::User_var_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUser_var_list(this);
}

void MySqlParser::User_var_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUser_var_list(this);
}

MySqlParser::User_var_listContext* MySqlParser::user_var_list() {
  User_var_listContext *_localctx = _tracker.createInstance<User_var_listContext>(_ctx, getState());
  enterRule(_localctx, 522, MySqlParser::RuleUser_var_list);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5344);
    match(MySqlParser::LOCAL_ID);
    setState(5349);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5345);
      match(MySqlParser::COMMA);
      setState(5346);
      match(MySqlParser::LOCAL_ID);
      setState(5351);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_valueContext ------------------------------------------------------------------

MySqlParser::Default_valueContext::Default_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Default_valueContext::NULL_LITERAL() {
  return getToken(MySqlParser::NULL_LITERAL, 0);
}

MySqlParser::ConstantContext* MySqlParser::Default_valueContext::constant() {
  return getRuleContext<MySqlParser::ConstantContext>(0);
}


size_t MySqlParser::Default_valueContext::getRuleIndex() const {
  return MySqlParser::RuleDefault_value;
}

void MySqlParser::Default_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_value(this);
}

void MySqlParser::Default_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_value(this);
}

MySqlParser::Default_valueContext* MySqlParser::default_value() {
  Default_valueContext *_localctx = _tracker.createInstance<Default_valueContext>(_ctx, getState());
  enterRule(_localctx, 524, MySqlParser::RuleDefault_value);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5354);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 793, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5352);
      match(MySqlParser::NULL_LITERAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5353);
      constant();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_existsContext ------------------------------------------------------------------

MySqlParser::If_existsContext::If_existsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::If_existsContext::IF() {
  return getToken(MySqlParser::IF, 0);
}

tree::TerminalNode* MySqlParser::If_existsContext::EXISTS() {
  return getToken(MySqlParser::EXISTS, 0);
}


size_t MySqlParser::If_existsContext::getRuleIndex() const {
  return MySqlParser::RuleIf_exists;
}

void MySqlParser::If_existsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_exists(this);
}

void MySqlParser::If_existsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_exists(this);
}

MySqlParser::If_existsContext* MySqlParser::if_exists() {
  If_existsContext *_localctx = _tracker.createInstance<If_existsContext>(_ctx, getState());
  enterRule(_localctx, 526, MySqlParser::RuleIf_exists);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5356);
    match(MySqlParser::IF);
    setState(5357);
    match(MySqlParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_not_existsContext ------------------------------------------------------------------

MySqlParser::If_not_existsContext::If_not_existsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::If_not_existsContext::IF() {
  return getToken(MySqlParser::IF, 0);
}

tree::TerminalNode* MySqlParser::If_not_existsContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

tree::TerminalNode* MySqlParser::If_not_existsContext::EXISTS() {
  return getToken(MySqlParser::EXISTS, 0);
}


size_t MySqlParser::If_not_existsContext::getRuleIndex() const {
  return MySqlParser::RuleIf_not_exists;
}

void MySqlParser::If_not_existsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_not_exists(this);
}

void MySqlParser::If_not_existsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_not_exists(this);
}

MySqlParser::If_not_existsContext* MySqlParser::if_not_exists() {
  If_not_existsContext *_localctx = _tracker.createInstance<If_not_existsContext>(_ctx, getState());
  enterRule(_localctx, 528, MySqlParser::RuleIf_not_exists);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5359);
    match(MySqlParser::IF);
    setState(5360);
    match(MySqlParser::NOT);
    setState(5361);
    match(MySqlParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_callContext ------------------------------------------------------------------

MySqlParser::Function_callContext::Function_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Function_callContext::getRuleIndex() const {
  return MySqlParser::RuleFunction_call;
}

void MySqlParser::Function_callContext::copyFrom(Function_callContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SpecificFunctionCallContext ------------------------------------------------------------------

MySqlParser::Specific_function_callContext* MySqlParser::SpecificFunctionCallContext::specific_function_call() {
  return getRuleContext<MySqlParser::Specific_function_callContext>(0);
}

MySqlParser::SpecificFunctionCallContext::SpecificFunctionCallContext(Function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::SpecificFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecificFunctionCall(this);
}
void MySqlParser::SpecificFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecificFunctionCall(this);
}
//----------------- UdfFunctionCallContext ------------------------------------------------------------------

MySqlParser::Id_Context* MySqlParser::UdfFunctionCallContext::id_() {
  return getRuleContext<MySqlParser::Id_Context>(0);
}

MySqlParser::Dot_ext_idContext* MySqlParser::UdfFunctionCallContext::dot_ext_id() {
  return getRuleContext<MySqlParser::Dot_ext_idContext>(0);
}

MySqlParser::Function_argsContext* MySqlParser::UdfFunctionCallContext::function_args() {
  return getRuleContext<MySqlParser::Function_argsContext>(0);
}

MySqlParser::UdfFunctionCallContext::UdfFunctionCallContext(Function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::UdfFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUdfFunctionCall(this);
}
void MySqlParser::UdfFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUdfFunctionCall(this);
}
//----------------- AggregateFunctionCallContext ------------------------------------------------------------------

MySqlParser::Aggregate_windowed_functionContext* MySqlParser::AggregateFunctionCallContext::aggregate_windowed_function() {
  return getRuleContext<MySqlParser::Aggregate_windowed_functionContext>(0);
}

MySqlParser::AggregateFunctionCallContext::AggregateFunctionCallContext(Function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::AggregateFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregateFunctionCall(this);
}
void MySqlParser::AggregateFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregateFunctionCall(this);
}
//----------------- ScalarFunctionCallContext ------------------------------------------------------------------

MySqlParser::Scalar_function_nameContext* MySqlParser::ScalarFunctionCallContext::scalar_function_name() {
  return getRuleContext<MySqlParser::Scalar_function_nameContext>(0);
}

MySqlParser::Function_argsContext* MySqlParser::ScalarFunctionCallContext::function_args() {
  return getRuleContext<MySqlParser::Function_argsContext>(0);
}

MySqlParser::ScalarFunctionCallContext::ScalarFunctionCallContext(Function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::ScalarFunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScalarFunctionCall(this);
}
void MySqlParser::ScalarFunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScalarFunctionCall(this);
}
MySqlParser::Function_callContext* MySqlParser::function_call() {
  Function_callContext *_localctx = _tracker.createInstance<Function_callContext>(_ctx, getState());
  enterRule(_localctx, 530, MySqlParser::RuleFunction_call);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5382);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 797, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Function_callContext *>(_tracker.createInstance<MySqlParser::SpecificFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5363);
      specific_function_call();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Function_callContext *>(_tracker.createInstance<MySqlParser::AggregateFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5364);
      aggregate_windowed_function();
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Function_callContext *>(_tracker.createInstance<MySqlParser::ScalarFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(5365);
      scalar_function_name();
      setState(5366);
      match(MySqlParser::LR_BRACKET);
      setState(5368);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << MySqlParser::CASE)
        | (1ULL << MySqlParser::CAST)
        | (1ULL << MySqlParser::CONVERT)
        | (1ULL << MySqlParser::CURRENT_USER)
        | (1ULL << MySqlParser::DEFAULT)
        | (1ULL << MySqlParser::EXISTS)
        | (1ULL << MySqlParser::FALSE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (MySqlParser::IF - 64))
        | (1ULL << (MySqlParser::INTERVAL - 64))
        | (1ULL << (MySqlParser::LEFT - 64))
        | (1ULL << (MySqlParser::NOTNULL - 64))
        | (1ULL << (MySqlParser::NOT - 64))
        | (1ULL << (MySqlParser::NULL_LITERAL - 64))
        | (1ULL << (MySqlParser::REPLACE - 64))
        | (1ULL << (MySqlParser::RIGHT - 64)))) != 0) || ((((_la - 152) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 152)) & ((1ULL << (MySqlParser::TRUE - 152))
        | (1ULL << (MySqlParser::VALUES - 152))
        | (1ULL << (MySqlParser::DATE - 152))
        | (1ULL << (MySqlParser::TIME - 152))
        | (1ULL << (MySqlParser::TIMESTAMP - 152))
        | (1ULL << (MySqlParser::DATETIME - 152))
        | (1ULL << (MySqlParser::YEAR - 152))
        | (1ULL << (MySqlParser::CHAR - 152))
        | (1ULL << (MySqlParser::BINARY - 152))
        | (1ULL << (MySqlParser::TEXT - 152))
        | (1ULL << (MySqlParser::ENUM - 152))
        | (1ULL << (MySqlParser::AVG - 152))
        | (1ULL << (MySqlParser::BIT_AND - 152))
        | (1ULL << (MySqlParser::BIT_OR - 152))
        | (1ULL << (MySqlParser::BIT_XOR - 152))
        | (1ULL << (MySqlParser::COUNT - 152))
        | (1ULL << (MySqlParser::GROUP_CONCAT - 152)))) != 0) || ((((_la - 216) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 216)) & ((1ULL << (MySqlParser::MAX - 216))
        | (1ULL << (MySqlParser::MIN - 216))
        | (1ULL << (MySqlParser::STD - 216))
        | (1ULL << (MySqlParser::STDDEV - 216))
        | (1ULL << (MySqlParser::STDDEV_POP - 216))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 216))
        | (1ULL << (MySqlParser::SUM - 216))
        | (1ULL << (MySqlParser::VAR_POP - 216))
        | (1ULL << (MySqlParser::VAR_SAMP - 216))
        | (1ULL << (MySqlParser::VARIANCE - 216))
        | (1ULL << (MySqlParser::CURRENT_DATE - 216))
        | (1ULL << (MySqlParser::CURRENT_TIME - 216))
        | (1ULL << (MySqlParser::CURRENT_TIMESTAMP - 216))
        | (1ULL << (MySqlParser::LOCALTIME - 216))
        | (1ULL << (MySqlParser::CURDATE - 216))
        | (1ULL << (MySqlParser::CURTIME - 216))
        | (1ULL << (MySqlParser::DATE_ADD - 216))
        | (1ULL << (MySqlParser::DATE_SUB - 216))
        | (1ULL << (MySqlParser::EXTRACT - 216))
        | (1ULL << (MySqlParser::LOCALTIMESTAMP - 216))
        | (1ULL << (MySqlParser::NOW - 216))
        | (1ULL << (MySqlParser::POSITION - 216))
        | (1ULL << (MySqlParser::SUBSTR - 216))
        | (1ULL << (MySqlParser::SUBSTRING - 216))
        | (1ULL << (MySqlParser::SYSDATE - 216))
        | (1ULL << (MySqlParser::TRIM - 216))
        | (1ULL << (MySqlParser::UTC_DATE - 216))
        | (1ULL << (MySqlParser::UTC_TIME - 216))
        | (1ULL << (MySqlParser::UTC_TIMESTAMP - 216))
        | (1ULL << (MySqlParser::ACTION - 216))
        | (1ULL << (MySqlParser::AFTER - 216))
        | (1ULL << (MySqlParser::ALGORITHM - 216))
        | (1ULL << (MySqlParser::ANY - 216))
        | (1ULL << (MySqlParser::AT - 216))
        | (1ULL << (MySqlParser::AUTHORS - 216))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 216))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 216))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 216))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 216))
        | (1ULL << (MySqlParser::BEGIN - 216))
        | (1ULL << (MySqlParser::BINLOG - 216))
        | (1ULL << (MySqlParser::BIT - 216))
        | (1ULL << (MySqlParser::BTREE - 216))
        | (1ULL << (MySqlParser::CASCADED - 216))
        | (1ULL << (MySqlParser::CHAIN - 216))
        | (1ULL << (MySqlParser::CHECKSUM - 216))
        | (1ULL << (MySqlParser::CIPHER - 216))
        | (1ULL << (MySqlParser::CLIENT - 216))
        | (1ULL << (MySqlParser::COALESCE - 216))
        | (1ULL << (MySqlParser::CODE - 216))
        | (1ULL << (MySqlParser::COLUMNS - 216))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 216))
        | (1ULL << (MySqlParser::COMMENT - 216))
        | (1ULL << (MySqlParser::COMMIT - 216))
        | (1ULL << (MySqlParser::COMPACT - 216))
        | (1ULL << (MySqlParser::COMPLETION - 216))
        | (1ULL << (MySqlParser::COMPRESSED - 216)))) != 0) || ((((_la - 281) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 281)) & ((1ULL << (MySqlParser::CONCURRENT - 281))
        | (1ULL << (MySqlParser::CONNECTION - 281))
        | (1ULL << (MySqlParser::CONSISTENT - 281))
        | (1ULL << (MySqlParser::CONTAINS - 281))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 281))
        | (1ULL << (MySqlParser::COPY - 281))
        | (1ULL << (MySqlParser::DATA - 281))
        | (1ULL << (MySqlParser::DATAFILE - 281))
        | (1ULL << (MySqlParser::DEFINER - 281))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 281))
        | (1ULL << (MySqlParser::DIRECTORY - 281))
        | (1ULL << (MySqlParser::DISABLE - 281))
        | (1ULL << (MySqlParser::DISCARD - 281))
        | (1ULL << (MySqlParser::DISK - 281))
        | (1ULL << (MySqlParser::DO - 281))
        | (1ULL << (MySqlParser::DUMPFILE - 281))
        | (1ULL << (MySqlParser::DUPLICATE - 281))
        | (1ULL << (MySqlParser::DYNAMIC - 281))
        | (1ULL << (MySqlParser::ENABLE - 281))
        | (1ULL << (MySqlParser::ENDS - 281))
        | (1ULL << (MySqlParser::ENGINE - 281))
        | (1ULL << (MySqlParser::ENGINES - 281))
        | (1ULL << (MySqlParser::ERRORS - 281))
        | (1ULL << (MySqlParser::ESCAPE - 281))
        | (1ULL << (MySqlParser::EVEN - 281))
        | (1ULL << (MySqlParser::EVENT - 281))
        | (1ULL << (MySqlParser::EVENTS - 281))
        | (1ULL << (MySqlParser::EVERY - 281))
        | (1ULL << (MySqlParser::EXCHANGE - 281))
        | (1ULL << (MySqlParser::EXCLUSIVE - 281))
        | (1ULL << (MySqlParser::EXPIRE - 281))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 281))
        | (1ULL << (MySqlParser::FIELDS - 281))
        | (1ULL << (MySqlParser::FIRST - 281))
        | (1ULL << (MySqlParser::FIXED - 281))
        | (1ULL << (MySqlParser::FULL - 281))
        | (1ULL << (MySqlParser::FUNCTION - 281))
        | (1ULL << (MySqlParser::GLOBAL - 281))
        | (1ULL << (MySqlParser::GRANTS - 281))
        | (1ULL << (MySqlParser::HASH - 281))
        | (1ULL << (MySqlParser::HOST - 281))
        | (1ULL << (MySqlParser::IDENTIFIED - 281)))) != 0) || ((((_la - 346) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 346)) & ((1ULL << (MySqlParser::IMPORT - 346))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 346))
        | (1ULL << (MySqlParser::INPLACE - 346))
        | (1ULL << (MySqlParser::INSERT_METHOD - 346))
        | (1ULL << (MySqlParser::INVOKER - 346))
        | (1ULL << (MySqlParser::ISOLATION - 346))
        | (1ULL << (MySqlParser::ISSUER - 346))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 346))
        | (1ULL << (MySqlParser::LANGUAGE - 346))
        | (1ULL << (MySqlParser::LAST - 346))
        | (1ULL << (MySqlParser::LESS - 346))
        | (1ULL << (MySqlParser::LEVEL - 346))
        | (1ULL << (MySqlParser::LIST - 346))
        | (1ULL << (MySqlParser::LOCAL - 346))
        | (1ULL << (MySqlParser::LOGFILE - 346))
        | (1ULL << (MySqlParser::LOGS - 346))
        | (1ULL << (MySqlParser::MASTER - 346))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 346))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 346))
        | (1ULL << (MySqlParser::MAX_ROWS - 346))
        | (1ULL << (MySqlParser::MAX_SIZE - 346))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 346))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 346))
        | (1ULL << (MySqlParser::MERGE - 346))
        | (1ULL << (MySqlParser::MID - 346))
        | (1ULL << (MySqlParser::MIN_ROWS - 346))
        | (1ULL << (MySqlParser::MODIFY - 346))
        | (1ULL << (MySqlParser::MUTEX - 346))
        | (1ULL << (MySqlParser::MYSQL - 346))
        | (1ULL << (MySqlParser::NAME - 346))
        | (1ULL << (MySqlParser::NAMES - 346))
        | (1ULL << (MySqlParser::NCHAR - 346)))) != 0) || ((((_la - 411) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 411)) & ((1ULL << (MySqlParser::NO - 411))
        | (1ULL << (MySqlParser::NODEGROUP - 411))
        | (1ULL << (MySqlParser::NONE - 411))
        | (1ULL << (MySqlParser::OFFLINE - 411))
        | (1ULL << (MySqlParser::OFFSET - 411))
        | (1ULL << (MySqlParser::OJ - 411))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 411))
        | (1ULL << (MySqlParser::ONLINE - 411))
        | (1ULL << (MySqlParser::ONLY - 411))
        | (1ULL << (MySqlParser::OPTIONS - 411))
        | (1ULL << (MySqlParser::OWNER - 411))
        | (1ULL << (MySqlParser::PACK_KEYS - 411))
        | (1ULL << (MySqlParser::PARSER - 411))
        | (1ULL << (MySqlParser::PARTIAL - 411))
        | (1ULL << (MySqlParser::PARTITIONING - 411))
        | (1ULL << (MySqlParser::PARTITIONS - 411))
        | (1ULL << (MySqlParser::PASSWORD - 411))
        | (1ULL << (MySqlParser::PLUGINS - 411))
        | (1ULL << (MySqlParser::PORT - 411))
        | (1ULL << (MySqlParser::PRESERVE - 411))
        | (1ULL << (MySqlParser::PROCESSLIST - 411))
        | (1ULL << (MySqlParser::PROFILE - 411))
        | (1ULL << (MySqlParser::PROFILES - 411))
        | (1ULL << (MySqlParser::PROXY - 411))
        | (1ULL << (MySqlParser::QUERY - 411))
        | (1ULL << (MySqlParser::QUICK - 411))
        | (1ULL << (MySqlParser::REBUILD - 411))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 411))
        | (1ULL << (MySqlParser::REDUNDANT - 411))
        | (1ULL << (MySqlParser::RELAYLOG - 411))
        | (1ULL << (MySqlParser::REMOVE - 411))
        | (1ULL << (MySqlParser::REORGANIZE - 411))
        | (1ULL << (MySqlParser::REPAIR - 411))
        | (1ULL << (MySqlParser::REPLICATION - 411))
        | (1ULL << (MySqlParser::RETURNS - 411))
        | (1ULL << (MySqlParser::ROLLBACK - 411))
        | (1ULL << (MySqlParser::ROLLUP - 411))
        | (1ULL << (MySqlParser::ROW - 411))
        | (1ULL << (MySqlParser::ROWS - 411))
        | (1ULL << (MySqlParser::ROW_FORMAT - 411)))) != 0) || ((((_la - 475) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 475)) & ((1ULL << (MySqlParser::SAVEPOINT - 475))
        | (1ULL << (MySqlParser::SCHEDULE - 475))
        | (1ULL << (MySqlParser::SECURITY - 475))
        | (1ULL << (MySqlParser::SERVER - 475))
        | (1ULL << (MySqlParser::SESSION - 475))
        | (1ULL << (MySqlParser::SHARE - 475))
        | (1ULL << (MySqlParser::SHARED - 475))
        | (1ULL << (MySqlParser::SIGNED - 475))
        | (1ULL << (MySqlParser::SIMPLE - 475))
        | (1ULL << (MySqlParser::SLAVE - 475))
        | (1ULL << (MySqlParser::SNAPSHOT - 475))
        | (1ULL << (MySqlParser::SOCKET - 475))
        | (1ULL << (MySqlParser::SOME - 475))
        | (1ULL << (MySqlParser::SOUNDS - 475))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 475))
        | (1ULL << (MySqlParser::SQL_CACHE - 475))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 475))
        | (1ULL << (MySqlParser::START - 475))
        | (1ULL << (MySqlParser::STARTS - 475))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 475))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 475))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 475))
        | (1ULL << (MySqlParser::STATUS - 475))
        | (1ULL << (MySqlParser::STORAGE - 475))
        | (1ULL << (MySqlParser::SUBJECT - 475))
        | (1ULL << (MySqlParser::SUBPARTITION - 475))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 475))
        | (1ULL << (MySqlParser::TABLESPACE - 475))
        | (1ULL << (MySqlParser::TEMPORARY - 475))
        | (1ULL << (MySqlParser::TEMPTABLE - 475))
        | (1ULL << (MySqlParser::THAN - 475))
        | (1ULL << (MySqlParser::TRANSACTION - 475))
        | (1ULL << (MySqlParser::TRUNCATE - 475))
        | (1ULL << (MySqlParser::UNDEFINED - 475))
        | (1ULL << (MySqlParser::UNDOFILE - 475))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 475))
        | (1ULL << (MySqlParser::UNKNOWN - 475))
        | (1ULL << (MySqlParser::UPGRADE - 475))
        | (1ULL << (MySqlParser::USER - 475))
        | (1ULL << (MySqlParser::VALUE - 475))
        | (1ULL << (MySqlParser::VARIABLES - 475))
        | (1ULL << (MySqlParser::VIEW - 475))
        | (1ULL << (MySqlParser::WAIT - 475))
        | (1ULL << (MySqlParser::WARNINGS - 475)))) != 0) || ((((_la - 539) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 539)) & ((1ULL << (MySqlParser::WORK - 539))
        | (1ULL << (MySqlParser::WRAPPER - 539))
        | (1ULL << (MySqlParser::X509 - 539))
        | (1ULL << (MySqlParser::XML - 539))
        | (1ULL << (MySqlParser::QUARTER - 539))
        | (1ULL << (MySqlParser::MONTH - 539))
        | (1ULL << (MySqlParser::DAY - 539))
        | (1ULL << (MySqlParser::HOUR - 539))
        | (1ULL << (MySqlParser::MINUTE - 539))
        | (1ULL << (MySqlParser::WEEK - 539))
        | (1ULL << (MySqlParser::SECOND - 539))
        | (1ULL << (MySqlParser::MICROSECOND - 539))
        | (1ULL << (MySqlParser::TABLES - 539))
        | (1ULL << (MySqlParser::ROUTINE - 539))
        | (1ULL << (MySqlParser::EXECUTE - 539))
        | (1ULL << (MySqlParser::FILE - 539))
        | (1ULL << (MySqlParser::PROCESS - 539))
        | (1ULL << (MySqlParser::RELOAD - 539))
        | (1ULL << (MySqlParser::SHUTDOWN - 539))
        | (1ULL << (MySqlParser::SUPER - 539))
        | (1ULL << (MySqlParser::PRIVILEGES - 539))
        | (1ULL << (MySqlParser::ARMSCII8 - 539))
        | (1ULL << (MySqlParser::ASCII - 539))
        | (1ULL << (MySqlParser::BIG5 - 539))
        | (1ULL << (MySqlParser::CP1250 - 539))
        | (1ULL << (MySqlParser::CP1251 - 539))
        | (1ULL << (MySqlParser::CP1256 - 539))
        | (1ULL << (MySqlParser::CP1257 - 539))
        | (1ULL << (MySqlParser::CP850 - 539))
        | (1ULL << (MySqlParser::CP852 - 539))
        | (1ULL << (MySqlParser::CP866 - 539))
        | (1ULL << (MySqlParser::CP932 - 539))
        | (1ULL << (MySqlParser::DEC8 - 539))
        | (1ULL << (MySqlParser::EUCJPMS - 539))
        | (1ULL << (MySqlParser::EUCKR - 539))
        | (1ULL << (MySqlParser::GB2312 - 539))
        | (1ULL << (MySqlParser::GBK - 539))
        | (1ULL << (MySqlParser::GEOSTD8 - 539))
        | (1ULL << (MySqlParser::GREEK - 539))
        | (1ULL << (MySqlParser::HEBREW - 539))
        | (1ULL << (MySqlParser::HP8 - 539))
        | (1ULL << (MySqlParser::KEYBCS2 - 539))
        | (1ULL << (MySqlParser::KOI8R - 539))
        | (1ULL << (MySqlParser::KOI8U - 539))
        | (1ULL << (MySqlParser::LATIN1 - 539))
        | (1ULL << (MySqlParser::LATIN2 - 539))
        | (1ULL << (MySqlParser::LATIN5 - 539))
        | (1ULL << (MySqlParser::LATIN7 - 539))
        | (1ULL << (MySqlParser::MACCE - 539))
        | (1ULL << (MySqlParser::MACROMAN - 539))
        | (1ULL << (MySqlParser::SJIS - 539))
        | (1ULL << (MySqlParser::SWE7 - 539))
        | (1ULL << (MySqlParser::TIS620 - 539))
        | (1ULL << (MySqlParser::UCS2 - 539))
        | (1ULL << (MySqlParser::UJIS - 539))
        | (1ULL << (MySqlParser::UTF16 - 539))
        | (1ULL << (MySqlParser::UTF16LE - 539))
        | (1ULL << (MySqlParser::UTF32 - 539)))) != 0) || ((((_la - 603) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 603)) & ((1ULL << (MySqlParser::UTF8 - 603))
        | (1ULL << (MySqlParser::UTF8MB3 - 603))
        | (1ULL << (MySqlParser::UTF8MB4 - 603))
        | (1ULL << (MySqlParser::ARCHIVE - 603))
        | (1ULL << (MySqlParser::BLACKHOLE - 603))
        | (1ULL << (MySqlParser::CSV - 603))
        | (1ULL << (MySqlParser::FEDERATED - 603))
        | (1ULL << (MySqlParser::INNODB - 603))
        | (1ULL << (MySqlParser::MEMORY - 603))
        | (1ULL << (MySqlParser::MRG_MYISAM - 603))
        | (1ULL << (MySqlParser::MYISAM - 603))
        | (1ULL << (MySqlParser::NDB - 603))
        | (1ULL << (MySqlParser::NDBCLUSTER - 603))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 603))
        | (1ULL << (MySqlParser::REPEATABLE - 603))
        | (1ULL << (MySqlParser::COMMITTED - 603))
        | (1ULL << (MySqlParser::UNCOMMITTED - 603))
        | (1ULL << (MySqlParser::SERIALIZABLE - 603))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 603))
        | (1ULL << (MySqlParser::LINESTRING - 603))
        | (1ULL << (MySqlParser::MULTILINESTRING - 603))
        | (1ULL << (MySqlParser::MULTIPOINT - 603))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 603))
        | (1ULL << (MySqlParser::POINT - 603))
        | (1ULL << (MySqlParser::POLYGON - 603))
        | (1ULL << (MySqlParser::ABS - 603))
        | (1ULL << (MySqlParser::ACOS - 603))
        | (1ULL << (MySqlParser::ADDDATE - 603))
        | (1ULL << (MySqlParser::ADDTIME - 603))
        | (1ULL << (MySqlParser::AES_DECRYPT - 603))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 603))
        | (1ULL << (MySqlParser::AREA - 603))
        | (1ULL << (MySqlParser::ASBINARY - 603))
        | (1ULL << (MySqlParser::ASIN - 603))
        | (1ULL << (MySqlParser::ASTEXT - 603))
        | (1ULL << (MySqlParser::ASWKB - 603))
        | (1ULL << (MySqlParser::ASWKT - 603))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 603))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 603))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 603))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 603))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 603))
        | (1ULL << (MySqlParser::ATAN - 603))
        | (1ULL << (MySqlParser::ATAN2 - 603))
        | (1ULL << (MySqlParser::BENCHMARK - 603))
        | (1ULL << (MySqlParser::BIN - 603))
        | (1ULL << (MySqlParser::BIT_COUNT - 603))
        | (1ULL << (MySqlParser::BIT_LENGTH - 603))
        | (1ULL << (MySqlParser::BUFFER - 603))
        | (1ULL << (MySqlParser::CEIL - 603))
        | (1ULL << (MySqlParser::CEILING - 603))
        | (1ULL << (MySqlParser::CENTROID - 603))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 603))
        | (1ULL << (MySqlParser::CHARSET - 603))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 603))
        | (1ULL << (MySqlParser::COERCIBILITY - 603))
        | (1ULL << (MySqlParser::COLLATION - 603))
        | (1ULL << (MySqlParser::COMPRESS - 603))
        | (1ULL << (MySqlParser::CONCAT - 603))
        | (1ULL << (MySqlParser::CONCAT_WS - 603))
        | (1ULL << (MySqlParser::CONNECTION_ID - 603))
        | (1ULL << (MySqlParser::CONV - 603))
        | (1ULL << (MySqlParser::CONVERT_TZ - 603))
        | (1ULL << (MySqlParser::COS - 603)))) != 0) || ((((_la - 667) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 667)) & ((1ULL << (MySqlParser::COT - 667))
        | (1ULL << (MySqlParser::CRC32 - 667))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 667))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 667))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 667))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 667))
        | (1ULL << (MySqlParser::CROSSES - 667))
        | (1ULL << (MySqlParser::DATEDIFF - 667))
        | (1ULL << (MySqlParser::DATE_FORMAT - 667))
        | (1ULL << (MySqlParser::DAYNAME - 667))
        | (1ULL << (MySqlParser::DAYOFMONTH - 667))
        | (1ULL << (MySqlParser::DAYOFWEEK - 667))
        | (1ULL << (MySqlParser::DAYOFYEAR - 667))
        | (1ULL << (MySqlParser::DECODE - 667))
        | (1ULL << (MySqlParser::DEGREES - 667))
        | (1ULL << (MySqlParser::DES_DECRYPT - 667))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 667))
        | (1ULL << (MySqlParser::DIMENSION - 667))
        | (1ULL << (MySqlParser::DISJOINT - 667))
        | (1ULL << (MySqlParser::ELT - 667))
        | (1ULL << (MySqlParser::ENCODE - 667))
        | (1ULL << (MySqlParser::ENCRYPT - 667))
        | (1ULL << (MySqlParser::ENDPOINT - 667))
        | (1ULL << (MySqlParser::ENVELOPE - 667))
        | (1ULL << (MySqlParser::EQUALS - 667))
        | (1ULL << (MySqlParser::EXP - 667))
        | (1ULL << (MySqlParser::EXPORT_SET - 667))
        | (1ULL << (MySqlParser::EXTERIORRING - 667))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 667))
        | (1ULL << (MySqlParser::FIELD - 667))
        | (1ULL << (MySqlParser::FIND_IN_SET - 667))
        | (1ULL << (MySqlParser::FLOOR - 667))
        | (1ULL << (MySqlParser::FORMAT - 667))
        | (1ULL << (MySqlParser::FOUND_ROWS - 667))
        | (1ULL << (MySqlParser::FROM_BASE64 - 667))
        | (1ULL << (MySqlParser::FROM_DAYS - 667))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 667))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 667))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 667))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 667))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 667))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 667))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 667))
        | (1ULL << (MySqlParser::GEOMETRYN - 667))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 667))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 667))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 667))
        | (1ULL << (MySqlParser::GET_FORMAT - 667))
        | (1ULL << (MySqlParser::GET_LOCK - 667))
        | (1ULL << (MySqlParser::GLENGTH - 667))
        | (1ULL << (MySqlParser::GREATEST - 667))
        | (1ULL << (MySqlParser::GTID_SUBSET - 667))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 667))
        | (1ULL << (MySqlParser::HEX - 667))
        | (1ULL << (MySqlParser::IFNULL - 667))
        | (1ULL << (MySqlParser::INET6_ATON - 667))
        | (1ULL << (MySqlParser::INET6_NTOA - 667))
        | (1ULL << (MySqlParser::INET_ATON - 667))
        | (1ULL << (MySqlParser::INET_NTOA - 667))
        | (1ULL << (MySqlParser::INSTR - 667))
        | (1ULL << (MySqlParser::INTERIORRINGN - 667))
        | (1ULL << (MySqlParser::INTERSECTS - 667))
        | (1ULL << (MySqlParser::ISCLOSED - 667))
        | (1ULL << (MySqlParser::ISEMPTY - 667)))) != 0) || ((((_la - 731) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 731)) & ((1ULL << (MySqlParser::ISNULL - 731))
        | (1ULL << (MySqlParser::ISSIMPLE - 731))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 731))
        | (1ULL << (MySqlParser::IS_IPV4 - 731))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 731))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 731))
        | (1ULL << (MySqlParser::IS_IPV6 - 731))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 731))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 731))
        | (1ULL << (MySqlParser::LCASE - 731))
        | (1ULL << (MySqlParser::LEAST - 731))
        | (1ULL << (MySqlParser::LENGTH - 731))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 731))
        | (1ULL << (MySqlParser::LINEFROMWKB - 731))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 731))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 731))
        | (1ULL << (MySqlParser::LN - 731))
        | (1ULL << (MySqlParser::LOAD_FILE - 731))
        | (1ULL << (MySqlParser::LOCATE - 731))
        | (1ULL << (MySqlParser::LOG - 731))
        | (1ULL << (MySqlParser::LOG10 - 731))
        | (1ULL << (MySqlParser::LOG2 - 731))
        | (1ULL << (MySqlParser::LOWER - 731))
        | (1ULL << (MySqlParser::LPAD - 731))
        | (1ULL << (MySqlParser::LTRIM - 731))
        | (1ULL << (MySqlParser::MAKEDATE - 731))
        | (1ULL << (MySqlParser::MAKETIME - 731))
        | (1ULL << (MySqlParser::MAKE_SET - 731))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 731))
        | (1ULL << (MySqlParser::MBRCONTAINS - 731))
        | (1ULL << (MySqlParser::MBRDISJOINT - 731))
        | (1ULL << (MySqlParser::MBREQUAL - 731))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 731))
        | (1ULL << (MySqlParser::MBROVERLAPS - 731))
        | (1ULL << (MySqlParser::MBRTOUCHES - 731))
        | (1ULL << (MySqlParser::MBRWITHIN - 731))
        | (1ULL << (MySqlParser::MD5 - 731))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 731))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 731))
        | (1ULL << (MySqlParser::MONTHNAME - 731))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 731))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 731))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 731))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 731))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 731))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 731))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 731))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 731))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 731))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 731))
        | (1ULL << (MySqlParser::NAME_CONST - 731))
        | (1ULL << (MySqlParser::NULLIF - 731))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 731))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 731))
        | (1ULL << (MySqlParser::NUMPOINTS - 731))
        | (1ULL << (MySqlParser::OCT - 731))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 731))
        | (1ULL << (MySqlParser::ORD - 731))
        | (1ULL << (MySqlParser::OVERLAPS - 731))
        | (1ULL << (MySqlParser::PERIOD_ADD - 731))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 731))
        | (1ULL << (MySqlParser::PI - 731))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 731))
        | (1ULL << (MySqlParser::POINTFROMWKB - 731)))) != 0) || ((((_la - 795) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 795)) & ((1ULL << (MySqlParser::POINTN - 795))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 795))
        | (1ULL << (MySqlParser::POLYFROMWKB - 795))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 795))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 795))
        | (1ULL << (MySqlParser::POW - 795))
        | (1ULL << (MySqlParser::POWER - 795))
        | (1ULL << (MySqlParser::QUOTE - 795))
        | (1ULL << (MySqlParser::RADIANS - 795))
        | (1ULL << (MySqlParser::RAND - 795))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 795))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 795))
        | (1ULL << (MySqlParser::REVERSE - 795))
        | (1ULL << (MySqlParser::ROUND - 795))
        | (1ULL << (MySqlParser::ROW_COUNT - 795))
        | (1ULL << (MySqlParser::RPAD - 795))
        | (1ULL << (MySqlParser::RTRIM - 795))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 795))
        | (1ULL << (MySqlParser::SESSION_USER - 795))
        | (1ULL << (MySqlParser::SHA - 795))
        | (1ULL << (MySqlParser::SHA1 - 795))
        | (1ULL << (MySqlParser::SHA2 - 795))
        | (1ULL << (MySqlParser::SIGN - 795))
        | (1ULL << (MySqlParser::SIN - 795))
        | (1ULL << (MySqlParser::SLEEP - 795))
        | (1ULL << (MySqlParser::SOUNDEX - 795))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 795))
        | (1ULL << (MySqlParser::SQRT - 795))
        | (1ULL << (MySqlParser::SRID - 795))
        | (1ULL << (MySqlParser::STARTPOINT - 795))
        | (1ULL << (MySqlParser::STRCMP - 795))
        | (1ULL << (MySqlParser::STR_TO_DATE - 795))
        | (1ULL << (MySqlParser::ST_AREA - 795))
        | (1ULL << (MySqlParser::ST_ASBINARY - 795))
        | (1ULL << (MySqlParser::ST_ASTEXT - 795))
        | (1ULL << (MySqlParser::ST_ASWKB - 795))
        | (1ULL << (MySqlParser::ST_ASWKT - 795))
        | (1ULL << (MySqlParser::ST_BUFFER - 795))
        | (1ULL << (MySqlParser::ST_CENTROID - 795))
        | (1ULL << (MySqlParser::ST_CONTAINS - 795))
        | (1ULL << (MySqlParser::ST_CROSSES - 795))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 795))
        | (1ULL << (MySqlParser::ST_DIMENSION - 795))
        | (1ULL << (MySqlParser::ST_DISJOINT - 795))
        | (1ULL << (MySqlParser::ST_DISTANCE - 795))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 795))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 795))
        | (1ULL << (MySqlParser::ST_EQUALS - 795))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 795))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 795))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 795))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 795))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 795))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 795))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 795))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 795))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 795))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 795)))) != 0) || ((((_la - 859) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 859)) & ((1ULL << (MySqlParser::ST_ISEMPTY - 859))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 859))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 859))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 859))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 859))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 859))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 859))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 859))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 859))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 859))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 859))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 859))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 859))
        | (1ULL << (MySqlParser::ST_POINTN - 859))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 859))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 859))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 859))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 859))
        | (1ULL << (MySqlParser::ST_SRID - 859))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 859))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 859))
        | (1ULL << (MySqlParser::ST_TOUCHES - 859))
        | (1ULL << (MySqlParser::ST_UNION - 859))
        | (1ULL << (MySqlParser::ST_WITHIN - 859))
        | (1ULL << (MySqlParser::ST_X - 859))
        | (1ULL << (MySqlParser::ST_Y - 859))
        | (1ULL << (MySqlParser::SUBDATE - 859))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 859))
        | (1ULL << (MySqlParser::SUBTIME - 859))
        | (1ULL << (MySqlParser::SYSTEM_USER - 859))
        | (1ULL << (MySqlParser::TAN - 859))
        | (1ULL << (MySqlParser::TIMEDIFF - 859))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 859))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 859))
        | (1ULL << (MySqlParser::TIME_FORMAT - 859))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 859))
        | (1ULL << (MySqlParser::TOUCHES - 859))
        | (1ULL << (MySqlParser::TO_BASE64 - 859))
        | (1ULL << (MySqlParser::TO_DAYS - 859))
        | (1ULL << (MySqlParser::TO_SECONDS - 859))
        | (1ULL << (MySqlParser::UCASE - 859))
        | (1ULL << (MySqlParser::UNCOMPRESS - 859))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 859))
        | (1ULL << (MySqlParser::UNHEX - 859))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 859))
        | (1ULL << (MySqlParser::UPDATEXML - 859))
        | (1ULL << (MySqlParser::UPPER - 859))
        | (1ULL << (MySqlParser::UUID - 859))
        | (1ULL << (MySqlParser::UUID_SHORT - 859))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 859))
        | (1ULL << (MySqlParser::VERSION - 859))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 859))
        | (1ULL << (MySqlParser::WEEKDAY - 859))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 859))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 859))
        | (1ULL << (MySqlParser::WITHIN - 859))
        | (1ULL << (MySqlParser::YEARWEEK - 859))
        | (1ULL << (MySqlParser::Y_FUNCTION - 859))
        | (1ULL << (MySqlParser::X_FUNCTION - 859)))) != 0) || ((((_la - 930) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 930)) & ((1ULL << (MySqlParser::PLUS - 930))
        | (1ULL << (MySqlParser::MINUS - 930))
        | (1ULL << (MySqlParser::EXCLAMATION_SYMBOL - 930))
        | (1ULL << (MySqlParser::BIT_NOT_OP - 930))
        | (1ULL << (MySqlParser::LR_BRACKET - 930))
        | (1ULL << (MySqlParser::ZERO_DECIMAL - 930))
        | (1ULL << (MySqlParser::ONE_DECIMAL - 930))
        | (1ULL << (MySqlParser::TWO_DECIMAL - 930))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 930))
        | (1ULL << (MySqlParser::START_NATIONAL_STRING_LITERAL - 930))
        | (1ULL << (MySqlParser::STRING_LITERAL - 930))
        | (1ULL << (MySqlParser::DECIMAL_LITERAL - 930))
        | (1ULL << (MySqlParser::HEXADECIMAL_LITERAL - 930))
        | (1ULL << (MySqlParser::REAL_LITERAL - 930))
        | (1ULL << (MySqlParser::NULL_SPEC_LITERAL - 930))
        | (1ULL << (MySqlParser::BIT_STRING - 930))
        | (1ULL << (MySqlParser::STRING_CHARSET_NAME - 930))
        | (1ULL << (MySqlParser::ID - 930))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 930))
        | (1ULL << (MySqlParser::LOCAL_ID - 930))
        | (1ULL << (MySqlParser::GLOBAL_ID - 930)))) != 0)) {
        setState(5367);
        function_args();
      }
      setState(5370);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Function_callContext *>(_tracker.createInstance<MySqlParser::UdfFunctionCallContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(5372);
      id_();
      setState(5374);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DOT

      || _la == MySqlParser::DOT_ID) {
        setState(5373);
        dot_ext_id();
      }
      setState(5376);
      match(MySqlParser::LR_BRACKET);
      setState(5378);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << MySqlParser::CASE)
        | (1ULL << MySqlParser::CAST)
        | (1ULL << MySqlParser::CONVERT)
        | (1ULL << MySqlParser::CURRENT_USER)
        | (1ULL << MySqlParser::DEFAULT)
        | (1ULL << MySqlParser::EXISTS)
        | (1ULL << MySqlParser::FALSE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (MySqlParser::IF - 64))
        | (1ULL << (MySqlParser::INTERVAL - 64))
        | (1ULL << (MySqlParser::LEFT - 64))
        | (1ULL << (MySqlParser::NOTNULL - 64))
        | (1ULL << (MySqlParser::NOT - 64))
        | (1ULL << (MySqlParser::NULL_LITERAL - 64))
        | (1ULL << (MySqlParser::REPLACE - 64))
        | (1ULL << (MySqlParser::RIGHT - 64)))) != 0) || ((((_la - 152) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 152)) & ((1ULL << (MySqlParser::TRUE - 152))
        | (1ULL << (MySqlParser::VALUES - 152))
        | (1ULL << (MySqlParser::DATE - 152))
        | (1ULL << (MySqlParser::TIME - 152))
        | (1ULL << (MySqlParser::TIMESTAMP - 152))
        | (1ULL << (MySqlParser::DATETIME - 152))
        | (1ULL << (MySqlParser::YEAR - 152))
        | (1ULL << (MySqlParser::CHAR - 152))
        | (1ULL << (MySqlParser::BINARY - 152))
        | (1ULL << (MySqlParser::TEXT - 152))
        | (1ULL << (MySqlParser::ENUM - 152))
        | (1ULL << (MySqlParser::AVG - 152))
        | (1ULL << (MySqlParser::BIT_AND - 152))
        | (1ULL << (MySqlParser::BIT_OR - 152))
        | (1ULL << (MySqlParser::BIT_XOR - 152))
        | (1ULL << (MySqlParser::COUNT - 152))
        | (1ULL << (MySqlParser::GROUP_CONCAT - 152)))) != 0) || ((((_la - 216) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 216)) & ((1ULL << (MySqlParser::MAX - 216))
        | (1ULL << (MySqlParser::MIN - 216))
        | (1ULL << (MySqlParser::STD - 216))
        | (1ULL << (MySqlParser::STDDEV - 216))
        | (1ULL << (MySqlParser::STDDEV_POP - 216))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 216))
        | (1ULL << (MySqlParser::SUM - 216))
        | (1ULL << (MySqlParser::VAR_POP - 216))
        | (1ULL << (MySqlParser::VAR_SAMP - 216))
        | (1ULL << (MySqlParser::VARIANCE - 216))
        | (1ULL << (MySqlParser::CURRENT_DATE - 216))
        | (1ULL << (MySqlParser::CURRENT_TIME - 216))
        | (1ULL << (MySqlParser::CURRENT_TIMESTAMP - 216))
        | (1ULL << (MySqlParser::LOCALTIME - 216))
        | (1ULL << (MySqlParser::CURDATE - 216))
        | (1ULL << (MySqlParser::CURTIME - 216))
        | (1ULL << (MySqlParser::DATE_ADD - 216))
        | (1ULL << (MySqlParser::DATE_SUB - 216))
        | (1ULL << (MySqlParser::EXTRACT - 216))
        | (1ULL << (MySqlParser::LOCALTIMESTAMP - 216))
        | (1ULL << (MySqlParser::NOW - 216))
        | (1ULL << (MySqlParser::POSITION - 216))
        | (1ULL << (MySqlParser::SUBSTR - 216))
        | (1ULL << (MySqlParser::SUBSTRING - 216))
        | (1ULL << (MySqlParser::SYSDATE - 216))
        | (1ULL << (MySqlParser::TRIM - 216))
        | (1ULL << (MySqlParser::UTC_DATE - 216))
        | (1ULL << (MySqlParser::UTC_TIME - 216))
        | (1ULL << (MySqlParser::UTC_TIMESTAMP - 216))
        | (1ULL << (MySqlParser::ACTION - 216))
        | (1ULL << (MySqlParser::AFTER - 216))
        | (1ULL << (MySqlParser::ALGORITHM - 216))
        | (1ULL << (MySqlParser::ANY - 216))
        | (1ULL << (MySqlParser::AT - 216))
        | (1ULL << (MySqlParser::AUTHORS - 216))
        | (1ULL << (MySqlParser::AUTOCOMMIT - 216))
        | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 216))
        | (1ULL << (MySqlParser::AUTO_INCREMENT - 216))
        | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 216))
        | (1ULL << (MySqlParser::BEGIN - 216))
        | (1ULL << (MySqlParser::BINLOG - 216))
        | (1ULL << (MySqlParser::BIT - 216))
        | (1ULL << (MySqlParser::BTREE - 216))
        | (1ULL << (MySqlParser::CASCADED - 216))
        | (1ULL << (MySqlParser::CHAIN - 216))
        | (1ULL << (MySqlParser::CHECKSUM - 216))
        | (1ULL << (MySqlParser::CIPHER - 216))
        | (1ULL << (MySqlParser::CLIENT - 216))
        | (1ULL << (MySqlParser::COALESCE - 216))
        | (1ULL << (MySqlParser::CODE - 216))
        | (1ULL << (MySqlParser::COLUMNS - 216))
        | (1ULL << (MySqlParser::COLUMN_FORMAT - 216))
        | (1ULL << (MySqlParser::COMMENT - 216))
        | (1ULL << (MySqlParser::COMMIT - 216))
        | (1ULL << (MySqlParser::COMPACT - 216))
        | (1ULL << (MySqlParser::COMPLETION - 216))
        | (1ULL << (MySqlParser::COMPRESSED - 216)))) != 0) || ((((_la - 281) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 281)) & ((1ULL << (MySqlParser::CONCURRENT - 281))
        | (1ULL << (MySqlParser::CONNECTION - 281))
        | (1ULL << (MySqlParser::CONSISTENT - 281))
        | (1ULL << (MySqlParser::CONTAINS - 281))
        | (1ULL << (MySqlParser::CONTRIBUTORS - 281))
        | (1ULL << (MySqlParser::COPY - 281))
        | (1ULL << (MySqlParser::DATA - 281))
        | (1ULL << (MySqlParser::DATAFILE - 281))
        | (1ULL << (MySqlParser::DEFINER - 281))
        | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 281))
        | (1ULL << (MySqlParser::DIRECTORY - 281))
        | (1ULL << (MySqlParser::DISABLE - 281))
        | (1ULL << (MySqlParser::DISCARD - 281))
        | (1ULL << (MySqlParser::DISK - 281))
        | (1ULL << (MySqlParser::DO - 281))
        | (1ULL << (MySqlParser::DUMPFILE - 281))
        | (1ULL << (MySqlParser::DUPLICATE - 281))
        | (1ULL << (MySqlParser::DYNAMIC - 281))
        | (1ULL << (MySqlParser::ENABLE - 281))
        | (1ULL << (MySqlParser::ENDS - 281))
        | (1ULL << (MySqlParser::ENGINE - 281))
        | (1ULL << (MySqlParser::ENGINES - 281))
        | (1ULL << (MySqlParser::ERRORS - 281))
        | (1ULL << (MySqlParser::ESCAPE - 281))
        | (1ULL << (MySqlParser::EVEN - 281))
        | (1ULL << (MySqlParser::EVENT - 281))
        | (1ULL << (MySqlParser::EVENTS - 281))
        | (1ULL << (MySqlParser::EVERY - 281))
        | (1ULL << (MySqlParser::EXCHANGE - 281))
        | (1ULL << (MySqlParser::EXCLUSIVE - 281))
        | (1ULL << (MySqlParser::EXPIRE - 281))
        | (1ULL << (MySqlParser::EXTENT_SIZE - 281))
        | (1ULL << (MySqlParser::FIELDS - 281))
        | (1ULL << (MySqlParser::FIRST - 281))
        | (1ULL << (MySqlParser::FIXED - 281))
        | (1ULL << (MySqlParser::FULL - 281))
        | (1ULL << (MySqlParser::FUNCTION - 281))
        | (1ULL << (MySqlParser::GLOBAL - 281))
        | (1ULL << (MySqlParser::GRANTS - 281))
        | (1ULL << (MySqlParser::HASH - 281))
        | (1ULL << (MySqlParser::HOST - 281))
        | (1ULL << (MySqlParser::IDENTIFIED - 281)))) != 0) || ((((_la - 346) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 346)) & ((1ULL << (MySqlParser::IMPORT - 346))
        | (1ULL << (MySqlParser::INITIAL_SIZE - 346))
        | (1ULL << (MySqlParser::INPLACE - 346))
        | (1ULL << (MySqlParser::INSERT_METHOD - 346))
        | (1ULL << (MySqlParser::INVOKER - 346))
        | (1ULL << (MySqlParser::ISOLATION - 346))
        | (1ULL << (MySqlParser::ISSUER - 346))
        | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 346))
        | (1ULL << (MySqlParser::LANGUAGE - 346))
        | (1ULL << (MySqlParser::LAST - 346))
        | (1ULL << (MySqlParser::LESS - 346))
        | (1ULL << (MySqlParser::LEVEL - 346))
        | (1ULL << (MySqlParser::LIST - 346))
        | (1ULL << (MySqlParser::LOCAL - 346))
        | (1ULL << (MySqlParser::LOGFILE - 346))
        | (1ULL << (MySqlParser::LOGS - 346))
        | (1ULL << (MySqlParser::MASTER - 346))
        | (1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 346))
        | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 346))
        | (1ULL << (MySqlParser::MAX_ROWS - 346))
        | (1ULL << (MySqlParser::MAX_SIZE - 346))
        | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 346))
        | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 346))
        | (1ULL << (MySqlParser::MERGE - 346))
        | (1ULL << (MySqlParser::MID - 346))
        | (1ULL << (MySqlParser::MIN_ROWS - 346))
        | (1ULL << (MySqlParser::MODIFY - 346))
        | (1ULL << (MySqlParser::MUTEX - 346))
        | (1ULL << (MySqlParser::MYSQL - 346))
        | (1ULL << (MySqlParser::NAME - 346))
        | (1ULL << (MySqlParser::NAMES - 346))
        | (1ULL << (MySqlParser::NCHAR - 346)))) != 0) || ((((_la - 411) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 411)) & ((1ULL << (MySqlParser::NO - 411))
        | (1ULL << (MySqlParser::NODEGROUP - 411))
        | (1ULL << (MySqlParser::NONE - 411))
        | (1ULL << (MySqlParser::OFFLINE - 411))
        | (1ULL << (MySqlParser::OFFSET - 411))
        | (1ULL << (MySqlParser::OJ - 411))
        | (1ULL << (MySqlParser::OLD_PASSWORD - 411))
        | (1ULL << (MySqlParser::ONLINE - 411))
        | (1ULL << (MySqlParser::ONLY - 411))
        | (1ULL << (MySqlParser::OPTIONS - 411))
        | (1ULL << (MySqlParser::OWNER - 411))
        | (1ULL << (MySqlParser::PACK_KEYS - 411))
        | (1ULL << (MySqlParser::PARSER - 411))
        | (1ULL << (MySqlParser::PARTIAL - 411))
        | (1ULL << (MySqlParser::PARTITIONING - 411))
        | (1ULL << (MySqlParser::PARTITIONS - 411))
        | (1ULL << (MySqlParser::PASSWORD - 411))
        | (1ULL << (MySqlParser::PLUGINS - 411))
        | (1ULL << (MySqlParser::PORT - 411))
        | (1ULL << (MySqlParser::PRESERVE - 411))
        | (1ULL << (MySqlParser::PROCESSLIST - 411))
        | (1ULL << (MySqlParser::PROFILE - 411))
        | (1ULL << (MySqlParser::PROFILES - 411))
        | (1ULL << (MySqlParser::PROXY - 411))
        | (1ULL << (MySqlParser::QUERY - 411))
        | (1ULL << (MySqlParser::QUICK - 411))
        | (1ULL << (MySqlParser::REBUILD - 411))
        | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 411))
        | (1ULL << (MySqlParser::REDUNDANT - 411))
        | (1ULL << (MySqlParser::RELAYLOG - 411))
        | (1ULL << (MySqlParser::REMOVE - 411))
        | (1ULL << (MySqlParser::REORGANIZE - 411))
        | (1ULL << (MySqlParser::REPAIR - 411))
        | (1ULL << (MySqlParser::REPLICATION - 411))
        | (1ULL << (MySqlParser::RETURNS - 411))
        | (1ULL << (MySqlParser::ROLLBACK - 411))
        | (1ULL << (MySqlParser::ROLLUP - 411))
        | (1ULL << (MySqlParser::ROW - 411))
        | (1ULL << (MySqlParser::ROWS - 411))
        | (1ULL << (MySqlParser::ROW_FORMAT - 411)))) != 0) || ((((_la - 475) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 475)) & ((1ULL << (MySqlParser::SAVEPOINT - 475))
        | (1ULL << (MySqlParser::SCHEDULE - 475))
        | (1ULL << (MySqlParser::SECURITY - 475))
        | (1ULL << (MySqlParser::SERVER - 475))
        | (1ULL << (MySqlParser::SESSION - 475))
        | (1ULL << (MySqlParser::SHARE - 475))
        | (1ULL << (MySqlParser::SHARED - 475))
        | (1ULL << (MySqlParser::SIGNED - 475))
        | (1ULL << (MySqlParser::SIMPLE - 475))
        | (1ULL << (MySqlParser::SLAVE - 475))
        | (1ULL << (MySqlParser::SNAPSHOT - 475))
        | (1ULL << (MySqlParser::SOCKET - 475))
        | (1ULL << (MySqlParser::SOME - 475))
        | (1ULL << (MySqlParser::SOUNDS - 475))
        | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 475))
        | (1ULL << (MySqlParser::SQL_CACHE - 475))
        | (1ULL << (MySqlParser::SQL_NO_CACHE - 475))
        | (1ULL << (MySqlParser::START - 475))
        | (1ULL << (MySqlParser::STARTS - 475))
        | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 475))
        | (1ULL << (MySqlParser::STATS_PERSISTENT - 475))
        | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 475))
        | (1ULL << (MySqlParser::STATUS - 475))
        | (1ULL << (MySqlParser::STORAGE - 475))
        | (1ULL << (MySqlParser::SUBJECT - 475))
        | (1ULL << (MySqlParser::SUBPARTITION - 475))
        | (1ULL << (MySqlParser::SUBPARTITIONS - 475))
        | (1ULL << (MySqlParser::TABLESPACE - 475))
        | (1ULL << (MySqlParser::TEMPORARY - 475))
        | (1ULL << (MySqlParser::TEMPTABLE - 475))
        | (1ULL << (MySqlParser::THAN - 475))
        | (1ULL << (MySqlParser::TRANSACTION - 475))
        | (1ULL << (MySqlParser::TRUNCATE - 475))
        | (1ULL << (MySqlParser::UNDEFINED - 475))
        | (1ULL << (MySqlParser::UNDOFILE - 475))
        | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 475))
        | (1ULL << (MySqlParser::UNKNOWN - 475))
        | (1ULL << (MySqlParser::UPGRADE - 475))
        | (1ULL << (MySqlParser::USER - 475))
        | (1ULL << (MySqlParser::VALUE - 475))
        | (1ULL << (MySqlParser::VARIABLES - 475))
        | (1ULL << (MySqlParser::VIEW - 475))
        | (1ULL << (MySqlParser::WAIT - 475))
        | (1ULL << (MySqlParser::WARNINGS - 475)))) != 0) || ((((_la - 539) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 539)) & ((1ULL << (MySqlParser::WORK - 539))
        | (1ULL << (MySqlParser::WRAPPER - 539))
        | (1ULL << (MySqlParser::X509 - 539))
        | (1ULL << (MySqlParser::XML - 539))
        | (1ULL << (MySqlParser::QUARTER - 539))
        | (1ULL << (MySqlParser::MONTH - 539))
        | (1ULL << (MySqlParser::DAY - 539))
        | (1ULL << (MySqlParser::HOUR - 539))
        | (1ULL << (MySqlParser::MINUTE - 539))
        | (1ULL << (MySqlParser::WEEK - 539))
        | (1ULL << (MySqlParser::SECOND - 539))
        | (1ULL << (MySqlParser::MICROSECOND - 539))
        | (1ULL << (MySqlParser::TABLES - 539))
        | (1ULL << (MySqlParser::ROUTINE - 539))
        | (1ULL << (MySqlParser::EXECUTE - 539))
        | (1ULL << (MySqlParser::FILE - 539))
        | (1ULL << (MySqlParser::PROCESS - 539))
        | (1ULL << (MySqlParser::RELOAD - 539))
        | (1ULL << (MySqlParser::SHUTDOWN - 539))
        | (1ULL << (MySqlParser::SUPER - 539))
        | (1ULL << (MySqlParser::PRIVILEGES - 539))
        | (1ULL << (MySqlParser::ARMSCII8 - 539))
        | (1ULL << (MySqlParser::ASCII - 539))
        | (1ULL << (MySqlParser::BIG5 - 539))
        | (1ULL << (MySqlParser::CP1250 - 539))
        | (1ULL << (MySqlParser::CP1251 - 539))
        | (1ULL << (MySqlParser::CP1256 - 539))
        | (1ULL << (MySqlParser::CP1257 - 539))
        | (1ULL << (MySqlParser::CP850 - 539))
        | (1ULL << (MySqlParser::CP852 - 539))
        | (1ULL << (MySqlParser::CP866 - 539))
        | (1ULL << (MySqlParser::CP932 - 539))
        | (1ULL << (MySqlParser::DEC8 - 539))
        | (1ULL << (MySqlParser::EUCJPMS - 539))
        | (1ULL << (MySqlParser::EUCKR - 539))
        | (1ULL << (MySqlParser::GB2312 - 539))
        | (1ULL << (MySqlParser::GBK - 539))
        | (1ULL << (MySqlParser::GEOSTD8 - 539))
        | (1ULL << (MySqlParser::GREEK - 539))
        | (1ULL << (MySqlParser::HEBREW - 539))
        | (1ULL << (MySqlParser::HP8 - 539))
        | (1ULL << (MySqlParser::KEYBCS2 - 539))
        | (1ULL << (MySqlParser::KOI8R - 539))
        | (1ULL << (MySqlParser::KOI8U - 539))
        | (1ULL << (MySqlParser::LATIN1 - 539))
        | (1ULL << (MySqlParser::LATIN2 - 539))
        | (1ULL << (MySqlParser::LATIN5 - 539))
        | (1ULL << (MySqlParser::LATIN7 - 539))
        | (1ULL << (MySqlParser::MACCE - 539))
        | (1ULL << (MySqlParser::MACROMAN - 539))
        | (1ULL << (MySqlParser::SJIS - 539))
        | (1ULL << (MySqlParser::SWE7 - 539))
        | (1ULL << (MySqlParser::TIS620 - 539))
        | (1ULL << (MySqlParser::UCS2 - 539))
        | (1ULL << (MySqlParser::UJIS - 539))
        | (1ULL << (MySqlParser::UTF16 - 539))
        | (1ULL << (MySqlParser::UTF16LE - 539))
        | (1ULL << (MySqlParser::UTF32 - 539)))) != 0) || ((((_la - 603) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 603)) & ((1ULL << (MySqlParser::UTF8 - 603))
        | (1ULL << (MySqlParser::UTF8MB3 - 603))
        | (1ULL << (MySqlParser::UTF8MB4 - 603))
        | (1ULL << (MySqlParser::ARCHIVE - 603))
        | (1ULL << (MySqlParser::BLACKHOLE - 603))
        | (1ULL << (MySqlParser::CSV - 603))
        | (1ULL << (MySqlParser::FEDERATED - 603))
        | (1ULL << (MySqlParser::INNODB - 603))
        | (1ULL << (MySqlParser::MEMORY - 603))
        | (1ULL << (MySqlParser::MRG_MYISAM - 603))
        | (1ULL << (MySqlParser::MYISAM - 603))
        | (1ULL << (MySqlParser::NDB - 603))
        | (1ULL << (MySqlParser::NDBCLUSTER - 603))
        | (1ULL << (MySqlParser::PERFOMANCE_SCHEMA - 603))
        | (1ULL << (MySqlParser::REPEATABLE - 603))
        | (1ULL << (MySqlParser::COMMITTED - 603))
        | (1ULL << (MySqlParser::UNCOMMITTED - 603))
        | (1ULL << (MySqlParser::SERIALIZABLE - 603))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTION - 603))
        | (1ULL << (MySqlParser::LINESTRING - 603))
        | (1ULL << (MySqlParser::MULTILINESTRING - 603))
        | (1ULL << (MySqlParser::MULTIPOINT - 603))
        | (1ULL << (MySqlParser::MULTIPOLYGON - 603))
        | (1ULL << (MySqlParser::POINT - 603))
        | (1ULL << (MySqlParser::POLYGON - 603))
        | (1ULL << (MySqlParser::ABS - 603))
        | (1ULL << (MySqlParser::ACOS - 603))
        | (1ULL << (MySqlParser::ADDDATE - 603))
        | (1ULL << (MySqlParser::ADDTIME - 603))
        | (1ULL << (MySqlParser::AES_DECRYPT - 603))
        | (1ULL << (MySqlParser::AES_ENCRYPT - 603))
        | (1ULL << (MySqlParser::AREA - 603))
        | (1ULL << (MySqlParser::ASBINARY - 603))
        | (1ULL << (MySqlParser::ASIN - 603))
        | (1ULL << (MySqlParser::ASTEXT - 603))
        | (1ULL << (MySqlParser::ASWKB - 603))
        | (1ULL << (MySqlParser::ASWKT - 603))
        | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 603))
        | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 603))
        | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 603))
        | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 603))
        | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 603))
        | (1ULL << (MySqlParser::ATAN - 603))
        | (1ULL << (MySqlParser::ATAN2 - 603))
        | (1ULL << (MySqlParser::BENCHMARK - 603))
        | (1ULL << (MySqlParser::BIN - 603))
        | (1ULL << (MySqlParser::BIT_COUNT - 603))
        | (1ULL << (MySqlParser::BIT_LENGTH - 603))
        | (1ULL << (MySqlParser::BUFFER - 603))
        | (1ULL << (MySqlParser::CEIL - 603))
        | (1ULL << (MySqlParser::CEILING - 603))
        | (1ULL << (MySqlParser::CENTROID - 603))
        | (1ULL << (MySqlParser::CHARACTER_LENGTH - 603))
        | (1ULL << (MySqlParser::CHARSET - 603))
        | (1ULL << (MySqlParser::CHAR_LENGTH - 603))
        | (1ULL << (MySqlParser::COERCIBILITY - 603))
        | (1ULL << (MySqlParser::COLLATION - 603))
        | (1ULL << (MySqlParser::COMPRESS - 603))
        | (1ULL << (MySqlParser::CONCAT - 603))
        | (1ULL << (MySqlParser::CONCAT_WS - 603))
        | (1ULL << (MySqlParser::CONNECTION_ID - 603))
        | (1ULL << (MySqlParser::CONV - 603))
        | (1ULL << (MySqlParser::CONVERT_TZ - 603))
        | (1ULL << (MySqlParser::COS - 603)))) != 0) || ((((_la - 667) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 667)) & ((1ULL << (MySqlParser::COT - 667))
        | (1ULL << (MySqlParser::CRC32 - 667))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 667))
        | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 667))
        | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 667))
        | (1ULL << (MySqlParser::CREATE_DIGEST - 667))
        | (1ULL << (MySqlParser::CROSSES - 667))
        | (1ULL << (MySqlParser::DATEDIFF - 667))
        | (1ULL << (MySqlParser::DATE_FORMAT - 667))
        | (1ULL << (MySqlParser::DAYNAME - 667))
        | (1ULL << (MySqlParser::DAYOFMONTH - 667))
        | (1ULL << (MySqlParser::DAYOFWEEK - 667))
        | (1ULL << (MySqlParser::DAYOFYEAR - 667))
        | (1ULL << (MySqlParser::DECODE - 667))
        | (1ULL << (MySqlParser::DEGREES - 667))
        | (1ULL << (MySqlParser::DES_DECRYPT - 667))
        | (1ULL << (MySqlParser::DES_ENCRYPT - 667))
        | (1ULL << (MySqlParser::DIMENSION - 667))
        | (1ULL << (MySqlParser::DISJOINT - 667))
        | (1ULL << (MySqlParser::ELT - 667))
        | (1ULL << (MySqlParser::ENCODE - 667))
        | (1ULL << (MySqlParser::ENCRYPT - 667))
        | (1ULL << (MySqlParser::ENDPOINT - 667))
        | (1ULL << (MySqlParser::ENVELOPE - 667))
        | (1ULL << (MySqlParser::EQUALS - 667))
        | (1ULL << (MySqlParser::EXP - 667))
        | (1ULL << (MySqlParser::EXPORT_SET - 667))
        | (1ULL << (MySqlParser::EXTERIORRING - 667))
        | (1ULL << (MySqlParser::EXTRACTVALUE - 667))
        | (1ULL << (MySqlParser::FIELD - 667))
        | (1ULL << (MySqlParser::FIND_IN_SET - 667))
        | (1ULL << (MySqlParser::FLOOR - 667))
        | (1ULL << (MySqlParser::FORMAT - 667))
        | (1ULL << (MySqlParser::FOUND_ROWS - 667))
        | (1ULL << (MySqlParser::FROM_BASE64 - 667))
        | (1ULL << (MySqlParser::FROM_DAYS - 667))
        | (1ULL << (MySqlParser::FROM_UNIXTIME - 667))
        | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 667))
        | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 667))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 667))
        | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 667))
        | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 667))
        | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 667))
        | (1ULL << (MySqlParser::GEOMETRYN - 667))
        | (1ULL << (MySqlParser::GEOMETRYTYPE - 667))
        | (1ULL << (MySqlParser::GEOMFROMTEXT - 667))
        | (1ULL << (MySqlParser::GEOMFROMWKB - 667))
        | (1ULL << (MySqlParser::GET_FORMAT - 667))
        | (1ULL << (MySqlParser::GET_LOCK - 667))
        | (1ULL << (MySqlParser::GLENGTH - 667))
        | (1ULL << (MySqlParser::GREATEST - 667))
        | (1ULL << (MySqlParser::GTID_SUBSET - 667))
        | (1ULL << (MySqlParser::GTID_SUBTRACT - 667))
        | (1ULL << (MySqlParser::HEX - 667))
        | (1ULL << (MySqlParser::IFNULL - 667))
        | (1ULL << (MySqlParser::INET6_ATON - 667))
        | (1ULL << (MySqlParser::INET6_NTOA - 667))
        | (1ULL << (MySqlParser::INET_ATON - 667))
        | (1ULL << (MySqlParser::INET_NTOA - 667))
        | (1ULL << (MySqlParser::INSTR - 667))
        | (1ULL << (MySqlParser::INTERIORRINGN - 667))
        | (1ULL << (MySqlParser::INTERSECTS - 667))
        | (1ULL << (MySqlParser::ISCLOSED - 667))
        | (1ULL << (MySqlParser::ISEMPTY - 667)))) != 0) || ((((_la - 731) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 731)) & ((1ULL << (MySqlParser::ISNULL - 731))
        | (1ULL << (MySqlParser::ISSIMPLE - 731))
        | (1ULL << (MySqlParser::IS_FREE_LOCK - 731))
        | (1ULL << (MySqlParser::IS_IPV4 - 731))
        | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 731))
        | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 731))
        | (1ULL << (MySqlParser::IS_IPV6 - 731))
        | (1ULL << (MySqlParser::IS_USED_LOCK - 731))
        | (1ULL << (MySqlParser::LAST_INSERT_ID - 731))
        | (1ULL << (MySqlParser::LCASE - 731))
        | (1ULL << (MySqlParser::LEAST - 731))
        | (1ULL << (MySqlParser::LENGTH - 731))
        | (1ULL << (MySqlParser::LINEFROMTEXT - 731))
        | (1ULL << (MySqlParser::LINEFROMWKB - 731))
        | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 731))
        | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 731))
        | (1ULL << (MySqlParser::LN - 731))
        | (1ULL << (MySqlParser::LOAD_FILE - 731))
        | (1ULL << (MySqlParser::LOCATE - 731))
        | (1ULL << (MySqlParser::LOG - 731))
        | (1ULL << (MySqlParser::LOG10 - 731))
        | (1ULL << (MySqlParser::LOG2 - 731))
        | (1ULL << (MySqlParser::LOWER - 731))
        | (1ULL << (MySqlParser::LPAD - 731))
        | (1ULL << (MySqlParser::LTRIM - 731))
        | (1ULL << (MySqlParser::MAKEDATE - 731))
        | (1ULL << (MySqlParser::MAKETIME - 731))
        | (1ULL << (MySqlParser::MAKE_SET - 731))
        | (1ULL << (MySqlParser::MASTER_POS_WAIT - 731))
        | (1ULL << (MySqlParser::MBRCONTAINS - 731))
        | (1ULL << (MySqlParser::MBRDISJOINT - 731))
        | (1ULL << (MySqlParser::MBREQUAL - 731))
        | (1ULL << (MySqlParser::MBRINTERSECTS - 731))
        | (1ULL << (MySqlParser::MBROVERLAPS - 731))
        | (1ULL << (MySqlParser::MBRTOUCHES - 731))
        | (1ULL << (MySqlParser::MBRWITHIN - 731))
        | (1ULL << (MySqlParser::MD5 - 731))
        | (1ULL << (MySqlParser::MLINEFROMTEXT - 731))
        | (1ULL << (MySqlParser::MLINEFROMWKB - 731))
        | (1ULL << (MySqlParser::MONTHNAME - 731))
        | (1ULL << (MySqlParser::MPOINTFROMTEXT - 731))
        | (1ULL << (MySqlParser::MPOINTFROMWKB - 731))
        | (1ULL << (MySqlParser::MPOLYFROMTEXT - 731))
        | (1ULL << (MySqlParser::MPOLYFROMWKB - 731))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 731))
        | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 731))
        | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 731))
        | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 731))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 731))
        | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 731))
        | (1ULL << (MySqlParser::NAME_CONST - 731))
        | (1ULL << (MySqlParser::NULLIF - 731))
        | (1ULL << (MySqlParser::NUMGEOMETRIES - 731))
        | (1ULL << (MySqlParser::NUMINTERIORRINGS - 731))
        | (1ULL << (MySqlParser::NUMPOINTS - 731))
        | (1ULL << (MySqlParser::OCT - 731))
        | (1ULL << (MySqlParser::OCTET_LENGTH - 731))
        | (1ULL << (MySqlParser::ORD - 731))
        | (1ULL << (MySqlParser::OVERLAPS - 731))
        | (1ULL << (MySqlParser::PERIOD_ADD - 731))
        | (1ULL << (MySqlParser::PERIOD_DIFF - 731))
        | (1ULL << (MySqlParser::PI - 731))
        | (1ULL << (MySqlParser::POINTFROMTEXT - 731))
        | (1ULL << (MySqlParser::POINTFROMWKB - 731)))) != 0) || ((((_la - 795) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 795)) & ((1ULL << (MySqlParser::POINTN - 795))
        | (1ULL << (MySqlParser::POLYFROMTEXT - 795))
        | (1ULL << (MySqlParser::POLYFROMWKB - 795))
        | (1ULL << (MySqlParser::POLYGONFROMTEXT - 795))
        | (1ULL << (MySqlParser::POLYGONFROMWKB - 795))
        | (1ULL << (MySqlParser::POW - 795))
        | (1ULL << (MySqlParser::POWER - 795))
        | (1ULL << (MySqlParser::QUOTE - 795))
        | (1ULL << (MySqlParser::RADIANS - 795))
        | (1ULL << (MySqlParser::RAND - 795))
        | (1ULL << (MySqlParser::RANDOM_BYTES - 795))
        | (1ULL << (MySqlParser::RELEASE_LOCK - 795))
        | (1ULL << (MySqlParser::REVERSE - 795))
        | (1ULL << (MySqlParser::ROUND - 795))
        | (1ULL << (MySqlParser::ROW_COUNT - 795))
        | (1ULL << (MySqlParser::RPAD - 795))
        | (1ULL << (MySqlParser::RTRIM - 795))
        | (1ULL << (MySqlParser::SEC_TO_TIME - 795))
        | (1ULL << (MySqlParser::SESSION_USER - 795))
        | (1ULL << (MySqlParser::SHA - 795))
        | (1ULL << (MySqlParser::SHA1 - 795))
        | (1ULL << (MySqlParser::SHA2 - 795))
        | (1ULL << (MySqlParser::SIGN - 795))
        | (1ULL << (MySqlParser::SIN - 795))
        | (1ULL << (MySqlParser::SLEEP - 795))
        | (1ULL << (MySqlParser::SOUNDEX - 795))
        | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 795))
        | (1ULL << (MySqlParser::SQRT - 795))
        | (1ULL << (MySqlParser::SRID - 795))
        | (1ULL << (MySqlParser::STARTPOINT - 795))
        | (1ULL << (MySqlParser::STRCMP - 795))
        | (1ULL << (MySqlParser::STR_TO_DATE - 795))
        | (1ULL << (MySqlParser::ST_AREA - 795))
        | (1ULL << (MySqlParser::ST_ASBINARY - 795))
        | (1ULL << (MySqlParser::ST_ASTEXT - 795))
        | (1ULL << (MySqlParser::ST_ASWKB - 795))
        | (1ULL << (MySqlParser::ST_ASWKT - 795))
        | (1ULL << (MySqlParser::ST_BUFFER - 795))
        | (1ULL << (MySqlParser::ST_CENTROID - 795))
        | (1ULL << (MySqlParser::ST_CONTAINS - 795))
        | (1ULL << (MySqlParser::ST_CROSSES - 795))
        | (1ULL << (MySqlParser::ST_DIFFERENCE - 795))
        | (1ULL << (MySqlParser::ST_DIMENSION - 795))
        | (1ULL << (MySqlParser::ST_DISJOINT - 795))
        | (1ULL << (MySqlParser::ST_DISTANCE - 795))
        | (1ULL << (MySqlParser::ST_ENDPOINT - 795))
        | (1ULL << (MySqlParser::ST_ENVELOPE - 795))
        | (1ULL << (MySqlParser::ST_EQUALS - 795))
        | (1ULL << (MySqlParser::ST_EXTERIORRING - 795))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 795))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 795))
        | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYN - 795))
        | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 795))
        | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 795))
        | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 795))
        | (1ULL << (MySqlParser::ST_INTERIORRINGN - 795))
        | (1ULL << (MySqlParser::ST_INTERSECTION - 795))
        | (1ULL << (MySqlParser::ST_INTERSECTS - 795))
        | (1ULL << (MySqlParser::ST_ISCLOSED - 795)))) != 0) || ((((_la - 859) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 859)) & ((1ULL << (MySqlParser::ST_ISEMPTY - 859))
        | (1ULL << (MySqlParser::ST_ISSIMPLE - 859))
        | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 859))
        | (1ULL << (MySqlParser::ST_LINEFROMWKB - 859))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 859))
        | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 859))
        | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 859))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 859))
        | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 859))
        | (1ULL << (MySqlParser::ST_NUMPOINTS - 859))
        | (1ULL << (MySqlParser::ST_OVERLAPS - 859))
        | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 859))
        | (1ULL << (MySqlParser::ST_POINTFROMWKB - 859))
        | (1ULL << (MySqlParser::ST_POINTN - 859))
        | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 859))
        | (1ULL << (MySqlParser::ST_POLYFROMWKB - 859))
        | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 859))
        | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 859))
        | (1ULL << (MySqlParser::ST_SRID - 859))
        | (1ULL << (MySqlParser::ST_STARTPOINT - 859))
        | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 859))
        | (1ULL << (MySqlParser::ST_TOUCHES - 859))
        | (1ULL << (MySqlParser::ST_UNION - 859))
        | (1ULL << (MySqlParser::ST_WITHIN - 859))
        | (1ULL << (MySqlParser::ST_X - 859))
        | (1ULL << (MySqlParser::ST_Y - 859))
        | (1ULL << (MySqlParser::SUBDATE - 859))
        | (1ULL << (MySqlParser::SUBSTRING_INDEX - 859))
        | (1ULL << (MySqlParser::SUBTIME - 859))
        | (1ULL << (MySqlParser::SYSTEM_USER - 859))
        | (1ULL << (MySqlParser::TAN - 859))
        | (1ULL << (MySqlParser::TIMEDIFF - 859))
        | (1ULL << (MySqlParser::TIMESTAMPADD - 859))
        | (1ULL << (MySqlParser::TIMESTAMPDIFF - 859))
        | (1ULL << (MySqlParser::TIME_FORMAT - 859))
        | (1ULL << (MySqlParser::TIME_TO_SEC - 859))
        | (1ULL << (MySqlParser::TOUCHES - 859))
        | (1ULL << (MySqlParser::TO_BASE64 - 859))
        | (1ULL << (MySqlParser::TO_DAYS - 859))
        | (1ULL << (MySqlParser::TO_SECONDS - 859))
        | (1ULL << (MySqlParser::UCASE - 859))
        | (1ULL << (MySqlParser::UNCOMPRESS - 859))
        | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 859))
        | (1ULL << (MySqlParser::UNHEX - 859))
        | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 859))
        | (1ULL << (MySqlParser::UPDATEXML - 859))
        | (1ULL << (MySqlParser::UPPER - 859))
        | (1ULL << (MySqlParser::UUID - 859))
        | (1ULL << (MySqlParser::UUID_SHORT - 859))
        | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 859))
        | (1ULL << (MySqlParser::VERSION - 859))
        | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 859))
        | (1ULL << (MySqlParser::WEEKDAY - 859))
        | (1ULL << (MySqlParser::WEEKOFYEAR - 859))
        | (1ULL << (MySqlParser::WEIGHT_STRING - 859))
        | (1ULL << (MySqlParser::WITHIN - 859))
        | (1ULL << (MySqlParser::YEARWEEK - 859))
        | (1ULL << (MySqlParser::Y_FUNCTION - 859))
        | (1ULL << (MySqlParser::X_FUNCTION - 859)))) != 0) || ((((_la - 930) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 930)) & ((1ULL << (MySqlParser::PLUS - 930))
        | (1ULL << (MySqlParser::MINUS - 930))
        | (1ULL << (MySqlParser::EXCLAMATION_SYMBOL - 930))
        | (1ULL << (MySqlParser::BIT_NOT_OP - 930))
        | (1ULL << (MySqlParser::LR_BRACKET - 930))
        | (1ULL << (MySqlParser::ZERO_DECIMAL - 930))
        | (1ULL << (MySqlParser::ONE_DECIMAL - 930))
        | (1ULL << (MySqlParser::TWO_DECIMAL - 930))
        | (1ULL << (MySqlParser::CHARSET_REVERSE_QOUTE_STRING - 930))
        | (1ULL << (MySqlParser::START_NATIONAL_STRING_LITERAL - 930))
        | (1ULL << (MySqlParser::STRING_LITERAL - 930))
        | (1ULL << (MySqlParser::DECIMAL_LITERAL - 930))
        | (1ULL << (MySqlParser::HEXADECIMAL_LITERAL - 930))
        | (1ULL << (MySqlParser::REAL_LITERAL - 930))
        | (1ULL << (MySqlParser::NULL_SPEC_LITERAL - 930))
        | (1ULL << (MySqlParser::BIT_STRING - 930))
        | (1ULL << (MySqlParser::STRING_CHARSET_NAME - 930))
        | (1ULL << (MySqlParser::ID - 930))
        | (1ULL << (MySqlParser::REVERSE_QUOTE_ID - 930))
        | (1ULL << (MySqlParser::LOCAL_ID - 930))
        | (1ULL << (MySqlParser::GLOBAL_ID - 930)))) != 0)) {
        setState(5377);
        function_args();
      }
      setState(5380);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Specific_function_callContext ------------------------------------------------------------------

MySqlParser::Specific_function_callContext::Specific_function_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Specific_function_callContext::getRuleIndex() const {
  return MySqlParser::RuleSpecific_function_call;
}

void MySqlParser::Specific_function_callContext::copyFrom(Specific_function_callContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ValuesFCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ValuesFCallContext::VALUES() {
  return getToken(MySqlParser::VALUES, 0);
}

MySqlParser::Full_column_nameContext* MySqlParser::ValuesFCallContext::full_column_name() {
  return getRuleContext<MySqlParser::Full_column_nameContext>(0);
}

MySqlParser::ValuesFCallContext::ValuesFCallContext(Specific_function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::ValuesFCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValuesFCall(this);
}
void MySqlParser::ValuesFCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValuesFCall(this);
}
//----------------- ExtractFCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ExtractFCallContext::EXTRACT() {
  return getToken(MySqlParser::EXTRACT, 0);
}

MySqlParser::Interval_typeContext* MySqlParser::ExtractFCallContext::interval_type() {
  return getRuleContext<MySqlParser::Interval_typeContext>(0);
}

tree::TerminalNode* MySqlParser::ExtractFCallContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

MySqlParser::String_literalContext* MySqlParser::ExtractFCallContext::string_literal() {
  return getRuleContext<MySqlParser::String_literalContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::ExtractFCallContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::ExtractFCallContext::ExtractFCallContext(Specific_function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::ExtractFCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtractFCall(this);
}
void MySqlParser::ExtractFCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtractFCall(this);
}
//----------------- TrimFCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::TrimFCallContext::TRIM() {
  return getToken(MySqlParser::TRIM, 0);
}

tree::TerminalNode* MySqlParser::TrimFCallContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::TrimFCallContext::BOTH() {
  return getToken(MySqlParser::BOTH, 0);
}

tree::TerminalNode* MySqlParser::TrimFCallContext::LEADING() {
  return getToken(MySqlParser::LEADING, 0);
}

tree::TerminalNode* MySqlParser::TrimFCallContext::TRAILING() {
  return getToken(MySqlParser::TRAILING, 0);
}

std::vector<MySqlParser::String_literalContext *> MySqlParser::TrimFCallContext::string_literal() {
  return getRuleContexts<MySqlParser::String_literalContext>();
}

MySqlParser::String_literalContext* MySqlParser::TrimFCallContext::string_literal(size_t i) {
  return getRuleContext<MySqlParser::String_literalContext>(i);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::TrimFCallContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::TrimFCallContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

MySqlParser::TrimFCallContext::TrimFCallContext(Specific_function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::TrimFCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrimFCall(this);
}
void MySqlParser::TrimFCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrimFCall(this);
}
//----------------- GetFormatFCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::GetFormatFCallContext::GET_FORMAT() {
  return getToken(MySqlParser::GET_FORMAT, 0);
}

MySqlParser::String_literalContext* MySqlParser::GetFormatFCallContext::string_literal() {
  return getRuleContext<MySqlParser::String_literalContext>(0);
}

tree::TerminalNode* MySqlParser::GetFormatFCallContext::DATE() {
  return getToken(MySqlParser::DATE, 0);
}

tree::TerminalNode* MySqlParser::GetFormatFCallContext::TIME() {
  return getToken(MySqlParser::TIME, 0);
}

tree::TerminalNode* MySqlParser::GetFormatFCallContext::DATETIME() {
  return getToken(MySqlParser::DATETIME, 0);
}

MySqlParser::GetFormatFCallContext::GetFormatFCallContext(Specific_function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::GetFormatFCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGetFormatFCall(this);
}
void MySqlParser::GetFormatFCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGetFormatFCall(this);
}
//----------------- ConvertDataTypeFCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::ConvertDataTypeFCallContext::CONVERT() {
  return getToken(MySqlParser::CONVERT, 0);
}

MySqlParser::ExpressionContext* MySqlParser::ConvertDataTypeFCallContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::Data_type_to_convertContext* MySqlParser::ConvertDataTypeFCallContext::data_type_to_convert() {
  return getRuleContext<MySqlParser::Data_type_to_convertContext>(0);
}

tree::TerminalNode* MySqlParser::ConvertDataTypeFCallContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

MySqlParser::Charset_nameContext* MySqlParser::ConvertDataTypeFCallContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

tree::TerminalNode* MySqlParser::ConvertDataTypeFCallContext::CAST() {
  return getToken(MySqlParser::CAST, 0);
}

tree::TerminalNode* MySqlParser::ConvertDataTypeFCallContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::ConvertDataTypeFCallContext::ConvertDataTypeFCallContext(Specific_function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::ConvertDataTypeFCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConvertDataTypeFCall(this);
}
void MySqlParser::ConvertDataTypeFCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConvertDataTypeFCall(this);
}
//----------------- WeightFCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::WeightFCallContext::WEIGHT_STRING() {
  return getToken(MySqlParser::WEIGHT_STRING, 0);
}

MySqlParser::String_literalContext* MySqlParser::WeightFCallContext::string_literal() {
  return getRuleContext<MySqlParser::String_literalContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::WeightFCallContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::WeightFCallContext::AS() {
  return getToken(MySqlParser::AS, 0);
}

MySqlParser::Decimal_literalContext* MySqlParser::WeightFCallContext::decimal_literal() {
  return getRuleContext<MySqlParser::Decimal_literalContext>(0);
}

MySqlParser::Levels_in_weight_stringContext* MySqlParser::WeightFCallContext::levels_in_weight_string() {
  return getRuleContext<MySqlParser::Levels_in_weight_stringContext>(0);
}

tree::TerminalNode* MySqlParser::WeightFCallContext::CHAR() {
  return getToken(MySqlParser::CHAR, 0);
}

tree::TerminalNode* MySqlParser::WeightFCallContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

MySqlParser::WeightFCallContext::WeightFCallContext(Specific_function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::WeightFCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWeightFCall(this);
}
void MySqlParser::WeightFCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWeightFCall(this);
}
//----------------- SimpleSpecificFCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SimpleSpecificFCallContext::CURRENT_DATE() {
  return getToken(MySqlParser::CURRENT_DATE, 0);
}

tree::TerminalNode* MySqlParser::SimpleSpecificFCallContext::CURRENT_TIME() {
  return getToken(MySqlParser::CURRENT_TIME, 0);
}

tree::TerminalNode* MySqlParser::SimpleSpecificFCallContext::CURRENT_TIMESTAMP() {
  return getToken(MySqlParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::SimpleSpecificFCallContext::CURRENT_USER() {
  return getToken(MySqlParser::CURRENT_USER, 0);
}

tree::TerminalNode* MySqlParser::SimpleSpecificFCallContext::LOCALTIME() {
  return getToken(MySqlParser::LOCALTIME, 0);
}

MySqlParser::SimpleSpecificFCallContext::SimpleSpecificFCallContext(Specific_function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::SimpleSpecificFCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleSpecificFCall(this);
}
void MySqlParser::SimpleSpecificFCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleSpecificFCall(this);
}
//----------------- CaseFCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CaseFCallContext::CASE() {
  return getToken(MySqlParser::CASE, 0);
}

MySqlParser::ExpressionContext* MySqlParser::CaseFCallContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::CaseFCallContext::END() {
  return getToken(MySqlParser::END, 0);
}

std::vector<tree::TerminalNode *> MySqlParser::CaseFCallContext::WHEN() {
  return getTokens(MySqlParser::WHEN);
}

tree::TerminalNode* MySqlParser::CaseFCallContext::WHEN(size_t i) {
  return getToken(MySqlParser::WHEN, i);
}

std::vector<tree::TerminalNode *> MySqlParser::CaseFCallContext::THEN() {
  return getTokens(MySqlParser::THEN);
}

tree::TerminalNode* MySqlParser::CaseFCallContext::THEN(size_t i) {
  return getToken(MySqlParser::THEN, i);
}

tree::TerminalNode* MySqlParser::CaseFCallContext::ELSE() {
  return getToken(MySqlParser::ELSE, 0);
}

std::vector<MySqlParser::Function_argContext *> MySqlParser::CaseFCallContext::function_arg() {
  return getRuleContexts<MySqlParser::Function_argContext>();
}

MySqlParser::Function_argContext* MySqlParser::CaseFCallContext::function_arg(size_t i) {
  return getRuleContext<MySqlParser::Function_argContext>(i);
}

MySqlParser::CaseFCallContext::CaseFCallContext(Specific_function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::CaseFCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseFCall(this);
}
void MySqlParser::CaseFCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseFCall(this);
}
//----------------- PositionFCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::PositionFCallContext::POSITION() {
  return getToken(MySqlParser::POSITION, 0);
}

tree::TerminalNode* MySqlParser::PositionFCallContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

std::vector<MySqlParser::String_literalContext *> MySqlParser::PositionFCallContext::string_literal() {
  return getRuleContexts<MySqlParser::String_literalContext>();
}

MySqlParser::String_literalContext* MySqlParser::PositionFCallContext::string_literal(size_t i) {
  return getRuleContext<MySqlParser::String_literalContext>(i);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::PositionFCallContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::PositionFCallContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

MySqlParser::PositionFCallContext::PositionFCallContext(Specific_function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::PositionFCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositionFCall(this);
}
void MySqlParser::PositionFCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositionFCall(this);
}
//----------------- CharFCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::CharFCallContext::CHAR() {
  return getToken(MySqlParser::CHAR, 0);
}

MySqlParser::Function_argsContext* MySqlParser::CharFCallContext::function_args() {
  return getRuleContext<MySqlParser::Function_argsContext>(0);
}

tree::TerminalNode* MySqlParser::CharFCallContext::USING() {
  return getToken(MySqlParser::USING, 0);
}

MySqlParser::Charset_nameContext* MySqlParser::CharFCallContext::charset_name() {
  return getRuleContext<MySqlParser::Charset_nameContext>(0);
}

MySqlParser::CharFCallContext::CharFCallContext(Specific_function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::CharFCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharFCall(this);
}
void MySqlParser::CharFCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharFCall(this);
}
//----------------- SubstrFCallContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::SubstrFCallContext::FROM() {
  return getToken(MySqlParser::FROM, 0);
}

tree::TerminalNode* MySqlParser::SubstrFCallContext::SUBSTR() {
  return getToken(MySqlParser::SUBSTR, 0);
}

tree::TerminalNode* MySqlParser::SubstrFCallContext::SUBSTRING() {
  return getToken(MySqlParser::SUBSTRING, 0);
}

MySqlParser::String_literalContext* MySqlParser::SubstrFCallContext::string_literal() {
  return getRuleContext<MySqlParser::String_literalContext>(0);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::SubstrFCallContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::SubstrFCallContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::SubstrFCallContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::SubstrFCallContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}

tree::TerminalNode* MySqlParser::SubstrFCallContext::FOR() {
  return getToken(MySqlParser::FOR, 0);
}

MySqlParser::SubstrFCallContext::SubstrFCallContext(Specific_function_callContext *ctx) { copyFrom(ctx); }

void MySqlParser::SubstrFCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubstrFCall(this);
}
void MySqlParser::SubstrFCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubstrFCall(this);
}
MySqlParser::Specific_function_callContext* MySqlParser::specific_function_call() {
  Specific_function_callContext *_localctx = _tracker.createInstance<Specific_function_callContext>(_ctx, getState());
  enterRule(_localctx, 532, MySqlParser::RuleSpecific_function_call);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5549);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 817, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::SimpleSpecificFCallContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5384);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::CURRENT_USER || ((((_la - 226) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 226)) & ((1ULL << (MySqlParser::CURRENT_DATE - 226))
        | (1ULL << (MySqlParser::CURRENT_TIME - 226))
        | (1ULL << (MySqlParser::CURRENT_TIMESTAMP - 226))
        | (1ULL << (MySqlParser::LOCALTIME - 226)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::ConvertDataTypeFCallContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5385);
      match(MySqlParser::CONVERT);
      setState(5386);
      match(MySqlParser::LR_BRACKET);
      setState(5387);
      expression(0);
      setState(5388);
      match(MySqlParser::COMMA);
      setState(5389);
      data_type_to_convert();
      setState(5390);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::ConvertDataTypeFCallContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(5392);
      match(MySqlParser::CONVERT);
      setState(5393);
      match(MySqlParser::LR_BRACKET);
      setState(5394);
      expression(0);
      setState(5395);
      match(MySqlParser::USING);
      setState(5396);
      charset_name();
      setState(5397);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::ConvertDataTypeFCallContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(5399);
      match(MySqlParser::CAST);
      setState(5400);
      match(MySqlParser::LR_BRACKET);
      setState(5401);
      expression(0);
      setState(5402);
      match(MySqlParser::AS);
      setState(5403);
      data_type_to_convert();
      setState(5404);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::ValuesFCallContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(5406);
      match(MySqlParser::VALUES);
      setState(5407);
      match(MySqlParser::LR_BRACKET);
      setState(5408);
      full_column_name();
      setState(5409);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 6: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::CaseFCallContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(5411);
      match(MySqlParser::CASE);
      setState(5412);
      expression(0);
      setState(5418); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(5413);
        match(MySqlParser::WHEN);
        setState(5414);
        dynamic_cast<CaseFCallContext *>(_localctx)->function_argContext = function_arg();
        dynamic_cast<CaseFCallContext *>(_localctx)->condarg.push_back(dynamic_cast<CaseFCallContext *>(_localctx)->function_argContext);
        setState(5415);
        match(MySqlParser::THEN);
        setState(5416);
        dynamic_cast<CaseFCallContext *>(_localctx)->function_argContext = function_arg();
        dynamic_cast<CaseFCallContext *>(_localctx)->resarg.push_back(dynamic_cast<CaseFCallContext *>(_localctx)->function_argContext);
        setState(5420); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySqlParser::WHEN);
      setState(5424);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ELSE) {
        setState(5422);
        match(MySqlParser::ELSE);
        setState(5423);
        function_arg();
      }
      setState(5426);
      match(MySqlParser::END);
      break;
    }

    case 7: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::CaseFCallContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(5428);
      match(MySqlParser::CASE);
      setState(5434); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(5429);
        match(MySqlParser::WHEN);
        setState(5430);
        dynamic_cast<CaseFCallContext *>(_localctx)->function_argContext = function_arg();
        dynamic_cast<CaseFCallContext *>(_localctx)->condarg.push_back(dynamic_cast<CaseFCallContext *>(_localctx)->function_argContext);
        setState(5431);
        match(MySqlParser::THEN);
        setState(5432);
        dynamic_cast<CaseFCallContext *>(_localctx)->function_argContext = function_arg();
        dynamic_cast<CaseFCallContext *>(_localctx)->resarg.push_back(dynamic_cast<CaseFCallContext *>(_localctx)->function_argContext);
        setState(5436); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MySqlParser::WHEN);
      setState(5440);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ELSE) {
        setState(5438);
        match(MySqlParser::ELSE);
        setState(5439);
        function_arg();
      }
      setState(5442);
      match(MySqlParser::END);
      break;
    }

    case 8: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::CharFCallContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(5444);
      match(MySqlParser::CHAR);
      setState(5445);
      match(MySqlParser::LR_BRACKET);
      setState(5446);
      function_args();
      setState(5449);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::USING) {
        setState(5447);
        match(MySqlParser::USING);
        setState(5448);
        charset_name();
      }
      setState(5451);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 9: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::PositionFCallContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(5453);
      match(MySqlParser::POSITION);
      setState(5454);
      match(MySqlParser::LR_BRACKET);
      setState(5457);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 803, _ctx)) {
      case 1: {
        setState(5455);
        dynamic_cast<PositionFCallContext *>(_localctx)->fstr = string_literal();
        break;
      }

      case 2: {
        setState(5456);
        dynamic_cast<PositionFCallContext *>(_localctx)->fexpr = expression(0);
        break;
      }

      }
      setState(5459);
      match(MySqlParser::IN);
      setState(5462);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 804, _ctx)) {
      case 1: {
        setState(5460);
        dynamic_cast<PositionFCallContext *>(_localctx)->sstr = string_literal();
        break;
      }

      case 2: {
        setState(5461);
        dynamic_cast<PositionFCallContext *>(_localctx)->sexpr = expression(0);
        break;
      }

      }
      setState(5464);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 10: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::SubstrFCallContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(5466);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::SUBSTR

      || _la == MySqlParser::SUBSTRING)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5467);
      match(MySqlParser::LR_BRACKET);
      setState(5470);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 805, _ctx)) {
      case 1: {
        setState(5468);
        string_literal();
        break;
      }

      case 2: {
        setState(5469);
        dynamic_cast<SubstrFCallContext *>(_localctx)->fexpr = expression(0);
        break;
      }

      }
      setState(5472);
      match(MySqlParser::FROM);
      setState(5475);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 806, _ctx)) {
      case 1: {
        setState(5473);
        dynamic_cast<SubstrFCallContext *>(_localctx)->fdecimal = decimal_literal();
        break;
      }

      case 2: {
        setState(5474);
        dynamic_cast<SubstrFCallContext *>(_localctx)->sexpr = expression(0);
        break;
      }

      }
      setState(5482);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::FOR) {
        setState(5477);
        match(MySqlParser::FOR);
        setState(5480);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 807, _ctx)) {
        case 1: {
          setState(5478);
          dynamic_cast<SubstrFCallContext *>(_localctx)->sdecimal = decimal_literal();
          break;
        }

        case 2: {
          setState(5479);
          dynamic_cast<SubstrFCallContext *>(_localctx)->texpr = expression(0);
          break;
        }

        }
      }
      setState(5484);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 11: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::TrimFCallContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(5486);
      match(MySqlParser::TRIM);
      setState(5487);
      match(MySqlParser::LR_BRACKET);
      setState(5488);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::BOTH || _la == MySqlParser::LEADING || _la == MySqlParser::TRAILING)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5491);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 809, _ctx)) {
      case 1: {
        setState(5489);
        dynamic_cast<TrimFCallContext *>(_localctx)->fstr = string_literal();
        break;
      }

      case 2: {
        setState(5490);
        dynamic_cast<TrimFCallContext *>(_localctx)->fexpr = expression(0);
        break;
      }

      }
      setState(5493);
      match(MySqlParser::FROM);
      setState(5496);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 810, _ctx)) {
      case 1: {
        setState(5494);
        dynamic_cast<TrimFCallContext *>(_localctx)->sstr = string_literal();
        break;
      }

      case 2: {
        setState(5495);
        dynamic_cast<TrimFCallContext *>(_localctx)->sexpr = expression(0);
        break;
      }

      }
      setState(5498);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 12: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::TrimFCallContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(5500);
      match(MySqlParser::TRIM);
      setState(5501);
      match(MySqlParser::LR_BRACKET);
      setState(5504);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 811, _ctx)) {
      case 1: {
        setState(5502);
        dynamic_cast<TrimFCallContext *>(_localctx)->fstr = string_literal();
        break;
      }

      case 2: {
        setState(5503);
        dynamic_cast<TrimFCallContext *>(_localctx)->fexpr = expression(0);
        break;
      }

      }
      setState(5506);
      match(MySqlParser::FROM);
      setState(5509);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 812, _ctx)) {
      case 1: {
        setState(5507);
        dynamic_cast<TrimFCallContext *>(_localctx)->sstr = string_literal();
        break;
      }

      case 2: {
        setState(5508);
        dynamic_cast<TrimFCallContext *>(_localctx)->sexpr = expression(0);
        break;
      }

      }
      setState(5511);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 13: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::WeightFCallContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(5513);
      match(MySqlParser::WEIGHT_STRING);
      setState(5514);
      match(MySqlParser::LR_BRACKET);
      setState(5517);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 813, _ctx)) {
      case 1: {
        setState(5515);
        string_literal();
        break;
      }

      case 2: {
        setState(5516);
        expression(0);
        break;
      }

      }
      setState(5525);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::AS) {
        setState(5519);
        match(MySqlParser::AS);
        setState(5520);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::CHAR

        || _la == MySqlParser::BINARY)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(5521);
        match(MySqlParser::LR_BRACKET);
        setState(5522);
        decimal_literal();
        setState(5523);
        match(MySqlParser::RR_BRACKET);
      }
      setState(5528);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::LEVEL) {
        setState(5527);
        levels_in_weight_string();
      }
      setState(5530);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 14: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::ExtractFCallContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(5532);
      match(MySqlParser::EXTRACT);
      setState(5533);
      match(MySqlParser::LR_BRACKET);
      setState(5534);
      interval_type();
      setState(5535);
      match(MySqlParser::FROM);
      setState(5538);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 816, _ctx)) {
      case 1: {
        setState(5536);
        dynamic_cast<ExtractFCallContext *>(_localctx)->fstr = string_literal();
        break;
      }

      case 2: {
        setState(5537);
        dynamic_cast<ExtractFCallContext *>(_localctx)->fexpr = expression(0);
        break;
      }

      }
      setState(5540);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 15: {
      _localctx = dynamic_cast<Specific_function_callContext *>(_tracker.createInstance<MySqlParser::GetFormatFCallContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(5542);
      match(MySqlParser::GET_FORMAT);
      setState(5543);
      match(MySqlParser::LR_BRACKET);
      setState(5544);
      _la = _input->LA(1);
      if (!(((((_la - 181) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
        | (1ULL << (MySqlParser::TIME - 181))
        | (1ULL << (MySqlParser::DATETIME - 181)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5545);
      match(MySqlParser::COMMA);
      setState(5546);
      string_literal();
      setState(5547);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Levels_in_weight_stringContext ------------------------------------------------------------------

MySqlParser::Levels_in_weight_stringContext::Levels_in_weight_stringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Levels_in_weight_stringContext::getRuleIndex() const {
  return MySqlParser::RuleLevels_in_weight_string;
}

void MySqlParser::Levels_in_weight_stringContext::copyFrom(Levels_in_weight_stringContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LevelWeightFRangeContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::LevelWeightFRangeContext::LEVEL() {
  return getToken(MySqlParser::LEVEL, 0);
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::LevelWeightFRangeContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::LevelWeightFRangeContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}

MySqlParser::LevelWeightFRangeContext::LevelWeightFRangeContext(Levels_in_weight_stringContext *ctx) { copyFrom(ctx); }

void MySqlParser::LevelWeightFRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevelWeightFRange(this);
}
void MySqlParser::LevelWeightFRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevelWeightFRange(this);
}
//----------------- LevelWeightFListContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::LevelWeightFListContext::LEVEL() {
  return getToken(MySqlParser::LEVEL, 0);
}

std::vector<MySqlParser::Decimal_literalContext *> MySqlParser::LevelWeightFListContext::decimal_literal() {
  return getRuleContexts<MySqlParser::Decimal_literalContext>();
}

MySqlParser::Decimal_literalContext* MySqlParser::LevelWeightFListContext::decimal_literal(size_t i) {
  return getRuleContext<MySqlParser::Decimal_literalContext>(i);
}

std::vector<tree::TerminalNode *> MySqlParser::LevelWeightFListContext::ASC() {
  return getTokens(MySqlParser::ASC);
}

tree::TerminalNode* MySqlParser::LevelWeightFListContext::ASC(size_t i) {
  return getToken(MySqlParser::ASC, i);
}

std::vector<tree::TerminalNode *> MySqlParser::LevelWeightFListContext::DESC() {
  return getTokens(MySqlParser::DESC);
}

tree::TerminalNode* MySqlParser::LevelWeightFListContext::DESC(size_t i) {
  return getToken(MySqlParser::DESC, i);
}

std::vector<tree::TerminalNode *> MySqlParser::LevelWeightFListContext::REVERSE() {
  return getTokens(MySqlParser::REVERSE);
}

tree::TerminalNode* MySqlParser::LevelWeightFListContext::REVERSE(size_t i) {
  return getToken(MySqlParser::REVERSE, i);
}

MySqlParser::LevelWeightFListContext::LevelWeightFListContext(Levels_in_weight_stringContext *ctx) { copyFrom(ctx); }

void MySqlParser::LevelWeightFListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevelWeightFList(this);
}
void MySqlParser::LevelWeightFListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevelWeightFList(this);
}
MySqlParser::Levels_in_weight_stringContext* MySqlParser::levels_in_weight_string() {
  Levels_in_weight_stringContext *_localctx = _tracker.createInstance<Levels_in_weight_stringContext>(_ctx, getState());
  enterRule(_localctx, 534, MySqlParser::RuleLevels_in_weight_string);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5571);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 821, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Levels_in_weight_stringContext *>(_tracker.createInstance<MySqlParser::LevelWeightFListContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(5551);
      match(MySqlParser::LEVEL);
      setState(5552);
      dynamic_cast<LevelWeightFListContext *>(_localctx)->firstlevel = decimal_literal();
      setState(5554);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ASC

      || _la == MySqlParser::DESC || _la == MySqlParser::REVERSE) {
        setState(5553);
        dynamic_cast<LevelWeightFListContext *>(_localctx)->firstord = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::ASC

        || _la == MySqlParser::DESC || _la == MySqlParser::REVERSE)) {
          dynamic_cast<LevelWeightFListContext *>(_localctx)->firstord = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(5563);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == MySqlParser::COMMA) {
        setState(5556);
        match(MySqlParser::COMMA);
        setState(5557);
        dynamic_cast<LevelWeightFListContext *>(_localctx)->decimal_literalContext = decimal_literal();
        dynamic_cast<LevelWeightFListContext *>(_localctx)->nextlevel.push_back(dynamic_cast<LevelWeightFListContext *>(_localctx)->decimal_literalContext);
        setState(5559);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MySqlParser::ASC

        || _la == MySqlParser::DESC || _la == MySqlParser::REVERSE) {
          setState(5558);
          dynamic_cast<LevelWeightFListContext *>(_localctx)->_tset12182 = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::ASC

          || _la == MySqlParser::DESC || _la == MySqlParser::REVERSE)) {
            dynamic_cast<LevelWeightFListContext *>(_localctx)->_tset12182 = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          dynamic_cast<LevelWeightFListContext *>(_localctx)->nextord.push_back(dynamic_cast<LevelWeightFListContext *>(_localctx)->_tset12182);
        }
        setState(5565);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Levels_in_weight_stringContext *>(_tracker.createInstance<MySqlParser::LevelWeightFRangeContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(5566);
      match(MySqlParser::LEVEL);
      setState(5567);
      dynamic_cast<LevelWeightFRangeContext *>(_localctx)->firstlevel = decimal_literal();
      setState(5568);
      match(MySqlParser::MINUS);
      setState(5569);
      dynamic_cast<LevelWeightFRangeContext *>(_localctx)->lastlevel = decimal_literal();
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_windowed_functionContext ------------------------------------------------------------------

MySqlParser::Aggregate_windowed_functionContext::Aggregate_windowed_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Function_argContext* MySqlParser::Aggregate_windowed_functionContext::function_arg() {
  return getRuleContext<MySqlParser::Function_argContext>(0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::AVG() {
  return getToken(MySqlParser::AVG, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::MAX() {
  return getToken(MySqlParser::MAX, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::MIN() {
  return getToken(MySqlParser::MIN, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::SUM() {
  return getToken(MySqlParser::SUM, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::DISTINCT() {
  return getToken(MySqlParser::DISTINCT, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::COUNT() {
  return getToken(MySqlParser::COUNT, 0);
}

MySqlParser::Function_argsContext* MySqlParser::Aggregate_windowed_functionContext::function_args() {
  return getRuleContext<MySqlParser::Function_argsContext>(0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::BIT_AND() {
  return getToken(MySqlParser::BIT_AND, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::BIT_OR() {
  return getToken(MySqlParser::BIT_OR, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::BIT_XOR() {
  return getToken(MySqlParser::BIT_XOR, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::STD() {
  return getToken(MySqlParser::STD, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::STDDEV() {
  return getToken(MySqlParser::STDDEV, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::STDDEV_POP() {
  return getToken(MySqlParser::STDDEV_POP, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::STDDEV_SAMP() {
  return getToken(MySqlParser::STDDEV_SAMP, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::VAR_POP() {
  return getToken(MySqlParser::VAR_POP, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::VAR_SAMP() {
  return getToken(MySqlParser::VAR_SAMP, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::VARIANCE() {
  return getToken(MySqlParser::VARIANCE, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::GROUP_CONCAT() {
  return getToken(MySqlParser::GROUP_CONCAT, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::ORDER() {
  return getToken(MySqlParser::ORDER, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::BY() {
  return getToken(MySqlParser::BY, 0);
}

std::vector<MySqlParser::Order_by_expressionContext *> MySqlParser::Aggregate_windowed_functionContext::order_by_expression() {
  return getRuleContexts<MySqlParser::Order_by_expressionContext>();
}

MySqlParser::Order_by_expressionContext* MySqlParser::Aggregate_windowed_functionContext::order_by_expression(size_t i) {
  return getRuleContext<MySqlParser::Order_by_expressionContext>(i);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::SEPARATOR() {
  return getToken(MySqlParser::SEPARATOR, 0);
}

tree::TerminalNode* MySqlParser::Aggregate_windowed_functionContext::STRING_LITERAL() {
  return getToken(MySqlParser::STRING_LITERAL, 0);
}


size_t MySqlParser::Aggregate_windowed_functionContext::getRuleIndex() const {
  return MySqlParser::RuleAggregate_windowed_function;
}

void MySqlParser::Aggregate_windowed_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_windowed_function(this);
}

void MySqlParser::Aggregate_windowed_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_windowed_function(this);
}

MySqlParser::Aggregate_windowed_functionContext* MySqlParser::aggregate_windowed_function() {
  Aggregate_windowed_functionContext *_localctx = _tracker.createInstance<Aggregate_windowed_functionContext>(_ctx, getState());
  enterRule(_localctx, 536, MySqlParser::RuleAggregate_windowed_function);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5629);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 830, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5573);
      _la = _input->LA(1);
      if (!(((((_la - 210) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 210)) & ((1ULL << (MySqlParser::AVG - 210))
        | (1ULL << (MySqlParser::MAX - 210))
        | (1ULL << (MySqlParser::MIN - 210))
        | (1ULL << (MySqlParser::SUM - 210)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5574);
      match(MySqlParser::LR_BRACKET);
      setState(5576);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ALL

      || _la == MySqlParser::DISTINCT) {
        setState(5575);
        _la = _input->LA(1);
        if (!(_la == MySqlParser::ALL

        || _la == MySqlParser::DISTINCT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(5578);
      function_arg();
      setState(5579);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5581);
      match(MySqlParser::COUNT);
      setState(5582);
      match(MySqlParser::LR_BRACKET);
      setState(5588);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case MySqlParser::STAR: {
          setState(5583);
          match(MySqlParser::STAR);
          break;
        }

        case MySqlParser::ALL:
        case MySqlParser::CASE:
        case MySqlParser::CAST:
        case MySqlParser::CONVERT:
        case MySqlParser::CURRENT_USER:
        case MySqlParser::DEFAULT:
        case MySqlParser::EXISTS:
        case MySqlParser::FALSE:
        case MySqlParser::IF:
        case MySqlParser::INTERVAL:
        case MySqlParser::LEFT:
        case MySqlParser::NOTNULL:
        case MySqlParser::NOT:
        case MySqlParser::NULL_LITERAL:
        case MySqlParser::REPLACE:
        case MySqlParser::RIGHT:
        case MySqlParser::TRUE:
        case MySqlParser::VALUES:
        case MySqlParser::DATE:
        case MySqlParser::TIME:
        case MySqlParser::TIMESTAMP:
        case MySqlParser::DATETIME:
        case MySqlParser::YEAR:
        case MySqlParser::CHAR:
        case MySqlParser::BINARY:
        case MySqlParser::TEXT:
        case MySqlParser::ENUM:
        case MySqlParser::AVG:
        case MySqlParser::BIT_AND:
        case MySqlParser::BIT_OR:
        case MySqlParser::BIT_XOR:
        case MySqlParser::COUNT:
        case MySqlParser::GROUP_CONCAT:
        case MySqlParser::MAX:
        case MySqlParser::MIN:
        case MySqlParser::STD:
        case MySqlParser::STDDEV:
        case MySqlParser::STDDEV_POP:
        case MySqlParser::STDDEV_SAMP:
        case MySqlParser::SUM:
        case MySqlParser::VAR_POP:
        case MySqlParser::VAR_SAMP:
        case MySqlParser::VARIANCE:
        case MySqlParser::CURRENT_DATE:
        case MySqlParser::CURRENT_TIME:
        case MySqlParser::CURRENT_TIMESTAMP:
        case MySqlParser::LOCALTIME:
        case MySqlParser::CURDATE:
        case MySqlParser::CURTIME:
        case MySqlParser::DATE_ADD:
        case MySqlParser::DATE_SUB:
        case MySqlParser::EXTRACT:
        case MySqlParser::LOCALTIMESTAMP:
        case MySqlParser::NOW:
        case MySqlParser::POSITION:
        case MySqlParser::SUBSTR:
        case MySqlParser::SUBSTRING:
        case MySqlParser::SYSDATE:
        case MySqlParser::TRIM:
        case MySqlParser::UTC_DATE:
        case MySqlParser::UTC_TIME:
        case MySqlParser::UTC_TIMESTAMP:
        case MySqlParser::ACTION:
        case MySqlParser::AFTER:
        case MySqlParser::ALGORITHM:
        case MySqlParser::ANY:
        case MySqlParser::AT:
        case MySqlParser::AUTHORS:
        case MySqlParser::AUTOCOMMIT:
        case MySqlParser::AUTOEXTEND_SIZE:
        case MySqlParser::AUTO_INCREMENT:
        case MySqlParser::AVG_ROW_LENGTH:
        case MySqlParser::BEGIN:
        case MySqlParser::BINLOG:
        case MySqlParser::BIT:
        case MySqlParser::BTREE:
        case MySqlParser::CASCADED:
        case MySqlParser::CHAIN:
        case MySqlParser::CHECKSUM:
        case MySqlParser::CIPHER:
        case MySqlParser::CLIENT:
        case MySqlParser::COALESCE:
        case MySqlParser::CODE:
        case MySqlParser::COLUMNS:
        case MySqlParser::COLUMN_FORMAT:
        case MySqlParser::COMMENT:
        case MySqlParser::COMMIT:
        case MySqlParser::COMPACT:
        case MySqlParser::COMPLETION:
        case MySqlParser::COMPRESSED:
        case MySqlParser::CONCURRENT:
        case MySqlParser::CONNECTION:
        case MySqlParser::CONSISTENT:
        case MySqlParser::CONTAINS:
        case MySqlParser::CONTRIBUTORS:
        case MySqlParser::COPY:
        case MySqlParser::DATA:
        case MySqlParser::DATAFILE:
        case MySqlParser::DEFINER:
        case MySqlParser::DELAY_KEY_WRITE:
        case MySqlParser::DIRECTORY:
        case MySqlParser::DISABLE:
        case MySqlParser::DISCARD:
        case MySqlParser::DISK:
        case MySqlParser::DO:
        case MySqlParser::DUMPFILE:
        case MySqlParser::DUPLICATE:
        case MySqlParser::DYNAMIC:
        case MySqlParser::ENABLE:
        case MySqlParser::ENDS:
        case MySqlParser::ENGINE:
        case MySqlParser::ENGINES:
        case MySqlParser::ERRORS:
        case MySqlParser::ESCAPE:
        case MySqlParser::EVEN:
        case MySqlParser::EVENT:
        case MySqlParser::EVENTS:
        case MySqlParser::EVERY:
        case MySqlParser::EXCHANGE:
        case MySqlParser::EXCLUSIVE:
        case MySqlParser::EXPIRE:
        case MySqlParser::EXTENT_SIZE:
        case MySqlParser::FIELDS:
        case MySqlParser::FIRST:
        case MySqlParser::FIXED:
        case MySqlParser::FULL:
        case MySqlParser::FUNCTION:
        case MySqlParser::GLOBAL:
        case MySqlParser::GRANTS:
        case MySqlParser::HASH:
        case MySqlParser::HOST:
        case MySqlParser::IDENTIFIED:
        case MySqlParser::IMPORT:
        case MySqlParser::INITIAL_SIZE:
        case MySqlParser::INPLACE:
        case MySqlParser::INSERT_METHOD:
        case MySqlParser::INVOKER:
        case MySqlParser::ISOLATION:
        case MySqlParser::ISSUER:
        case MySqlParser::KEY_BLOCK_SIZE:
        case MySqlParser::LANGUAGE:
        case MySqlParser::LAST:
        case MySqlParser::LESS:
        case MySqlParser::LEVEL:
        case MySqlParser::LIST:
        case MySqlParser::LOCAL:
        case MySqlParser::LOGFILE:
        case MySqlParser::LOGS:
        case MySqlParser::MASTER:
        case MySqlParser::MAX_CONNECTIONS_PER_HOUR:
        case MySqlParser::MAX_QUERIES_PER_HOUR:
        case MySqlParser::MAX_ROWS:
        case MySqlParser::MAX_SIZE:
        case MySqlParser::MAX_UPDATES_PER_HOUR:
        case MySqlParser::MAX_USER_CONNECTIONS:
        case MySqlParser::MERGE:
        case MySqlParser::MID:
        case MySqlParser::MIN_ROWS:
        case MySqlParser::MODIFY:
        case MySqlParser::MUTEX:
        case MySqlParser::MYSQL:
        case MySqlParser::NAME:
        case MySqlParser::NAMES:
        case MySqlParser::NCHAR:
        case MySqlParser::NO:
        case MySqlParser::NODEGROUP:
        case MySqlParser::NONE:
        case MySqlParser::OFFLINE:
        case MySqlParser::OFFSET:
        case MySqlParser::OJ:
        case MySqlParser::OLD_PASSWORD:
        case MySqlParser::ONLINE:
        case MySqlParser::ONLY:
        case MySqlParser::OPTIONS:
        case MySqlParser::OWNER:
        case MySqlParser::PACK_KEYS:
        case MySqlParser::PARSER:
        case MySqlParser::PARTIAL:
        case MySqlParser::PARTITIONING:
        case MySqlParser::PARTITIONS:
        case MySqlParser::PASSWORD:
        case MySqlParser::PLUGINS:
        case MySqlParser::PORT:
        case MySqlParser::PRESERVE:
        case MySqlParser::PROCESSLIST:
        case MySqlParser::PROFILE:
        case MySqlParser::PROFILES:
        case MySqlParser::PROXY:
        case MySqlParser::QUERY:
        case MySqlParser::QUICK:
        case MySqlParser::REBUILD:
        case MySqlParser::REDO_BUFFER_SIZE:
        case MySqlParser::REDUNDANT:
        case MySqlParser::RELAYLOG:
        case MySqlParser::REMOVE:
        case MySqlParser::REORGANIZE:
        case MySqlParser::REPAIR:
        case MySqlParser::REPLICATION:
        case MySqlParser::RETURNS:
        case MySqlParser::ROLLBACK:
        case MySqlParser::ROLLUP:
        case MySqlParser::ROW:
        case MySqlParser::ROWS:
        case MySqlParser::ROW_FORMAT:
        case MySqlParser::SAVEPOINT:
        case MySqlParser::SCHEDULE:
        case MySqlParser::SECURITY:
        case MySqlParser::SERVER:
        case MySqlParser::SESSION:
        case MySqlParser::SHARE:
        case MySqlParser::SHARED:
        case MySqlParser::SIGNED:
        case MySqlParser::SIMPLE:
        case MySqlParser::SLAVE:
        case MySqlParser::SNAPSHOT:
        case MySqlParser::SOCKET:
        case MySqlParser::SOME:
        case MySqlParser::SOUNDS:
        case MySqlParser::SQL_BUFFER_RESULT:
        case MySqlParser::SQL_CACHE:
        case MySqlParser::SQL_NO_CACHE:
        case MySqlParser::START:
        case MySqlParser::STARTS:
        case MySqlParser::STATS_AUTO_RECALC:
        case MySqlParser::STATS_PERSISTENT:
        case MySqlParser::STATS_SAMPLE_PAGES:
        case MySqlParser::STATUS:
        case MySqlParser::STORAGE:
        case MySqlParser::SUBJECT:
        case MySqlParser::SUBPARTITION:
        case MySqlParser::SUBPARTITIONS:
        case MySqlParser::TABLESPACE:
        case MySqlParser::TEMPORARY:
        case MySqlParser::TEMPTABLE:
        case MySqlParser::THAN:
        case MySqlParser::TRANSACTION:
        case MySqlParser::TRUNCATE:
        case MySqlParser::UNDEFINED:
        case MySqlParser::UNDOFILE:
        case MySqlParser::UNDO_BUFFER_SIZE:
        case MySqlParser::UNKNOWN:
        case MySqlParser::UPGRADE:
        case MySqlParser::USER:
        case MySqlParser::VALUE:
        case MySqlParser::VARIABLES:
        case MySqlParser::VIEW:
        case MySqlParser::WAIT:
        case MySqlParser::WARNINGS:
        case MySqlParser::WORK:
        case MySqlParser::WRAPPER:
        case MySqlParser::X509:
        case MySqlParser::XML:
        case MySqlParser::QUARTER:
        case MySqlParser::MONTH:
        case MySqlParser::DAY:
        case MySqlParser::HOUR:
        case MySqlParser::MINUTE:
        case MySqlParser::WEEK:
        case MySqlParser::SECOND:
        case MySqlParser::MICROSECOND:
        case MySqlParser::TABLES:
        case MySqlParser::ROUTINE:
        case MySqlParser::EXECUTE:
        case MySqlParser::FILE:
        case MySqlParser::PROCESS:
        case MySqlParser::RELOAD:
        case MySqlParser::SHUTDOWN:
        case MySqlParser::SUPER:
        case MySqlParser::PRIVILEGES:
        case MySqlParser::ARMSCII8:
        case MySqlParser::ASCII:
        case MySqlParser::BIG5:
        case MySqlParser::CP1250:
        case MySqlParser::CP1251:
        case MySqlParser::CP1256:
        case MySqlParser::CP1257:
        case MySqlParser::CP850:
        case MySqlParser::CP852:
        case MySqlParser::CP866:
        case MySqlParser::CP932:
        case MySqlParser::DEC8:
        case MySqlParser::EUCJPMS:
        case MySqlParser::EUCKR:
        case MySqlParser::GB2312:
        case MySqlParser::GBK:
        case MySqlParser::GEOSTD8:
        case MySqlParser::GREEK:
        case MySqlParser::HEBREW:
        case MySqlParser::HP8:
        case MySqlParser::KEYBCS2:
        case MySqlParser::KOI8R:
        case MySqlParser::KOI8U:
        case MySqlParser::LATIN1:
        case MySqlParser::LATIN2:
        case MySqlParser::LATIN5:
        case MySqlParser::LATIN7:
        case MySqlParser::MACCE:
        case MySqlParser::MACROMAN:
        case MySqlParser::SJIS:
        case MySqlParser::SWE7:
        case MySqlParser::TIS620:
        case MySqlParser::UCS2:
        case MySqlParser::UJIS:
        case MySqlParser::UTF16:
        case MySqlParser::UTF16LE:
        case MySqlParser::UTF32:
        case MySqlParser::UTF8:
        case MySqlParser::UTF8MB3:
        case MySqlParser::UTF8MB4:
        case MySqlParser::ARCHIVE:
        case MySqlParser::BLACKHOLE:
        case MySqlParser::CSV:
        case MySqlParser::FEDERATED:
        case MySqlParser::INNODB:
        case MySqlParser::MEMORY:
        case MySqlParser::MRG_MYISAM:
        case MySqlParser::MYISAM:
        case MySqlParser::NDB:
        case MySqlParser::NDBCLUSTER:
        case MySqlParser::PERFOMANCE_SCHEMA:
        case MySqlParser::REPEATABLE:
        case MySqlParser::COMMITTED:
        case MySqlParser::UNCOMMITTED:
        case MySqlParser::SERIALIZABLE:
        case MySqlParser::GEOMETRYCOLLECTION:
        case MySqlParser::LINESTRING:
        case MySqlParser::MULTILINESTRING:
        case MySqlParser::MULTIPOINT:
        case MySqlParser::MULTIPOLYGON:
        case MySqlParser::POINT:
        case MySqlParser::POLYGON:
        case MySqlParser::ABS:
        case MySqlParser::ACOS:
        case MySqlParser::ADDDATE:
        case MySqlParser::ADDTIME:
        case MySqlParser::AES_DECRYPT:
        case MySqlParser::AES_ENCRYPT:
        case MySqlParser::AREA:
        case MySqlParser::ASBINARY:
        case MySqlParser::ASIN:
        case MySqlParser::ASTEXT:
        case MySqlParser::ASWKB:
        case MySqlParser::ASWKT:
        case MySqlParser::ASYMMETRIC_DECRYPT:
        case MySqlParser::ASYMMETRIC_DERIVE:
        case MySqlParser::ASYMMETRIC_ENCRYPT:
        case MySqlParser::ASYMMETRIC_SIGN:
        case MySqlParser::ASYMMETRIC_VERIFY:
        case MySqlParser::ATAN:
        case MySqlParser::ATAN2:
        case MySqlParser::BENCHMARK:
        case MySqlParser::BIN:
        case MySqlParser::BIT_COUNT:
        case MySqlParser::BIT_LENGTH:
        case MySqlParser::BUFFER:
        case MySqlParser::CEIL:
        case MySqlParser::CEILING:
        case MySqlParser::CENTROID:
        case MySqlParser::CHARACTER_LENGTH:
        case MySqlParser::CHARSET:
        case MySqlParser::CHAR_LENGTH:
        case MySqlParser::COERCIBILITY:
        case MySqlParser::COLLATION:
        case MySqlParser::COMPRESS:
        case MySqlParser::CONCAT:
        case MySqlParser::CONCAT_WS:
        case MySqlParser::CONNECTION_ID:
        case MySqlParser::CONV:
        case MySqlParser::CONVERT_TZ:
        case MySqlParser::COS:
        case MySqlParser::COT:
        case MySqlParser::CRC32:
        case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
        case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
        case MySqlParser::CREATE_DH_PARAMETERS:
        case MySqlParser::CREATE_DIGEST:
        case MySqlParser::CROSSES:
        case MySqlParser::DATEDIFF:
        case MySqlParser::DATE_FORMAT:
        case MySqlParser::DAYNAME:
        case MySqlParser::DAYOFMONTH:
        case MySqlParser::DAYOFWEEK:
        case MySqlParser::DAYOFYEAR:
        case MySqlParser::DECODE:
        case MySqlParser::DEGREES:
        case MySqlParser::DES_DECRYPT:
        case MySqlParser::DES_ENCRYPT:
        case MySqlParser::DIMENSION:
        case MySqlParser::DISJOINT:
        case MySqlParser::ELT:
        case MySqlParser::ENCODE:
        case MySqlParser::ENCRYPT:
        case MySqlParser::ENDPOINT:
        case MySqlParser::ENVELOPE:
        case MySqlParser::EQUALS:
        case MySqlParser::EXP:
        case MySqlParser::EXPORT_SET:
        case MySqlParser::EXTERIORRING:
        case MySqlParser::EXTRACTVALUE:
        case MySqlParser::FIELD:
        case MySqlParser::FIND_IN_SET:
        case MySqlParser::FLOOR:
        case MySqlParser::FORMAT:
        case MySqlParser::FOUND_ROWS:
        case MySqlParser::FROM_BASE64:
        case MySqlParser::FROM_DAYS:
        case MySqlParser::FROM_UNIXTIME:
        case MySqlParser::GEOMCOLLFROMTEXT:
        case MySqlParser::GEOMCOLLFROMWKB:
        case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::GEOMETRYFROMTEXT:
        case MySqlParser::GEOMETRYFROMWKB:
        case MySqlParser::GEOMETRYN:
        case MySqlParser::GEOMETRYTYPE:
        case MySqlParser::GEOMFROMTEXT:
        case MySqlParser::GEOMFROMWKB:
        case MySqlParser::GET_FORMAT:
        case MySqlParser::GET_LOCK:
        case MySqlParser::GLENGTH:
        case MySqlParser::GREATEST:
        case MySqlParser::GTID_SUBSET:
        case MySqlParser::GTID_SUBTRACT:
        case MySqlParser::HEX:
        case MySqlParser::IFNULL:
        case MySqlParser::INET6_ATON:
        case MySqlParser::INET6_NTOA:
        case MySqlParser::INET_ATON:
        case MySqlParser::INET_NTOA:
        case MySqlParser::INSTR:
        case MySqlParser::INTERIORRINGN:
        case MySqlParser::INTERSECTS:
        case MySqlParser::ISCLOSED:
        case MySqlParser::ISEMPTY:
        case MySqlParser::ISNULL:
        case MySqlParser::ISSIMPLE:
        case MySqlParser::IS_FREE_LOCK:
        case MySqlParser::IS_IPV4:
        case MySqlParser::IS_IPV4_COMPAT:
        case MySqlParser::IS_IPV4_MAPPED:
        case MySqlParser::IS_IPV6:
        case MySqlParser::IS_USED_LOCK:
        case MySqlParser::LAST_INSERT_ID:
        case MySqlParser::LCASE:
        case MySqlParser::LEAST:
        case MySqlParser::LENGTH:
        case MySqlParser::LINEFROMTEXT:
        case MySqlParser::LINEFROMWKB:
        case MySqlParser::LINESTRINGFROMTEXT:
        case MySqlParser::LINESTRINGFROMWKB:
        case MySqlParser::LN:
        case MySqlParser::LOAD_FILE:
        case MySqlParser::LOCATE:
        case MySqlParser::LOG:
        case MySqlParser::LOG10:
        case MySqlParser::LOG2:
        case MySqlParser::LOWER:
        case MySqlParser::LPAD:
        case MySqlParser::LTRIM:
        case MySqlParser::MAKEDATE:
        case MySqlParser::MAKETIME:
        case MySqlParser::MAKE_SET:
        case MySqlParser::MASTER_POS_WAIT:
        case MySqlParser::MBRCONTAINS:
        case MySqlParser::MBRDISJOINT:
        case MySqlParser::MBREQUAL:
        case MySqlParser::MBRINTERSECTS:
        case MySqlParser::MBROVERLAPS:
        case MySqlParser::MBRTOUCHES:
        case MySqlParser::MBRWITHIN:
        case MySqlParser::MD5:
        case MySqlParser::MLINEFROMTEXT:
        case MySqlParser::MLINEFROMWKB:
        case MySqlParser::MONTHNAME:
        case MySqlParser::MPOINTFROMTEXT:
        case MySqlParser::MPOINTFROMWKB:
        case MySqlParser::MPOLYFROMTEXT:
        case MySqlParser::MPOLYFROMWKB:
        case MySqlParser::MULTILINESTRINGFROMTEXT:
        case MySqlParser::MULTILINESTRINGFROMWKB:
        case MySqlParser::MULTIPOINTFROMTEXT:
        case MySqlParser::MULTIPOINTFROMWKB:
        case MySqlParser::MULTIPOLYGONFROMTEXT:
        case MySqlParser::MULTIPOLYGONFROMWKB:
        case MySqlParser::NAME_CONST:
        case MySqlParser::NULLIF:
        case MySqlParser::NUMGEOMETRIES:
        case MySqlParser::NUMINTERIORRINGS:
        case MySqlParser::NUMPOINTS:
        case MySqlParser::OCT:
        case MySqlParser::OCTET_LENGTH:
        case MySqlParser::ORD:
        case MySqlParser::OVERLAPS:
        case MySqlParser::PERIOD_ADD:
        case MySqlParser::PERIOD_DIFF:
        case MySqlParser::PI:
        case MySqlParser::POINTFROMTEXT:
        case MySqlParser::POINTFROMWKB:
        case MySqlParser::POINTN:
        case MySqlParser::POLYFROMTEXT:
        case MySqlParser::POLYFROMWKB:
        case MySqlParser::POLYGONFROMTEXT:
        case MySqlParser::POLYGONFROMWKB:
        case MySqlParser::POW:
        case MySqlParser::POWER:
        case MySqlParser::QUOTE:
        case MySqlParser::RADIANS:
        case MySqlParser::RAND:
        case MySqlParser::RANDOM_BYTES:
        case MySqlParser::RELEASE_LOCK:
        case MySqlParser::REVERSE:
        case MySqlParser::ROUND:
        case MySqlParser::ROW_COUNT:
        case MySqlParser::RPAD:
        case MySqlParser::RTRIM:
        case MySqlParser::SEC_TO_TIME:
        case MySqlParser::SESSION_USER:
        case MySqlParser::SHA:
        case MySqlParser::SHA1:
        case MySqlParser::SHA2:
        case MySqlParser::SIGN:
        case MySqlParser::SIN:
        case MySqlParser::SLEEP:
        case MySqlParser::SOUNDEX:
        case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySqlParser::SQRT:
        case MySqlParser::SRID:
        case MySqlParser::STARTPOINT:
        case MySqlParser::STRCMP:
        case MySqlParser::STR_TO_DATE:
        case MySqlParser::ST_AREA:
        case MySqlParser::ST_ASBINARY:
        case MySqlParser::ST_ASTEXT:
        case MySqlParser::ST_ASWKB:
        case MySqlParser::ST_ASWKT:
        case MySqlParser::ST_BUFFER:
        case MySqlParser::ST_CENTROID:
        case MySqlParser::ST_CONTAINS:
        case MySqlParser::ST_CROSSES:
        case MySqlParser::ST_DIFFERENCE:
        case MySqlParser::ST_DIMENSION:
        case MySqlParser::ST_DISJOINT:
        case MySqlParser::ST_DISTANCE:
        case MySqlParser::ST_ENDPOINT:
        case MySqlParser::ST_ENVELOPE:
        case MySqlParser::ST_EQUALS:
        case MySqlParser::ST_EXTERIORRING:
        case MySqlParser::ST_GEOMCOLLFROMTEXT:
        case MySqlParser::ST_GEOMCOLLFROMTXT:
        case MySqlParser::ST_GEOMCOLLFROMWKB:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySqlParser::ST_GEOMETRYFROMTEXT:
        case MySqlParser::ST_GEOMETRYFROMWKB:
        case MySqlParser::ST_GEOMETRYN:
        case MySqlParser::ST_GEOMETRYTYPE:
        case MySqlParser::ST_GEOMFROMTEXT:
        case MySqlParser::ST_GEOMFROMWKB:
        case MySqlParser::ST_INTERIORRINGN:
        case MySqlParser::ST_INTERSECTION:
        case MySqlParser::ST_INTERSECTS:
        case MySqlParser::ST_ISCLOSED:
        case MySqlParser::ST_ISEMPTY:
        case MySqlParser::ST_ISSIMPLE:
        case MySqlParser::ST_LINEFROMTEXT:
        case MySqlParser::ST_LINEFROMWKB:
        case MySqlParser::ST_LINESTRINGFROMTEXT:
        case MySqlParser::ST_LINESTRINGFROMWKB:
        case MySqlParser::ST_NUMGEOMETRIES:
        case MySqlParser::ST_NUMINTERIORRING:
        case MySqlParser::ST_NUMINTERIORRINGS:
        case MySqlParser::ST_NUMPOINTS:
        case MySqlParser::ST_OVERLAPS:
        case MySqlParser::ST_POINTFROMTEXT:
        case MySqlParser::ST_POINTFROMWKB:
        case MySqlParser::ST_POINTN:
        case MySqlParser::ST_POLYFROMTEXT:
        case MySqlParser::ST_POLYFROMWKB:
        case MySqlParser::ST_POLYGONFROMTEXT:
        case MySqlParser::ST_POLYGONFROMWKB:
        case MySqlParser::ST_SRID:
        case MySqlParser::ST_STARTPOINT:
        case MySqlParser::ST_SYMDIFFERENCE:
        case MySqlParser::ST_TOUCHES:
        case MySqlParser::ST_UNION:
        case MySqlParser::ST_WITHIN:
        case MySqlParser::ST_X:
        case MySqlParser::ST_Y:
        case MySqlParser::SUBDATE:
        case MySqlParser::SUBSTRING_INDEX:
        case MySqlParser::SUBTIME:
        case MySqlParser::SYSTEM_USER:
        case MySqlParser::TAN:
        case MySqlParser::TIMEDIFF:
        case MySqlParser::TIMESTAMPADD:
        case MySqlParser::TIMESTAMPDIFF:
        case MySqlParser::TIME_FORMAT:
        case MySqlParser::TIME_TO_SEC:
        case MySqlParser::TOUCHES:
        case MySqlParser::TO_BASE64:
        case MySqlParser::TO_DAYS:
        case MySqlParser::TO_SECONDS:
        case MySqlParser::UCASE:
        case MySqlParser::UNCOMPRESS:
        case MySqlParser::UNCOMPRESSED_LENGTH:
        case MySqlParser::UNHEX:
        case MySqlParser::UNIX_TIMESTAMP:
        case MySqlParser::UPDATEXML:
        case MySqlParser::UPPER:
        case MySqlParser::UUID:
        case MySqlParser::UUID_SHORT:
        case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
        case MySqlParser::VERSION:
        case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySqlParser::WEEKDAY:
        case MySqlParser::WEEKOFYEAR:
        case MySqlParser::WEIGHT_STRING:
        case MySqlParser::WITHIN:
        case MySqlParser::YEARWEEK:
        case MySqlParser::Y_FUNCTION:
        case MySqlParser::X_FUNCTION:
        case MySqlParser::PLUS:
        case MySqlParser::MINUS:
        case MySqlParser::EXCLAMATION_SYMBOL:
        case MySqlParser::BIT_NOT_OP:
        case MySqlParser::LR_BRACKET:
        case MySqlParser::ZERO_DECIMAL:
        case MySqlParser::ONE_DECIMAL:
        case MySqlParser::TWO_DECIMAL:
        case MySqlParser::CHARSET_REVERSE_QOUTE_STRING:
        case MySqlParser::START_NATIONAL_STRING_LITERAL:
        case MySqlParser::STRING_LITERAL:
        case MySqlParser::DECIMAL_LITERAL:
        case MySqlParser::HEXADECIMAL_LITERAL:
        case MySqlParser::REAL_LITERAL:
        case MySqlParser::NULL_SPEC_LITERAL:
        case MySqlParser::BIT_STRING:
        case MySqlParser::STRING_CHARSET_NAME:
        case MySqlParser::ID:
        case MySqlParser::REVERSE_QUOTE_ID:
        case MySqlParser::LOCAL_ID:
        case MySqlParser::GLOBAL_ID: {
          setState(5585);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::ALL) {
            setState(5584);
            match(MySqlParser::ALL);
          }
          setState(5587);
          function_arg();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(5590);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5591);
      match(MySqlParser::COUNT);
      setState(5592);
      match(MySqlParser::LR_BRACKET);
      setState(5593);
      match(MySqlParser::DISTINCT);
      setState(5594);
      function_args();
      setState(5595);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5597);
      _la = _input->LA(1);
      if (!(((((_la - 211) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 211)) & ((1ULL << (MySqlParser::BIT_AND - 211))
        | (1ULL << (MySqlParser::BIT_OR - 211))
        | (1ULL << (MySqlParser::BIT_XOR - 211))
        | (1ULL << (MySqlParser::STD - 211))
        | (1ULL << (MySqlParser::STDDEV - 211))
        | (1ULL << (MySqlParser::STDDEV_POP - 211))
        | (1ULL << (MySqlParser::STDDEV_SAMP - 211))
        | (1ULL << (MySqlParser::VAR_POP - 211))
        | (1ULL << (MySqlParser::VAR_SAMP - 211))
        | (1ULL << (MySqlParser::VARIANCE - 211)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5598);
      match(MySqlParser::LR_BRACKET);
      setState(5600);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ALL) {
        setState(5599);
        match(MySqlParser::ALL);
      }
      setState(5602);
      function_arg();
      setState(5603);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5605);
      match(MySqlParser::GROUP_CONCAT);
      setState(5606);
      match(MySqlParser::LR_BRACKET);
      setState(5608);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::DISTINCT) {
        setState(5607);
        match(MySqlParser::DISTINCT);
      }
      setState(5610);
      function_args();
      setState(5621);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::ORDER) {
        setState(5611);
        match(MySqlParser::ORDER);
        setState(5612);
        match(MySqlParser::BY);
        setState(5613);
        order_by_expression();
        setState(5618);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == MySqlParser::COMMA) {
          setState(5614);
          match(MySqlParser::COMMA);
          setState(5615);
          order_by_expression();
          setState(5620);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(5625);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::SEPARATOR) {
        setState(5623);
        match(MySqlParser::SEPARATOR);
        setState(5624);
        match(MySqlParser::STRING_LITERAL);
      }
      setState(5627);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Scalar_function_nameContext ------------------------------------------------------------------

MySqlParser::Scalar_function_nameContext::Scalar_function_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::Function_name_baseContext* MySqlParser::Scalar_function_nameContext::function_name_base() {
  return getRuleContext<MySqlParser::Function_name_baseContext>(0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::ASCII() {
  return getToken(MySqlParser::ASCII, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::CURDATE() {
  return getToken(MySqlParser::CURDATE, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::CURRENT_DATE() {
  return getToken(MySqlParser::CURRENT_DATE, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::CURRENT_TIME() {
  return getToken(MySqlParser::CURRENT_TIME, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::CURRENT_TIMESTAMP() {
  return getToken(MySqlParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::CURTIME() {
  return getToken(MySqlParser::CURTIME, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::DATE_ADD() {
  return getToken(MySqlParser::DATE_ADD, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::DATE_SUB() {
  return getToken(MySqlParser::DATE_SUB, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::IF() {
  return getToken(MySqlParser::IF, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::LOCALTIME() {
  return getToken(MySqlParser::LOCALTIME, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::LOCALTIMESTAMP() {
  return getToken(MySqlParser::LOCALTIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::MID() {
  return getToken(MySqlParser::MID, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::NOW() {
  return getToken(MySqlParser::NOW, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::REPLACE() {
  return getToken(MySqlParser::REPLACE, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::SUBSTR() {
  return getToken(MySqlParser::SUBSTR, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::SUBSTRING() {
  return getToken(MySqlParser::SUBSTRING, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::SYSDATE() {
  return getToken(MySqlParser::SYSDATE, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::TRIM() {
  return getToken(MySqlParser::TRIM, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::UTC_DATE() {
  return getToken(MySqlParser::UTC_DATE, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::UTC_TIME() {
  return getToken(MySqlParser::UTC_TIME, 0);
}

tree::TerminalNode* MySqlParser::Scalar_function_nameContext::UTC_TIMESTAMP() {
  return getToken(MySqlParser::UTC_TIMESTAMP, 0);
}


size_t MySqlParser::Scalar_function_nameContext::getRuleIndex() const {
  return MySqlParser::RuleScalar_function_name;
}

void MySqlParser::Scalar_function_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScalar_function_name(this);
}

void MySqlParser::Scalar_function_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScalar_function_name(this);
}

MySqlParser::Scalar_function_nameContext* MySqlParser::scalar_function_name() {
  Scalar_function_nameContext *_localctx = _tracker.createInstance<Scalar_function_nameContext>(_ctx, getState());
  enterRule(_localctx, 538, MySqlParser::RuleScalar_function_name);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5653);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LEFT:
      case MySqlParser::RIGHT:
      case MySqlParser::DATE:
      case MySqlParser::TIME:
      case MySqlParser::TIMESTAMP:
      case MySqlParser::YEAR:
      case MySqlParser::COUNT:
      case MySqlParser::POSITION:
      case MySqlParser::QUARTER:
      case MySqlParser::MONTH:
      case MySqlParser::DAY:
      case MySqlParser::HOUR:
      case MySqlParser::MINUTE:
      case MySqlParser::WEEK:
      case MySqlParser::SECOND:
      case MySqlParser::MICROSECOND:
      case MySqlParser::GEOMETRYCOLLECTION:
      case MySqlParser::LINESTRING:
      case MySqlParser::MULTILINESTRING:
      case MySqlParser::MULTIPOINT:
      case MySqlParser::MULTIPOLYGON:
      case MySqlParser::POINT:
      case MySqlParser::POLYGON:
      case MySqlParser::ABS:
      case MySqlParser::ACOS:
      case MySqlParser::ADDDATE:
      case MySqlParser::ADDTIME:
      case MySqlParser::AES_DECRYPT:
      case MySqlParser::AES_ENCRYPT:
      case MySqlParser::AREA:
      case MySqlParser::ASBINARY:
      case MySqlParser::ASIN:
      case MySqlParser::ASTEXT:
      case MySqlParser::ASWKB:
      case MySqlParser::ASWKT:
      case MySqlParser::ASYMMETRIC_DECRYPT:
      case MySqlParser::ASYMMETRIC_DERIVE:
      case MySqlParser::ASYMMETRIC_ENCRYPT:
      case MySqlParser::ASYMMETRIC_SIGN:
      case MySqlParser::ASYMMETRIC_VERIFY:
      case MySqlParser::ATAN:
      case MySqlParser::ATAN2:
      case MySqlParser::BENCHMARK:
      case MySqlParser::BIN:
      case MySqlParser::BIT_COUNT:
      case MySqlParser::BIT_LENGTH:
      case MySqlParser::BUFFER:
      case MySqlParser::CEIL:
      case MySqlParser::CEILING:
      case MySqlParser::CENTROID:
      case MySqlParser::CHARACTER_LENGTH:
      case MySqlParser::CHARSET:
      case MySqlParser::CHAR_LENGTH:
      case MySqlParser::COERCIBILITY:
      case MySqlParser::COLLATION:
      case MySqlParser::COMPRESS:
      case MySqlParser::CONCAT:
      case MySqlParser::CONCAT_WS:
      case MySqlParser::CONNECTION_ID:
      case MySqlParser::CONV:
      case MySqlParser::CONVERT_TZ:
      case MySqlParser::COS:
      case MySqlParser::COT:
      case MySqlParser::CRC32:
      case MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY:
      case MySqlParser::CREATE_ASYMMETRIC_PUB_KEY:
      case MySqlParser::CREATE_DH_PARAMETERS:
      case MySqlParser::CREATE_DIGEST:
      case MySqlParser::CROSSES:
      case MySqlParser::DATEDIFF:
      case MySqlParser::DATE_FORMAT:
      case MySqlParser::DAYNAME:
      case MySqlParser::DAYOFMONTH:
      case MySqlParser::DAYOFWEEK:
      case MySqlParser::DAYOFYEAR:
      case MySqlParser::DECODE:
      case MySqlParser::DEGREES:
      case MySqlParser::DES_DECRYPT:
      case MySqlParser::DES_ENCRYPT:
      case MySqlParser::DIMENSION:
      case MySqlParser::DISJOINT:
      case MySqlParser::ELT:
      case MySqlParser::ENCODE:
      case MySqlParser::ENCRYPT:
      case MySqlParser::ENDPOINT:
      case MySqlParser::ENVELOPE:
      case MySqlParser::EQUALS:
      case MySqlParser::EXP:
      case MySqlParser::EXPORT_SET:
      case MySqlParser::EXTERIORRING:
      case MySqlParser::EXTRACTVALUE:
      case MySqlParser::FIELD:
      case MySqlParser::FIND_IN_SET:
      case MySqlParser::FLOOR:
      case MySqlParser::FORMAT:
      case MySqlParser::FOUND_ROWS:
      case MySqlParser::FROM_BASE64:
      case MySqlParser::FROM_DAYS:
      case MySqlParser::FROM_UNIXTIME:
      case MySqlParser::GEOMCOLLFROMTEXT:
      case MySqlParser::GEOMCOLLFROMWKB:
      case MySqlParser::GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::GEOMETRYFROMTEXT:
      case MySqlParser::GEOMETRYFROMWKB:
      case MySqlParser::GEOMETRYN:
      case MySqlParser::GEOMETRYTYPE:
      case MySqlParser::GEOMFROMTEXT:
      case MySqlParser::GEOMFROMWKB:
      case MySqlParser::GET_FORMAT:
      case MySqlParser::GET_LOCK:
      case MySqlParser::GLENGTH:
      case MySqlParser::GREATEST:
      case MySqlParser::GTID_SUBSET:
      case MySqlParser::GTID_SUBTRACT:
      case MySqlParser::HEX:
      case MySqlParser::IFNULL:
      case MySqlParser::INET6_ATON:
      case MySqlParser::INET6_NTOA:
      case MySqlParser::INET_ATON:
      case MySqlParser::INET_NTOA:
      case MySqlParser::INSTR:
      case MySqlParser::INTERIORRINGN:
      case MySqlParser::INTERSECTS:
      case MySqlParser::ISCLOSED:
      case MySqlParser::ISEMPTY:
      case MySqlParser::ISNULL:
      case MySqlParser::ISSIMPLE:
      case MySqlParser::IS_FREE_LOCK:
      case MySqlParser::IS_IPV4:
      case MySqlParser::IS_IPV4_COMPAT:
      case MySqlParser::IS_IPV4_MAPPED:
      case MySqlParser::IS_IPV6:
      case MySqlParser::IS_USED_LOCK:
      case MySqlParser::LAST_INSERT_ID:
      case MySqlParser::LCASE:
      case MySqlParser::LEAST:
      case MySqlParser::LENGTH:
      case MySqlParser::LINEFROMTEXT:
      case MySqlParser::LINEFROMWKB:
      case MySqlParser::LINESTRINGFROMTEXT:
      case MySqlParser::LINESTRINGFROMWKB:
      case MySqlParser::LN:
      case MySqlParser::LOAD_FILE:
      case MySqlParser::LOCATE:
      case MySqlParser::LOG:
      case MySqlParser::LOG10:
      case MySqlParser::LOG2:
      case MySqlParser::LOWER:
      case MySqlParser::LPAD:
      case MySqlParser::LTRIM:
      case MySqlParser::MAKEDATE:
      case MySqlParser::MAKETIME:
      case MySqlParser::MAKE_SET:
      case MySqlParser::MASTER_POS_WAIT:
      case MySqlParser::MBRCONTAINS:
      case MySqlParser::MBRDISJOINT:
      case MySqlParser::MBREQUAL:
      case MySqlParser::MBRINTERSECTS:
      case MySqlParser::MBROVERLAPS:
      case MySqlParser::MBRTOUCHES:
      case MySqlParser::MBRWITHIN:
      case MySqlParser::MD5:
      case MySqlParser::MLINEFROMTEXT:
      case MySqlParser::MLINEFROMWKB:
      case MySqlParser::MONTHNAME:
      case MySqlParser::MPOINTFROMTEXT:
      case MySqlParser::MPOINTFROMWKB:
      case MySqlParser::MPOLYFROMTEXT:
      case MySqlParser::MPOLYFROMWKB:
      case MySqlParser::MULTILINESTRINGFROMTEXT:
      case MySqlParser::MULTILINESTRINGFROMWKB:
      case MySqlParser::MULTIPOINTFROMTEXT:
      case MySqlParser::MULTIPOINTFROMWKB:
      case MySqlParser::MULTIPOLYGONFROMTEXT:
      case MySqlParser::MULTIPOLYGONFROMWKB:
      case MySqlParser::NAME_CONST:
      case MySqlParser::NULLIF:
      case MySqlParser::NUMGEOMETRIES:
      case MySqlParser::NUMINTERIORRINGS:
      case MySqlParser::NUMPOINTS:
      case MySqlParser::OCT:
      case MySqlParser::OCTET_LENGTH:
      case MySqlParser::ORD:
      case MySqlParser::OVERLAPS:
      case MySqlParser::PERIOD_ADD:
      case MySqlParser::PERIOD_DIFF:
      case MySqlParser::PI:
      case MySqlParser::POINTFROMTEXT:
      case MySqlParser::POINTFROMWKB:
      case MySqlParser::POINTN:
      case MySqlParser::POLYFROMTEXT:
      case MySqlParser::POLYFROMWKB:
      case MySqlParser::POLYGONFROMTEXT:
      case MySqlParser::POLYGONFROMWKB:
      case MySqlParser::POW:
      case MySqlParser::POWER:
      case MySqlParser::QUOTE:
      case MySqlParser::RADIANS:
      case MySqlParser::RAND:
      case MySqlParser::RANDOM_BYTES:
      case MySqlParser::RELEASE_LOCK:
      case MySqlParser::REVERSE:
      case MySqlParser::ROUND:
      case MySqlParser::ROW_COUNT:
      case MySqlParser::RPAD:
      case MySqlParser::RTRIM:
      case MySqlParser::SEC_TO_TIME:
      case MySqlParser::SESSION_USER:
      case MySqlParser::SHA:
      case MySqlParser::SHA1:
      case MySqlParser::SHA2:
      case MySqlParser::SIGN:
      case MySqlParser::SIN:
      case MySqlParser::SLEEP:
      case MySqlParser::SOUNDEX:
      case MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS:
      case MySqlParser::SQRT:
      case MySqlParser::SRID:
      case MySqlParser::STARTPOINT:
      case MySqlParser::STRCMP:
      case MySqlParser::STR_TO_DATE:
      case MySqlParser::ST_AREA:
      case MySqlParser::ST_ASBINARY:
      case MySqlParser::ST_ASTEXT:
      case MySqlParser::ST_ASWKB:
      case MySqlParser::ST_ASWKT:
      case MySqlParser::ST_BUFFER:
      case MySqlParser::ST_CENTROID:
      case MySqlParser::ST_CONTAINS:
      case MySqlParser::ST_CROSSES:
      case MySqlParser::ST_DIFFERENCE:
      case MySqlParser::ST_DIMENSION:
      case MySqlParser::ST_DISJOINT:
      case MySqlParser::ST_DISTANCE:
      case MySqlParser::ST_ENDPOINT:
      case MySqlParser::ST_ENVELOPE:
      case MySqlParser::ST_EQUALS:
      case MySqlParser::ST_EXTERIORRING:
      case MySqlParser::ST_GEOMCOLLFROMTEXT:
      case MySqlParser::ST_GEOMCOLLFROMTXT:
      case MySqlParser::ST_GEOMCOLLFROMWKB:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT:
      case MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB:
      case MySqlParser::ST_GEOMETRYFROMTEXT:
      case MySqlParser::ST_GEOMETRYFROMWKB:
      case MySqlParser::ST_GEOMETRYN:
      case MySqlParser::ST_GEOMETRYTYPE:
      case MySqlParser::ST_GEOMFROMTEXT:
      case MySqlParser::ST_GEOMFROMWKB:
      case MySqlParser::ST_INTERIORRINGN:
      case MySqlParser::ST_INTERSECTION:
      case MySqlParser::ST_INTERSECTS:
      case MySqlParser::ST_ISCLOSED:
      case MySqlParser::ST_ISEMPTY:
      case MySqlParser::ST_ISSIMPLE:
      case MySqlParser::ST_LINEFROMTEXT:
      case MySqlParser::ST_LINEFROMWKB:
      case MySqlParser::ST_LINESTRINGFROMTEXT:
      case MySqlParser::ST_LINESTRINGFROMWKB:
      case MySqlParser::ST_NUMGEOMETRIES:
      case MySqlParser::ST_NUMINTERIORRING:
      case MySqlParser::ST_NUMINTERIORRINGS:
      case MySqlParser::ST_NUMPOINTS:
      case MySqlParser::ST_OVERLAPS:
      case MySqlParser::ST_POINTFROMTEXT:
      case MySqlParser::ST_POINTFROMWKB:
      case MySqlParser::ST_POINTN:
      case MySqlParser::ST_POLYFROMTEXT:
      case MySqlParser::ST_POLYFROMWKB:
      case MySqlParser::ST_POLYGONFROMTEXT:
      case MySqlParser::ST_POLYGONFROMWKB:
      case MySqlParser::ST_SRID:
      case MySqlParser::ST_STARTPOINT:
      case MySqlParser::ST_SYMDIFFERENCE:
      case MySqlParser::ST_TOUCHES:
      case MySqlParser::ST_UNION:
      case MySqlParser::ST_WITHIN:
      case MySqlParser::ST_X:
      case MySqlParser::ST_Y:
      case MySqlParser::SUBDATE:
      case MySqlParser::SUBSTRING_INDEX:
      case MySqlParser::SUBTIME:
      case MySqlParser::SYSTEM_USER:
      case MySqlParser::TAN:
      case MySqlParser::TIMEDIFF:
      case MySqlParser::TIMESTAMPADD:
      case MySqlParser::TIMESTAMPDIFF:
      case MySqlParser::TIME_FORMAT:
      case MySqlParser::TIME_TO_SEC:
      case MySqlParser::TOUCHES:
      case MySqlParser::TO_BASE64:
      case MySqlParser::TO_DAYS:
      case MySqlParser::TO_SECONDS:
      case MySqlParser::UCASE:
      case MySqlParser::UNCOMPRESS:
      case MySqlParser::UNCOMPRESSED_LENGTH:
      case MySqlParser::UNHEX:
      case MySqlParser::UNIX_TIMESTAMP:
      case MySqlParser::UPDATEXML:
      case MySqlParser::UPPER:
      case MySqlParser::UUID:
      case MySqlParser::UUID_SHORT:
      case MySqlParser::VALIDATE_PASSWORD_STRENGTH:
      case MySqlParser::VERSION:
      case MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
      case MySqlParser::WEEKDAY:
      case MySqlParser::WEEKOFYEAR:
      case MySqlParser::WEIGHT_STRING:
      case MySqlParser::WITHIN:
      case MySqlParser::YEARWEEK:
      case MySqlParser::Y_FUNCTION:
      case MySqlParser::X_FUNCTION: {
        enterOuterAlt(_localctx, 1);
        setState(5631);
        function_name_base();
        break;
      }

      case MySqlParser::ASCII: {
        enterOuterAlt(_localctx, 2);
        setState(5632);
        match(MySqlParser::ASCII);
        break;
      }

      case MySqlParser::CURDATE: {
        enterOuterAlt(_localctx, 3);
        setState(5633);
        match(MySqlParser::CURDATE);
        break;
      }

      case MySqlParser::CURRENT_DATE: {
        enterOuterAlt(_localctx, 4);
        setState(5634);
        match(MySqlParser::CURRENT_DATE);
        break;
      }

      case MySqlParser::CURRENT_TIME: {
        enterOuterAlt(_localctx, 5);
        setState(5635);
        match(MySqlParser::CURRENT_TIME);
        break;
      }

      case MySqlParser::CURRENT_TIMESTAMP: {
        enterOuterAlt(_localctx, 6);
        setState(5636);
        match(MySqlParser::CURRENT_TIMESTAMP);
        break;
      }

      case MySqlParser::CURTIME: {
        enterOuterAlt(_localctx, 7);
        setState(5637);
        match(MySqlParser::CURTIME);
        break;
      }

      case MySqlParser::DATE_ADD: {
        enterOuterAlt(_localctx, 8);
        setState(5638);
        match(MySqlParser::DATE_ADD);
        break;
      }

      case MySqlParser::DATE_SUB: {
        enterOuterAlt(_localctx, 9);
        setState(5639);
        match(MySqlParser::DATE_SUB);
        break;
      }

      case MySqlParser::IF: {
        enterOuterAlt(_localctx, 10);
        setState(5640);
        match(MySqlParser::IF);
        break;
      }

      case MySqlParser::LOCALTIME: {
        enterOuterAlt(_localctx, 11);
        setState(5641);
        match(MySqlParser::LOCALTIME);
        break;
      }

      case MySqlParser::LOCALTIMESTAMP: {
        enterOuterAlt(_localctx, 12);
        setState(5642);
        match(MySqlParser::LOCALTIMESTAMP);
        break;
      }

      case MySqlParser::MID: {
        enterOuterAlt(_localctx, 13);
        setState(5643);
        match(MySqlParser::MID);
        break;
      }

      case MySqlParser::NOW: {
        enterOuterAlt(_localctx, 14);
        setState(5644);
        match(MySqlParser::NOW);
        break;
      }

      case MySqlParser::REPLACE: {
        enterOuterAlt(_localctx, 15);
        setState(5645);
        match(MySqlParser::REPLACE);
        break;
      }

      case MySqlParser::SUBSTR: {
        enterOuterAlt(_localctx, 16);
        setState(5646);
        match(MySqlParser::SUBSTR);
        break;
      }

      case MySqlParser::SUBSTRING: {
        enterOuterAlt(_localctx, 17);
        setState(5647);
        match(MySqlParser::SUBSTRING);
        break;
      }

      case MySqlParser::SYSDATE: {
        enterOuterAlt(_localctx, 18);
        setState(5648);
        match(MySqlParser::SYSDATE);
        break;
      }

      case MySqlParser::TRIM: {
        enterOuterAlt(_localctx, 19);
        setState(5649);
        match(MySqlParser::TRIM);
        break;
      }

      case MySqlParser::UTC_DATE: {
        enterOuterAlt(_localctx, 20);
        setState(5650);
        match(MySqlParser::UTC_DATE);
        break;
      }

      case MySqlParser::UTC_TIME: {
        enterOuterAlt(_localctx, 21);
        setState(5651);
        match(MySqlParser::UTC_TIME);
        break;
      }

      case MySqlParser::UTC_TIMESTAMP: {
        enterOuterAlt(_localctx, 22);
        setState(5652);
        match(MySqlParser::UTC_TIMESTAMP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_argsContext ------------------------------------------------------------------

MySqlParser::Function_argsContext::Function_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MySqlParser::ConstantContext *> MySqlParser::Function_argsContext::constant() {
  return getRuleContexts<MySqlParser::ConstantContext>();
}

MySqlParser::ConstantContext* MySqlParser::Function_argsContext::constant(size_t i) {
  return getRuleContext<MySqlParser::ConstantContext>(i);
}

std::vector<MySqlParser::Full_column_nameContext *> MySqlParser::Function_argsContext::full_column_name() {
  return getRuleContexts<MySqlParser::Full_column_nameContext>();
}

MySqlParser::Full_column_nameContext* MySqlParser::Function_argsContext::full_column_name(size_t i) {
  return getRuleContext<MySqlParser::Full_column_nameContext>(i);
}

std::vector<MySqlParser::Function_callContext *> MySqlParser::Function_argsContext::function_call() {
  return getRuleContexts<MySqlParser::Function_callContext>();
}

MySqlParser::Function_callContext* MySqlParser::Function_argsContext::function_call(size_t i) {
  return getRuleContext<MySqlParser::Function_callContext>(i);
}

std::vector<MySqlParser::ExpressionContext *> MySqlParser::Function_argsContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::Function_argsContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}


size_t MySqlParser::Function_argsContext::getRuleIndex() const {
  return MySqlParser::RuleFunction_args;
}

void MySqlParser::Function_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_args(this);
}

void MySqlParser::Function_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_args(this);
}

MySqlParser::Function_argsContext* MySqlParser::function_args() {
  Function_argsContext *_localctx = _tracker.createInstance<Function_argsContext>(_ctx, getState());
  enterRule(_localctx, 540, MySqlParser::RuleFunction_args);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5659);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 832, _ctx)) {
    case 1: {
      setState(5655);
      constant();
      break;
    }

    case 2: {
      setState(5656);
      full_column_name();
      break;
    }

    case 3: {
      setState(5657);
      function_call();
      break;
    }

    case 4: {
      setState(5658);
      expression(0);
      break;
    }

    }
    setState(5670);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MySqlParser::COMMA) {
      setState(5661);
      match(MySqlParser::COMMA);
      setState(5666);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 833, _ctx)) {
      case 1: {
        setState(5662);
        constant();
        break;
      }

      case 2: {
        setState(5663);
        full_column_name();
        break;
      }

      case 3: {
        setState(5664);
        function_call();
        break;
      }

      case 4: {
        setState(5665);
        expression(0);
        break;
      }

      }
      setState(5672);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_argContext ------------------------------------------------------------------

MySqlParser::Function_argContext::Function_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MySqlParser::ConstantContext* MySqlParser::Function_argContext::constant() {
  return getRuleContext<MySqlParser::ConstantContext>(0);
}

MySqlParser::Full_column_nameContext* MySqlParser::Function_argContext::full_column_name() {
  return getRuleContext<MySqlParser::Full_column_nameContext>(0);
}

MySqlParser::Function_callContext* MySqlParser::Function_argContext::function_call() {
  return getRuleContext<MySqlParser::Function_callContext>(0);
}

MySqlParser::ExpressionContext* MySqlParser::Function_argContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}


size_t MySqlParser::Function_argContext::getRuleIndex() const {
  return MySqlParser::RuleFunction_arg;
}

void MySqlParser::Function_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_arg(this);
}

void MySqlParser::Function_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_arg(this);
}

MySqlParser::Function_argContext* MySqlParser::function_arg() {
  Function_argContext *_localctx = _tracker.createInstance<Function_argContext>(_ctx, getState());
  enterRule(_localctx, 542, MySqlParser::RuleFunction_arg);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5677);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 835, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5673);
      constant();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5674);
      full_column_name();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5675);
      function_call();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5676);
      expression(0);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

MySqlParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::ExpressionContext::getRuleIndex() const {
  return MySqlParser::RuleExpression;
}

void MySqlParser::ExpressionContext::copyFrom(ExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- IsExpressionContext ------------------------------------------------------------------

MySqlParser::PredicateContext* MySqlParser::IsExpressionContext::predicate() {
  return getRuleContext<MySqlParser::PredicateContext>(0);
}

tree::TerminalNode* MySqlParser::IsExpressionContext::IS() {
  return getToken(MySqlParser::IS, 0);
}

tree::TerminalNode* MySqlParser::IsExpressionContext::TRUE() {
  return getToken(MySqlParser::TRUE, 0);
}

tree::TerminalNode* MySqlParser::IsExpressionContext::FALSE() {
  return getToken(MySqlParser::FALSE, 0);
}

tree::TerminalNode* MySqlParser::IsExpressionContext::UNKNOWN() {
  return getToken(MySqlParser::UNKNOWN, 0);
}

tree::TerminalNode* MySqlParser::IsExpressionContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

MySqlParser::IsExpressionContext::IsExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }

void MySqlParser::IsExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsExpression(this);
}
void MySqlParser::IsExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsExpression(this);
}
//----------------- NotExpressionContext ------------------------------------------------------------------

MySqlParser::ExpressionContext* MySqlParser::NotExpressionContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

tree::TerminalNode* MySqlParser::NotExpressionContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

MySqlParser::NotExpressionContext::NotExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }

void MySqlParser::NotExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNotExpression(this);
}
void MySqlParser::NotExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNotExpression(this);
}
//----------------- LogicalExpressionContext ------------------------------------------------------------------

std::vector<MySqlParser::ExpressionContext *> MySqlParser::LogicalExpressionContext::expression() {
  return getRuleContexts<MySqlParser::ExpressionContext>();
}

MySqlParser::ExpressionContext* MySqlParser::LogicalExpressionContext::expression(size_t i) {
  return getRuleContext<MySqlParser::ExpressionContext>(i);
}

MySqlParser::Logical_operatorContext* MySqlParser::LogicalExpressionContext::logical_operator() {
  return getRuleContext<MySqlParser::Logical_operatorContext>(0);
}

MySqlParser::LogicalExpressionContext::LogicalExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }

void MySqlParser::LogicalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalExpression(this);
}
void MySqlParser::LogicalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalExpression(this);
}
//----------------- PredicateExpressionContext ------------------------------------------------------------------

MySqlParser::PredicateContext* MySqlParser::PredicateExpressionContext::predicate() {
  return getRuleContext<MySqlParser::PredicateContext>(0);
}

MySqlParser::PredicateExpressionContext::PredicateExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }

void MySqlParser::PredicateExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPredicateExpression(this);
}
void MySqlParser::PredicateExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPredicateExpression(this);
}

MySqlParser::ExpressionContext* MySqlParser::expression() {
   return expression(0);
}

MySqlParser::ExpressionContext* MySqlParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MySqlParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  MySqlParser::ExpressionContext *previousContext = _localctx;
  size_t startState = 544;
  enterRecursionRule(_localctx, 544, MySqlParser::RuleExpression, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5690);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 837, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<NotExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(5680);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::NOT || _la == MySqlParser::EXCLAMATION_SYMBOL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5681);
      expression(4);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<IsExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(5682);
      predicate(0);
      setState(5683);
      match(MySqlParser::IS);
      setState(5685);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::NOT) {
        setState(5684);
        match(MySqlParser::NOT);
      }
      setState(5687);
      _la = _input->LA(1);
      if (!(_la == MySqlParser::FALSE || _la == MySqlParser::TRUE || _la == MySqlParser::UNKNOWN)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PredicateExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(5689);
      predicate(0);
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(5698);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 838, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<LogicalExpressionContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleExpression);
        setState(5692);

        if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
        setState(5693);
        logical_operator();
        setState(5694);
        expression(4); 
      }
      setState(5700);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 838, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

MySqlParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::PredicateContext::getRuleIndex() const {
  return MySqlParser::RulePredicate;
}

void MySqlParser::PredicateContext::copyFrom(PredicateContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SoundsLikePredicateContext ------------------------------------------------------------------

std::vector<MySqlParser::PredicateContext *> MySqlParser::SoundsLikePredicateContext::predicate() {
  return getRuleContexts<MySqlParser::PredicateContext>();
}

MySqlParser::PredicateContext* MySqlParser::SoundsLikePredicateContext::predicate(size_t i) {
  return getRuleContext<MySqlParser::PredicateContext>(i);
}

tree::TerminalNode* MySqlParser::SoundsLikePredicateContext::SOUNDS() {
  return getToken(MySqlParser::SOUNDS, 0);
}

tree::TerminalNode* MySqlParser::SoundsLikePredicateContext::LIKE() {
  return getToken(MySqlParser::LIKE, 0);
}

MySqlParser::SoundsLikePredicateContext::SoundsLikePredicateContext(PredicateContext *ctx) { copyFrom(ctx); }

void MySqlParser::SoundsLikePredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSoundsLikePredicate(this);
}
void MySqlParser::SoundsLikePredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSoundsLikePredicate(this);
}
//----------------- ExpressionAtomPredicateContext ------------------------------------------------------------------

MySqlParser::Expression_atomContext* MySqlParser::ExpressionAtomPredicateContext::expression_atom() {
  return getRuleContext<MySqlParser::Expression_atomContext>(0);
}

tree::TerminalNode* MySqlParser::ExpressionAtomPredicateContext::LOCAL_ID() {
  return getToken(MySqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* MySqlParser::ExpressionAtomPredicateContext::VAR_ASSIGN() {
  return getToken(MySqlParser::VAR_ASSIGN, 0);
}

MySqlParser::ExpressionAtomPredicateContext::ExpressionAtomPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }

void MySqlParser::ExpressionAtomPredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionAtomPredicate(this);
}
void MySqlParser::ExpressionAtomPredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionAtomPredicate(this);
}
//----------------- InPredicateContext ------------------------------------------------------------------

MySqlParser::PredicateContext* MySqlParser::InPredicateContext::predicate() {
  return getRuleContext<MySqlParser::PredicateContext>(0);
}

tree::TerminalNode* MySqlParser::InPredicateContext::IN() {
  return getToken(MySqlParser::IN, 0);
}

MySqlParser::SubqueryContext* MySqlParser::InPredicateContext::subquery() {
  return getRuleContext<MySqlParser::SubqueryContext>(0);
}

MySqlParser::Expression_listContext* MySqlParser::InPredicateContext::expression_list() {
  return getRuleContext<MySqlParser::Expression_listContext>(0);
}

tree::TerminalNode* MySqlParser::InPredicateContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

MySqlParser::InPredicateContext::InPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }

void MySqlParser::InPredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInPredicate(this);
}
void MySqlParser::InPredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInPredicate(this);
}
//----------------- SubqueryComparasionPredicateContext ------------------------------------------------------------------

MySqlParser::PredicateContext* MySqlParser::SubqueryComparasionPredicateContext::predicate() {
  return getRuleContext<MySqlParser::PredicateContext>(0);
}

MySqlParser::Comparison_operatorContext* MySqlParser::SubqueryComparasionPredicateContext::comparison_operator() {
  return getRuleContext<MySqlParser::Comparison_operatorContext>(0);
}

MySqlParser::SubqueryContext* MySqlParser::SubqueryComparasionPredicateContext::subquery() {
  return getRuleContext<MySqlParser::SubqueryContext>(0);
}

tree::TerminalNode* MySqlParser::SubqueryComparasionPredicateContext::ALL() {
  return getToken(MySqlParser::ALL, 0);
}

tree::TerminalNode* MySqlParser::SubqueryComparasionPredicateContext::ANY() {
  return getToken(MySqlParser::ANY, 0);
}

tree::TerminalNode* MySqlParser::SubqueryComparasionPredicateContext::SOME() {
  return getToken(MySqlParser::SOME, 0);
}

MySqlParser::SubqueryComparasionPredicateContext::SubqueryComparasionPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }

void MySqlParser::SubqueryComparasionPredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubqueryComparasionPredicate(this);
}
void MySqlParser::SubqueryComparasionPredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubqueryComparasionPredicate(this);
}
//----------------- BetweenPredicateContext ------------------------------------------------------------------

std::vector<MySqlParser::PredicateContext *> MySqlParser::BetweenPredicateContext::predicate() {
  return getRuleContexts<MySqlParser::PredicateContext>();
}

MySqlParser::PredicateContext* MySqlParser::BetweenPredicateContext::predicate(size_t i) {
  return getRuleContext<MySqlParser::PredicateContext>(i);
}

tree::TerminalNode* MySqlParser::BetweenPredicateContext::BETWEEN() {
  return getToken(MySqlParser::BETWEEN, 0);
}

tree::TerminalNode* MySqlParser::BetweenPredicateContext::AND() {
  return getToken(MySqlParser::AND, 0);
}

tree::TerminalNode* MySqlParser::BetweenPredicateContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

MySqlParser::BetweenPredicateContext::BetweenPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }

void MySqlParser::BetweenPredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBetweenPredicate(this);
}
void MySqlParser::BetweenPredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBetweenPredicate(this);
}
//----------------- BinaryComparasionPredicateContext ------------------------------------------------------------------

std::vector<MySqlParser::PredicateContext *> MySqlParser::BinaryComparasionPredicateContext::predicate() {
  return getRuleContexts<MySqlParser::PredicateContext>();
}

MySqlParser::PredicateContext* MySqlParser::BinaryComparasionPredicateContext::predicate(size_t i) {
  return getRuleContext<MySqlParser::PredicateContext>(i);
}

MySqlParser::Comparison_operatorContext* MySqlParser::BinaryComparasionPredicateContext::comparison_operator() {
  return getRuleContext<MySqlParser::Comparison_operatorContext>(0);
}

MySqlParser::BinaryComparasionPredicateContext::BinaryComparasionPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }

void MySqlParser::BinaryComparasionPredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinaryComparasionPredicate(this);
}
void MySqlParser::BinaryComparasionPredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinaryComparasionPredicate(this);
}
//----------------- IsNullPredicateContext ------------------------------------------------------------------

MySqlParser::PredicateContext* MySqlParser::IsNullPredicateContext::predicate() {
  return getRuleContext<MySqlParser::PredicateContext>(0);
}

tree::TerminalNode* MySqlParser::IsNullPredicateContext::IS() {
  return getToken(MySqlParser::IS, 0);
}

MySqlParser::Null_notnullContext* MySqlParser::IsNullPredicateContext::null_notnull() {
  return getRuleContext<MySqlParser::Null_notnullContext>(0);
}

MySqlParser::IsNullPredicateContext::IsNullPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }

void MySqlParser::IsNullPredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsNullPredicate(this);
}
void MySqlParser::IsNullPredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsNullPredicate(this);
}
//----------------- LikePredicateContext ------------------------------------------------------------------

std::vector<MySqlParser::PredicateContext *> MySqlParser::LikePredicateContext::predicate() {
  return getRuleContexts<MySqlParser::PredicateContext>();
}

MySqlParser::PredicateContext* MySqlParser::LikePredicateContext::predicate(size_t i) {
  return getRuleContext<MySqlParser::PredicateContext>(i);
}

tree::TerminalNode* MySqlParser::LikePredicateContext::LIKE() {
  return getToken(MySqlParser::LIKE, 0);
}

tree::TerminalNode* MySqlParser::LikePredicateContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

tree::TerminalNode* MySqlParser::LikePredicateContext::ESCAPE() {
  return getToken(MySqlParser::ESCAPE, 0);
}

MySqlParser::String_literalContext* MySqlParser::LikePredicateContext::string_literal() {
  return getRuleContext<MySqlParser::String_literalContext>(0);
}

MySqlParser::LikePredicateContext::LikePredicateContext(PredicateContext *ctx) { copyFrom(ctx); }

void MySqlParser::LikePredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLikePredicate(this);
}
void MySqlParser::LikePredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLikePredicate(this);
}
//----------------- RegexpPredicateContext ------------------------------------------------------------------

std::vector<MySqlParser::PredicateContext *> MySqlParser::RegexpPredicateContext::predicate() {
  return getRuleContexts<MySqlParser::PredicateContext>();
}

MySqlParser::PredicateContext* MySqlParser::RegexpPredicateContext::predicate(size_t i) {
  return getRuleContext<MySqlParser::PredicateContext>(i);
}

tree::TerminalNode* MySqlParser::RegexpPredicateContext::REGEXP() {
  return getToken(MySqlParser::REGEXP, 0);
}

tree::TerminalNode* MySqlParser::RegexpPredicateContext::RLIKE() {
  return getToken(MySqlParser::RLIKE, 0);
}

tree::TerminalNode* MySqlParser::RegexpPredicateContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}

MySqlParser::RegexpPredicateContext::RegexpPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }

void MySqlParser::RegexpPredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRegexpPredicate(this);
}
void MySqlParser::RegexpPredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRegexpPredicate(this);
}

MySqlParser::PredicateContext* MySqlParser::predicate() {
   return predicate(0);
}

MySqlParser::PredicateContext* MySqlParser::predicate(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MySqlParser::PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, parentState);
  MySqlParser::PredicateContext *previousContext = _localctx;
  size_t startState = 546;
  enterRecursionRule(_localctx, 546, MySqlParser::RulePredicate, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<ExpressionAtomPredicateContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(5704);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 839, _ctx)) {
    case 1: {
      setState(5702);
      match(MySqlParser::LOCAL_ID);
      setState(5703);
      match(MySqlParser::VAR_ASSIGN);
      break;
    }

    }
    setState(5706);
    expression_atom(0);
    _ctx->stop = _input->LT(-1);
    setState(5765);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 847, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(5763);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 846, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<BinaryComparasionPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(5708);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(5709);
          comparison_operator();
          setState(5710);
          predicate(8);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<BetweenPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(5712);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(5714);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::NOT) {
            setState(5713);
            match(MySqlParser::NOT);
          }
          setState(5716);
          match(MySqlParser::BETWEEN);
          setState(5717);
          predicate(0);
          setState(5718);
          match(MySqlParser::AND);
          setState(5719);
          predicate(6);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<SoundsLikePredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(5721);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(5722);
          match(MySqlParser::SOUNDS);
          setState(5723);
          match(MySqlParser::LIKE);
          setState(5724);
          predicate(5);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<RegexpPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(5725);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(5727);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::NOT) {
            setState(5726);
            match(MySqlParser::NOT);
          }
          setState(5729);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::REGEXP

          || _la == MySqlParser::RLIKE)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(5730);
          predicate(3);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<InPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(5731);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(5733);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::NOT) {
            setState(5732);
            match(MySqlParser::NOT);
          }
          setState(5735);
          match(MySqlParser::IN);
          setState(5736);
          match(MySqlParser::LR_BRACKET);
          setState(5739);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 843, _ctx)) {
          case 1: {
            setState(5737);
            subquery();
            break;
          }

          case 2: {
            setState(5738);
            expression_list();
            break;
          }

          }
          setState(5741);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<IsNullPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(5743);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(5744);
          match(MySqlParser::IS);
          setState(5745);
          null_notnull();
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<SubqueryComparasionPredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(5746);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(5747);
          comparison_operator();
          setState(5748);
          _la = _input->LA(1);
          if (!(_la == MySqlParser::ALL || _la == MySqlParser::ANY || _la == MySqlParser::SOME)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(5749);
          match(MySqlParser::LR_BRACKET);
          setState(5750);
          subquery();
          setState(5751);
          match(MySqlParser::RR_BRACKET);
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<LikePredicateContext>(_tracker.createInstance<PredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RulePredicate);
          setState(5753);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(5755);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MySqlParser::NOT) {
            setState(5754);
            match(MySqlParser::NOT);
          }
          setState(5757);
          match(MySqlParser::LIKE);
          setState(5758);
          predicate(0);
          setState(5761);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 845, _ctx)) {
          case 1: {
            setState(5759);
            match(MySqlParser::ESCAPE);
            setState(5760);
            string_literal();
            break;
          }

          }
          break;
        }

        } 
      }
      setState(5767);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 847, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Expression_atomContext ------------------------------------------------------------------

MySqlParser::Expression_atomContext::Expression_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Expression_atomContext::getRuleIndex() const {
  return MySqlParser::RuleExpression_atom;
}

void MySqlParser::Expression_atomContext::copyFrom(Expression_atomContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UnaryExpressionAtomContext ------------------------------------------------------------------

MySqlParser::Unary_operatorContext* MySqlParser::UnaryExpressionAtomContext::unary_operator() {
  return getRuleContext<MySqlParser::Unary_operatorContext>(0);
}

MySqlParser::Expression_atomContext* MySqlParser::UnaryExpressionAtomContext::expression_atom() {
  return getRuleContext<MySqlParser::Expression_atomContext>(0);
}

MySqlParser::UnaryExpressionAtomContext::UnaryExpressionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::UnaryExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpressionAtom(this);
}
void MySqlParser::UnaryExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpressionAtom(this);
}
//----------------- ExistsExpessionAtomContext ------------------------------------------------------------------

MySqlParser::SubqueryContext* MySqlParser::ExistsExpessionAtomContext::subquery() {
  return getRuleContext<MySqlParser::SubqueryContext>(0);
}

tree::TerminalNode* MySqlParser::ExistsExpessionAtomContext::EXISTS() {
  return getToken(MySqlParser::EXISTS, 0);
}

MySqlParser::ExistsExpessionAtomContext::ExistsExpessionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::ExistsExpessionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExistsExpessionAtom(this);
}
void MySqlParser::ExistsExpessionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExistsExpessionAtom(this);
}
//----------------- ConstantExpressionAtomContext ------------------------------------------------------------------

MySqlParser::ConstantContext* MySqlParser::ConstantExpressionAtomContext::constant() {
  return getRuleContext<MySqlParser::ConstantContext>(0);
}

MySqlParser::ConstantExpressionAtomContext::ConstantExpressionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::ConstantExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantExpressionAtom(this);
}
void MySqlParser::ConstantExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantExpressionAtom(this);
}
//----------------- FunctionCallExpressionAtomContext ------------------------------------------------------------------

MySqlParser::Function_callContext* MySqlParser::FunctionCallExpressionAtomContext::function_call() {
  return getRuleContext<MySqlParser::Function_callContext>(0);
}

MySqlParser::FunctionCallExpressionAtomContext::FunctionCallExpressionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::FunctionCallExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionCallExpressionAtom(this);
}
void MySqlParser::FunctionCallExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionCallExpressionAtom(this);
}
//----------------- MysqlVariableExpressionAtomContext ------------------------------------------------------------------

MySqlParser::Mysql_variableContext* MySqlParser::MysqlVariableExpressionAtomContext::mysql_variable() {
  return getRuleContext<MySqlParser::Mysql_variableContext>(0);
}

MySqlParser::MysqlVariableExpressionAtomContext::MysqlVariableExpressionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::MysqlVariableExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMysqlVariableExpressionAtom(this);
}
void MySqlParser::MysqlVariableExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMysqlVariableExpressionAtom(this);
}
//----------------- BinaryExpressionAtomContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::BinaryExpressionAtomContext::BINARY() {
  return getToken(MySqlParser::BINARY, 0);
}

MySqlParser::Expression_atomContext* MySqlParser::BinaryExpressionAtomContext::expression_atom() {
  return getRuleContext<MySqlParser::Expression_atomContext>(0);
}

MySqlParser::BinaryExpressionAtomContext::BinaryExpressionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::BinaryExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinaryExpressionAtom(this);
}
void MySqlParser::BinaryExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinaryExpressionAtom(this);
}
//----------------- FullColumnNameExpressionAtomContext ------------------------------------------------------------------

MySqlParser::Full_column_nameContext* MySqlParser::FullColumnNameExpressionAtomContext::full_column_name() {
  return getRuleContext<MySqlParser::Full_column_nameContext>(0);
}

MySqlParser::FullColumnNameExpressionAtomContext::FullColumnNameExpressionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::FullColumnNameExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFullColumnNameExpressionAtom(this);
}
void MySqlParser::FullColumnNameExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFullColumnNameExpressionAtom(this);
}
//----------------- DefaultExpressionAtomContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::DefaultExpressionAtomContext::DEFAULT() {
  return getToken(MySqlParser::DEFAULT, 0);
}

MySqlParser::DefaultExpressionAtomContext::DefaultExpressionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::DefaultExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultExpressionAtom(this);
}
void MySqlParser::DefaultExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultExpressionAtom(this);
}
//----------------- BitExpressionAtomContext ------------------------------------------------------------------

std::vector<MySqlParser::Expression_atomContext *> MySqlParser::BitExpressionAtomContext::expression_atom() {
  return getRuleContexts<MySqlParser::Expression_atomContext>();
}

MySqlParser::Expression_atomContext* MySqlParser::BitExpressionAtomContext::expression_atom(size_t i) {
  return getRuleContext<MySqlParser::Expression_atomContext>(i);
}

MySqlParser::Bit_operatorContext* MySqlParser::BitExpressionAtomContext::bit_operator() {
  return getRuleContext<MySqlParser::Bit_operatorContext>(0);
}

MySqlParser::BitExpressionAtomContext::BitExpressionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::BitExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitExpressionAtom(this);
}
void MySqlParser::BitExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitExpressionAtom(this);
}
//----------------- NestedExpressionAtomContext ------------------------------------------------------------------

MySqlParser::ExpressionContext* MySqlParser::NestedExpressionAtomContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::NestedExpressionAtomContext::NestedExpressionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::NestedExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNestedExpressionAtom(this);
}
void MySqlParser::NestedExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNestedExpressionAtom(this);
}
//----------------- MathExpressionAtomContext ------------------------------------------------------------------

std::vector<MySqlParser::Expression_atomContext *> MySqlParser::MathExpressionAtomContext::expression_atom() {
  return getRuleContexts<MySqlParser::Expression_atomContext>();
}

MySqlParser::Expression_atomContext* MySqlParser::MathExpressionAtomContext::expression_atom(size_t i) {
  return getRuleContext<MySqlParser::Expression_atomContext>(i);
}

MySqlParser::Math_operatorContext* MySqlParser::MathExpressionAtomContext::math_operator() {
  return getRuleContext<MySqlParser::Math_operatorContext>(0);
}

MySqlParser::MathExpressionAtomContext::MathExpressionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::MathExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMathExpressionAtom(this);
}
void MySqlParser::MathExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMathExpressionAtom(this);
}
//----------------- IntervalExpressionAtomContext ------------------------------------------------------------------

tree::TerminalNode* MySqlParser::IntervalExpressionAtomContext::INTERVAL() {
  return getToken(MySqlParser::INTERVAL, 0);
}

MySqlParser::ExpressionContext* MySqlParser::IntervalExpressionAtomContext::expression() {
  return getRuleContext<MySqlParser::ExpressionContext>(0);
}

MySqlParser::Interval_typeContext* MySqlParser::IntervalExpressionAtomContext::interval_type() {
  return getRuleContext<MySqlParser::Interval_typeContext>(0);
}

MySqlParser::IntervalExpressionAtomContext::IntervalExpressionAtomContext(Expression_atomContext *ctx) { copyFrom(ctx); }

void MySqlParser::IntervalExpressionAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntervalExpressionAtom(this);
}
void MySqlParser::IntervalExpressionAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntervalExpressionAtom(this);
}

MySqlParser::Expression_atomContext* MySqlParser::expression_atom() {
   return expression_atom(0);
}

MySqlParser::Expression_atomContext* MySqlParser::expression_atom(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MySqlParser::Expression_atomContext *_localctx = _tracker.createInstance<Expression_atomContext>(_ctx, parentState);
  MySqlParser::Expression_atomContext *previousContext = _localctx;
  size_t startState = 548;
  enterRecursionRule(_localctx, 548, MySqlParser::RuleExpression_atom, precedence);

    size_t _la = 0;

  auto onExit = finally([=] {
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5794);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 849, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<DefaultExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(5769);
      match(MySqlParser::DEFAULT);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ConstantExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(5770);
      constant();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<FullColumnNameExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(5771);
      full_column_name();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<FunctionCallExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(5772);
      function_call();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<MysqlVariableExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(5773);
      mysql_variable();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<UnaryExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(5774);
      unary_operator();
      setState(5775);
      expression_atom(7);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<BinaryExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(5777);
      match(MySqlParser::BINARY);
      setState(5778);
      expression_atom(6);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<NestedExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(5779);
      match(MySqlParser::LR_BRACKET);
      setState(5780);
      expression(0);
      setState(5781);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ExistsExpessionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(5784);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MySqlParser::EXISTS) {
        setState(5783);
        match(MySqlParser::EXISTS);
      }
      setState(5786);
      match(MySqlParser::LR_BRACKET);
      setState(5787);
      subquery();
      setState(5788);
      match(MySqlParser::RR_BRACKET);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<IntervalExpressionAtomContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(5790);
      match(MySqlParser::INTERVAL);
      setState(5791);
      expression(0);
      setState(5792);
      interval_type();
      break;
    }

    }
    _ctx->stop = _input->LT(-1);
    setState(5806);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 851, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(5804);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 850, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<BitExpressionAtomContext>(_tracker.createInstance<Expression_atomContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression_atom);
          setState(5796);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(5797);
          bit_operator();
          setState(5798);
          expression_atom(3);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<MathExpressionAtomContext>(_tracker.createInstance<Expression_atomContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression_atom);
          setState(5800);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(5801);
          math_operator();
          setState(5802);
          expression_atom(2);
          break;
        }

        } 
      }
      setState(5808);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 851, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Unary_operatorContext ------------------------------------------------------------------

MySqlParser::Unary_operatorContext::Unary_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Unary_operatorContext::NOT() {
  return getToken(MySqlParser::NOT, 0);
}


size_t MySqlParser::Unary_operatorContext::getRuleIndex() const {
  return MySqlParser::RuleUnary_operator;
}

void MySqlParser::Unary_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_operator(this);
}

void MySqlParser::Unary_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_operator(this);
}

MySqlParser::Unary_operatorContext* MySqlParser::unary_operator() {
  Unary_operatorContext *_localctx = _tracker.createInstance<Unary_operatorContext>(_ctx, getState());
  enterRule(_localctx, 550, MySqlParser::RuleUnary_operator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5809);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::NOT || ((((_la - 930) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 930)) & ((1ULL << (MySqlParser::PLUS - 930))
      | (1ULL << (MySqlParser::MINUS - 930))
      | (1ULL << (MySqlParser::EXCLAMATION_SYMBOL - 930))
      | (1ULL << (MySqlParser::BIT_NOT_OP - 930)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comparison_operatorContext ------------------------------------------------------------------

MySqlParser::Comparison_operatorContext::Comparison_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Comparison_operatorContext::getRuleIndex() const {
  return MySqlParser::RuleComparison_operator;
}

void MySqlParser::Comparison_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison_operator(this);
}

void MySqlParser::Comparison_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison_operator(this);
}

MySqlParser::Comparison_operatorContext* MySqlParser::comparison_operator() {
  Comparison_operatorContext *_localctx = _tracker.createInstance<Comparison_operatorContext>(_ctx, getState());
  enterRule(_localctx, 552, MySqlParser::RuleComparison_operator);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5825);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 852, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5811);
      match(MySqlParser::EQUAL_SYMBOL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5812);
      match(MySqlParser::GREATER_SYMBOL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5813);
      match(MySqlParser::LESS_SYMBOL);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5814);
      match(MySqlParser::LESS_SYMBOL);
      setState(5815);
      match(MySqlParser::EQUAL_SYMBOL);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5816);
      match(MySqlParser::GREATER_SYMBOL);
      setState(5817);
      match(MySqlParser::EQUAL_SYMBOL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(5818);
      match(MySqlParser::LESS_SYMBOL);
      setState(5819);
      match(MySqlParser::GREATER_SYMBOL);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(5820);
      match(MySqlParser::EXCLAMATION_SYMBOL);
      setState(5821);
      match(MySqlParser::EQUAL_SYMBOL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(5822);
      match(MySqlParser::LESS_SYMBOL);
      setState(5823);
      match(MySqlParser::EQUAL_SYMBOL);
      setState(5824);
      match(MySqlParser::GREATER_SYMBOL);
      break;
    }

    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Logical_operatorContext ------------------------------------------------------------------

MySqlParser::Logical_operatorContext::Logical_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Logical_operatorContext::AND() {
  return getToken(MySqlParser::AND, 0);
}

tree::TerminalNode* MySqlParser::Logical_operatorContext::XOR() {
  return getToken(MySqlParser::XOR, 0);
}

tree::TerminalNode* MySqlParser::Logical_operatorContext::OR() {
  return getToken(MySqlParser::OR, 0);
}


size_t MySqlParser::Logical_operatorContext::getRuleIndex() const {
  return MySqlParser::RuleLogical_operator;
}

void MySqlParser::Logical_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogical_operator(this);
}

void MySqlParser::Logical_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogical_operator(this);
}

MySqlParser::Logical_operatorContext* MySqlParser::logical_operator() {
  Logical_operatorContext *_localctx = _tracker.createInstance<Logical_operatorContext>(_ctx, getState());
  enterRule(_localctx, 554, MySqlParser::RuleLogical_operator);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5834);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::AND: {
        enterOuterAlt(_localctx, 1);
        setState(5827);
        match(MySqlParser::AND);
        break;
      }

      case MySqlParser::BIT_AND_OP: {
        enterOuterAlt(_localctx, 2);
        setState(5828);
        match(MySqlParser::BIT_AND_OP);
        setState(5829);
        match(MySqlParser::BIT_AND_OP);
        break;
      }

      case MySqlParser::XOR: {
        enterOuterAlt(_localctx, 3);
        setState(5830);
        match(MySqlParser::XOR);
        break;
      }

      case MySqlParser::OR: {
        enterOuterAlt(_localctx, 4);
        setState(5831);
        match(MySqlParser::OR);
        break;
      }

      case MySqlParser::BIT_OR_OP: {
        enterOuterAlt(_localctx, 5);
        setState(5832);
        match(MySqlParser::BIT_OR_OP);
        setState(5833);
        match(MySqlParser::BIT_OR_OP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bit_operatorContext ------------------------------------------------------------------

MySqlParser::Bit_operatorContext::Bit_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MySqlParser::Bit_operatorContext::getRuleIndex() const {
  return MySqlParser::RuleBit_operator;
}

void MySqlParser::Bit_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBit_operator(this);
}

void MySqlParser::Bit_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBit_operator(this);
}

MySqlParser::Bit_operatorContext* MySqlParser::bit_operator() {
  Bit_operatorContext *_localctx = _tracker.createInstance<Bit_operatorContext>(_ctx, getState());
  enterRule(_localctx, 556, MySqlParser::RuleBit_operator);

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    setState(5843);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MySqlParser::LESS_SYMBOL: {
        enterOuterAlt(_localctx, 1);
        setState(5836);
        match(MySqlParser::LESS_SYMBOL);
        setState(5837);
        match(MySqlParser::LESS_SYMBOL);
        break;
      }

      case MySqlParser::GREATER_SYMBOL: {
        enterOuterAlt(_localctx, 2);
        setState(5838);
        match(MySqlParser::GREATER_SYMBOL);
        setState(5839);
        match(MySqlParser::GREATER_SYMBOL);
        break;
      }

      case MySqlParser::BIT_AND_OP: {
        enterOuterAlt(_localctx, 3);
        setState(5840);
        match(MySqlParser::BIT_AND_OP);
        break;
      }

      case MySqlParser::BIT_XOR_OP: {
        enterOuterAlt(_localctx, 4);
        setState(5841);
        match(MySqlParser::BIT_XOR_OP);
        break;
      }

      case MySqlParser::BIT_OR_OP: {
        enterOuterAlt(_localctx, 5);
        setState(5842);
        match(MySqlParser::BIT_OR_OP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Math_operatorContext ------------------------------------------------------------------

MySqlParser::Math_operatorContext::Math_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Math_operatorContext::DIV() {
  return getToken(MySqlParser::DIV, 0);
}

tree::TerminalNode* MySqlParser::Math_operatorContext::MOD() {
  return getToken(MySqlParser::MOD, 0);
}


size_t MySqlParser::Math_operatorContext::getRuleIndex() const {
  return MySqlParser::RuleMath_operator;
}

void MySqlParser::Math_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMath_operator(this);
}

void MySqlParser::Math_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMath_operator(this);
}

MySqlParser::Math_operatorContext* MySqlParser::math_operator() {
  Math_operatorContext *_localctx = _tracker.createInstance<Math_operatorContext>(_ctx, getState());
  enterRule(_localctx, 558, MySqlParser::RuleMath_operator);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5845);
    _la = _input->LA(1);
    if (!(((((_la - 927) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 927)) & ((1ULL << (MySqlParser::STAR - 927))
      | (1ULL << (MySqlParser::DIVIDE - 927))
      | (1ULL << (MySqlParser::MODULE - 927))
      | (1ULL << (MySqlParser::PLUS - 927))
      | (1ULL << (MySqlParser::MINUS - 927))
      | (1ULL << (MySqlParser::DIV - 927))
      | (1ULL << (MySqlParser::MOD - 927)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Charset_name_baseContext ------------------------------------------------------------------

MySqlParser::Charset_name_baseContext::Charset_name_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::ARMSCII8() {
  return getToken(MySqlParser::ARMSCII8, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::ASCII() {
  return getToken(MySqlParser::ASCII, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::BIG5() {
  return getToken(MySqlParser::BIG5, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::CP1250() {
  return getToken(MySqlParser::CP1250, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::CP1251() {
  return getToken(MySqlParser::CP1251, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::CP1256() {
  return getToken(MySqlParser::CP1256, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::CP1257() {
  return getToken(MySqlParser::CP1257, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::CP850() {
  return getToken(MySqlParser::CP850, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::CP852() {
  return getToken(MySqlParser::CP852, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::CP866() {
  return getToken(MySqlParser::CP866, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::CP932() {
  return getToken(MySqlParser::CP932, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::DEC8() {
  return getToken(MySqlParser::DEC8, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::EUCJPMS() {
  return getToken(MySqlParser::EUCJPMS, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::EUCKR() {
  return getToken(MySqlParser::EUCKR, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::GB2312() {
  return getToken(MySqlParser::GB2312, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::GBK() {
  return getToken(MySqlParser::GBK, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::GEOSTD8() {
  return getToken(MySqlParser::GEOSTD8, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::GREEK() {
  return getToken(MySqlParser::GREEK, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::HEBREW() {
  return getToken(MySqlParser::HEBREW, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::HP8() {
  return getToken(MySqlParser::HP8, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::KEYBCS2() {
  return getToken(MySqlParser::KEYBCS2, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::KOI8R() {
  return getToken(MySqlParser::KOI8R, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::KOI8U() {
  return getToken(MySqlParser::KOI8U, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::LATIN1() {
  return getToken(MySqlParser::LATIN1, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::LATIN2() {
  return getToken(MySqlParser::LATIN2, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::LATIN5() {
  return getToken(MySqlParser::LATIN5, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::LATIN7() {
  return getToken(MySqlParser::LATIN7, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::MACCE() {
  return getToken(MySqlParser::MACCE, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::MACROMAN() {
  return getToken(MySqlParser::MACROMAN, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::SJIS() {
  return getToken(MySqlParser::SJIS, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::SWE7() {
  return getToken(MySqlParser::SWE7, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::TIS620() {
  return getToken(MySqlParser::TIS620, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::UCS2() {
  return getToken(MySqlParser::UCS2, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::UJIS() {
  return getToken(MySqlParser::UJIS, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::UTF16() {
  return getToken(MySqlParser::UTF16, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::UTF16LE() {
  return getToken(MySqlParser::UTF16LE, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::UTF32() {
  return getToken(MySqlParser::UTF32, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::UTF8() {
  return getToken(MySqlParser::UTF8, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::UTF8MB3() {
  return getToken(MySqlParser::UTF8MB3, 0);
}

tree::TerminalNode* MySqlParser::Charset_name_baseContext::UTF8MB4() {
  return getToken(MySqlParser::UTF8MB4, 0);
}


size_t MySqlParser::Charset_name_baseContext::getRuleIndex() const {
  return MySqlParser::RuleCharset_name_base;
}

void MySqlParser::Charset_name_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharset_name_base(this);
}

void MySqlParser::Charset_name_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharset_name_base(this);
}

MySqlParser::Charset_name_baseContext* MySqlParser::charset_name_base() {
  Charset_name_baseContext *_localctx = _tracker.createInstance<Charset_name_baseContext>(_ctx, getState());
  enterRule(_localctx, 560, MySqlParser::RuleCharset_name_base);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5847);
    _la = _input->LA(1);
    if (!(((((_la - 566) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 566)) & ((1ULL << (MySqlParser::ARMSCII8 - 566))
      | (1ULL << (MySqlParser::ASCII - 566))
      | (1ULL << (MySqlParser::BIG5 - 566))
      | (1ULL << (MySqlParser::CP1250 - 566))
      | (1ULL << (MySqlParser::CP1251 - 566))
      | (1ULL << (MySqlParser::CP1256 - 566))
      | (1ULL << (MySqlParser::CP1257 - 566))
      | (1ULL << (MySqlParser::CP850 - 566))
      | (1ULL << (MySqlParser::CP852 - 566))
      | (1ULL << (MySqlParser::CP866 - 566))
      | (1ULL << (MySqlParser::CP932 - 566))
      | (1ULL << (MySqlParser::DEC8 - 566))
      | (1ULL << (MySqlParser::EUCJPMS - 566))
      | (1ULL << (MySqlParser::EUCKR - 566))
      | (1ULL << (MySqlParser::GB2312 - 566))
      | (1ULL << (MySqlParser::GBK - 566))
      | (1ULL << (MySqlParser::GEOSTD8 - 566))
      | (1ULL << (MySqlParser::GREEK - 566))
      | (1ULL << (MySqlParser::HEBREW - 566))
      | (1ULL << (MySqlParser::HP8 - 566))
      | (1ULL << (MySqlParser::KEYBCS2 - 566))
      | (1ULL << (MySqlParser::KOI8R - 566))
      | (1ULL << (MySqlParser::KOI8U - 566))
      | (1ULL << (MySqlParser::LATIN1 - 566))
      | (1ULL << (MySqlParser::LATIN2 - 566))
      | (1ULL << (MySqlParser::LATIN5 - 566))
      | (1ULL << (MySqlParser::LATIN7 - 566))
      | (1ULL << (MySqlParser::MACCE - 566))
      | (1ULL << (MySqlParser::MACROMAN - 566))
      | (1ULL << (MySqlParser::SJIS - 566))
      | (1ULL << (MySqlParser::SWE7 - 566))
      | (1ULL << (MySqlParser::TIS620 - 566))
      | (1ULL << (MySqlParser::UCS2 - 566))
      | (1ULL << (MySqlParser::UJIS - 566))
      | (1ULL << (MySqlParser::UTF16 - 566))
      | (1ULL << (MySqlParser::UTF16LE - 566))
      | (1ULL << (MySqlParser::UTF32 - 566))
      | (1ULL << (MySqlParser::UTF8 - 566))
      | (1ULL << (MySqlParser::UTF8MB3 - 566))
      | (1ULL << (MySqlParser::UTF8MB4 - 566)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transaction_level_baseContext ------------------------------------------------------------------

MySqlParser::Transaction_level_baseContext::Transaction_level_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Transaction_level_baseContext::REPEATABLE() {
  return getToken(MySqlParser::REPEATABLE, 0);
}

tree::TerminalNode* MySqlParser::Transaction_level_baseContext::COMMITTED() {
  return getToken(MySqlParser::COMMITTED, 0);
}

tree::TerminalNode* MySqlParser::Transaction_level_baseContext::UNCOMMITTED() {
  return getToken(MySqlParser::UNCOMMITTED, 0);
}

tree::TerminalNode* MySqlParser::Transaction_level_baseContext::SERIALIZABLE() {
  return getToken(MySqlParser::SERIALIZABLE, 0);
}


size_t MySqlParser::Transaction_level_baseContext::getRuleIndex() const {
  return MySqlParser::RuleTransaction_level_base;
}

void MySqlParser::Transaction_level_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransaction_level_base(this);
}

void MySqlParser::Transaction_level_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransaction_level_base(this);
}

MySqlParser::Transaction_level_baseContext* MySqlParser::transaction_level_base() {
  Transaction_level_baseContext *_localctx = _tracker.createInstance<Transaction_level_baseContext>(_ctx, getState());
  enterRule(_localctx, 562, MySqlParser::RuleTransaction_level_base);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5849);
    _la = _input->LA(1);
    if (!(((((_la - 617) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 617)) & ((1ULL << (MySqlParser::REPEATABLE - 617))
      | (1ULL << (MySqlParser::COMMITTED - 617))
      | (1ULL << (MySqlParser::UNCOMMITTED - 617))
      | (1ULL << (MySqlParser::SERIALIZABLE - 617)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Privileges_baseContext ------------------------------------------------------------------

MySqlParser::Privileges_baseContext::Privileges_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Privileges_baseContext::TABLES() {
  return getToken(MySqlParser::TABLES, 0);
}

tree::TerminalNode* MySqlParser::Privileges_baseContext::ROUTINE() {
  return getToken(MySqlParser::ROUTINE, 0);
}

tree::TerminalNode* MySqlParser::Privileges_baseContext::EXECUTE() {
  return getToken(MySqlParser::EXECUTE, 0);
}

tree::TerminalNode* MySqlParser::Privileges_baseContext::FILE() {
  return getToken(MySqlParser::FILE, 0);
}

tree::TerminalNode* MySqlParser::Privileges_baseContext::PROCESS() {
  return getToken(MySqlParser::PROCESS, 0);
}

tree::TerminalNode* MySqlParser::Privileges_baseContext::RELOAD() {
  return getToken(MySqlParser::RELOAD, 0);
}

tree::TerminalNode* MySqlParser::Privileges_baseContext::SHUTDOWN() {
  return getToken(MySqlParser::SHUTDOWN, 0);
}

tree::TerminalNode* MySqlParser::Privileges_baseContext::SUPER() {
  return getToken(MySqlParser::SUPER, 0);
}

tree::TerminalNode* MySqlParser::Privileges_baseContext::PRIVILEGES() {
  return getToken(MySqlParser::PRIVILEGES, 0);
}


size_t MySqlParser::Privileges_baseContext::getRuleIndex() const {
  return MySqlParser::RulePrivileges_base;
}

void MySqlParser::Privileges_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivileges_base(this);
}

void MySqlParser::Privileges_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivileges_base(this);
}

MySqlParser::Privileges_baseContext* MySqlParser::privileges_base() {
  Privileges_baseContext *_localctx = _tracker.createInstance<Privileges_baseContext>(_ctx, getState());
  enterRule(_localctx, 564, MySqlParser::RulePrivileges_base);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5851);
    _la = _input->LA(1);
    if (!(((((_la - 557) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 557)) & ((1ULL << (MySqlParser::TABLES - 557))
      | (1ULL << (MySqlParser::ROUTINE - 557))
      | (1ULL << (MySqlParser::EXECUTE - 557))
      | (1ULL << (MySqlParser::FILE - 557))
      | (1ULL << (MySqlParser::PROCESS - 557))
      | (1ULL << (MySqlParser::RELOAD - 557))
      | (1ULL << (MySqlParser::SHUTDOWN - 557))
      | (1ULL << (MySqlParser::SUPER - 557))
      | (1ULL << (MySqlParser::PRIVILEGES - 557)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interval_type_baseContext ------------------------------------------------------------------

MySqlParser::Interval_type_baseContext::Interval_type_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Interval_type_baseContext::QUARTER() {
  return getToken(MySqlParser::QUARTER, 0);
}

tree::TerminalNode* MySqlParser::Interval_type_baseContext::MONTH() {
  return getToken(MySqlParser::MONTH, 0);
}

tree::TerminalNode* MySqlParser::Interval_type_baseContext::DAY() {
  return getToken(MySqlParser::DAY, 0);
}

tree::TerminalNode* MySqlParser::Interval_type_baseContext::HOUR() {
  return getToken(MySqlParser::HOUR, 0);
}

tree::TerminalNode* MySqlParser::Interval_type_baseContext::MINUTE() {
  return getToken(MySqlParser::MINUTE, 0);
}

tree::TerminalNode* MySqlParser::Interval_type_baseContext::WEEK() {
  return getToken(MySqlParser::WEEK, 0);
}

tree::TerminalNode* MySqlParser::Interval_type_baseContext::SECOND() {
  return getToken(MySqlParser::SECOND, 0);
}

tree::TerminalNode* MySqlParser::Interval_type_baseContext::MICROSECOND() {
  return getToken(MySqlParser::MICROSECOND, 0);
}


size_t MySqlParser::Interval_type_baseContext::getRuleIndex() const {
  return MySqlParser::RuleInterval_type_base;
}

void MySqlParser::Interval_type_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterval_type_base(this);
}

void MySqlParser::Interval_type_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterval_type_base(this);
}

MySqlParser::Interval_type_baseContext* MySqlParser::interval_type_base() {
  Interval_type_baseContext *_localctx = _tracker.createInstance<Interval_type_baseContext>(_ctx, getState());
  enterRule(_localctx, 566, MySqlParser::RuleInterval_type_base);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5853);
    _la = _input->LA(1);
    if (!(((((_la - 549) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 549)) & ((1ULL << (MySqlParser::QUARTER - 549))
      | (1ULL << (MySqlParser::MONTH - 549))
      | (1ULL << (MySqlParser::DAY - 549))
      | (1ULL << (MySqlParser::HOUR - 549))
      | (1ULL << (MySqlParser::MINUTE - 549))
      | (1ULL << (MySqlParser::WEEK - 549))
      | (1ULL << (MySqlParser::SECOND - 549))
      | (1ULL << (MySqlParser::MICROSECOND - 549)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Data_type_baseContext ------------------------------------------------------------------

MySqlParser::Data_type_baseContext::Data_type_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Data_type_baseContext::DATE() {
  return getToken(MySqlParser::DATE, 0);
}

tree::TerminalNode* MySqlParser::Data_type_baseContext::TIME() {
  return getToken(MySqlParser::TIME, 0);
}

tree::TerminalNode* MySqlParser::Data_type_baseContext::TIMESTAMP() {
  return getToken(MySqlParser::TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::Data_type_baseContext::DATETIME() {
  return getToken(MySqlParser::DATETIME, 0);
}

tree::TerminalNode* MySqlParser::Data_type_baseContext::YEAR() {
  return getToken(MySqlParser::YEAR, 0);
}

tree::TerminalNode* MySqlParser::Data_type_baseContext::ENUM() {
  return getToken(MySqlParser::ENUM, 0);
}

tree::TerminalNode* MySqlParser::Data_type_baseContext::TEXT() {
  return getToken(MySqlParser::TEXT, 0);
}


size_t MySqlParser::Data_type_baseContext::getRuleIndex() const {
  return MySqlParser::RuleData_type_base;
}

void MySqlParser::Data_type_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData_type_base(this);
}

void MySqlParser::Data_type_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData_type_base(this);
}

MySqlParser::Data_type_baseContext* MySqlParser::data_type_base() {
  Data_type_baseContext *_localctx = _tracker.createInstance<Data_type_baseContext>(_ctx, getState());
  enterRule(_localctx, 568, MySqlParser::RuleData_type_base);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5855);
    _la = _input->LA(1);
    if (!(((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::DATETIME - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::TEXT - 181))
      | (1ULL << (MySqlParser::ENUM - 181)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Keywords_can_be_idContext ------------------------------------------------------------------

MySqlParser::Keywords_can_be_idContext::Keywords_can_be_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ACTION() {
  return getToken(MySqlParser::ACTION, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::AFTER() {
  return getToken(MySqlParser::AFTER, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ALGORITHM() {
  return getToken(MySqlParser::ALGORITHM, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ANY() {
  return getToken(MySqlParser::ANY, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::AT() {
  return getToken(MySqlParser::AT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::AUTHORS() {
  return getToken(MySqlParser::AUTHORS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::AUTOCOMMIT() {
  return getToken(MySqlParser::AUTOCOMMIT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::AUTOEXTEND_SIZE() {
  return getToken(MySqlParser::AUTOEXTEND_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::AUTO_INCREMENT() {
  return getToken(MySqlParser::AUTO_INCREMENT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::AVG_ROW_LENGTH() {
  return getToken(MySqlParser::AVG_ROW_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::BEGIN() {
  return getToken(MySqlParser::BEGIN, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::BINLOG() {
  return getToken(MySqlParser::BINLOG, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::BIT() {
  return getToken(MySqlParser::BIT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::BTREE() {
  return getToken(MySqlParser::BTREE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::CASCADED() {
  return getToken(MySqlParser::CASCADED, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::CHAIN() {
  return getToken(MySqlParser::CHAIN, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::CHECKSUM() {
  return getToken(MySqlParser::CHECKSUM, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::CIPHER() {
  return getToken(MySqlParser::CIPHER, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::CLIENT() {
  return getToken(MySqlParser::CLIENT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::COALESCE() {
  return getToken(MySqlParser::COALESCE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::CODE() {
  return getToken(MySqlParser::CODE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::COLUMNS() {
  return getToken(MySqlParser::COLUMNS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::COLUMN_FORMAT() {
  return getToken(MySqlParser::COLUMN_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::COMMENT() {
  return getToken(MySqlParser::COMMENT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::COMMIT() {
  return getToken(MySqlParser::COMMIT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::COMPACT() {
  return getToken(MySqlParser::COMPACT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::COMPLETION() {
  return getToken(MySqlParser::COMPLETION, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::COMPRESSED() {
  return getToken(MySqlParser::COMPRESSED, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::CONCURRENT() {
  return getToken(MySqlParser::CONCURRENT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::CONNECTION() {
  return getToken(MySqlParser::CONNECTION, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::CONSISTENT() {
  return getToken(MySqlParser::CONSISTENT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::CONTAINS() {
  return getToken(MySqlParser::CONTAINS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::CONTRIBUTORS() {
  return getToken(MySqlParser::CONTRIBUTORS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::COPY() {
  return getToken(MySqlParser::COPY, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DATA() {
  return getToken(MySqlParser::DATA, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DATAFILE() {
  return getToken(MySqlParser::DATAFILE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DEFINER() {
  return getToken(MySqlParser::DEFINER, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DELAY_KEY_WRITE() {
  return getToken(MySqlParser::DELAY_KEY_WRITE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DIRECTORY() {
  return getToken(MySqlParser::DIRECTORY, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DISABLE() {
  return getToken(MySqlParser::DISABLE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DISCARD() {
  return getToken(MySqlParser::DISCARD, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DISK() {
  return getToken(MySqlParser::DISK, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DO() {
  return getToken(MySqlParser::DO, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DUMPFILE() {
  return getToken(MySqlParser::DUMPFILE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DUPLICATE() {
  return getToken(MySqlParser::DUPLICATE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::DYNAMIC() {
  return getToken(MySqlParser::DYNAMIC, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ENABLE() {
  return getToken(MySqlParser::ENABLE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ENDS() {
  return getToken(MySqlParser::ENDS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ENGINE() {
  return getToken(MySqlParser::ENGINE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ENGINES() {
  return getToken(MySqlParser::ENGINES, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ERRORS() {
  return getToken(MySqlParser::ERRORS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ESCAPE() {
  return getToken(MySqlParser::ESCAPE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::EVEN() {
  return getToken(MySqlParser::EVEN, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::EVENT() {
  return getToken(MySqlParser::EVENT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::EVENTS() {
  return getToken(MySqlParser::EVENTS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::EVERY() {
  return getToken(MySqlParser::EVERY, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::EXCHANGE() {
  return getToken(MySqlParser::EXCHANGE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::EXCLUSIVE() {
  return getToken(MySqlParser::EXCLUSIVE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::EXPIRE() {
  return getToken(MySqlParser::EXPIRE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::EXTENT_SIZE() {
  return getToken(MySqlParser::EXTENT_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::FIELDS() {
  return getToken(MySqlParser::FIELDS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::FIRST() {
  return getToken(MySqlParser::FIRST, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::FIXED() {
  return getToken(MySqlParser::FIXED, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::FULL() {
  return getToken(MySqlParser::FULL, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::FUNCTION() {
  return getToken(MySqlParser::FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::GLOBAL() {
  return getToken(MySqlParser::GLOBAL, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::GRANTS() {
  return getToken(MySqlParser::GRANTS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::HASH() {
  return getToken(MySqlParser::HASH, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::HOST() {
  return getToken(MySqlParser::HOST, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::IDENTIFIED() {
  return getToken(MySqlParser::IDENTIFIED, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::IMPORT() {
  return getToken(MySqlParser::IMPORT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::INITIAL_SIZE() {
  return getToken(MySqlParser::INITIAL_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::INPLACE() {
  return getToken(MySqlParser::INPLACE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::INSERT_METHOD() {
  return getToken(MySqlParser::INSERT_METHOD, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::INVOKER() {
  return getToken(MySqlParser::INVOKER, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ISOLATION() {
  return getToken(MySqlParser::ISOLATION, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ISSUER() {
  return getToken(MySqlParser::ISSUER, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::KEY_BLOCK_SIZE() {
  return getToken(MySqlParser::KEY_BLOCK_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::LANGUAGE() {
  return getToken(MySqlParser::LANGUAGE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::LAST() {
  return getToken(MySqlParser::LAST, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::LESS() {
  return getToken(MySqlParser::LESS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::LEVEL() {
  return getToken(MySqlParser::LEVEL, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::LIST() {
  return getToken(MySqlParser::LIST, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::LOCAL() {
  return getToken(MySqlParser::LOCAL, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::LOGS() {
  return getToken(MySqlParser::LOGS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::LOGFILE() {
  return getToken(MySqlParser::LOGFILE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MASTER() {
  return getToken(MySqlParser::MASTER, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MAX_CONNECTIONS_PER_HOUR() {
  return getToken(MySqlParser::MAX_CONNECTIONS_PER_HOUR, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MAX_QUERIES_PER_HOUR() {
  return getToken(MySqlParser::MAX_QUERIES_PER_HOUR, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MAX_ROWS() {
  return getToken(MySqlParser::MAX_ROWS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MAX_SIZE() {
  return getToken(MySqlParser::MAX_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MAX_UPDATES_PER_HOUR() {
  return getToken(MySqlParser::MAX_UPDATES_PER_HOUR, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MAX_USER_CONNECTIONS() {
  return getToken(MySqlParser::MAX_USER_CONNECTIONS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MEMORY() {
  return getToken(MySqlParser::MEMORY, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MERGE() {
  return getToken(MySqlParser::MERGE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MID() {
  return getToken(MySqlParser::MID, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MIN_ROWS() {
  return getToken(MySqlParser::MIN_ROWS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MUTEX() {
  return getToken(MySqlParser::MUTEX, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SHARE() {
  return getToken(MySqlParser::SHARE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MODIFY() {
  return getToken(MySqlParser::MODIFY, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::MYSQL() {
  return getToken(MySqlParser::MYSQL, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::NAME() {
  return getToken(MySqlParser::NAME, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::NAMES() {
  return getToken(MySqlParser::NAMES, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::NCHAR() {
  return getToken(MySqlParser::NCHAR, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::NO() {
  return getToken(MySqlParser::NO, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::NODEGROUP() {
  return getToken(MySqlParser::NODEGROUP, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::NONE() {
  return getToken(MySqlParser::NONE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::OFFLINE() {
  return getToken(MySqlParser::OFFLINE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::OFFSET() {
  return getToken(MySqlParser::OFFSET, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::OJ() {
  return getToken(MySqlParser::OJ, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::OLD_PASSWORD() {
  return getToken(MySqlParser::OLD_PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ONLINE() {
  return getToken(MySqlParser::ONLINE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ONLY() {
  return getToken(MySqlParser::ONLY, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::OPTIONS() {
  return getToken(MySqlParser::OPTIONS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::OWNER() {
  return getToken(MySqlParser::OWNER, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PACK_KEYS() {
  return getToken(MySqlParser::PACK_KEYS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PARSER() {
  return getToken(MySqlParser::PARSER, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PARTIAL() {
  return getToken(MySqlParser::PARTIAL, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PARTITIONING() {
  return getToken(MySqlParser::PARTITIONING, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PARTITIONS() {
  return getToken(MySqlParser::PARTITIONS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PASSWORD() {
  return getToken(MySqlParser::PASSWORD, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PLUGINS() {
  return getToken(MySqlParser::PLUGINS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PORT() {
  return getToken(MySqlParser::PORT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PRESERVE() {
  return getToken(MySqlParser::PRESERVE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PROCESSLIST() {
  return getToken(MySqlParser::PROCESSLIST, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PROFILE() {
  return getToken(MySqlParser::PROFILE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PROFILES() {
  return getToken(MySqlParser::PROFILES, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::PROXY() {
  return getToken(MySqlParser::PROXY, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::QUERY() {
  return getToken(MySqlParser::QUERY, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::QUICK() {
  return getToken(MySqlParser::QUICK, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::REBUILD() {
  return getToken(MySqlParser::REBUILD, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::REDO_BUFFER_SIZE() {
  return getToken(MySqlParser::REDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::REDUNDANT() {
  return getToken(MySqlParser::REDUNDANT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::RELAYLOG() {
  return getToken(MySqlParser::RELAYLOG, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::REMOVE() {
  return getToken(MySqlParser::REMOVE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::REORGANIZE() {
  return getToken(MySqlParser::REORGANIZE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::REPAIR() {
  return getToken(MySqlParser::REPAIR, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::REPLICATION() {
  return getToken(MySqlParser::REPLICATION, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::RETURNS() {
  return getToken(MySqlParser::RETURNS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ROLLBACK() {
  return getToken(MySqlParser::ROLLBACK, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ROLLUP() {
  return getToken(MySqlParser::ROLLUP, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ROW() {
  return getToken(MySqlParser::ROW, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ROWS() {
  return getToken(MySqlParser::ROWS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::ROW_FORMAT() {
  return getToken(MySqlParser::ROW_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SAVEPOINT() {
  return getToken(MySqlParser::SAVEPOINT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SCHEDULE() {
  return getToken(MySqlParser::SCHEDULE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SECURITY() {
  return getToken(MySqlParser::SECURITY, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SERVER() {
  return getToken(MySqlParser::SERVER, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SESSION() {
  return getToken(MySqlParser::SESSION, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SHARED() {
  return getToken(MySqlParser::SHARED, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SIGNED() {
  return getToken(MySqlParser::SIGNED, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SIMPLE() {
  return getToken(MySqlParser::SIMPLE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SLAVE() {
  return getToken(MySqlParser::SLAVE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SNAPSHOT() {
  return getToken(MySqlParser::SNAPSHOT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SOCKET() {
  return getToken(MySqlParser::SOCKET, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SOME() {
  return getToken(MySqlParser::SOME, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SOUNDS() {
  return getToken(MySqlParser::SOUNDS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SQL_BUFFER_RESULT() {
  return getToken(MySqlParser::SQL_BUFFER_RESULT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SQL_CACHE() {
  return getToken(MySqlParser::SQL_CACHE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SQL_NO_CACHE() {
  return getToken(MySqlParser::SQL_NO_CACHE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::START() {
  return getToken(MySqlParser::START, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::STARTS() {
  return getToken(MySqlParser::STARTS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::STATS_AUTO_RECALC() {
  return getToken(MySqlParser::STATS_AUTO_RECALC, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::STATS_PERSISTENT() {
  return getToken(MySqlParser::STATS_PERSISTENT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::STATS_SAMPLE_PAGES() {
  return getToken(MySqlParser::STATS_SAMPLE_PAGES, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::STATUS() {
  return getToken(MySqlParser::STATUS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::STORAGE() {
  return getToken(MySqlParser::STORAGE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SUBJECT() {
  return getToken(MySqlParser::SUBJECT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SUBPARTITION() {
  return getToken(MySqlParser::SUBPARTITION, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::SUBPARTITIONS() {
  return getToken(MySqlParser::SUBPARTITIONS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::TABLESPACE() {
  return getToken(MySqlParser::TABLESPACE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::TEMPORARY() {
  return getToken(MySqlParser::TEMPORARY, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::TEMPTABLE() {
  return getToken(MySqlParser::TEMPTABLE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::THAN() {
  return getToken(MySqlParser::THAN, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::TRANSACTION() {
  return getToken(MySqlParser::TRANSACTION, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::TRUNCATE() {
  return getToken(MySqlParser::TRUNCATE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::UNDEFINED() {
  return getToken(MySqlParser::UNDEFINED, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::UNDOFILE() {
  return getToken(MySqlParser::UNDOFILE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::UNDO_BUFFER_SIZE() {
  return getToken(MySqlParser::UNDO_BUFFER_SIZE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::UNKNOWN() {
  return getToken(MySqlParser::UNKNOWN, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::UPGRADE() {
  return getToken(MySqlParser::UPGRADE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::USER() {
  return getToken(MySqlParser::USER, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::VALUE() {
  return getToken(MySqlParser::VALUE, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::VARIABLES() {
  return getToken(MySqlParser::VARIABLES, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::VIEW() {
  return getToken(MySqlParser::VIEW, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::WAIT() {
  return getToken(MySqlParser::WAIT, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::WARNINGS() {
  return getToken(MySqlParser::WARNINGS, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::WORK() {
  return getToken(MySqlParser::WORK, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::WRAPPER() {
  return getToken(MySqlParser::WRAPPER, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::X509() {
  return getToken(MySqlParser::X509, 0);
}

tree::TerminalNode* MySqlParser::Keywords_can_be_idContext::XML() {
  return getToken(MySqlParser::XML, 0);
}


size_t MySqlParser::Keywords_can_be_idContext::getRuleIndex() const {
  return MySqlParser::RuleKeywords_can_be_id;
}

void MySqlParser::Keywords_can_be_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeywords_can_be_id(this);
}

void MySqlParser::Keywords_can_be_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeywords_can_be_id(this);
}

MySqlParser::Keywords_can_be_idContext* MySqlParser::keywords_can_be_id() {
  Keywords_can_be_idContext *_localctx = _tracker.createInstance<Keywords_can_be_idContext>(_ctx, getState());
  enterRule(_localctx, 570, MySqlParser::RuleKeywords_can_be_id);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5857);
    _la = _input->LA(1);
    if (!(((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & ((1ULL << (MySqlParser::ACTION - 246))
      | (1ULL << (MySqlParser::AFTER - 246))
      | (1ULL << (MySqlParser::ALGORITHM - 246))
      | (1ULL << (MySqlParser::ANY - 246))
      | (1ULL << (MySqlParser::AT - 246))
      | (1ULL << (MySqlParser::AUTHORS - 246))
      | (1ULL << (MySqlParser::AUTOCOMMIT - 246))
      | (1ULL << (MySqlParser::AUTOEXTEND_SIZE - 246))
      | (1ULL << (MySqlParser::AUTO_INCREMENT - 246))
      | (1ULL << (MySqlParser::AVG_ROW_LENGTH - 246))
      | (1ULL << (MySqlParser::BEGIN - 246))
      | (1ULL << (MySqlParser::BINLOG - 246))
      | (1ULL << (MySqlParser::BIT - 246))
      | (1ULL << (MySqlParser::BTREE - 246))
      | (1ULL << (MySqlParser::CASCADED - 246))
      | (1ULL << (MySqlParser::CHAIN - 246))
      | (1ULL << (MySqlParser::CHECKSUM - 246))
      | (1ULL << (MySqlParser::CIPHER - 246))
      | (1ULL << (MySqlParser::CLIENT - 246))
      | (1ULL << (MySqlParser::COALESCE - 246))
      | (1ULL << (MySqlParser::CODE - 246))
      | (1ULL << (MySqlParser::COLUMNS - 246))
      | (1ULL << (MySqlParser::COLUMN_FORMAT - 246))
      | (1ULL << (MySqlParser::COMMENT - 246))
      | (1ULL << (MySqlParser::COMMIT - 246))
      | (1ULL << (MySqlParser::COMPACT - 246))
      | (1ULL << (MySqlParser::COMPLETION - 246))
      | (1ULL << (MySqlParser::COMPRESSED - 246))
      | (1ULL << (MySqlParser::CONCURRENT - 246))
      | (1ULL << (MySqlParser::CONNECTION - 246))
      | (1ULL << (MySqlParser::CONSISTENT - 246))
      | (1ULL << (MySqlParser::CONTAINS - 246))
      | (1ULL << (MySqlParser::CONTRIBUTORS - 246))
      | (1ULL << (MySqlParser::COPY - 246))
      | (1ULL << (MySqlParser::DATA - 246))
      | (1ULL << (MySqlParser::DATAFILE - 246))
      | (1ULL << (MySqlParser::DEFINER - 246))
      | (1ULL << (MySqlParser::DELAY_KEY_WRITE - 246))
      | (1ULL << (MySqlParser::DIRECTORY - 246))
      | (1ULL << (MySqlParser::DISABLE - 246))
      | (1ULL << (MySqlParser::DISCARD - 246))
      | (1ULL << (MySqlParser::DISK - 246))
      | (1ULL << (MySqlParser::DO - 246))
      | (1ULL << (MySqlParser::DUMPFILE - 246))
      | (1ULL << (MySqlParser::DUPLICATE - 246))
      | (1ULL << (MySqlParser::DYNAMIC - 246))
      | (1ULL << (MySqlParser::ENABLE - 246))
      | (1ULL << (MySqlParser::ENDS - 246))
      | (1ULL << (MySqlParser::ENGINE - 246))
      | (1ULL << (MySqlParser::ENGINES - 246)))) != 0) || ((((_la - 311) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 311)) & ((1ULL << (MySqlParser::ERRORS - 311))
      | (1ULL << (MySqlParser::ESCAPE - 311))
      | (1ULL << (MySqlParser::EVEN - 311))
      | (1ULL << (MySqlParser::EVENT - 311))
      | (1ULL << (MySqlParser::EVENTS - 311))
      | (1ULL << (MySqlParser::EVERY - 311))
      | (1ULL << (MySqlParser::EXCHANGE - 311))
      | (1ULL << (MySqlParser::EXCLUSIVE - 311))
      | (1ULL << (MySqlParser::EXPIRE - 311))
      | (1ULL << (MySqlParser::EXTENT_SIZE - 311))
      | (1ULL << (MySqlParser::FIELDS - 311))
      | (1ULL << (MySqlParser::FIRST - 311))
      | (1ULL << (MySqlParser::FIXED - 311))
      | (1ULL << (MySqlParser::FULL - 311))
      | (1ULL << (MySqlParser::FUNCTION - 311))
      | (1ULL << (MySqlParser::GLOBAL - 311))
      | (1ULL << (MySqlParser::GRANTS - 311))
      | (1ULL << (MySqlParser::HASH - 311))
      | (1ULL << (MySqlParser::HOST - 311))
      | (1ULL << (MySqlParser::IDENTIFIED - 311))
      | (1ULL << (MySqlParser::IMPORT - 311))
      | (1ULL << (MySqlParser::INITIAL_SIZE - 311))
      | (1ULL << (MySqlParser::INPLACE - 311))
      | (1ULL << (MySqlParser::INSERT_METHOD - 311))
      | (1ULL << (MySqlParser::INVOKER - 311))
      | (1ULL << (MySqlParser::ISOLATION - 311))
      | (1ULL << (MySqlParser::ISSUER - 311))
      | (1ULL << (MySqlParser::KEY_BLOCK_SIZE - 311))
      | (1ULL << (MySqlParser::LANGUAGE - 311))
      | (1ULL << (MySqlParser::LAST - 311))
      | (1ULL << (MySqlParser::LESS - 311))
      | (1ULL << (MySqlParser::LEVEL - 311))
      | (1ULL << (MySqlParser::LIST - 311))
      | (1ULL << (MySqlParser::LOCAL - 311))
      | (1ULL << (MySqlParser::LOGFILE - 311))
      | (1ULL << (MySqlParser::LOGS - 311))
      | (1ULL << (MySqlParser::MASTER - 311)))) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & ((1ULL << (MySqlParser::MAX_CONNECTIONS_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_QUERIES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_ROWS - 391))
      | (1ULL << (MySqlParser::MAX_SIZE - 391))
      | (1ULL << (MySqlParser::MAX_UPDATES_PER_HOUR - 391))
      | (1ULL << (MySqlParser::MAX_USER_CONNECTIONS - 391))
      | (1ULL << (MySqlParser::MERGE - 391))
      | (1ULL << (MySqlParser::MID - 391))
      | (1ULL << (MySqlParser::MIN_ROWS - 391))
      | (1ULL << (MySqlParser::MODIFY - 391))
      | (1ULL << (MySqlParser::MUTEX - 391))
      | (1ULL << (MySqlParser::MYSQL - 391))
      | (1ULL << (MySqlParser::NAME - 391))
      | (1ULL << (MySqlParser::NAMES - 391))
      | (1ULL << (MySqlParser::NCHAR - 391))
      | (1ULL << (MySqlParser::NO - 391))
      | (1ULL << (MySqlParser::NODEGROUP - 391))
      | (1ULL << (MySqlParser::NONE - 391))
      | (1ULL << (MySqlParser::OFFLINE - 391))
      | (1ULL << (MySqlParser::OFFSET - 391))
      | (1ULL << (MySqlParser::OJ - 391))
      | (1ULL << (MySqlParser::OLD_PASSWORD - 391))
      | (1ULL << (MySqlParser::ONLINE - 391))
      | (1ULL << (MySqlParser::ONLY - 391))
      | (1ULL << (MySqlParser::OPTIONS - 391))
      | (1ULL << (MySqlParser::OWNER - 391))
      | (1ULL << (MySqlParser::PACK_KEYS - 391))
      | (1ULL << (MySqlParser::PARSER - 391))
      | (1ULL << (MySqlParser::PARTIAL - 391))
      | (1ULL << (MySqlParser::PARTITIONING - 391))
      | (1ULL << (MySqlParser::PARTITIONS - 391))
      | (1ULL << (MySqlParser::PASSWORD - 391))
      | (1ULL << (MySqlParser::PLUGINS - 391))
      | (1ULL << (MySqlParser::PORT - 391))
      | (1ULL << (MySqlParser::PRESERVE - 391))
      | (1ULL << (MySqlParser::PROCESSLIST - 391))
      | (1ULL << (MySqlParser::PROFILE - 391))
      | (1ULL << (MySqlParser::PROFILES - 391))
      | (1ULL << (MySqlParser::PROXY - 391))
      | (1ULL << (MySqlParser::QUERY - 391))
      | (1ULL << (MySqlParser::QUICK - 391))
      | (1ULL << (MySqlParser::REBUILD - 391))
      | (1ULL << (MySqlParser::REDO_BUFFER_SIZE - 391))
      | (1ULL << (MySqlParser::REDUNDANT - 391))
      | (1ULL << (MySqlParser::RELAYLOG - 391)))) != 0) || ((((_la - 455) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 455)) & ((1ULL << (MySqlParser::REMOVE - 455))
      | (1ULL << (MySqlParser::REORGANIZE - 455))
      | (1ULL << (MySqlParser::REPAIR - 455))
      | (1ULL << (MySqlParser::REPLICATION - 455))
      | (1ULL << (MySqlParser::RETURNS - 455))
      | (1ULL << (MySqlParser::ROLLBACK - 455))
      | (1ULL << (MySqlParser::ROLLUP - 455))
      | (1ULL << (MySqlParser::ROW - 455))
      | (1ULL << (MySqlParser::ROWS - 455))
      | (1ULL << (MySqlParser::ROW_FORMAT - 455))
      | (1ULL << (MySqlParser::SAVEPOINT - 455))
      | (1ULL << (MySqlParser::SCHEDULE - 455))
      | (1ULL << (MySqlParser::SECURITY - 455))
      | (1ULL << (MySqlParser::SERVER - 455))
      | (1ULL << (MySqlParser::SESSION - 455))
      | (1ULL << (MySqlParser::SHARE - 455))
      | (1ULL << (MySqlParser::SHARED - 455))
      | (1ULL << (MySqlParser::SIGNED - 455))
      | (1ULL << (MySqlParser::SIMPLE - 455))
      | (1ULL << (MySqlParser::SLAVE - 455))
      | (1ULL << (MySqlParser::SNAPSHOT - 455))
      | (1ULL << (MySqlParser::SOCKET - 455))
      | (1ULL << (MySqlParser::SOME - 455))
      | (1ULL << (MySqlParser::SOUNDS - 455))
      | (1ULL << (MySqlParser::SQL_BUFFER_RESULT - 455))
      | (1ULL << (MySqlParser::SQL_CACHE - 455))
      | (1ULL << (MySqlParser::SQL_NO_CACHE - 455))
      | (1ULL << (MySqlParser::START - 455))
      | (1ULL << (MySqlParser::STARTS - 455))
      | (1ULL << (MySqlParser::STATS_AUTO_RECALC - 455))
      | (1ULL << (MySqlParser::STATS_PERSISTENT - 455))
      | (1ULL << (MySqlParser::STATS_SAMPLE_PAGES - 455))
      | (1ULL << (MySqlParser::STATUS - 455))
      | (1ULL << (MySqlParser::STORAGE - 455))
      | (1ULL << (MySqlParser::SUBJECT - 455))
      | (1ULL << (MySqlParser::SUBPARTITION - 455))
      | (1ULL << (MySqlParser::SUBPARTITIONS - 455))
      | (1ULL << (MySqlParser::TABLESPACE - 455))
      | (1ULL << (MySqlParser::TEMPORARY - 455))
      | (1ULL << (MySqlParser::TEMPTABLE - 455))
      | (1ULL << (MySqlParser::THAN - 455)))) != 0) || ((((_la - 519) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 519)) & ((1ULL << (MySqlParser::TRANSACTION - 519))
      | (1ULL << (MySqlParser::TRUNCATE - 519))
      | (1ULL << (MySqlParser::UNDEFINED - 519))
      | (1ULL << (MySqlParser::UNDOFILE - 519))
      | (1ULL << (MySqlParser::UNDO_BUFFER_SIZE - 519))
      | (1ULL << (MySqlParser::UNKNOWN - 519))
      | (1ULL << (MySqlParser::UPGRADE - 519))
      | (1ULL << (MySqlParser::USER - 519))
      | (1ULL << (MySqlParser::VALUE - 519))
      | (1ULL << (MySqlParser::VARIABLES - 519))
      | (1ULL << (MySqlParser::VIEW - 519))
      | (1ULL << (MySqlParser::WAIT - 519))
      | (1ULL << (MySqlParser::WARNINGS - 519))
      | (1ULL << (MySqlParser::WORK - 519))
      | (1ULL << (MySqlParser::WRAPPER - 519))
      | (1ULL << (MySqlParser::X509 - 519))
      | (1ULL << (MySqlParser::XML - 519)))) != 0) || _la == MySqlParser::MEMORY)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_name_baseContext ------------------------------------------------------------------

MySqlParser::Function_name_baseContext::Function_name_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ABS() {
  return getToken(MySqlParser::ABS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ACOS() {
  return getToken(MySqlParser::ACOS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ADDDATE() {
  return getToken(MySqlParser::ADDDATE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ADDTIME() {
  return getToken(MySqlParser::ADDTIME, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::AES_DECRYPT() {
  return getToken(MySqlParser::AES_DECRYPT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::AES_ENCRYPT() {
  return getToken(MySqlParser::AES_ENCRYPT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::AREA() {
  return getToken(MySqlParser::AREA, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ASBINARY() {
  return getToken(MySqlParser::ASBINARY, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ASIN() {
  return getToken(MySqlParser::ASIN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ASTEXT() {
  return getToken(MySqlParser::ASTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ASWKB() {
  return getToken(MySqlParser::ASWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ASWKT() {
  return getToken(MySqlParser::ASWKT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ASYMMETRIC_DECRYPT() {
  return getToken(MySqlParser::ASYMMETRIC_DECRYPT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ASYMMETRIC_DERIVE() {
  return getToken(MySqlParser::ASYMMETRIC_DERIVE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ASYMMETRIC_ENCRYPT() {
  return getToken(MySqlParser::ASYMMETRIC_ENCRYPT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ASYMMETRIC_SIGN() {
  return getToken(MySqlParser::ASYMMETRIC_SIGN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ASYMMETRIC_VERIFY() {
  return getToken(MySqlParser::ASYMMETRIC_VERIFY, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ATAN() {
  return getToken(MySqlParser::ATAN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ATAN2() {
  return getToken(MySqlParser::ATAN2, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::BENCHMARK() {
  return getToken(MySqlParser::BENCHMARK, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::BIN() {
  return getToken(MySqlParser::BIN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::BIT_COUNT() {
  return getToken(MySqlParser::BIT_COUNT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::BIT_LENGTH() {
  return getToken(MySqlParser::BIT_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::BUFFER() {
  return getToken(MySqlParser::BUFFER, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CEIL() {
  return getToken(MySqlParser::CEIL, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CEILING() {
  return getToken(MySqlParser::CEILING, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CENTROID() {
  return getToken(MySqlParser::CENTROID, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CHARACTER_LENGTH() {
  return getToken(MySqlParser::CHARACTER_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CHARSET() {
  return getToken(MySqlParser::CHARSET, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CHAR_LENGTH() {
  return getToken(MySqlParser::CHAR_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::COERCIBILITY() {
  return getToken(MySqlParser::COERCIBILITY, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::COLLATION() {
  return getToken(MySqlParser::COLLATION, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::COMPRESS() {
  return getToken(MySqlParser::COMPRESS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CONCAT() {
  return getToken(MySqlParser::CONCAT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CONCAT_WS() {
  return getToken(MySqlParser::CONCAT_WS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CONNECTION_ID() {
  return getToken(MySqlParser::CONNECTION_ID, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CONV() {
  return getToken(MySqlParser::CONV, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CONVERT_TZ() {
  return getToken(MySqlParser::CONVERT_TZ, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::COS() {
  return getToken(MySqlParser::COS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::COT() {
  return getToken(MySqlParser::COT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::COUNT() {
  return getToken(MySqlParser::COUNT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CRC32() {
  return getToken(MySqlParser::CRC32, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CREATE_ASYMMETRIC_PRIV_KEY() {
  return getToken(MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CREATE_ASYMMETRIC_PUB_KEY() {
  return getToken(MySqlParser::CREATE_ASYMMETRIC_PUB_KEY, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CREATE_DH_PARAMETERS() {
  return getToken(MySqlParser::CREATE_DH_PARAMETERS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CREATE_DIGEST() {
  return getToken(MySqlParser::CREATE_DIGEST, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::CROSSES() {
  return getToken(MySqlParser::CROSSES, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DATE() {
  return getToken(MySqlParser::DATE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DATEDIFF() {
  return getToken(MySqlParser::DATEDIFF, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DATE_FORMAT() {
  return getToken(MySqlParser::DATE_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DAY() {
  return getToken(MySqlParser::DAY, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DAYNAME() {
  return getToken(MySqlParser::DAYNAME, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DAYOFMONTH() {
  return getToken(MySqlParser::DAYOFMONTH, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DAYOFWEEK() {
  return getToken(MySqlParser::DAYOFWEEK, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DAYOFYEAR() {
  return getToken(MySqlParser::DAYOFYEAR, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DECODE() {
  return getToken(MySqlParser::DECODE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DEGREES() {
  return getToken(MySqlParser::DEGREES, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DES_DECRYPT() {
  return getToken(MySqlParser::DES_DECRYPT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DES_ENCRYPT() {
  return getToken(MySqlParser::DES_ENCRYPT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DIMENSION() {
  return getToken(MySqlParser::DIMENSION, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::DISJOINT() {
  return getToken(MySqlParser::DISJOINT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ELT() {
  return getToken(MySqlParser::ELT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ENCODE() {
  return getToken(MySqlParser::ENCODE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ENCRYPT() {
  return getToken(MySqlParser::ENCRYPT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ENDPOINT() {
  return getToken(MySqlParser::ENDPOINT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ENVELOPE() {
  return getToken(MySqlParser::ENVELOPE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::EQUALS() {
  return getToken(MySqlParser::EQUALS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::EXP() {
  return getToken(MySqlParser::EXP, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::EXPORT_SET() {
  return getToken(MySqlParser::EXPORT_SET, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::EXTERIORRING() {
  return getToken(MySqlParser::EXTERIORRING, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::EXTRACTVALUE() {
  return getToken(MySqlParser::EXTRACTVALUE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::FIELD() {
  return getToken(MySqlParser::FIELD, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::FIND_IN_SET() {
  return getToken(MySqlParser::FIND_IN_SET, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::FLOOR() {
  return getToken(MySqlParser::FLOOR, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::FORMAT() {
  return getToken(MySqlParser::FORMAT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::FOUND_ROWS() {
  return getToken(MySqlParser::FOUND_ROWS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::FROM_BASE64() {
  return getToken(MySqlParser::FROM_BASE64, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::FROM_DAYS() {
  return getToken(MySqlParser::FROM_DAYS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::FROM_UNIXTIME() {
  return getToken(MySqlParser::FROM_UNIXTIME, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GEOMCOLLFROMTEXT() {
  return getToken(MySqlParser::GEOMCOLLFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GEOMCOLLFROMWKB() {
  return getToken(MySqlParser::GEOMCOLLFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GEOMETRYCOLLECTION() {
  return getToken(MySqlParser::GEOMETRYCOLLECTION, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GEOMETRYCOLLECTIONFROMTEXT() {
  return getToken(MySqlParser::GEOMETRYCOLLECTIONFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GEOMETRYCOLLECTIONFROMWKB() {
  return getToken(MySqlParser::GEOMETRYCOLLECTIONFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GEOMETRYFROMTEXT() {
  return getToken(MySqlParser::GEOMETRYFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GEOMETRYFROMWKB() {
  return getToken(MySqlParser::GEOMETRYFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GEOMETRYN() {
  return getToken(MySqlParser::GEOMETRYN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GEOMETRYTYPE() {
  return getToken(MySqlParser::GEOMETRYTYPE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GEOMFROMTEXT() {
  return getToken(MySqlParser::GEOMFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GEOMFROMWKB() {
  return getToken(MySqlParser::GEOMFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GET_FORMAT() {
  return getToken(MySqlParser::GET_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GET_LOCK() {
  return getToken(MySqlParser::GET_LOCK, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GLENGTH() {
  return getToken(MySqlParser::GLENGTH, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GREATEST() {
  return getToken(MySqlParser::GREATEST, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GTID_SUBSET() {
  return getToken(MySqlParser::GTID_SUBSET, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::GTID_SUBTRACT() {
  return getToken(MySqlParser::GTID_SUBTRACT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::HEX() {
  return getToken(MySqlParser::HEX, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::HOUR() {
  return getToken(MySqlParser::HOUR, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::IFNULL() {
  return getToken(MySqlParser::IFNULL, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::INET6_ATON() {
  return getToken(MySqlParser::INET6_ATON, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::INET6_NTOA() {
  return getToken(MySqlParser::INET6_NTOA, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::INET_ATON() {
  return getToken(MySqlParser::INET_ATON, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::INET_NTOA() {
  return getToken(MySqlParser::INET_NTOA, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::INSTR() {
  return getToken(MySqlParser::INSTR, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::INTERIORRINGN() {
  return getToken(MySqlParser::INTERIORRINGN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::INTERSECTS() {
  return getToken(MySqlParser::INTERSECTS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ISCLOSED() {
  return getToken(MySqlParser::ISCLOSED, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ISEMPTY() {
  return getToken(MySqlParser::ISEMPTY, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ISNULL() {
  return getToken(MySqlParser::ISNULL, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ISSIMPLE() {
  return getToken(MySqlParser::ISSIMPLE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::IS_FREE_LOCK() {
  return getToken(MySqlParser::IS_FREE_LOCK, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::IS_IPV4() {
  return getToken(MySqlParser::IS_IPV4, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::IS_IPV4_COMPAT() {
  return getToken(MySqlParser::IS_IPV4_COMPAT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::IS_IPV4_MAPPED() {
  return getToken(MySqlParser::IS_IPV4_MAPPED, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::IS_IPV6() {
  return getToken(MySqlParser::IS_IPV6, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::IS_USED_LOCK() {
  return getToken(MySqlParser::IS_USED_LOCK, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LAST_INSERT_ID() {
  return getToken(MySqlParser::LAST_INSERT_ID, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LCASE() {
  return getToken(MySqlParser::LCASE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LEAST() {
  return getToken(MySqlParser::LEAST, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LEFT() {
  return getToken(MySqlParser::LEFT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LENGTH() {
  return getToken(MySqlParser::LENGTH, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LINEFROMTEXT() {
  return getToken(MySqlParser::LINEFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LINEFROMWKB() {
  return getToken(MySqlParser::LINEFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LINESTRING() {
  return getToken(MySqlParser::LINESTRING, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LINESTRINGFROMTEXT() {
  return getToken(MySqlParser::LINESTRINGFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LINESTRINGFROMWKB() {
  return getToken(MySqlParser::LINESTRINGFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LN() {
  return getToken(MySqlParser::LN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LOAD_FILE() {
  return getToken(MySqlParser::LOAD_FILE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LOCATE() {
  return getToken(MySqlParser::LOCATE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LOG() {
  return getToken(MySqlParser::LOG, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LOG10() {
  return getToken(MySqlParser::LOG10, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LOG2() {
  return getToken(MySqlParser::LOG2, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LOWER() {
  return getToken(MySqlParser::LOWER, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LPAD() {
  return getToken(MySqlParser::LPAD, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::LTRIM() {
  return getToken(MySqlParser::LTRIM, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MAKEDATE() {
  return getToken(MySqlParser::MAKEDATE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MAKETIME() {
  return getToken(MySqlParser::MAKETIME, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MAKE_SET() {
  return getToken(MySqlParser::MAKE_SET, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MASTER_POS_WAIT() {
  return getToken(MySqlParser::MASTER_POS_WAIT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MBRCONTAINS() {
  return getToken(MySqlParser::MBRCONTAINS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MBRDISJOINT() {
  return getToken(MySqlParser::MBRDISJOINT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MBREQUAL() {
  return getToken(MySqlParser::MBREQUAL, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MBRINTERSECTS() {
  return getToken(MySqlParser::MBRINTERSECTS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MBROVERLAPS() {
  return getToken(MySqlParser::MBROVERLAPS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MBRTOUCHES() {
  return getToken(MySqlParser::MBRTOUCHES, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MBRWITHIN() {
  return getToken(MySqlParser::MBRWITHIN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MD5() {
  return getToken(MySqlParser::MD5, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MICROSECOND() {
  return getToken(MySqlParser::MICROSECOND, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MINUTE() {
  return getToken(MySqlParser::MINUTE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MLINEFROMTEXT() {
  return getToken(MySqlParser::MLINEFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MLINEFROMWKB() {
  return getToken(MySqlParser::MLINEFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MONTH() {
  return getToken(MySqlParser::MONTH, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MONTHNAME() {
  return getToken(MySqlParser::MONTHNAME, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MPOINTFROMTEXT() {
  return getToken(MySqlParser::MPOINTFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MPOINTFROMWKB() {
  return getToken(MySqlParser::MPOINTFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MPOLYFROMTEXT() {
  return getToken(MySqlParser::MPOLYFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MPOLYFROMWKB() {
  return getToken(MySqlParser::MPOLYFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MULTILINESTRING() {
  return getToken(MySqlParser::MULTILINESTRING, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MULTILINESTRINGFROMTEXT() {
  return getToken(MySqlParser::MULTILINESTRINGFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MULTILINESTRINGFROMWKB() {
  return getToken(MySqlParser::MULTILINESTRINGFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MULTIPOINT() {
  return getToken(MySqlParser::MULTIPOINT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MULTIPOINTFROMTEXT() {
  return getToken(MySqlParser::MULTIPOINTFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MULTIPOINTFROMWKB() {
  return getToken(MySqlParser::MULTIPOINTFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MULTIPOLYGON() {
  return getToken(MySqlParser::MULTIPOLYGON, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MULTIPOLYGONFROMTEXT() {
  return getToken(MySqlParser::MULTIPOLYGONFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::MULTIPOLYGONFROMWKB() {
  return getToken(MySqlParser::MULTIPOLYGONFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::NAME_CONST() {
  return getToken(MySqlParser::NAME_CONST, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::NULLIF() {
  return getToken(MySqlParser::NULLIF, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::NUMGEOMETRIES() {
  return getToken(MySqlParser::NUMGEOMETRIES, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::NUMINTERIORRINGS() {
  return getToken(MySqlParser::NUMINTERIORRINGS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::NUMPOINTS() {
  return getToken(MySqlParser::NUMPOINTS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::OCT() {
  return getToken(MySqlParser::OCT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::OCTET_LENGTH() {
  return getToken(MySqlParser::OCTET_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ORD() {
  return getToken(MySqlParser::ORD, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::OVERLAPS() {
  return getToken(MySqlParser::OVERLAPS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::PERIOD_ADD() {
  return getToken(MySqlParser::PERIOD_ADD, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::PERIOD_DIFF() {
  return getToken(MySqlParser::PERIOD_DIFF, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::PI() {
  return getToken(MySqlParser::PI, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POINT() {
  return getToken(MySqlParser::POINT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POINTFROMTEXT() {
  return getToken(MySqlParser::POINTFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POINTFROMWKB() {
  return getToken(MySqlParser::POINTFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POINTN() {
  return getToken(MySqlParser::POINTN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POLYFROMTEXT() {
  return getToken(MySqlParser::POLYFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POLYFROMWKB() {
  return getToken(MySqlParser::POLYFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POLYGON() {
  return getToken(MySqlParser::POLYGON, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POLYGONFROMTEXT() {
  return getToken(MySqlParser::POLYGONFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POLYGONFROMWKB() {
  return getToken(MySqlParser::POLYGONFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POSITION() {
  return getToken(MySqlParser::POSITION, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POW() {
  return getToken(MySqlParser::POW, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::POWER() {
  return getToken(MySqlParser::POWER, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::QUARTER() {
  return getToken(MySqlParser::QUARTER, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::QUOTE() {
  return getToken(MySqlParser::QUOTE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::RADIANS() {
  return getToken(MySqlParser::RADIANS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::RAND() {
  return getToken(MySqlParser::RAND, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::RANDOM_BYTES() {
  return getToken(MySqlParser::RANDOM_BYTES, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::RELEASE_LOCK() {
  return getToken(MySqlParser::RELEASE_LOCK, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::REVERSE() {
  return getToken(MySqlParser::REVERSE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::RIGHT() {
  return getToken(MySqlParser::RIGHT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ROUND() {
  return getToken(MySqlParser::ROUND, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ROW_COUNT() {
  return getToken(MySqlParser::ROW_COUNT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::RPAD() {
  return getToken(MySqlParser::RPAD, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::RTRIM() {
  return getToken(MySqlParser::RTRIM, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SECOND() {
  return getToken(MySqlParser::SECOND, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SEC_TO_TIME() {
  return getToken(MySqlParser::SEC_TO_TIME, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SESSION_USER() {
  return getToken(MySqlParser::SESSION_USER, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SHA() {
  return getToken(MySqlParser::SHA, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SHA1() {
  return getToken(MySqlParser::SHA1, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SHA2() {
  return getToken(MySqlParser::SHA2, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SIGN() {
  return getToken(MySqlParser::SIGN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SIN() {
  return getToken(MySqlParser::SIN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SLEEP() {
  return getToken(MySqlParser::SLEEP, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SOUNDEX() {
  return getToken(MySqlParser::SOUNDEX, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SQL_THREAD_WAIT_AFTER_GTIDS() {
  return getToken(MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SQRT() {
  return getToken(MySqlParser::SQRT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SRID() {
  return getToken(MySqlParser::SRID, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::STARTPOINT() {
  return getToken(MySqlParser::STARTPOINT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::STRCMP() {
  return getToken(MySqlParser::STRCMP, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::STR_TO_DATE() {
  return getToken(MySqlParser::STR_TO_DATE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_AREA() {
  return getToken(MySqlParser::ST_AREA, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_ASBINARY() {
  return getToken(MySqlParser::ST_ASBINARY, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_ASTEXT() {
  return getToken(MySqlParser::ST_ASTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_ASWKB() {
  return getToken(MySqlParser::ST_ASWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_ASWKT() {
  return getToken(MySqlParser::ST_ASWKT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_BUFFER() {
  return getToken(MySqlParser::ST_BUFFER, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_CENTROID() {
  return getToken(MySqlParser::ST_CENTROID, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_CONTAINS() {
  return getToken(MySqlParser::ST_CONTAINS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_CROSSES() {
  return getToken(MySqlParser::ST_CROSSES, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_DIFFERENCE() {
  return getToken(MySqlParser::ST_DIFFERENCE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_DIMENSION() {
  return getToken(MySqlParser::ST_DIMENSION, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_DISJOINT() {
  return getToken(MySqlParser::ST_DISJOINT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_DISTANCE() {
  return getToken(MySqlParser::ST_DISTANCE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_ENDPOINT() {
  return getToken(MySqlParser::ST_ENDPOINT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_ENVELOPE() {
  return getToken(MySqlParser::ST_ENVELOPE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_EQUALS() {
  return getToken(MySqlParser::ST_EQUALS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_EXTERIORRING() {
  return getToken(MySqlParser::ST_EXTERIORRING, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_GEOMCOLLFROMTEXT() {
  return getToken(MySqlParser::ST_GEOMCOLLFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_GEOMCOLLFROMTXT() {
  return getToken(MySqlParser::ST_GEOMCOLLFROMTXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_GEOMCOLLFROMWKB() {
  return getToken(MySqlParser::ST_GEOMCOLLFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_GEOMETRYCOLLECTIONFROMTEXT() {
  return getToken(MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_GEOMETRYCOLLECTIONFROMWKB() {
  return getToken(MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_GEOMETRYFROMTEXT() {
  return getToken(MySqlParser::ST_GEOMETRYFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_GEOMETRYFROMWKB() {
  return getToken(MySqlParser::ST_GEOMETRYFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_GEOMETRYN() {
  return getToken(MySqlParser::ST_GEOMETRYN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_GEOMETRYTYPE() {
  return getToken(MySqlParser::ST_GEOMETRYTYPE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_GEOMFROMTEXT() {
  return getToken(MySqlParser::ST_GEOMFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_GEOMFROMWKB() {
  return getToken(MySqlParser::ST_GEOMFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_INTERIORRINGN() {
  return getToken(MySqlParser::ST_INTERIORRINGN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_INTERSECTION() {
  return getToken(MySqlParser::ST_INTERSECTION, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_INTERSECTS() {
  return getToken(MySqlParser::ST_INTERSECTS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_ISCLOSED() {
  return getToken(MySqlParser::ST_ISCLOSED, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_ISEMPTY() {
  return getToken(MySqlParser::ST_ISEMPTY, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_ISSIMPLE() {
  return getToken(MySqlParser::ST_ISSIMPLE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_LINEFROMTEXT() {
  return getToken(MySqlParser::ST_LINEFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_LINEFROMWKB() {
  return getToken(MySqlParser::ST_LINEFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_LINESTRINGFROMTEXT() {
  return getToken(MySqlParser::ST_LINESTRINGFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_LINESTRINGFROMWKB() {
  return getToken(MySqlParser::ST_LINESTRINGFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_NUMGEOMETRIES() {
  return getToken(MySqlParser::ST_NUMGEOMETRIES, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_NUMINTERIORRING() {
  return getToken(MySqlParser::ST_NUMINTERIORRING, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_NUMINTERIORRINGS() {
  return getToken(MySqlParser::ST_NUMINTERIORRINGS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_NUMPOINTS() {
  return getToken(MySqlParser::ST_NUMPOINTS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_OVERLAPS() {
  return getToken(MySqlParser::ST_OVERLAPS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_POINTFROMTEXT() {
  return getToken(MySqlParser::ST_POINTFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_POINTFROMWKB() {
  return getToken(MySqlParser::ST_POINTFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_POINTN() {
  return getToken(MySqlParser::ST_POINTN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_POLYFROMTEXT() {
  return getToken(MySqlParser::ST_POLYFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_POLYFROMWKB() {
  return getToken(MySqlParser::ST_POLYFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_POLYGONFROMTEXT() {
  return getToken(MySqlParser::ST_POLYGONFROMTEXT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_POLYGONFROMWKB() {
  return getToken(MySqlParser::ST_POLYGONFROMWKB, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_SRID() {
  return getToken(MySqlParser::ST_SRID, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_STARTPOINT() {
  return getToken(MySqlParser::ST_STARTPOINT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_SYMDIFFERENCE() {
  return getToken(MySqlParser::ST_SYMDIFFERENCE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_TOUCHES() {
  return getToken(MySqlParser::ST_TOUCHES, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_UNION() {
  return getToken(MySqlParser::ST_UNION, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_WITHIN() {
  return getToken(MySqlParser::ST_WITHIN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_X() {
  return getToken(MySqlParser::ST_X, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::ST_Y() {
  return getToken(MySqlParser::ST_Y, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SUBDATE() {
  return getToken(MySqlParser::SUBDATE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SUBSTRING_INDEX() {
  return getToken(MySqlParser::SUBSTRING_INDEX, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SUBTIME() {
  return getToken(MySqlParser::SUBTIME, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::SYSTEM_USER() {
  return getToken(MySqlParser::SYSTEM_USER, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TAN() {
  return getToken(MySqlParser::TAN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TIME() {
  return getToken(MySqlParser::TIME, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TIMEDIFF() {
  return getToken(MySqlParser::TIMEDIFF, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TIMESTAMP() {
  return getToken(MySqlParser::TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TIMESTAMPADD() {
  return getToken(MySqlParser::TIMESTAMPADD, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TIMESTAMPDIFF() {
  return getToken(MySqlParser::TIMESTAMPDIFF, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TIME_FORMAT() {
  return getToken(MySqlParser::TIME_FORMAT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TIME_TO_SEC() {
  return getToken(MySqlParser::TIME_TO_SEC, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TOUCHES() {
  return getToken(MySqlParser::TOUCHES, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TO_BASE64() {
  return getToken(MySqlParser::TO_BASE64, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TO_DAYS() {
  return getToken(MySqlParser::TO_DAYS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::TO_SECONDS() {
  return getToken(MySqlParser::TO_SECONDS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::UCASE() {
  return getToken(MySqlParser::UCASE, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::UNCOMPRESS() {
  return getToken(MySqlParser::UNCOMPRESS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::UNCOMPRESSED_LENGTH() {
  return getToken(MySqlParser::UNCOMPRESSED_LENGTH, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::UNHEX() {
  return getToken(MySqlParser::UNHEX, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::UNIX_TIMESTAMP() {
  return getToken(MySqlParser::UNIX_TIMESTAMP, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::UPDATEXML() {
  return getToken(MySqlParser::UPDATEXML, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::UPPER() {
  return getToken(MySqlParser::UPPER, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::UUID() {
  return getToken(MySqlParser::UUID, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::UUID_SHORT() {
  return getToken(MySqlParser::UUID_SHORT, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::VALIDATE_PASSWORD_STRENGTH() {
  return getToken(MySqlParser::VALIDATE_PASSWORD_STRENGTH, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::VERSION() {
  return getToken(MySqlParser::VERSION, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() {
  return getToken(MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::WEEK() {
  return getToken(MySqlParser::WEEK, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::WEEKDAY() {
  return getToken(MySqlParser::WEEKDAY, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::WEEKOFYEAR() {
  return getToken(MySqlParser::WEEKOFYEAR, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::WEIGHT_STRING() {
  return getToken(MySqlParser::WEIGHT_STRING, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::WITHIN() {
  return getToken(MySqlParser::WITHIN, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::YEAR() {
  return getToken(MySqlParser::YEAR, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::YEARWEEK() {
  return getToken(MySqlParser::YEARWEEK, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::Y_FUNCTION() {
  return getToken(MySqlParser::Y_FUNCTION, 0);
}

tree::TerminalNode* MySqlParser::Function_name_baseContext::X_FUNCTION() {
  return getToken(MySqlParser::X_FUNCTION, 0);
}


size_t MySqlParser::Function_name_baseContext::getRuleIndex() const {
  return MySqlParser::RuleFunction_name_base;
}

void MySqlParser::Function_name_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_name_base(this);
}

void MySqlParser::Function_name_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MySqlParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_name_base(this);
}

MySqlParser::Function_name_baseContext* MySqlParser::function_name_base() {
  Function_name_baseContext *_localctx = _tracker.createInstance<Function_name_baseContext>(_ctx, getState());
  enterRule(_localctx, 572, MySqlParser::RuleFunction_name_base);
  size_t _la = 0;

  auto onExit = finally([=] {
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5859);
    _la = _input->LA(1);
    if (!(_la == MySqlParser::LEFT

    || _la == MySqlParser::RIGHT || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (MySqlParser::DATE - 181))
      | (1ULL << (MySqlParser::TIME - 181))
      | (1ULL << (MySqlParser::TIMESTAMP - 181))
      | (1ULL << (MySqlParser::YEAR - 181))
      | (1ULL << (MySqlParser::COUNT - 181))
      | (1ULL << (MySqlParser::POSITION - 181)))) != 0) || ((((_la - 549) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 549)) & ((1ULL << (MySqlParser::QUARTER - 549))
      | (1ULL << (MySqlParser::MONTH - 549))
      | (1ULL << (MySqlParser::DAY - 549))
      | (1ULL << (MySqlParser::HOUR - 549))
      | (1ULL << (MySqlParser::MINUTE - 549))
      | (1ULL << (MySqlParser::WEEK - 549))
      | (1ULL << (MySqlParser::SECOND - 549))
      | (1ULL << (MySqlParser::MICROSECOND - 549)))) != 0) || ((((_la - 621) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 621)) & ((1ULL << (MySqlParser::GEOMETRYCOLLECTION - 621))
      | (1ULL << (MySqlParser::LINESTRING - 621))
      | (1ULL << (MySqlParser::MULTILINESTRING - 621))
      | (1ULL << (MySqlParser::MULTIPOINT - 621))
      | (1ULL << (MySqlParser::MULTIPOLYGON - 621))
      | (1ULL << (MySqlParser::POINT - 621))
      | (1ULL << (MySqlParser::POLYGON - 621))
      | (1ULL << (MySqlParser::ABS - 621))
      | (1ULL << (MySqlParser::ACOS - 621))
      | (1ULL << (MySqlParser::ADDDATE - 621))
      | (1ULL << (MySqlParser::ADDTIME - 621))
      | (1ULL << (MySqlParser::AES_DECRYPT - 621))
      | (1ULL << (MySqlParser::AES_ENCRYPT - 621))
      | (1ULL << (MySqlParser::AREA - 621))
      | (1ULL << (MySqlParser::ASBINARY - 621))
      | (1ULL << (MySqlParser::ASIN - 621))
      | (1ULL << (MySqlParser::ASTEXT - 621))
      | (1ULL << (MySqlParser::ASWKB - 621))
      | (1ULL << (MySqlParser::ASWKT - 621))
      | (1ULL << (MySqlParser::ASYMMETRIC_DECRYPT - 621))
      | (1ULL << (MySqlParser::ASYMMETRIC_DERIVE - 621))
      | (1ULL << (MySqlParser::ASYMMETRIC_ENCRYPT - 621))
      | (1ULL << (MySqlParser::ASYMMETRIC_SIGN - 621))
      | (1ULL << (MySqlParser::ASYMMETRIC_VERIFY - 621))
      | (1ULL << (MySqlParser::ATAN - 621))
      | (1ULL << (MySqlParser::ATAN2 - 621))
      | (1ULL << (MySqlParser::BENCHMARK - 621))
      | (1ULL << (MySqlParser::BIN - 621))
      | (1ULL << (MySqlParser::BIT_COUNT - 621))
      | (1ULL << (MySqlParser::BIT_LENGTH - 621))
      | (1ULL << (MySqlParser::BUFFER - 621))
      | (1ULL << (MySqlParser::CEIL - 621))
      | (1ULL << (MySqlParser::CEILING - 621))
      | (1ULL << (MySqlParser::CENTROID - 621))
      | (1ULL << (MySqlParser::CHARACTER_LENGTH - 621))
      | (1ULL << (MySqlParser::CHARSET - 621))
      | (1ULL << (MySqlParser::CHAR_LENGTH - 621))
      | (1ULL << (MySqlParser::COERCIBILITY - 621))
      | (1ULL << (MySqlParser::COLLATION - 621))
      | (1ULL << (MySqlParser::COMPRESS - 621))
      | (1ULL << (MySqlParser::CONCAT - 621))
      | (1ULL << (MySqlParser::CONCAT_WS - 621))
      | (1ULL << (MySqlParser::CONNECTION_ID - 621))
      | (1ULL << (MySqlParser::CONV - 621))
      | (1ULL << (MySqlParser::CONVERT_TZ - 621))
      | (1ULL << (MySqlParser::COS - 621))
      | (1ULL << (MySqlParser::COT - 621))
      | (1ULL << (MySqlParser::CRC32 - 621))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY - 621))
      | (1ULL << (MySqlParser::CREATE_ASYMMETRIC_PUB_KEY - 621))
      | (1ULL << (MySqlParser::CREATE_DH_PARAMETERS - 621))
      | (1ULL << (MySqlParser::CREATE_DIGEST - 621))
      | (1ULL << (MySqlParser::CROSSES - 621))
      | (1ULL << (MySqlParser::DATEDIFF - 621))
      | (1ULL << (MySqlParser::DATE_FORMAT - 621))
      | (1ULL << (MySqlParser::DAYNAME - 621))
      | (1ULL << (MySqlParser::DAYOFMONTH - 621))
      | (1ULL << (MySqlParser::DAYOFWEEK - 621))
      | (1ULL << (MySqlParser::DAYOFYEAR - 621))
      | (1ULL << (MySqlParser::DECODE - 621))
      | (1ULL << (MySqlParser::DEGREES - 621))
      | (1ULL << (MySqlParser::DES_DECRYPT - 621))
      | (1ULL << (MySqlParser::DES_ENCRYPT - 621))
      | (1ULL << (MySqlParser::DIMENSION - 621)))) != 0) || ((((_la - 685) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 685)) & ((1ULL << (MySqlParser::DISJOINT - 685))
      | (1ULL << (MySqlParser::ELT - 685))
      | (1ULL << (MySqlParser::ENCODE - 685))
      | (1ULL << (MySqlParser::ENCRYPT - 685))
      | (1ULL << (MySqlParser::ENDPOINT - 685))
      | (1ULL << (MySqlParser::ENVELOPE - 685))
      | (1ULL << (MySqlParser::EQUALS - 685))
      | (1ULL << (MySqlParser::EXP - 685))
      | (1ULL << (MySqlParser::EXPORT_SET - 685))
      | (1ULL << (MySqlParser::EXTERIORRING - 685))
      | (1ULL << (MySqlParser::EXTRACTVALUE - 685))
      | (1ULL << (MySqlParser::FIELD - 685))
      | (1ULL << (MySqlParser::FIND_IN_SET - 685))
      | (1ULL << (MySqlParser::FLOOR - 685))
      | (1ULL << (MySqlParser::FORMAT - 685))
      | (1ULL << (MySqlParser::FOUND_ROWS - 685))
      | (1ULL << (MySqlParser::FROM_BASE64 - 685))
      | (1ULL << (MySqlParser::FROM_DAYS - 685))
      | (1ULL << (MySqlParser::FROM_UNIXTIME - 685))
      | (1ULL << (MySqlParser::GEOMCOLLFROMTEXT - 685))
      | (1ULL << (MySqlParser::GEOMCOLLFROMWKB - 685))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMTEXT - 685))
      | (1ULL << (MySqlParser::GEOMETRYCOLLECTIONFROMWKB - 685))
      | (1ULL << (MySqlParser::GEOMETRYFROMTEXT - 685))
      | (1ULL << (MySqlParser::GEOMETRYFROMWKB - 685))
      | (1ULL << (MySqlParser::GEOMETRYN - 685))
      | (1ULL << (MySqlParser::GEOMETRYTYPE - 685))
      | (1ULL << (MySqlParser::GEOMFROMTEXT - 685))
      | (1ULL << (MySqlParser::GEOMFROMWKB - 685))
      | (1ULL << (MySqlParser::GET_FORMAT - 685))
      | (1ULL << (MySqlParser::GET_LOCK - 685))
      | (1ULL << (MySqlParser::GLENGTH - 685))
      | (1ULL << (MySqlParser::GREATEST - 685))
      | (1ULL << (MySqlParser::GTID_SUBSET - 685))
      | (1ULL << (MySqlParser::GTID_SUBTRACT - 685))
      | (1ULL << (MySqlParser::HEX - 685))
      | (1ULL << (MySqlParser::IFNULL - 685))
      | (1ULL << (MySqlParser::INET6_ATON - 685))
      | (1ULL << (MySqlParser::INET6_NTOA - 685))
      | (1ULL << (MySqlParser::INET_ATON - 685))
      | (1ULL << (MySqlParser::INET_NTOA - 685))
      | (1ULL << (MySqlParser::INSTR - 685))
      | (1ULL << (MySqlParser::INTERIORRINGN - 685))
      | (1ULL << (MySqlParser::INTERSECTS - 685))
      | (1ULL << (MySqlParser::ISCLOSED - 685))
      | (1ULL << (MySqlParser::ISEMPTY - 685))
      | (1ULL << (MySqlParser::ISNULL - 685))
      | (1ULL << (MySqlParser::ISSIMPLE - 685))
      | (1ULL << (MySqlParser::IS_FREE_LOCK - 685))
      | (1ULL << (MySqlParser::IS_IPV4 - 685))
      | (1ULL << (MySqlParser::IS_IPV4_COMPAT - 685))
      | (1ULL << (MySqlParser::IS_IPV4_MAPPED - 685))
      | (1ULL << (MySqlParser::IS_IPV6 - 685))
      | (1ULL << (MySqlParser::IS_USED_LOCK - 685))
      | (1ULL << (MySqlParser::LAST_INSERT_ID - 685))
      | (1ULL << (MySqlParser::LCASE - 685))
      | (1ULL << (MySqlParser::LEAST - 685))
      | (1ULL << (MySqlParser::LENGTH - 685))
      | (1ULL << (MySqlParser::LINEFROMTEXT - 685))
      | (1ULL << (MySqlParser::LINEFROMWKB - 685))
      | (1ULL << (MySqlParser::LINESTRINGFROMTEXT - 685))
      | (1ULL << (MySqlParser::LINESTRINGFROMWKB - 685))
      | (1ULL << (MySqlParser::LN - 685))
      | (1ULL << (MySqlParser::LOAD_FILE - 685)))) != 0) || ((((_la - 749) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 749)) & ((1ULL << (MySqlParser::LOCATE - 749))
      | (1ULL << (MySqlParser::LOG - 749))
      | (1ULL << (MySqlParser::LOG10 - 749))
      | (1ULL << (MySqlParser::LOG2 - 749))
      | (1ULL << (MySqlParser::LOWER - 749))
      | (1ULL << (MySqlParser::LPAD - 749))
      | (1ULL << (MySqlParser::LTRIM - 749))
      | (1ULL << (MySqlParser::MAKEDATE - 749))
      | (1ULL << (MySqlParser::MAKETIME - 749))
      | (1ULL << (MySqlParser::MAKE_SET - 749))
      | (1ULL << (MySqlParser::MASTER_POS_WAIT - 749))
      | (1ULL << (MySqlParser::MBRCONTAINS - 749))
      | (1ULL << (MySqlParser::MBRDISJOINT - 749))
      | (1ULL << (MySqlParser::MBREQUAL - 749))
      | (1ULL << (MySqlParser::MBRINTERSECTS - 749))
      | (1ULL << (MySqlParser::MBROVERLAPS - 749))
      | (1ULL << (MySqlParser::MBRTOUCHES - 749))
      | (1ULL << (MySqlParser::MBRWITHIN - 749))
      | (1ULL << (MySqlParser::MD5 - 749))
      | (1ULL << (MySqlParser::MLINEFROMTEXT - 749))
      | (1ULL << (MySqlParser::MLINEFROMWKB - 749))
      | (1ULL << (MySqlParser::MONTHNAME - 749))
      | (1ULL << (MySqlParser::MPOINTFROMTEXT - 749))
      | (1ULL << (MySqlParser::MPOINTFROMWKB - 749))
      | (1ULL << (MySqlParser::MPOLYFROMTEXT - 749))
      | (1ULL << (MySqlParser::MPOLYFROMWKB - 749))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMTEXT - 749))
      | (1ULL << (MySqlParser::MULTILINESTRINGFROMWKB - 749))
      | (1ULL << (MySqlParser::MULTIPOINTFROMTEXT - 749))
      | (1ULL << (MySqlParser::MULTIPOINTFROMWKB - 749))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMTEXT - 749))
      | (1ULL << (MySqlParser::MULTIPOLYGONFROMWKB - 749))
      | (1ULL << (MySqlParser::NAME_CONST - 749))
      | (1ULL << (MySqlParser::NULLIF - 749))
      | (1ULL << (MySqlParser::NUMGEOMETRIES - 749))
      | (1ULL << (MySqlParser::NUMINTERIORRINGS - 749))
      | (1ULL << (MySqlParser::NUMPOINTS - 749))
      | (1ULL << (MySqlParser::OCT - 749))
      | (1ULL << (MySqlParser::OCTET_LENGTH - 749))
      | (1ULL << (MySqlParser::ORD - 749))
      | (1ULL << (MySqlParser::OVERLAPS - 749))
      | (1ULL << (MySqlParser::PERIOD_ADD - 749))
      | (1ULL << (MySqlParser::PERIOD_DIFF - 749))
      | (1ULL << (MySqlParser::PI - 749))
      | (1ULL << (MySqlParser::POINTFROMTEXT - 749))
      | (1ULL << (MySqlParser::POINTFROMWKB - 749))
      | (1ULL << (MySqlParser::POINTN - 749))
      | (1ULL << (MySqlParser::POLYFROMTEXT - 749))
      | (1ULL << (MySqlParser::POLYFROMWKB - 749))
      | (1ULL << (MySqlParser::POLYGONFROMTEXT - 749))
      | (1ULL << (MySqlParser::POLYGONFROMWKB - 749))
      | (1ULL << (MySqlParser::POW - 749))
      | (1ULL << (MySqlParser::POWER - 749))
      | (1ULL << (MySqlParser::QUOTE - 749))
      | (1ULL << (MySqlParser::RADIANS - 749))
      | (1ULL << (MySqlParser::RAND - 749))
      | (1ULL << (MySqlParser::RANDOM_BYTES - 749))
      | (1ULL << (MySqlParser::RELEASE_LOCK - 749))
      | (1ULL << (MySqlParser::REVERSE - 749))
      | (1ULL << (MySqlParser::ROUND - 749))
      | (1ULL << (MySqlParser::ROW_COUNT - 749))
      | (1ULL << (MySqlParser::RPAD - 749))
      | (1ULL << (MySqlParser::RTRIM - 749))
      | (1ULL << (MySqlParser::SEC_TO_TIME - 749)))) != 0) || ((((_la - 813) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 813)) & ((1ULL << (MySqlParser::SESSION_USER - 813))
      | (1ULL << (MySqlParser::SHA - 813))
      | (1ULL << (MySqlParser::SHA1 - 813))
      | (1ULL << (MySqlParser::SHA2 - 813))
      | (1ULL << (MySqlParser::SIGN - 813))
      | (1ULL << (MySqlParser::SIN - 813))
      | (1ULL << (MySqlParser::SLEEP - 813))
      | (1ULL << (MySqlParser::SOUNDEX - 813))
      | (1ULL << (MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS - 813))
      | (1ULL << (MySqlParser::SQRT - 813))
      | (1ULL << (MySqlParser::SRID - 813))
      | (1ULL << (MySqlParser::STARTPOINT - 813))
      | (1ULL << (MySqlParser::STRCMP - 813))
      | (1ULL << (MySqlParser::STR_TO_DATE - 813))
      | (1ULL << (MySqlParser::ST_AREA - 813))
      | (1ULL << (MySqlParser::ST_ASBINARY - 813))
      | (1ULL << (MySqlParser::ST_ASTEXT - 813))
      | (1ULL << (MySqlParser::ST_ASWKB - 813))
      | (1ULL << (MySqlParser::ST_ASWKT - 813))
      | (1ULL << (MySqlParser::ST_BUFFER - 813))
      | (1ULL << (MySqlParser::ST_CENTROID - 813))
      | (1ULL << (MySqlParser::ST_CONTAINS - 813))
      | (1ULL << (MySqlParser::ST_CROSSES - 813))
      | (1ULL << (MySqlParser::ST_DIFFERENCE - 813))
      | (1ULL << (MySqlParser::ST_DIMENSION - 813))
      | (1ULL << (MySqlParser::ST_DISJOINT - 813))
      | (1ULL << (MySqlParser::ST_DISTANCE - 813))
      | (1ULL << (MySqlParser::ST_ENDPOINT - 813))
      | (1ULL << (MySqlParser::ST_ENVELOPE - 813))
      | (1ULL << (MySqlParser::ST_EQUALS - 813))
      | (1ULL << (MySqlParser::ST_EXTERIORRING - 813))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTEXT - 813))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMTXT - 813))
      | (1ULL << (MySqlParser::ST_GEOMCOLLFROMWKB - 813))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT - 813))
      | (1ULL << (MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB - 813))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMTEXT - 813))
      | (1ULL << (MySqlParser::ST_GEOMETRYFROMWKB - 813))
      | (1ULL << (MySqlParser::ST_GEOMETRYN - 813))
      | (1ULL << (MySqlParser::ST_GEOMETRYTYPE - 813))
      | (1ULL << (MySqlParser::ST_GEOMFROMTEXT - 813))
      | (1ULL << (MySqlParser::ST_GEOMFROMWKB - 813))
      | (1ULL << (MySqlParser::ST_INTERIORRINGN - 813))
      | (1ULL << (MySqlParser::ST_INTERSECTION - 813))
      | (1ULL << (MySqlParser::ST_INTERSECTS - 813))
      | (1ULL << (MySqlParser::ST_ISCLOSED - 813))
      | (1ULL << (MySqlParser::ST_ISEMPTY - 813))
      | (1ULL << (MySqlParser::ST_ISSIMPLE - 813))
      | (1ULL << (MySqlParser::ST_LINEFROMTEXT - 813))
      | (1ULL << (MySqlParser::ST_LINEFROMWKB - 813))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMTEXT - 813))
      | (1ULL << (MySqlParser::ST_LINESTRINGFROMWKB - 813))
      | (1ULL << (MySqlParser::ST_NUMGEOMETRIES - 813))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRING - 813))
      | (1ULL << (MySqlParser::ST_NUMINTERIORRINGS - 813))
      | (1ULL << (MySqlParser::ST_NUMPOINTS - 813))
      | (1ULL << (MySqlParser::ST_OVERLAPS - 813))
      | (1ULL << (MySqlParser::ST_POINTFROMTEXT - 813))
      | (1ULL << (MySqlParser::ST_POINTFROMWKB - 813))
      | (1ULL << (MySqlParser::ST_POINTN - 813))
      | (1ULL << (MySqlParser::ST_POLYFROMTEXT - 813))
      | (1ULL << (MySqlParser::ST_POLYFROMWKB - 813))
      | (1ULL << (MySqlParser::ST_POLYGONFROMTEXT - 813))
      | (1ULL << (MySqlParser::ST_POLYGONFROMWKB - 813)))) != 0) || ((((_la - 877) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 877)) & ((1ULL << (MySqlParser::ST_SRID - 877))
      | (1ULL << (MySqlParser::ST_STARTPOINT - 877))
      | (1ULL << (MySqlParser::ST_SYMDIFFERENCE - 877))
      | (1ULL << (MySqlParser::ST_TOUCHES - 877))
      | (1ULL << (MySqlParser::ST_UNION - 877))
      | (1ULL << (MySqlParser::ST_WITHIN - 877))
      | (1ULL << (MySqlParser::ST_X - 877))
      | (1ULL << (MySqlParser::ST_Y - 877))
      | (1ULL << (MySqlParser::SUBDATE - 877))
      | (1ULL << (MySqlParser::SUBSTRING_INDEX - 877))
      | (1ULL << (MySqlParser::SUBTIME - 877))
      | (1ULL << (MySqlParser::SYSTEM_USER - 877))
      | (1ULL << (MySqlParser::TAN - 877))
      | (1ULL << (MySqlParser::TIMEDIFF - 877))
      | (1ULL << (MySqlParser::TIMESTAMPADD - 877))
      | (1ULL << (MySqlParser::TIMESTAMPDIFF - 877))
      | (1ULL << (MySqlParser::TIME_FORMAT - 877))
      | (1ULL << (MySqlParser::TIME_TO_SEC - 877))
      | (1ULL << (MySqlParser::TOUCHES - 877))
      | (1ULL << (MySqlParser::TO_BASE64 - 877))
      | (1ULL << (MySqlParser::TO_DAYS - 877))
      | (1ULL << (MySqlParser::TO_SECONDS - 877))
      | (1ULL << (MySqlParser::UCASE - 877))
      | (1ULL << (MySqlParser::UNCOMPRESS - 877))
      | (1ULL << (MySqlParser::UNCOMPRESSED_LENGTH - 877))
      | (1ULL << (MySqlParser::UNHEX - 877))
      | (1ULL << (MySqlParser::UNIX_TIMESTAMP - 877))
      | (1ULL << (MySqlParser::UPDATEXML - 877))
      | (1ULL << (MySqlParser::UPPER - 877))
      | (1ULL << (MySqlParser::UUID - 877))
      | (1ULL << (MySqlParser::UUID_SHORT - 877))
      | (1ULL << (MySqlParser::VALIDATE_PASSWORD_STRENGTH - 877))
      | (1ULL << (MySqlParser::VERSION - 877))
      | (1ULL << (MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 877))
      | (1ULL << (MySqlParser::WEEKDAY - 877))
      | (1ULL << (MySqlParser::WEEKOFYEAR - 877))
      | (1ULL << (MySqlParser::WEIGHT_STRING - 877))
      | (1ULL << (MySqlParser::WITHIN - 877))
      | (1ULL << (MySqlParser::YEARWEEK - 877))
      | (1ULL << (MySqlParser::Y_FUNCTION - 877))
      | (1ULL << (MySqlParser::X_FUNCTION - 877)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool MySqlParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 272: return expressionSempred(dynamic_cast<ExpressionContext *>(context), predicateIndex);
    case 273: return predicateSempred(dynamic_cast<PredicateContext *>(context), predicateIndex);
    case 274: return expression_atomSempred(dynamic_cast<Expression_atomContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool MySqlParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool MySqlParser::predicateSempred(PredicateContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 7);
    case 2: return precpred(_ctx, 5);
    case 3: return precpred(_ctx, 4);
    case 4: return precpred(_ctx, 2);
    case 5: return precpred(_ctx, 9);
    case 6: return precpred(_ctx, 8);
    case 7: return precpred(_ctx, 6);
    case 8: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool MySqlParser::expression_atomSempred(Expression_atomContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 2);
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

// Static vars and initialization.
std::vector<dfa::DFA> MySqlParser::_decisionToDFA;
atn::PredictionContextCache MySqlParser::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN MySqlParser::_atn;
std::vector<uint16_t> MySqlParser::_serializedATN;

std::vector<std::string> MySqlParser::_ruleNames = {
  "root", "sql_statements", "sql_statement", "empty_statement", "ddl_statement", 
  "dml_statement", "transaction_statement", "replication_statement", "prepared_statement", 
  "compound_statement", "administration_statement", "utility_statement", 
  "create_database", "create_event", "create_index", "create_logfile_group", 
  "create_procedure", "create_function", "create_server", "create_table", 
  "create_tablespace_innodb", "create_tablespace_ndb", "create_trigger", 
  "create_view", "create_database_option", "owner_statement", "schedule_expression", 
  "timestamp_value", "interval_expr", "interval_type", "index_type", "index_option", 
  "proc_param", "func_param", "routine_characteristic", "server_option", 
  "column_def_table_constraints", "column_def_table_constraint", "column_definition", 
  "separate_column_constraint", "table_constraint", "reference_definition", 
  "on_delete_action", "on_update_action", "reference_action_control_type", 
  "index_column_definition", "table_option", "partition_options", "partition_function_definition", 
  "linear_partition_func_def", "partition_def", "subpartition_def", "alter_database", 
  "alter_event", "alter_function", "alter_instance", "alter_logfile_group", 
  "alter_procedure", "alter_server", "alter_table", "alter_tablespace", 
  "alter_view", "alter_table_spec", "drop_database", "drop_event", "drop_index", 
  "drop_logfile_group", "drop_procedure", "drop_function", "drop_server", 
  "drop_table", "drop_tablespace", "drop_trigger", "drop_view", "rename_table", 
  "truncate_table", "call_statement", "delete_statement", "do_statement", 
  "handler_statement", "insert_statement", "load_data_statement", "load_xml_statement", 
  "replace_statement", "select_statement", "update_statement", "insert_statement_value", 
  "update_elem", "col_or_uservar", "single_delete_statement", "multiple_delete_statement", 
  "handler_open_statement", "handler_read_index_statement", "handler_read_statement", 
  "handler_close_statement", "single_update_statement", "multiple_update_statement", 
  "order_by_clause", "order_by_expression", "table_sources", "table_source", 
  "table_source_item", "index_hint", "join_part", "subquery", "query_expression", 
  "query_expression_nointo", "query_specification", "query_specification_nointo", 
  "union_parenth", "union_statement", "select_spec", "select_list", "select_list_elem", 
  "select_into_expression", "from_clause", "group_by_item", "limit_clause", 
  "start_transaction", "begin_work", "commit_work", "rollback_work", "savepoint_statement", 
  "rollback_statement", "release_statement", "lock_tables", "unlock_tables", 
  "set_autocommit_statement", "set_transaction_statement", "transact_option", 
  "lock_table_element", "trans_characteristic", "transaction_level", "change_master", 
  "change_repl_filter", "purge_binary_logs", "reset_master", "reset_slave", 
  "start_slave", "stop_slave", "start_group_repl", "stop_group_repl", "master_option", 
  "string_master_option", "decimal_master_option", "bool_master_option", 
  "channel_option", "repl_filter", "thread_type", "until_option", "start_slave_connection_option", 
  "gtid_set", "xa_start_transaction", "xa_end_transaction", "xa_prepare", 
  "xa_commit_work", "xa_rollback_work", "xa_recover_work", "prepare_statement", 
  "execute_statement", "deallocate_prepare", "routine_body", "block_statement", 
  "case_statement", "if_statement", "iterate_statement", "leave_statement", 
  "loop_statement", "repeat_statement", "return_statement", "while_statement", 
  "cursor_statement", "declare_variable", "declare_condition", "declare_cursor", 
  "declare_handler", "handler_condition_value", "procedure_sql_statement", 
  "alter_user", "create_user", "drop_user", "grant_statement", "grant_proxy", 
  "rename_user", "revoke_statement", "revoke_proxy", "set_password_statement", 
  "user_password_option", "user_auth_option", "tls_option", "user_resource_option", 
  "user_lock_option", "privelege_clause", "privilege", "privilege_level", 
  "set_password_option", "analyze_table", "check_table", "checksum_table", 
  "optimize_table", "repair_table", "check_table_option", "create_udfunction", 
  "install_plugin", "uninstall_plugin", "set_statement", "show_statement", 
  "variable_clause", "show_filter", "show_profile_type", "binlog_statement", 
  "cache_index_statement", "flush_statement", "kill_statement", "load_index_into_cache", 
  "reset_statement", "shutdown_statement", "tbl_index_list", "flush_option", 
  "load_tbl_index_list", "simple_describe_statement", "full_describe_statement", 
  "help_statement", "use_statement", "describe_object_clause", "table_name", 
  "full_id", "full_column_name", "index_col_name", "user_name", "mysql_variable", 
  "charset_name", "collation_name", "engine_name", "uuid_set", "xid", "xid_string_id", 
  "auth_plugin", "id_", "simple_id", "dot_ext_id", "decimal_literal", "filesize_literal", 
  "string_literal", "boolean_literal", "hexadecimal_literal", "null_notnull", 
  "constant", "data_type", "data_type_to_convert", "spatial_data_type", 
  "length_one_dimension", "length_two_dimension", "length_two_optional_dimension", 
  "id_list", "table_list", "table_pair_list", "index_colname_list", "expression_list", 
  "constant_list", "simple_string_list", "user_var_list", "default_value", 
  "if_exists", "if_not_exists", "function_call", "specific_function_call", 
  "levels_in_weight_string", "aggregate_windowed_function", "scalar_function_name", 
  "function_args", "function_arg", "expression", "predicate", "expression_atom", 
  "unary_operator", "comparison_operator", "logical_operator", "bit_operator", 
  "math_operator", "charset_name_base", "transaction_level_base", "privileges_base", 
  "interval_type_base", "data_type_base", "keywords_can_be_id", "function_name_base"
};

std::vector<std::string> MySqlParser::_literalNames = {
  "", "", "", "", "", "'ADD'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", 
  "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", 
  "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", 
  "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
  "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", 
  "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", 
  "'DESCRIBE'", "'DETERMINISTIC'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", 
  "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", "'EXISTS'", 
  "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
  "'FROM'", "'FULLTEXT'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", 
  "'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", 
  "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", 
  "'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
  "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", 
  "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
  "'MODIFIES'", "'NATURAL'", "", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
  "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
  "'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
  "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
  "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESTRICT'", "'RETURN'", 
  "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", 
  "'SET'", "'SEPARATOR'", "'SHOW'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
  "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
  "'SQL_SMALL_RESULT'", "'SSL'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", 
  "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", 
  "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
  "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
  "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
  "'MEDIUMINT'", "'INT'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", 
  "'FLOAT'", "'DECIMAL'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
  "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'BINARY'", "'VARBINARY'", 
  "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
  "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'YEAR_MONTH'", "'DAY_HOUR'", 
  "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
  "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
  "'DAY_MICROSECOND'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
  "'GROUP_CONCAT'", "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
  "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
  "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
  "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
  "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
  "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
  "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
  "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
  "'BLOCK'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", 
  "'CHANNEL'", "'CHECKSUM'", "'CIPHER'", "'CLIENT'", "'CLOSE'", "'COALESCE'", 
  "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
  "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", 
  "'CONSISTENT'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
  "'CPU'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", 
  "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", 
  "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", 
  "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", 
  "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
  "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
  "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
  "'FIXED'", "'FLUSH'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", 
  "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", 
  "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
  "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
  "'INSTALL'", "'INSTANCE'", "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", 
  "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
  "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", 
  "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
  "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
  "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
  "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
  "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
  "'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
  "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
  "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MID'", "'MIGRATE'", 
  "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'NAME'", "'NAMES'", 
  "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", 
  "'OFFSET'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
  "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
  "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
  "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
  "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", 
  "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", 
  "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
  "'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
  "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
  "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
  "'RESET'", "'RESUME'", "'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
  "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
  "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", 
  "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", 
  "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
  "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
  "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
  "'STATUS'", "'STOP'", "'STORAGE'", "'STRING'", "'SUBJECT'", "'SUBPARTITION'", 
  "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLESPACE'", 
  "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", 
  "'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
  "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
  "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", 
  "'WAIT'", "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
  "'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
  "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
  "'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
  "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'ARMSCII8'", "'ASCII'", "'BIG5'", 
  "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", 
  "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", 
  "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", 
  "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", 
  "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", 
  "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
  "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", 
  "'NDB'", "'NDBCLUSTER'", "'PERFOMANCE_SCHEMA'", "'REPEATABLE'", "'COMMITTED'", 
  "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'LINESTRING'", 
  "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
  "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
  "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
  "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
  "'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
  "'BUFFER'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
  "'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
  "'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
  "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
  "'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
  "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
  "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
  "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
  "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
  "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
  "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
  "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
  "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
  "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
  "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
  "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
  "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
  "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
  "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
  "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
  "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
  "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
  "'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
  "'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
  "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
  "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
  "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
  "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
  "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
  "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
  "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
  "'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
  "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
  "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
  "'SHA2'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
  "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", 
  "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", 
  "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
  "'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
  "'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
  "'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
  "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
  "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
  "'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
  "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
  "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
  "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
  "'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
  "'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
  "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
  "'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
  "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
  "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
  "'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
  "'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
  "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
  "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", 
  "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", 
  "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
  "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", 
  "'\"'", "'`'", "':'"
};

std::vector<std::string> MySqlParser::_symbolicNames = {
  "", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", "ADD", 
  "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN", "BOTH", 
  "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", "CHECK", 
  "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
  "CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
  "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
  "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", 
  "ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", 
  "FOREIGN", "FROM", "FULLTEXT", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
  "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
  "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
  "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", 
  "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MODIFIES", 
  "NATURAL", "NOTNULL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "ON", 
  "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", 
  "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS", 
  "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", 
  "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", 
  "SELECT", "SET", "SEPARATOR", "SHOW", "SPATIAL", "SQL", "SQLEXCEPTION", 
  "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
  "SSL", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", 
  "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", 
  "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", 
  "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", 
  "INT", "INTEGER", "BIGINT", "REAL", "DOUBLE", "FLOAT", "DECIMAL", "NUMERIC", 
  "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", "BINARY", 
  "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", 
  "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
  "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", 
  "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "AVG", "BIT_AND", 
  "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", 
  "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", 
  "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", 
  "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", 
  "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
  "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", 
  "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", 
  "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", "BTREE", "CACHE", 
  "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "CIPHER", "CLIENT", 
  "CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COMMENT", "COMMIT", 
  "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", 
  "CONSISTENT", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA", 
  "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", 
  "DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", 
  "DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", 
  "ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
  "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
  "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", 
  "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", 
  "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", 
  "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
  "INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INVOKER", "IO", "IO_THREAD", 
  "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
  "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
  "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
  "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
  "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
  "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
  "MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
  "MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS", 
  "MODE", "MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", "NEVER", 
  "NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", 
  "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", 
  "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
  "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
  "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
  "QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", 
  "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
  "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
  "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
  "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNS", 
  "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
  "SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
  "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
  "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
  "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
  "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
  "STATUS", "STOP", "STORAGE", "STRING", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
  "SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", "TEMPTABLE", 
  "THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
  "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", 
  "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
  "VIEW", "WAIT", "WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", 
  "XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
  "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", 
  "EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
  "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
  "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", 
  "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
  "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", 
  "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
  "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
  "MYISAM", "NDB", "NDBCLUSTER", "PERFOMANCE_SCHEMA", "REPEATABLE", "COMMITTED", 
  "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "LINESTRING", "MULTILINESTRING", 
  "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", 
  "ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
  "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
  "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
  "BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CEIL", "CEILING", "CENTROID", 
  "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
  "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
  "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
  "CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
  "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
  "DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
  "ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
  "EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
  "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
  "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
  "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
  "GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
  "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
  "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
  "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
  "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
  "LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
  "LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
  "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
  "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
  "MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
  "MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
  "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
  "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
  "NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
  "PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
  "POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
  "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
  "RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
  "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", 
  "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", 
  "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
  "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
  "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
  "ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
  "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
  "ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
  "ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
  "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
  "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
  "ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
  "ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
  "ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
  "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
  "SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
  "TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
  "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
  "UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
  "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
  "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
  "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
  "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
  "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", 
  "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
  "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
  "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
  "REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
  "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
  "HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
  "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
  "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
};

dfa::Vocabulary MySqlParser::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> MySqlParser::_tokenNames;

MySqlParser::Initializer::Initializer() {
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  static uint16_t serializedATNSegment0[] = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
       0x3, 0x3cd, 0x16e8, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 
       0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 
       0x9, 0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 
       0xa, 0x4, 0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 
       0x4, 0xe, 0x9, 0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 
       0x11, 0x9, 0x11, 0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 
       0x14, 0x9, 0x14, 0x4, 0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 
       0x17, 0x9, 0x17, 0x4, 0x18, 0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 
       0x1a, 0x9, 0x1a, 0x4, 0x1b, 0x9, 0x1b, 0x4, 0x1c, 0x9, 0x1c, 0x4, 
       0x1d, 0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 0x4, 0x1f, 0x9, 0x1f, 0x4, 
       0x20, 0x9, 0x20, 0x4, 0x21, 0x9, 0x21, 0x4, 0x22, 0x9, 0x22, 0x4, 
       0x23, 0x9, 0x23, 0x4, 0x24, 0x9, 0x24, 0x4, 0x25, 0x9, 0x25, 0x4, 
       0x26, 0x9, 0x26, 0x4, 0x27, 0x9, 0x27, 0x4, 0x28, 0x9, 0x28, 0x4, 
       0x29, 0x9, 0x29, 0x4, 0x2a, 0x9, 0x2a, 0x4, 0x2b, 0x9, 0x2b, 0x4, 
       0x2c, 0x9, 0x2c, 0x4, 0x2d, 0x9, 0x2d, 0x4, 0x2e, 0x9, 0x2e, 0x4, 
       0x2f, 0x9, 0x2f, 0x4, 0x30, 0x9, 0x30, 0x4, 0x31, 0x9, 0x31, 0x4, 
       0x32, 0x9, 0x32, 0x4, 0x33, 0x9, 0x33, 0x4, 0x34, 0x9, 0x34, 0x4, 
       0x35, 0x9, 0x35, 0x4, 0x36, 0x9, 0x36, 0x4, 0x37, 0x9, 0x37, 0x4, 
       0x38, 0x9, 0x38, 0x4, 0x39, 0x9, 0x39, 0x4, 0x3a, 0x9, 0x3a, 0x4, 
       0x3b, 0x9, 0x3b, 0x4, 0x3c, 0x9, 0x3c, 0x4, 0x3d, 0x9, 0x3d, 0x4, 
       0x3e, 0x9, 0x3e, 0x4, 0x3f, 0x9, 0x3f, 0x4, 0x40, 0x9, 0x40, 0x4, 
       0x41, 0x9, 0x41, 0x4, 0x42, 0x9, 0x42, 0x4, 0x43, 0x9, 0x43, 0x4, 
       0x44, 0x9, 0x44, 0x4, 0x45, 0x9, 0x45, 0x4, 0x46, 0x9, 0x46, 0x4, 
       0x47, 0x9, 0x47, 0x4, 0x48, 0x9, 0x48, 0x4, 0x49, 0x9, 0x49, 0x4, 
       0x4a, 0x9, 0x4a, 0x4, 0x4b, 0x9, 0x4b, 0x4, 0x4c, 0x9, 0x4c, 0x4, 
       0x4d, 0x9, 0x4d, 0x4, 0x4e, 0x9, 0x4e, 0x4, 0x4f, 0x9, 0x4f, 0x4, 
       0x50, 0x9, 0x50, 0x4, 0x51, 0x9, 0x51, 0x4, 0x52, 0x9, 0x52, 0x4, 
       0x53, 0x9, 0x53, 0x4, 0x54, 0x9, 0x54, 0x4, 0x55, 0x9, 0x55, 0x4, 
       0x56, 0x9, 0x56, 0x4, 0x57, 0x9, 0x57, 0x4, 0x58, 0x9, 0x58, 0x4, 
       0x59, 0x9, 0x59, 0x4, 0x5a, 0x9, 0x5a, 0x4, 0x5b, 0x9, 0x5b, 0x4, 
       0x5c, 0x9, 0x5c, 0x4, 0x5d, 0x9, 0x5d, 0x4, 0x5e, 0x9, 0x5e, 0x4, 
       0x5f, 0x9, 0x5f, 0x4, 0x60, 0x9, 0x60, 0x4, 0x61, 0x9, 0x61, 0x4, 
       0x62, 0x9, 0x62, 0x4, 0x63, 0x9, 0x63, 0x4, 0x64, 0x9, 0x64, 0x4, 
       0x65, 0x9, 0x65, 0x4, 0x66, 0x9, 0x66, 0x4, 0x67, 0x9, 0x67, 0x4, 
       0x68, 0x9, 0x68, 0x4, 0x69, 0x9, 0x69, 0x4, 0x6a, 0x9, 0x6a, 0x4, 
       0x6b, 0x9, 0x6b, 0x4, 0x6c, 0x9, 0x6c, 0x4, 0x6d, 0x9, 0x6d, 0x4, 
       0x6e, 0x9, 0x6e, 0x4, 0x6f, 0x9, 0x6f, 0x4, 0x70, 0x9, 0x70, 0x4, 
       0x71, 0x9, 0x71, 0x4, 0x72, 0x9, 0x72, 0x4, 0x73, 0x9, 0x73, 0x4, 
       0x74, 0x9, 0x74, 0x4, 0x75, 0x9, 0x75, 0x4, 0x76, 0x9, 0x76, 0x4, 
       0x77, 0x9, 0x77, 0x4, 0x78, 0x9, 0x78, 0x4, 0x79, 0x9, 0x79, 0x4, 
       0x7a, 0x9, 0x7a, 0x4, 0x7b, 0x9, 0x7b, 0x4, 0x7c, 0x9, 0x7c, 0x4, 
       0x7d, 0x9, 0x7d, 0x4, 0x7e, 0x9, 0x7e, 0x4, 0x7f, 0x9, 0x7f, 0x4, 
       0x80, 0x9, 0x80, 0x4, 0x81, 0x9, 0x81, 0x4, 0x82, 0x9, 0x82, 0x4, 
       0x83, 0x9, 0x83, 0x4, 0x84, 0x9, 0x84, 0x4, 0x85, 0x9, 0x85, 0x4, 
       0x86, 0x9, 0x86, 0x4, 0x87, 0x9, 0x87, 0x4, 0x88, 0x9, 0x88, 0x4, 
       0x89, 0x9, 0x89, 0x4, 0x8a, 0x9, 0x8a, 0x4, 0x8b, 0x9, 0x8b, 0x4, 
       0x8c, 0x9, 0x8c, 0x4, 0x8d, 0x9, 0x8d, 0x4, 0x8e, 0x9, 0x8e, 0x4, 
       0x8f, 0x9, 0x8f, 0x4, 0x90, 0x9, 0x90, 0x4, 0x91, 0x9, 0x91, 0x4, 
       0x92, 0x9, 0x92, 0x4, 0x93, 0x9, 0x93, 0x4, 0x94, 0x9, 0x94, 0x4, 
       0x95, 0x9, 0x95, 0x4, 0x96, 0x9, 0x96, 0x4, 0x97, 0x9, 0x97, 0x4, 
       0x98, 0x9, 0x98, 0x4, 0x99, 0x9, 0x99, 0x4, 0x9a, 0x9, 0x9a, 0x4, 
       0x9b, 0x9, 0x9b, 0x4, 0x9c, 0x9, 0x9c, 0x4, 0x9d, 0x9, 0x9d, 0x4, 
       0x9e, 0x9, 0x9e, 0x4, 0x9f, 0x9, 0x9f, 0x4, 0xa0, 0x9, 0xa0, 0x4, 
       0xa1, 0x9, 0xa1, 0x4, 0xa2, 0x9, 0xa2, 0x4, 0xa3, 0x9, 0xa3, 0x4, 
       0xa4, 0x9, 0xa4, 0x4, 0xa5, 0x9, 0xa5, 0x4, 0xa6, 0x9, 0xa6, 0x4, 
       0xa7, 0x9, 0xa7, 0x4, 0xa8, 0x9, 0xa8, 0x4, 0xa9, 0x9, 0xa9, 0x4, 
       0xaa, 0x9, 0xaa, 0x4, 0xab, 0x9, 0xab, 0x4, 0xac, 0x9, 0xac, 0x4, 
       0xad, 0x9, 0xad, 0x4, 0xae, 0x9, 0xae, 0x4, 0xaf, 0x9, 0xaf, 0x4, 
       0xb0, 0x9, 0xb0, 0x4, 0xb1, 0x9, 0xb1, 0x4, 0xb2, 0x9, 0xb2, 0x4, 
       0xb3, 0x9, 0xb3, 0x4, 0xb4, 0x9, 0xb4, 0x4, 0xb5, 0x9, 0xb5, 0x4, 
       0xb6, 0x9, 0xb6, 0x4, 0xb7, 0x9, 0xb7, 0x4, 0xb8, 0x9, 0xb8, 0x4, 
       0xb9, 0x9, 0xb9, 0x4, 0xba, 0x9, 0xba, 0x4, 0xbb, 0x9, 0xbb, 0x4, 
       0xbc, 0x9, 0xbc, 0x4, 0xbd, 0x9, 0xbd, 0x4, 0xbe, 0x9, 0xbe, 0x4, 
       0xbf, 0x9, 0xbf, 0x4, 0xc0, 0x9, 0xc0, 0x4, 0xc1, 0x9, 0xc1, 0x4, 
       0xc2, 0x9, 0xc2, 0x4, 0xc3, 0x9, 0xc3, 0x4, 0xc4, 0x9, 0xc4, 0x4, 
       0xc5, 0x9, 0xc5, 0x4, 0xc6, 0x9, 0xc6, 0x4, 0xc7, 0x9, 0xc7, 0x4, 
       0xc8, 0x9, 0xc8, 0x4, 0xc9, 0x9, 0xc9, 0x4, 0xca, 0x9, 0xca, 0x4, 
       0xcb, 0x9, 0xcb, 0x4, 0xcc, 0x9, 0xcc, 0x4, 0xcd, 0x9, 0xcd, 0x4, 
       0xce, 0x9, 0xce, 0x4, 0xcf, 0x9, 0xcf, 0x4, 0xd0, 0x9, 0xd0, 0x4, 
       0xd1, 0x9, 0xd1, 0x4, 0xd2, 0x9, 0xd2, 0x4, 0xd3, 0x9, 0xd3, 0x4, 
       0xd4, 0x9, 0xd4, 0x4, 0xd5, 0x9, 0xd5, 0x4, 0xd6, 0x9, 0xd6, 0x4, 
       0xd7, 0x9, 0xd7, 0x4, 0xd8, 0x9, 0xd8, 0x4, 0xd9, 0x9, 0xd9, 0x4, 
       0xda, 0x9, 0xda, 0x4, 0xdb, 0x9, 0xdb, 0x4, 0xdc, 0x9, 0xdc, 0x4, 
       0xdd, 0x9, 0xdd, 0x4, 0xde, 0x9, 0xde, 0x4, 0xdf, 0x9, 0xdf, 0x4, 
       0xe0, 0x9, 0xe0, 0x4, 0xe1, 0x9, 0xe1, 0x4, 0xe2, 0x9, 0xe2, 0x4, 
       0xe3, 0x9, 0xe3, 0x4, 0xe4, 0x9, 0xe4, 0x4, 0xe5, 0x9, 0xe5, 0x4, 
       0xe6, 0x9, 0xe6, 0x4, 0xe7, 0x9, 0xe7, 0x4, 0xe8, 0x9, 0xe8, 0x4, 
       0xe9, 0x9, 0xe9, 0x4, 0xea, 0x9, 0xea, 0x4, 0xeb, 0x9, 0xeb, 0x4, 
       0xec, 0x9, 0xec, 0x4, 0xed, 0x9, 0xed, 0x4, 0xee, 0x9, 0xee, 0x4, 
       0xef, 0x9, 0xef, 0x4, 0xf0, 0x9, 0xf0, 0x4, 0xf1, 0x9, 0xf1, 0x4, 
       0xf2, 0x9, 0xf2, 0x4, 0xf3, 0x9, 0xf3, 0x4, 0xf4, 0x9, 0xf4, 0x4, 
       0xf5, 0x9, 0xf5, 0x4, 0xf6, 0x9, 0xf6, 0x4, 0xf7, 0x9, 0xf7, 0x4, 
       0xf8, 0x9, 0xf8, 0x4, 0xf9, 0x9, 0xf9, 0x4, 0xfa, 0x9, 0xfa, 0x4, 
       0xfb, 0x9, 0xfb, 0x4, 0xfc, 0x9, 0xfc, 0x4, 0xfd, 0x9, 0xfd, 0x4, 
       0xfe, 0x9, 0xfe, 0x4, 0xff, 0x9, 0xff, 0x4, 0x100, 0x9, 0x100, 0x4, 
       0x101, 0x9, 0x101, 0x4, 0x102, 0x9, 0x102, 0x4, 0x103, 0x9, 0x103, 
       0x4, 0x104, 0x9, 0x104, 0x4, 0x105, 0x9, 0x105, 0x4, 0x106, 0x9, 
       0x106, 0x4, 0x107, 0x9, 0x107, 0x4, 0x108, 0x9, 0x108, 0x4, 0x109, 
       0x9, 0x109, 0x4, 0x10a, 0x9, 0x10a, 0x4, 0x10b, 0x9, 0x10b, 0x4, 
       0x10c, 0x9, 0x10c, 0x4, 0x10d, 0x9, 0x10d, 0x4, 0x10e, 0x9, 0x10e, 
       0x4, 0x10f, 0x9, 0x10f, 0x4, 0x110, 0x9, 0x110, 0x4, 0x111, 0x9, 
       0x111, 0x4, 0x112, 0x9, 0x112, 0x4, 0x113, 0x9, 0x113, 0x4, 0x114, 
       0x9, 0x114, 0x4, 0x115, 0x9, 0x115, 0x4, 0x116, 0x9, 0x116, 0x4, 
       0x117, 0x9, 0x117, 0x4, 0x118, 0x9, 0x118, 0x4, 0x119, 0x9, 0x119, 
       0x4, 0x11a, 0x9, 0x11a, 0x4, 0x11b, 0x9, 0x11b, 0x4, 0x11c, 0x9, 
       0x11c, 0x4, 0x11d, 0x9, 0x11d, 0x4, 0x11e, 0x9, 0x11e, 0x4, 0x11f, 
       0x9, 0x11f, 0x4, 0x120, 0x9, 0x120, 0x3, 0x2, 0x5, 0x2, 0x242, 0xa, 
       0x2, 0x3, 0x2, 0x3, 0x2, 0x5, 0x2, 0x246, 0xa, 0x2, 0x3, 0x2, 0x3, 
       0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x5, 0x3, 0x24d, 0xa, 0x3, 0x3, 
       0x3, 0x3, 0x3, 0x3, 0x3, 0x7, 0x3, 0x252, 0xa, 0x3, 0xc, 0x3, 0xe, 
       0x3, 0x255, 0xb, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x5, 0x3, 0x25a, 
       0xa, 0x3, 0x3, 0x3, 0x5, 0x3, 0x25d, 0xa, 0x3, 0x3, 0x3, 0x5, 0x3, 
       0x260, 0xa, 0x3, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 
       0x3, 0x4, 0x3, 0x4, 0x5, 0x4, 0x269, 0xa, 0x4, 0x3, 0x5, 0x3, 0x5, 
       0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 
       0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 
       0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 
       0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 
       0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 
       0x6, 0x3, 0x6, 0x3, 0x6, 0x5, 0x6, 0x290, 0xa, 0x6, 0x3, 0x7, 0x3, 
       0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 
       0x3, 0x7, 0x3, 0x7, 0x5, 0x7, 0x29c, 0xa, 0x7, 0x3, 0x8, 0x3, 0x8, 
       0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 
       0x8, 0x5, 0x8, 0x2a7, 0xa, 0x8, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 
       0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 
       0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x3, 0x9, 0x5, 0x9, 0x2b8, 
       0xa, 0x9, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x5, 0xa, 0x2bd, 0xa, 0xa, 
       0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 
       0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x5, 0xb, 0x2c9, 0xa, 0xb, 0x3, 
       0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 
       0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 
       0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 
       0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x5, 0xc, 0x2e4, 
       0xa, 0xc, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x5, 0xd, 0x2ea, 
       0xa, 0xd, 0x3, 0xe, 0x3, 0xe, 0x3, 0xe, 0x5, 0xe, 0x2ef, 0xa, 0xe, 
       0x3, 0xe, 0x3, 0xe, 0x7, 0xe, 0x2f3, 0xa, 0xe, 0xc, 0xe, 0xe, 0xe, 
       0x2f6, 0xb, 0xe, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 0x2fa, 0xa, 0xf, 0x3, 
       0xf, 0x3, 0xf, 0x5, 0xf, 0x2fe, 0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 
       0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 0x307, 0xa, 
       0xf, 0x3, 0xf, 0x5, 0xf, 0x30a, 0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 
       0xf, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 0x311, 0xa, 0xf, 0x3, 0xf, 0x3, 
       0xf, 0x5, 0xf, 0x315, 0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 
       0x10, 0x3, 0x10, 0x5, 0x10, 0x31c, 0xa, 0x10, 0x3, 0x10, 0x5, 0x10, 
       0x31f, 0xa, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x5, 0x10, 0x324, 
       0xa, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x7, 0x10, 
       0x32a, 0xa, 0x10, 0xc, 0x10, 0xe, 0x10, 0x32d, 0xb, 0x10, 0x3, 0x10, 
       0x3, 0x10, 0x5, 0x10, 0x331, 0xa, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 
       0x10, 0x5, 0x10, 0x336, 0xa, 0x10, 0x3, 0x10, 0x5, 0x10, 0x339, 0xa, 
       0x10, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 
       0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x344, 0xa, 0x11, 
       0x3, 0x11, 0x5, 0x11, 0x347, 0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 
       0x11, 0x34b, 0xa, 0x11, 0x3, 0x11, 0x5, 0x11, 0x34e, 0xa, 0x11, 0x3, 
       0x11, 0x3, 0x11, 0x5, 0x11, 0x352, 0xa, 0x11, 0x3, 0x11, 0x5, 0x11, 
       0x355, 0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x359, 0xa, 0x11, 
       0x3, 0x11, 0x5, 0x11, 0x35c, 0xa, 0x11, 0x3, 0x11, 0x5, 0x11, 0x35f, 
       0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x363, 0xa, 0x11, 0x3, 
       0x11, 0x5, 0x11, 0x366, 0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 
       0x36a, 0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x3, 0x12, 0x3, 0x12, 0x5, 
       0x12, 0x370, 0xa, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 
       0x5, 0x12, 0x376, 0xa, 0x12, 0x3, 0x12, 0x3, 0x12, 0x7, 0x12, 0x37a, 
       0xa, 0x12, 0xc, 0x12, 0xe, 0x12, 0x37d, 0xb, 0x12, 0x3, 0x12, 0x3, 
       0x12, 0x7, 0x12, 0x381, 0xa, 0x12, 0xc, 0x12, 0xe, 0x12, 0x384, 0xb, 
       0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x13, 0x3, 0x13, 0x5, 0x13, 0x38a, 
       0xa, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 0x5, 0x13, 
       0x390, 0xa, 0x13, 0x3, 0x13, 0x3, 0x13, 0x7, 0x13, 0x394, 0xa, 0x13, 
       0xc, 0x13, 0xe, 0x13, 0x397, 0xb, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 
       0x13, 0x3, 0x13, 0x7, 0x13, 0x39d, 0xa, 0x13, 0xc, 0x13, 0xe, 0x13, 
       0x3a0, 0xb, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x14, 0x3, 0x14, 0x3, 
       0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 
       0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x7, 0x14, 0x3b0, 0xa, 0x14, 
       0xc, 0x14, 0xe, 0x14, 0x3b3, 0xb, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 
       0x15, 0x3, 0x15, 0x5, 0x15, 0x3b9, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 
       0x5, 0x15, 0x3bd, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 
       0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 0x3c7, 
       0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 0x3cb, 0xa, 0x15, 0x3, 
       0x15, 0x3, 0x15, 0x5, 0x15, 0x3cf, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 
       0x5, 0x15, 0x3d3, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 0x3d7, 
       0xa, 0x15, 0x3, 0x15, 0x7, 0x15, 0x3da, 0xa, 0x15, 0xc, 0x15, 0xe, 
       0x15, 0x3dd, 0xb, 0x15, 0x5, 0x15, 0x3df, 0xa, 0x15, 0x3, 0x15, 0x5, 
       0x15, 0x3e2, 0xa, 0x15, 0x3, 0x15, 0x5, 0x15, 0x3e5, 0xa, 0x15, 0x3, 
       0x15, 0x5, 0x15, 0x3e8, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 
       0x3, 0x15, 0x5, 0x15, 0x3ee, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 
       0x15, 0x3f2, 0xa, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 
       0x5, 0x15, 0x3f8, 0xa, 0x15, 0x3, 0x15, 0x7, 0x15, 0x3fb, 0xa, 0x15, 
       0xc, 0x15, 0xe, 0x15, 0x3fe, 0xb, 0x15, 0x5, 0x15, 0x400, 0xa, 0x15, 
       0x3, 0x15, 0x5, 0x15, 0x403, 0xa, 0x15, 0x5, 0x15, 0x405, 0xa, 0x15, 
       0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 
       0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x5, 0x16, 0x410, 0xa, 0x16, 0x3, 
       0x16, 0x3, 0x16, 0x5, 0x16, 0x414, 0xa, 0x16, 0x3, 0x16, 0x5, 0x16, 
       0x417, 0xa, 0x16, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 
       0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 
       0x17, 0x3, 0x17, 0x5, 0x17, 0x425, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 
       0x428, 0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x42c, 0xa, 0x17, 
       0x3, 0x17, 0x5, 0x17, 0x42f, 0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 
       0x17, 0x433, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 0x436, 0xa, 0x17, 0x3, 
       0x17, 0x3, 0x17, 0x5, 0x17, 0x43a, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 
       0x43d, 0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x441, 0xa, 0x17, 
       0x3, 0x17, 0x5, 0x17, 0x444, 0xa, 0x17, 0x3, 0x17, 0x5, 0x17, 0x447, 
       0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x44b, 0xa, 0x17, 0x3, 
       0x17, 0x5, 0x17, 0x44e, 0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 
       0x452, 0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x18, 0x3, 0x18, 0x5, 
       0x18, 0x458, 0xa, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 
       0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 
       0x3, 0x18, 0x5, 0x18, 0x465, 0xa, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 
       0x19, 0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 0x46c, 0xa, 0x19, 0x3, 0x19, 
       0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 0x471, 0xa, 0x19, 0x3, 0x19, 0x5, 
       0x19, 0x474, 0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 
       0x479, 0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x3, 
       0x19, 0x3, 0x19, 0x5, 0x19, 0x481, 0xa, 0x19, 0x3, 0x19, 0x3, 0x19, 
       0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 0x487, 0xa, 0x19, 0x3, 0x19, 0x3, 
       0x19, 0x5, 0x19, 0x48b, 0xa, 0x19, 0x3, 0x1a, 0x5, 0x1a, 0x48e, 0xa, 
       0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x493, 0xa, 0x1a, 
       0x3, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x497, 0xa, 0x1a, 0x3, 0x1a, 0x3, 
       0x1a, 0x5, 0x1a, 0x49b, 0xa, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x49e, 0xa, 
       0x1a, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x3, 
       0x1b, 0x5, 0x1b, 0x4a6, 0xa, 0x1b, 0x5, 0x1b, 0x4a8, 0xa, 0x1b, 0x3, 
       0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x7, 0x1c, 0x4ad, 0xa, 0x1c, 0xc, 0x1c, 
       0xe, 0x1c, 0x4b0, 0xb, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x5, 
       0x1c, 0x4b5, 0xa, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 
       0x7, 0x1c, 0x4bb, 0xa, 0x1c, 0xc, 0x1c, 0xe, 0x1c, 0x4be, 0xb, 0x1c, 
       0x5, 0x1c, 0x4c0, 0xa, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x7, 
       0x1c, 0x4c5, 0xa, 0x1c, 0xc, 0x1c, 0xe, 0x1c, 0x4c8, 0xb, 0x1c, 0x5, 
       0x1c, 0x4ca, 0xa, 0x1c, 0x5, 0x1c, 0x4cc, 0xa, 0x1c, 0x3, 0x1d, 0x3, 
       0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x5, 0x1d, 0x4d2, 0xa, 0x1d, 0x3, 0x1e, 
       0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x5, 0x1e, 0x4d8, 0xa, 0x1e, 0x3, 
       0x1e, 0x3, 0x1e, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 
       0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x3, 
       0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x5, 0x1f, 0x4e9, 0xa, 0x1f, 0x3, 0x20, 
       0x3, 0x20, 0x3, 0x20, 0x3, 0x21, 0x3, 0x21, 0x5, 0x21, 0x4f0, 0xa, 
       0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 
       0x21, 0x3, 0x21, 0x5, 0x21, 0x4f9, 0xa, 0x21, 0x3, 0x22, 0x3, 0x22, 
       0x3, 0x22, 0x3, 0x22, 0x3, 0x23, 0x3, 0x23, 0x3, 0x23, 0x3, 0x24, 
       0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x5, 0x24, 0x507, 0xa, 
       0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 
       0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x5, 
       0x24, 0x514, 0xa, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x5, 0x24, 
       0x519, 0xa, 0x24, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 
       0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 
       0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x5, 0x25, 0x529, 0xa, 0x25, 
       0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x7, 0x26, 0x52f, 0xa, 
       0x26, 0xc, 0x26, 0xe, 0x26, 0x532, 0xb, 0x26, 0x3, 0x26, 0x3, 0x26, 
       0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x5, 0x27, 
       0x53b, 0xa, 0x27, 0x3, 0x28, 0x3, 0x28, 0x7, 0x28, 0x53f, 0xa, 0x28, 
       0xc, 0x28, 0xe, 0x28, 0x542, 0xb, 0x28, 0x3, 0x29, 0x3, 0x29, 0x3, 
       0x29, 0x3, 0x29, 0x3, 0x29, 0x5, 0x29, 0x549, 0xa, 0x29, 0x3, 0x29, 
       0x3, 0x29, 0x3, 0x29, 0x5, 0x29, 0x54e, 0xa, 0x29, 0x3, 0x29, 0x3, 
       0x29, 0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 0x5, 
       0x29, 0x557, 0xa, 0x29, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x55b, 0xa, 
       0x2a, 0x5, 0x2a, 0x55d, 0xa, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 
       0x5, 0x2a, 0x562, 0xa, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x7, 0x2a, 0x566, 
       0xa, 0x2a, 0xc, 0x2a, 0xe, 0x2a, 0x569, 0xb, 0x2a, 0x3, 0x2a, 0x3, 
       0x2a, 0x5, 0x2a, 0x56d, 0xa, 0x2a, 0x5, 0x2a, 0x56f, 0xa, 0x2a, 0x3, 
       0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x573, 0xa, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 
       0x576, 0xa, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x579, 0xa, 0x2a, 0x3, 0x2a, 
       0x3, 0x2a, 0x7, 0x2a, 0x57d, 0xa, 0x2a, 0xc, 0x2a, 0xe, 0x2a, 0x580, 
       0xb, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x584, 0xa, 0x2a, 0x5, 
       0x2a, 0x586, 0xa, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 
       0x58b, 0xa, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 
       0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x595, 0xa, 0x2a, 
       0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 
       0x59c, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x5a0, 0xa, 0x2b, 
       0x3, 0x2c, 0x3, 0x2c, 0x3, 0x2c, 0x3, 0x2c, 0x3, 0x2c, 0x3, 0x2c, 
       0x5, 0x2c, 0x5a8, 0xa, 0x2c, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 
       0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x5, 0x2d, 0x5b0, 0xa, 0x2d, 0x3, 0x2e, 
       0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x5, 0x2e, 
       0x5b8, 0xa, 0x2e, 0x3, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 0x5bc, 0xa, 0x2f, 
       0x3, 0x2f, 0x5, 0x2f, 0x5bf, 0xa, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x7, 
       0x2f, 0x5c3, 0xa, 0x2f, 0xc, 0x2f, 0xe, 0x2f, 0x5c6, 0xb, 0x2f, 0x3, 
       0x2f, 0x3, 0x2f, 0x5, 0x2f, 0x5ca, 0xa, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 
       0x5cd, 0xa, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x7, 0x2f, 0x5d1, 0xa, 0x2f, 
       0xc, 0x2f, 0xe, 0x2f, 0x5d4, 0xb, 0x2f, 0x5, 0x2f, 0x5d6, 0xa, 0x2f, 
       0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x5da, 0xa, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x5, 0x30, 0x5df, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x5, 0x30, 0x5e4, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 
       0x30, 0x5e8, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 
       0x5ed, 0xa, 0x30, 0x3, 0x30, 0x5, 0x30, 0x5f0, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x5f5, 0xa, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x5, 0x30, 0x5f9, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 
       0x5fd, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x602, 
       0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x607, 0xa, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x60c, 0xa, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x612, 0xa, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x617, 0xa, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x61c, 0xa, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x622, 0xa, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x627, 0xa, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x62c, 0xa, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x631, 0xa, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x5, 0x30, 0x636, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x5, 0x30, 0x63b, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x5, 0x30, 0x640, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 
       0x5, 0x30, 0x645, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 
       0x30, 0x64a, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 
       0x64f, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x654, 
       0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 
       0x5, 0x30, 0x65b, 0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x65f, 
       0xa, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x7, 0x30, 
       0x665, 0xa, 0x30, 0xc, 0x30, 0xe, 0x30, 0x668, 0xb, 0x30, 0x3, 0x30, 
       0x3, 0x30, 0x5, 0x30, 0x66c, 0xa, 0x30, 0x3, 0x31, 0x3, 0x31, 0x3, 
       0x31, 0x3, 0x31, 0x3, 0x31, 0x5, 0x31, 0x673, 0xa, 0x31, 0x3, 0x31, 
       0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 0x5, 0x31, 0x67a, 0xa, 
       0x31, 0x5, 0x31, 0x67c, 0xa, 0x31, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 
       0x3, 0x31, 0x7, 0x31, 0x682, 0xa, 0x31, 0xc, 0x31, 0xe, 0x31, 0x685, 
       0xb, 0x31, 0x3, 0x31, 0x3, 0x31, 0x5, 0x31, 0x689, 0xa, 0x31, 0x3, 
       0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 
       0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 0x696, 
       0xa, 0x32, 0x5, 0x32, 0x698, 0xa, 0x32, 0x3, 0x33, 0x5, 0x33, 0x69b, 
       0xa, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 
       0x3, 0x33, 0x5, 0x33, 0x6a3, 0xa, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 
       0x33, 0x3, 0x33, 0x5, 0x33, 0x6a9, 0xa, 0x33, 0x3, 0x33, 0x3, 0x33, 
       0x3, 0x33, 0x3, 0x33, 0x5, 0x33, 0x6af, 0xa, 0x33, 0x3, 0x34, 0x3, 
       0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 
       0x34, 0x5, 0x34, 0x6b9, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 
       0x5, 0x34, 0x6be, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 
       0x34, 0x3, 0x34, 0x5, 0x34, 0x6c5, 0xa, 0x34, 0x5, 0x34, 0x6c7, 0xa, 
       0x34, 0x3, 0x34, 0x5, 0x34, 0x6ca, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 
       0x5, 0x34, 0x6ce, 0xa, 0x34, 0x3, 0x34, 0x5, 0x34, 0x6d1, 0xa, 0x34, 
       0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 0x6d5, 0xa, 0x34, 0x3, 0x34, 0x5, 
       0x34, 0x6d8, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 
       0x6dd, 0xa, 0x34, 0x3, 0x34, 0x5, 0x34, 0x6e0, 0xa, 0x34, 0x3, 0x34, 
       0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 0x6e5, 0xa, 0x34, 0x3, 0x34, 0x5, 
       0x34, 0x6e8, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 0x6ec, 0xa, 
       0x34, 0x3, 0x34, 0x5, 0x34, 0x6ef, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 
       0x5, 0x34, 0x6f3, 0xa, 0x34, 0x3, 0x34, 0x5, 0x34, 0x6f6, 0xa, 0x34, 
       0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 0x6fa, 0xa, 0x34, 0x3, 0x34, 0x5, 
       0x34, 0x6fd, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 0x701, 0xa, 
       0x34, 0x3, 0x34, 0x5, 0x34, 0x704, 0xa, 0x34, 0x3, 0x34, 0x3, 0x34, 
       0x3, 0x34, 0x7, 0x34, 0x709, 0xa, 0x34, 0xc, 0x34, 0xe, 0x34, 0x70c, 
       0xb, 0x34, 0x5, 0x34, 0x70e, 0xa, 0x34, 0x3, 0x35, 0x3, 0x35, 0x3, 
       0x35, 0x5, 0x35, 0x713, 0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x5, 0x35, 
       0x717, 0xa, 0x35, 0x3, 0x35, 0x5, 0x35, 0x71a, 0xa, 0x35, 0x3, 0x35, 
       0x3, 0x35, 0x5, 0x35, 0x71e, 0xa, 0x35, 0x3, 0x35, 0x5, 0x35, 0x721, 
       0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x5, 0x35, 0x726, 0xa, 
       0x35, 0x3, 0x35, 0x5, 0x35, 0x729, 0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 
       0x3, 0x35, 0x5, 0x35, 0x72e, 0xa, 0x35, 0x3, 0x35, 0x5, 0x35, 0x731, 
       0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x5, 0x35, 0x735, 0xa, 0x35, 0x3, 
       0x35, 0x5, 0x35, 0x738, 0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x5, 0x35, 
       0x73c, 0xa, 0x35, 0x3, 0x35, 0x5, 0x35, 0x73f, 0xa, 0x35, 0x3, 0x35, 
       0x3, 0x35, 0x5, 0x35, 0x743, 0xa, 0x35, 0x3, 0x35, 0x5, 0x35, 0x746, 
       0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x5, 0x35, 0x74a, 0xa, 0x35, 0x3, 
       0x35, 0x5, 0x35, 0x74d, 0xa, 0x35, 0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 
       0x5, 0x36, 0x752, 0xa, 0x36, 0x3, 0x36, 0x6, 0x36, 0x755, 0xa, 0x36, 
       0xd, 0x36, 0xe, 0x36, 0x756, 0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 0x3, 
       0x36, 0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 0x5, 0x36, 0x761, 
       0xa, 0x36, 0x3, 0x37, 0x3, 0x37, 0x5, 0x37, 0x765, 0xa, 0x37, 0x3, 
       0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x5, 0x37, 0x76c, 
       0xa, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x5, 0x37, 0x771, 0xa, 
       0x37, 0x3, 0x37, 0x5, 0x37, 0x774, 0xa, 0x37, 0x3, 0x37, 0x3, 0x37, 
       0x3, 0x37, 0x5, 0x37, 0x779, 0xa, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 
       0x37, 0x3, 0x37, 0x3, 0x37, 0x5, 0x37, 0x780, 0xa, 0x37, 0x3, 0x37, 
       0x3, 0x37, 0x5, 0x37, 0x784, 0xa, 0x37, 0x3, 0x37, 0x3, 0x37, 0x5, 
       0x37, 0x788, 0xa, 0x37, 0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 
       0x7, 0x38, 0x78e, 0xa, 0x38, 0xc, 0x38, 0xe, 0x38, 0x791, 0xb, 0x38, 
       0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 
       0x3, 0x39, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 
       0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x5, 0x3a, 0x7a3, 0xa, 
       0x3a, 0x3, 0x3a, 0x5, 0x3a, 0x7a6, 0xa, 0x3a, 0x3, 0x3a, 0x5, 0x3a, 
       0x7a9, 0xa, 0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x5, 0x3a, 0x7ad, 0xa, 0x3a, 
       0x3, 0x3a, 0x3, 0x3a, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 
       0x7, 0x3b, 0x7b5, 0xa, 0x3b, 0xc, 0x3b, 0xe, 0x3b, 0x7b8, 0xb, 0x3b, 
       0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 
       0x3, 0x3c, 0x3, 0x3c, 0x7, 0x3c, 0x7c2, 0xa, 0x3c, 0xc, 0x3c, 0xe, 
       0x3c, 0x7c5, 0xb, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3d, 0x3, 0x3d, 
       0x5, 0x3d, 0x7cb, 0xa, 0x3d, 0x3, 0x3d, 0x5, 0x3d, 0x7ce, 0xa, 0x3d, 
       0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x7, 0x3d, 
       0x7d5, 0xa, 0x3d, 0xc, 0x3d, 0xe, 0x3d, 0x7d8, 0xb, 0x3d, 0x3, 0x3d, 
       0x7, 0x3d, 0x7db, 0xa, 0x3d, 0xc, 0x3d, 0xe, 0x3d, 0x7de, 0xb, 0x3d, 
       0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 
       0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x5, 0x3e, 0x7e9, 0xa, 0x3e, 0x3, 
       0x3e, 0x5, 0x3e, 0x7ec, 0xa, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x5, 0x3e, 
       0x7f0, 0xa, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3f, 0x3, 0x3f, 0x3, 
       0x3f, 0x3, 0x3f, 0x5, 0x3f, 0x7f8, 0xa, 0x3f, 0x3, 0x3f, 0x5, 0x3f, 
       0x7fb, 0xa, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x5, 0x3f, 0x800, 
       0xa, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 
       0x3, 0x3f, 0x5, 0x3f, 0x808, 0xa, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 
       0x3f, 0x3, 0x3f, 0x5, 0x3f, 0x80e, 0xa, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 
       0x5, 0x3f, 0x812, 0xa, 0x3f, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 
       0x40, 0x817, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x5, 0x40, 0x81e, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 
       0x40, 0x822, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x7, 0x40, 0x82b, 0xa, 0x40, 0xc, 
       0x40, 0xe, 0x40, 0x82e, 0xb, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x835, 0xa, 0x40, 0x3, 0x40, 0x5, 
       0x40, 0x838, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x7, 0x40, 0x83c, 0xa, 
       0x40, 0xc, 0x40, 0xe, 0x40, 0x83f, 0xb, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x5, 0x40, 0x844, 0xa, 0x40, 0x5, 0x40, 0x846, 0xa, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x84b, 0xa, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x7, 0x40, 0x84f, 0xa, 0x40, 0xc, 0x40, 0xe, 0x40, 
       0x852, 0xb, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x857, 
       0xa, 0x40, 0x5, 0x40, 0x859, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 
       0x40, 0x85d, 0xa, 0x40, 0x3, 0x40, 0x5, 0x40, 0x860, 0xa, 0x40, 0x3, 
       0x40, 0x5, 0x40, 0x863, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x7, 0x40, 
       0x867, 0xa, 0x40, 0xc, 0x40, 0xe, 0x40, 0x86a, 0xb, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x86f, 0xa, 0x40, 0x3, 0x40, 0x5, 
       0x40, 0x872, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x7, 0x40, 0x876, 0xa, 
       0x40, 0xc, 0x40, 0xe, 0x40, 0x879, 0xb, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x5, 0x40, 0x87e, 0xa, 0x40, 0x5, 0x40, 0x880, 0xa, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x885, 0xa, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x88c, 
       0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x891, 0xa, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x5, 0x40, 0x899, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 
       0x89d, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x5, 0x40, 0x8a5, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x5, 0x40, 0x8a9, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 
       0x40, 0x8ae, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x5, 0x40, 0x8b5, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 
       0x40, 0x8b9, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x5, 0x40, 0x8cc, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x8d9, 0xa, 0x40, 0x3, 0x40, 
       0x5, 0x40, 0x8dc, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x8e5, 0xa, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 
       0x8f8, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x5, 0x40, 0x8ff, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x906, 0xa, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x7, 0x40, 0x913, 0xa, 0x40, 
       0xc, 0x40, 0xe, 0x40, 0x916, 0xb, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x5, 0x40, 0x922, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x928, 0xa, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x92e, 0xa, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x934, 0xa, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x93a, 0xa, 0x40, 
       0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x940, 0xa, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x5, 0x40, 0x946, 
       0xa, 0x40, 0x3, 0x41, 0x3, 0x41, 0x3, 0x41, 0x5, 0x41, 0x94b, 0xa, 
       0x41, 0x3, 0x41, 0x3, 0x41, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x5, 
       0x42, 0x952, 0xa, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x43, 0x3, 0x43, 
       0x3, 0x43, 0x5, 0x43, 0x959, 0xa, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 
       0x43, 0x3, 0x43, 0x3, 0x43, 0x5, 0x43, 0x960, 0xa, 0x43, 0x3, 0x43, 
       0x5, 0x43, 0x963, 0xa, 0x43, 0x3, 0x43, 0x3, 0x43, 0x5, 0x43, 0x967, 
       0xa, 0x43, 0x3, 0x43, 0x5, 0x43, 0x96a, 0xa, 0x43, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x45, 0x3, 0x45, 0x3, 0x45, 0x5, 0x45, 0x977, 0xa, 0x45, 
       0x3, 0x45, 0x3, 0x45, 0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x5, 0x46, 
       0x97e, 0xa, 0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x47, 0x3, 0x47, 0x3, 
       0x47, 0x5, 0x47, 0x985, 0xa, 0x47, 0x3, 0x47, 0x3, 0x47, 0x3, 0x48, 
       0x3, 0x48, 0x5, 0x48, 0x98b, 0xa, 0x48, 0x3, 0x48, 0x3, 0x48, 0x5, 
       0x48, 0x98f, 0xa, 0x48, 0x3, 0x48, 0x3, 0x48, 0x5, 0x48, 0x993, 0xa, 
       0x48, 0x3, 0x49, 0x3, 0x49, 0x3, 0x49, 0x3, 0x49, 0x3, 0x49, 0x5, 
       0x49, 0x99a, 0xa, 0x49, 0x3, 0x49, 0x5, 0x49, 0x99d, 0xa, 0x49, 0x3, 
       0x4a, 0x3, 0x4a, 0x3, 0x4a, 0x5, 0x4a, 0x9a2, 0xa, 0x4a, 0x3, 0x4a, 
       0x3, 0x4a, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x5, 0x4b, 0x9a9, 0xa, 
       0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x7, 0x4b, 0x9ae, 0xa, 0x4b, 
       0xc, 0x4b, 0xe, 0x4b, 0x9b1, 0xb, 0x4b, 0x3, 0x4b, 0x5, 0x4b, 0x9b4, 
       0xa, 0x4b, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 
       0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x7, 0x4c, 
       0x9c0, 0xa, 0x4c, 0xc, 0x4c, 0xe, 0x4c, 0x9c3, 0xb, 0x4c, 0x3, 0x4d, 
       0x3, 0x4d, 0x5, 0x4d, 0x9c7, 0xa, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 
       0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x5, 0x4e, 0x9d0, 
       0xa, 0x4e, 0x3, 0x4e, 0x5, 0x4e, 0x9d3, 0xa, 0x4e, 0x3, 0x4f, 0x3, 
       0x4f, 0x5, 0x4f, 0x9d7, 0xa, 0x4f, 0x3, 0x50, 0x3, 0x50, 0x3, 0x50, 
       0x3, 0x51, 0x3, 0x51, 0x3, 0x51, 0x3, 0x51, 0x5, 0x51, 0x9e0, 0xa, 
       0x51, 0x3, 0x52, 0x3, 0x52, 0x5, 0x52, 0x9e4, 0xa, 0x52, 0x3, 0x52, 
       0x5, 0x52, 0x9e7, 0xa, 0x52, 0x3, 0x52, 0x5, 0x52, 0x9ea, 0xa, 0x52, 
       0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 
       0x5, 0x52, 0x9f2, 0xa, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 
       0x52, 0x5, 0x52, 0x9f8, 0xa, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 
       0x3, 0x52, 0x3, 0x52, 0x7, 0x52, 0x9ff, 0xa, 0x52, 0xc, 0x52, 0xe, 
       0x52, 0xa02, 0xb, 0x52, 0x5, 0x52, 0xa04, 0xa, 0x52, 0x3, 0x52, 0x3, 
       0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x7, 
       0x52, 0xa0d, 0xa, 0x52, 0xc, 0x52, 0xe, 0x52, 0xa10, 0xb, 0x52, 0x5, 
       0x52, 0xa12, 0xa, 0x52, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x5, 0x53, 
       0xa17, 0xa, 0x53, 0x3, 0x53, 0x5, 0x53, 0xa1a, 0xa, 0x53, 0x3, 0x53, 
       0x3, 0x53, 0x3, 0x53, 0x5, 0x53, 0xa1f, 0xa, 0x53, 0x3, 0x53, 0x3, 
       0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 
       0x53, 0x5, 0x53, 0xa29, 0xa, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 
       0x5, 0x53, 0xa2e, 0xa, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 
       0x53, 0x5, 0x53, 0xa34, 0xa, 0x53, 0x3, 0x53, 0x5, 0x53, 0xa37, 0xa, 
       0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x5, 0x53, 0xa3c, 0xa, 0x53, 
       0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x5, 0x53, 0xa41, 0xa, 0x53, 0x5, 
       0x53, 0xa43, 0xa, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 
       0x5, 0x53, 0xa49, 0xa, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x5, 
       0x53, 0xa4e, 0xa, 0x53, 0x5, 0x53, 0xa50, 0xa, 0x53, 0x3, 0x53, 0x3, 
       0x53, 0x3, 0x53, 0x3, 0x53, 0x5, 0x53, 0xa56, 0xa, 0x53, 0x3, 0x53, 
       0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x7, 0x53, 0xa5c, 0xa, 0x53, 0xc, 
       0x53, 0xe, 0x53, 0xa5f, 0xb, 0x53, 0x3, 0x53, 0x3, 0x53, 0x5, 0x53, 
       0xa63, 0xa, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x7, 
       0x53, 0xa69, 0xa, 0x53, 0xc, 0x53, 0xe, 0x53, 0xa6c, 0xb, 0x53, 0x5, 
       0x53, 0xa6e, 0xa, 0x53, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 
       0xa73, 0xa, 0x54, 0x3, 0x54, 0x5, 0x54, 0xa76, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0xa7b, 0xa, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0xa83, 
       0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x5, 0x54, 0xa8b, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x5, 0x54, 0xa91, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x7, 0x54, 0xa97, 0xa, 0x54, 0xc, 0x54, 0xe, 
       0x54, 0xa9a, 0xb, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0xa9e, 0xa, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x7, 0x54, 0xaa4, 
       0xa, 0x54, 0xc, 0x54, 0xe, 0x54, 0xaa7, 0xb, 0x54, 0x5, 0x54, 0xaa9, 
       0xa, 0x54, 0x3, 0x55, 0x3, 0x55, 0x5, 0x55, 0xaad, 0xa, 0x55, 0x3, 
       0x55, 0x5, 0x55, 0xab0, 0xa, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x5, 0x55, 0xab8, 0xa, 0x55, 0x3, 
       0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x5, 0x55, 0xabe, 0xa, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x7, 0x55, 
       0xac5, 0xa, 0x55, 0xc, 0x55, 0xe, 0x55, 0xac8, 0xb, 0x55, 0x5, 0x55, 
       0xaca, 0xa, 0x55, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0xad3, 0xa, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x5, 0x56, 0xadc, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 0x6, 0x56, 0xae0, 
       0xa, 0x56, 0xd, 0x56, 0xe, 0x56, 0xae1, 0x3, 0x56, 0x3, 0x56, 0x5, 
       0x56, 0xae6, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0xaea, 0xa, 
       0x56, 0x5, 0x56, 0xaec, 0xa, 0x56, 0x3, 0x56, 0x5, 0x56, 0xaef, 0xa, 
       0x56, 0x3, 0x56, 0x5, 0x56, 0xaf2, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0xafa, 0xa, 
       0x56, 0x3, 0x56, 0x3, 0x56, 0x6, 0x56, 0xafe, 0xa, 0x56, 0xd, 0x56, 
       0xe, 0x56, 0xaff, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0xb04, 0xa, 0x56, 
       0x3, 0x56, 0x5, 0x56, 0xb07, 0xa, 0x56, 0x3, 0x56, 0x5, 0x56, 0xb0a, 
       0xa, 0x56, 0x3, 0x56, 0x5, 0x56, 0xb0d, 0xa, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0xb15, 
       0xa, 0x56, 0x5, 0x56, 0xb17, 0xa, 0x56, 0x3, 0x57, 0x3, 0x57, 0x5, 
       0x57, 0xb1b, 0xa, 0x57, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 
       0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 
       0x7, 0x58, 0xb27, 0xa, 0x58, 0xc, 0x58, 0xe, 0x58, 0xb2a, 0xb, 0x58, 
       0x5, 0x58, 0xb2c, 0xa, 0x58, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 
       0x59, 0x3, 0x5a, 0x3, 0x5a, 0x5, 0x5a, 0xb34, 0xa, 0x5a, 0x3, 0x5b, 
       0x3, 0x5b, 0x5, 0x5b, 0xb38, 0xa, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xb3b, 
       0xa, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xb3e, 0xa, 0x5b, 0x3, 0x5b, 0x3, 
       0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x5, 
       0x5b, 0xb47, 0xa, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xb4b, 0xa, 
       0x5b, 0x3, 0x5b, 0x5, 0x5b, 0xb4e, 0xa, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 
       0x5, 0x5b, 0xb52, 0xa, 0x5b, 0x3, 0x5c, 0x3, 0x5c, 0x5, 0x5c, 0xb56, 
       0xa, 0x5c, 0x3, 0x5c, 0x5, 0x5c, 0xb59, 0xa, 0x5c, 0x3, 0x5c, 0x5, 
       0x5c, 0xb5c, 0xa, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x5, 0x5c, 
       0xb61, 0xa, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x5, 
       0x5c, 0xb67, 0xa, 0x5c, 0x7, 0x5c, 0xb69, 0xa, 0x5c, 0xc, 0x5c, 0xe, 
       0x5c, 0xb6c, 0xb, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 
       0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x5, 0x5c, 0xb75, 0xa, 0x5c, 0x3, 
       0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x5, 0x5c, 0xb7b, 0xa, 0x5c, 
       0x7, 0x5c, 0xb7d, 0xa, 0x5c, 0xc, 0x5c, 0xe, 0x5c, 0xb80, 0xb, 0x5c, 
       0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x5, 0x5c, 0xb85, 0xa, 0x5c, 0x3, 
       0x5c, 0x3, 0x5c, 0x5, 0x5c, 0xb89, 0xa, 0x5c, 0x3, 0x5d, 0x3, 0x5d, 
       0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0xb8f, 0xa, 0x5d, 0x3, 0x5d, 0x5, 
       0x5d, 0xb92, 0xa, 0x5d, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 
       0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 
       0x5, 0x5e, 0xb9e, 0xa, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x5, 0x5e, 0xba2, 
       0xa, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x5, 0x5e, 0xba6, 0xa, 0x5e, 0x3, 
       0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x5, 
       0x5f, 0xbae, 0xa, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x5, 0x5f, 0xbb2, 0xa, 
       0x5f, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x61, 0x3, 
       0x61, 0x5, 0x61, 0xbba, 0xa, 0x61, 0x3, 0x61, 0x5, 0x61, 0xbbd, 0xa, 
       0x61, 0x3, 0x61, 0x3, 0x61, 0x5, 0x61, 0xbc1, 0xa, 0x61, 0x3, 0x61, 
       0x5, 0x61, 0xbc4, 0xa, 0x61, 0x3, 0x61, 0x3, 0x61, 0x3, 0x61, 0x3, 
       0x61, 0x7, 0x61, 0xbca, 0xa, 0x61, 0xc, 0x61, 0xe, 0x61, 0xbcd, 0xb, 
       0x61, 0x3, 0x61, 0x3, 0x61, 0x5, 0x61, 0xbd1, 0xa, 0x61, 0x3, 0x61, 
       0x5, 0x61, 0xbd4, 0xa, 0x61, 0x3, 0x61, 0x5, 0x61, 0xbd7, 0xa, 0x61, 
       0x3, 0x62, 0x3, 0x62, 0x5, 0x62, 0xbdb, 0xa, 0x62, 0x3, 0x62, 0x5, 
       0x62, 0xbde, 0xa, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 
       0x3, 0x62, 0x7, 0x62, 0xbe5, 0xa, 0x62, 0xc, 0x62, 0xe, 0x62, 0xbe8, 
       0xb, 0x62, 0x3, 0x62, 0x3, 0x62, 0x5, 0x62, 0xbec, 0xa, 0x62, 0x3, 
       0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x63, 0x7, 0x63, 0xbf3, 
       0xa, 0x63, 0xc, 0x63, 0xe, 0x63, 0xbf6, 0xb, 0x63, 0x3, 0x64, 0x3, 
       0x64, 0x5, 0x64, 0xbfa, 0xa, 0x64, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 
       0x7, 0x65, 0xbff, 0xa, 0x65, 0xc, 0x65, 0xe, 0x65, 0xc02, 0xb, 0x65, 
       0x3, 0x66, 0x3, 0x66, 0x7, 0x66, 0xc06, 0xa, 0x66, 0xc, 0x66, 0xe, 
       0x66, 0xc09, 0xb, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x7, 0x66, 
       0xc0e, 0xa, 0x66, 0xc, 0x66, 0xe, 0x66, 0xc11, 0xb, 0x66, 0x3, 0x66, 
       0x3, 0x66, 0x5, 0x66, 0xc15, 0xa, 0x66, 0x3, 0x67, 0x3, 0x67, 0x3, 
       0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x5, 0x67, 0xc1d, 0xa, 0x67, 
       0x3, 0x67, 0x5, 0x67, 0xc20, 0xa, 0x67, 0x3, 0x67, 0x5, 0x67, 0xc23, 
       0xa, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x7, 0x67, 0xc28, 0xa, 
       0x67, 0xc, 0x67, 0xe, 0x67, 0xc2b, 0xb, 0x67, 0x5, 0x67, 0xc2d, 0xa, 
       0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x5, 
       0x67, 0xc34, 0xa, 0x67, 0x3, 0x67, 0x5, 0x67, 0xc37, 0xa, 0x67, 0x3, 
       0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x5, 
       0x67, 0xc3f, 0xa, 0x67, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 
       0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x5, 0x68, 0xc49, 0xa, 
       0x68, 0x5, 0x68, 0xc4b, 0xa, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 
       0x3, 0x68, 0x3, 0x69, 0x5, 0x69, 0xc52, 0xa, 0x69, 0x3, 0x69, 0x3, 
       0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 
       0x69, 0x3, 0x69, 0x5, 0x69, 0xc5d, 0xa, 0x69, 0x3, 0x69, 0x3, 0x69, 
       0x3, 0x69, 0x3, 0x69, 0x5, 0x69, 0xc63, 0xa, 0x69, 0x3, 0x69, 0x3, 
       0x69, 0x5, 0x69, 0xc67, 0xa, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 
       0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 
       0x5, 0x69, 0xc72, 0xa, 0x69, 0x3, 0x69, 0x3, 0x69, 0x3, 0x69, 0x5, 
       0x69, 0xc77, 0xa, 0x69, 0x5, 0x69, 0xc79, 0xa, 0x69, 0x3, 0x69, 0x3, 
       0x69, 0x5, 0x69, 0xc7d, 0xa, 0x69, 0x3, 0x6a, 0x3, 0x6a, 0x3, 0x6b, 
       0x3, 0x6b, 0x3, 0x6b, 0x3, 0x6b, 0x3, 0x6b, 0x3, 0x6b, 0x3, 0x6b, 
       0x3, 0x6b, 0x5, 0x6b, 0xc89, 0xa, 0x6b, 0x3, 0x6c, 0x3, 0x6c, 0x3, 
       0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x5, 
       0x6c, 0xc93, 0xa, 0x6c, 0x3, 0x6d, 0x3, 0x6d, 0x7, 0x6d, 0xc97, 0xa, 
       0x6d, 0xc, 0x6d, 0xe, 0x6d, 0xc9a, 0xb, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 
       0x5, 0x6d, 0xc9e, 0xa, 0x6d, 0x3, 0x6d, 0x5, 0x6d, 0xca1, 0xa, 0x6d, 
       0x3, 0x6d, 0x5, 0x6d, 0xca4, 0xa, 0x6d, 0x3, 0x6d, 0x5, 0x6d, 0xca7, 
       0xa, 0x6d, 0x3, 0x6e, 0x3, 0x6e, 0x7, 0x6e, 0xcab, 0xa, 0x6e, 0xc, 
       0x6e, 0xe, 0x6e, 0xcae, 0xb, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x5, 0x6e, 
       0xcb2, 0xa, 0x6e, 0x3, 0x6e, 0x5, 0x6e, 0xcb5, 0xa, 0x6e, 0x3, 0x6e, 
       0x5, 0x6e, 0xcb8, 0xa, 0x6e, 0x3, 0x6f, 0x3, 0x6f, 0x5, 0x6f, 0xcbc, 
       0xa, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x70, 0x3, 0x70, 0x5, 0x70, 
       0xcc2, 0xa, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 0x70, 0xcc6, 0xa, 0x70, 
       0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 
       0x3, 0x71, 0x3, 0x71, 0x5, 0x71, 0xcd0, 0xa, 0x71, 0x3, 0x72, 0x3, 
       0x72, 0x5, 0x72, 0xcd4, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 0x7, 0x72, 
       0xcd8, 0xa, 0x72, 0xc, 0x72, 0xe, 0x72, 0xcdb, 0xb, 0x72, 0x3, 0x73, 
       0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x5, 0x73, 
       0xce3, 0xa, 0x73, 0x3, 0x73, 0x5, 0x73, 0xce6, 0xa, 0x73, 0x3, 0x73, 
       0x3, 0x73, 0x5, 0x73, 0xcea, 0xa, 0x73, 0x3, 0x73, 0x5, 0x73, 0xced, 
       0xa, 0x73, 0x3, 0x73, 0x3, 0x73, 0x5, 0x73, 0xcf1, 0xa, 0x73, 0x3, 
       0x73, 0x3, 0x73, 0x5, 0x73, 0xcf5, 0xa, 0x73, 0x3, 0x73, 0x5, 0x73, 
       0xcf8, 0xa, 0x73, 0x5, 0x73, 0xcfa, 0xa, 0x73, 0x3, 0x74, 0x3, 0x74, 
       0x3, 0x74, 0x5, 0x74, 0xcff, 0xa, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 
       0x74, 0x5, 0x74, 0xd04, 0xa, 0x74, 0x7, 0x74, 0xd06, 0xa, 0x74, 0xc, 
       0x74, 0xe, 0x74, 0xd09, 0xb, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 
       0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 
       0x5, 0x74, 0xd14, 0xa, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 
       0x74, 0x5, 0x74, 0xd1a, 0xa, 0x74, 0x3, 0x74, 0x5, 0x74, 0xd1d, 0xa, 
       0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x5, 0x74, 0xd22, 0xa, 0x74, 
       0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x5, 0x74, 0xd27, 0xa, 0x74, 0x5, 
       0x74, 0xd29, 0xa, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 
       0x5, 0x74, 0xd2f, 0xa, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x5, 
       0x74, 0xd34, 0xa, 0x74, 0x5, 0x74, 0xd36, 0xa, 0x74, 0x5, 0x74, 0xd38, 
       0xa, 0x74, 0x3, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x75, 0x5, 0x75, 
       0xd3e, 0xa, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 
       0x75, 0x7, 0x75, 0xd45, 0xa, 0x75, 0xc, 0x75, 0xe, 0x75, 0xd48, 0xb, 
       0x75, 0x3, 0x75, 0x3, 0x75, 0x5, 0x75, 0xd4c, 0xa, 0x75, 0x5, 0x75, 
       0xd4e, 0xa, 0x75, 0x3, 0x75, 0x3, 0x75, 0x5, 0x75, 0xd52, 0xa, 0x75, 
       0x3, 0x76, 0x3, 0x76, 0x5, 0x76, 0xd56, 0xa, 0x76, 0x3, 0x77, 0x3, 
       0x77, 0x3, 0x77, 0x3, 0x77, 0x5, 0x77, 0xd5c, 0xa, 0x77, 0x3, 0x77, 
       0x3, 0x77, 0x3, 0x77, 0x3, 0x77, 0x3, 0x77, 0x5, 0x77, 0xd63, 0xa, 
       0x77, 0x3, 0x78, 0x3, 0x78, 0x3, 0x78, 0x3, 0x78, 0x3, 0x78, 0x7, 
       0x78, 0xd6a, 0xa, 0x78, 0xc, 0x78, 0xe, 0x78, 0xd6d, 0xb, 0x78, 0x5, 
       0x78, 0xd6f, 0xa, 0x78, 0x3, 0x79, 0x3, 0x79, 0x5, 0x79, 0xd73, 0xa, 
       0x79, 0x3, 0x7a, 0x3, 0x7a, 0x5, 0x7a, 0xd77, 0xa, 0x7a, 0x3, 0x7a, 
       0x3, 0x7a, 0x5, 0x7a, 0xd7b, 0xa, 0x7a, 0x3, 0x7a, 0x5, 0x7a, 0xd7e, 
       0xa, 0x7a, 0x3, 0x7a, 0x5, 0x7a, 0xd81, 0xa, 0x7a, 0x3, 0x7a, 0x5, 
       0x7a, 0xd84, 0xa, 0x7a, 0x3, 0x7b, 0x3, 0x7b, 0x5, 0x7b, 0xd88, 0xa, 
       0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x5, 0x7b, 0xd8c, 0xa, 0x7b, 0x3, 0x7b, 
       0x5, 0x7b, 0xd8f, 0xa, 0x7b, 0x3, 0x7b, 0x5, 0x7b, 0xd92, 0xa, 0x7b, 
       0x3, 0x7b, 0x5, 0x7b, 0xd95, 0xa, 0x7b, 0x3, 0x7c, 0x3, 0x7c, 0x3, 
       0x7c, 0x3, 0x7d, 0x3, 0x7d, 0x5, 0x7d, 0xd9c, 0xa, 0x7d, 0x3, 0x7d, 
       0x3, 0x7d, 0x5, 0x7d, 0xda0, 0xa, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 0x3, 
       0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7f, 0x3, 0x7f, 0x3, 
       0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x7, 0x7f, 0xdad, 0xa, 0x7f, 0xc, 0x7f, 
       0xe, 0x7f, 0xdb0, 0xb, 0x7f, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 0x3, 
       0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 0x82, 0x3, 
       0x82, 0x5, 0x82, 0xdbc, 0xa, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 
       0x3, 0x82, 0x7, 0x82, 0xdc2, 0xa, 0x82, 0xc, 0x82, 0xe, 0x82, 0xdc5, 
       0xb, 0x82, 0x3, 0x83, 0x3, 0x83, 0x3, 0x83, 0x3, 0x83, 0x3, 0x83, 
       0x3, 0x83, 0x3, 0x83, 0x5, 0x83, 0xdce, 0xa, 0x83, 0x3, 0x84, 0x3, 
       0x84, 0x5, 0x84, 0xdd2, 0xa, 0x84, 0x3, 0x84, 0x5, 0x84, 0xdd5, 0xa, 
       0x84, 0x3, 0x84, 0x3, 0x84, 0x5, 0x84, 0xdd9, 0xa, 0x84, 0x3, 0x84, 
       0x5, 0x84, 0xddc, 0xa, 0x84, 0x3, 0x84, 0x5, 0x84, 0xddf, 0xa, 0x84, 
       0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 
       0x3, 0x85, 0x5, 0x85, 0xde8, 0xa, 0x85, 0x3, 0x86, 0x3, 0x86, 0x3, 
       0x86, 0x3, 0x86, 0x3, 0x86, 0x3, 0x86, 0x3, 0x86, 0x5, 0x86, 0xdf1, 
       0xa, 0x86, 0x3, 0x87, 0x3, 0x87, 0x3, 0x87, 0x3, 0x87, 0x3, 0x87, 
       0x3, 0x87, 0x7, 0x87, 0xdf9, 0xa, 0x87, 0xc, 0x87, 0xe, 0x87, 0xdfc, 
       0xb, 0x87, 0x3, 0x87, 0x5, 0x87, 0xdff, 0xa, 0x87, 0x3, 0x88, 0x3, 
       0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x7, 0x88, 0xe07, 
       0xa, 0x88, 0xc, 0x88, 0xe, 0x88, 0xe0a, 0xb, 0x88, 0x3, 0x89, 0x3, 
       0x89, 0x3, 0x89, 0x3, 0x89, 0x3, 0x89, 0x3, 0x89, 0x3, 0x8a, 0x3, 
       0x8a, 0x3, 0x8a, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x5, 0x8b, 0xe18, 
       0xa, 0x8b, 0x3, 0x8b, 0x5, 0x8b, 0xe1b, 0xa, 0x8b, 0x3, 0x8c, 0x3, 
       0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x7, 0x8c, 0xe22, 0xa, 0x8c, 
       0xc, 0x8c, 0xe, 0x8c, 0xe25, 0xb, 0x8c, 0x5, 0x8c, 0xe27, 0xa, 0x8c, 
       0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0xe2b, 0xa, 0x8c, 0x3, 0x8c, 0x7, 
       0x8c, 0xe2e, 0xa, 0x8c, 0xc, 0x8c, 0xe, 0x8c, 0xe31, 0xb, 0x8c, 0x3, 
       0x8c, 0x5, 0x8c, 0xe34, 0xa, 0x8c, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 
       0x3, 0x8d, 0x3, 0x8d, 0x7, 0x8d, 0xe3b, 0xa, 0x8d, 0xc, 0x8d, 0xe, 
       0x8d, 0xe3e, 0xb, 0x8d, 0x5, 0x8d, 0xe40, 0xa, 0x8d, 0x3, 0x8e, 0x3, 
       0x8e, 0x3, 0x8e, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x90, 0x3, 
       0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 
       0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 
       0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 0x90, 0x3, 
       0x90, 0x3, 0x90, 0x7, 0x90, 0xe5d, 0xa, 0x90, 0xc, 0x90, 0xe, 0x90, 
       0xe60, 0xb, 0x90, 0x5, 0x90, 0xe62, 0xa, 0x90, 0x3, 0x90, 0x5, 0x90, 
       0xe65, 0xa, 0x90, 0x3, 0x91, 0x3, 0x91, 0x3, 0x92, 0x3, 0x92, 0x3, 
       0x93, 0x3, 0x93, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 
       0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 
       0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 
       0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 
       0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 
       0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 
       0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 
       0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x5, 
       0x95, 0xe9b, 0xa, 0x95, 0x3, 0x96, 0x3, 0x96, 0x3, 0x97, 0x3, 0x97, 
       0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 
       0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 
       0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x5, 0x97, 0xeb1, 0xa, 
       0x97, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 
       0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 
       0x98, 0x5, 0x98, 0xebf, 0xa, 0x98, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 
       0x7, 0x99, 0xec4, 0xa, 0x99, 0xc, 0x99, 0xe, 0x99, 0xec7, 0xb, 0x99, 
       0x3, 0x99, 0x5, 0x99, 0xeca, 0xa, 0x99, 0x3, 0x9a, 0x3, 0x9a, 0x3, 
       0x9a, 0x3, 0x9a, 0x5, 0x9a, 0xed0, 0xa, 0x9a, 0x3, 0x9b, 0x3, 0x9b, 
       0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x5, 0x9b, 0xed8, 0xa, 
       0x9b, 0x5, 0x9b, 0xeda, 0xa, 0x9b, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 
       0x3, 0x9c, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 
       0x5, 0x9d, 0xee5, 0xa, 0x9d, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 
       0x9e, 0x3, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 0x5, 0x9f, 0xeef, 
       0xa, 0x9f, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0xefa, 0xa, 
       0xa1, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa3, 0x3, 
       0xa3, 0x5, 0xa3, 0xf02, 0xa, 0xa3, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 
       0x5, 0xa4, 0xf07, 0xa, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 
       0xa4, 0x7, 0xa4, 0xf0d, 0xa, 0xa4, 0xc, 0xa4, 0xe, 0xa4, 0xf10, 0xb, 
       0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x7, 0xa4, 0xf15, 0xa, 0xa4, 
       0xc, 0xa4, 0xe, 0xa4, 0xf18, 0xb, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 
       0xa4, 0x7, 0xa4, 0xf1d, 0xa, 0xa4, 0xc, 0xa4, 0xe, 0xa4, 0xf20, 0xb, 
       0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x7, 0xa4, 0xf25, 0xa, 0xa4, 
       0xc, 0xa4, 0xe, 0xa4, 0xf28, 0xb, 0xa4, 0x3, 0xa4, 0x6, 0xa4, 0xf2b, 
       0xa, 0xa4, 0xd, 0xa4, 0xe, 0xa4, 0xf2c, 0x5, 0xa4, 0xf2f, 0xa, 0xa4, 
       0x3, 0xa4, 0x3, 0xa4, 0x5, 0xa4, 0xf33, 0xa, 0xa4, 0x3, 0xa5, 0x3, 
       0xa5, 0x3, 0xa5, 0x5, 0xa5, 0xf38, 0xa, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 
       0x3, 0xa5, 0x5, 0xa5, 0xf3d, 0xa, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x6, 
       0xa5, 0xf41, 0xa, 0xa5, 0xd, 0xa5, 0xe, 0xa5, 0xf42, 0x6, 0xa5, 0xf45, 
       0xa, 0xa5, 0xd, 0xa5, 0xe, 0xa5, 0xf46, 0x3, 0xa5, 0x3, 0xa5, 0x6, 
       0xa5, 0xf4b, 0xa, 0xa5, 0xd, 0xa5, 0xe, 0xa5, 0xf4c, 0x5, 0xa5, 0xf4f, 
       0xa, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa6, 0x3, 0xa6, 
       0x3, 0xa6, 0x3, 0xa6, 0x6, 0xa6, 0xf58, 0xa, 0xa6, 0xd, 0xa6, 0xe, 
       0xa6, 0xf59, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x6, 0xa6, 
       0xf60, 0xa, 0xa6, 0xd, 0xa6, 0xe, 0xa6, 0xf61, 0x7, 0xa6, 0xf64, 
       0xa, 0xa6, 0xc, 0xa6, 0xe, 0xa6, 0xf67, 0xb, 0xa6, 0x3, 0xa6, 0x3, 
       0xa6, 0x6, 0xa6, 0xf6b, 0xa, 0xa6, 0xd, 0xa6, 0xe, 0xa6, 0xf6c, 0x5, 
       0xa6, 0xf6f, 0xa, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa7, 
       0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa9, 
       0x3, 0xa9, 0x3, 0xa9, 0x5, 0xa9, 0xf7d, 0xa, 0xa9, 0x3, 0xa9, 0x3, 
       0xa9, 0x6, 0xa9, 0xf81, 0xa, 0xa9, 0xd, 0xa9, 0xe, 0xa9, 0xf82, 0x3, 
       0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x5, 0xa9, 0xf88, 0xa, 0xa9, 0x3, 0xaa, 
       0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0xf8d, 0xa, 0xaa, 0x3, 0xaa, 0x3, 
       0xaa, 0x6, 0xaa, 0xf91, 0xa, 0xaa, 0xd, 0xaa, 0xe, 0xaa, 0xf92, 0x3, 
       0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0xf9a, 
       0xa, 0xaa, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xac, 0x3, 0xac, 
       0x3, 0xac, 0x5, 0xac, 0xfa2, 0xa, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 
       0xac, 0x3, 0xac, 0x6, 0xac, 0xfa8, 0xa, 0xac, 0xd, 0xac, 0xe, 0xac, 
       0xfa9, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x5, 0xac, 0xfaf, 0xa, 0xac, 
       0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x5, 0xad, 0xfb5, 0xa, 
       0xad, 0x3, 0xad, 0x5, 0xad, 0xfb8, 0xa, 0xad, 0x3, 0xad, 0x3, 0xad, 
       0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x5, 0xad, 0xfc0, 0xa, 
       0xad, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x5, 
       0xae, 0xfc7, 0xa, 0xae, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x5, 0xaf, 0xfd0, 0xa, 0xaf, 0x3, 
       0xaf, 0x5, 0xaf, 0xfd3, 0xa, 0xaf, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 
       0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 
       0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x7, 0xb1, 0xfe2, 0xa, 
       0xb1, 0xc, 0xb1, 0xe, 0xb1, 0xfe5, 0xb, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 
       0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x5, 0xb2, 0xfec, 0xa, 0xb2, 0x3, 
       0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x5, 
       0xb2, 0xff4, 0xa, 0xb2, 0x3, 0xb3, 0x3, 0xb3, 0x5, 0xb3, 0xff8, 0xa, 
       0xb3, 0x3, 0xb3, 0x3, 0xb3, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 
       0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x7, 0xb4, 0x1004, 
       0xa, 0xb4, 0xc, 0xb4, 0xe, 0xb4, 0x1007, 0xb, 0xb4, 0x3, 0xb4, 0x3, 
       0xb4, 0x3, 0xb4, 0x5, 0xb4, 0x100c, 0xa, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 
       0x3, 0xb4, 0x7, 0xb4, 0x1011, 0xa, 0xb4, 0xc, 0xb4, 0xe, 0xb4, 0x1014, 
       0xb, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x5, 0xb4, 
       0x101a, 0xa, 0xb4, 0x3, 0xb4, 0x7, 0xb4, 0x101d, 0xa, 0xb4, 0xc, 
       0xb4, 0xe, 0xb4, 0x1020, 0xb, 0xb4, 0x5, 0xb4, 0x1022, 0xa, 0xb4, 
       0x5, 0xb4, 0x1024, 0xa, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x6, 0xb4, 0x1028, 
       0xa, 0xb4, 0xd, 0xb4, 0xe, 0xb4, 0x1029, 0x5, 0xb4, 0x102c, 0xa, 
       0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x7, 0xb4, 0x1030, 0xa, 0xb4, 0xc, 0xb4, 
       0xe, 0xb4, 0x1033, 0xb, 0xb4, 0x5, 0xb4, 0x1035, 0xa, 0xb4, 0x3, 
       0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x7, 0xb5, 0x103c, 
       0xa, 0xb5, 0xc, 0xb5, 0xe, 0xb5, 0x103f, 0xb, 0xb5, 0x3, 0xb5, 0x3, 
       0xb5, 0x3, 0xb5, 0x5, 0xb5, 0x1044, 0xa, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 
       0x3, 0xb5, 0x7, 0xb5, 0x1049, 0xa, 0xb5, 0xc, 0xb5, 0xe, 0xb5, 0x104c, 
       0xb, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x5, 0xb5, 
       0x1052, 0xa, 0xb5, 0x3, 0xb5, 0x7, 0xb5, 0x1055, 0xa, 0xb5, 0xc, 
       0xb5, 0xe, 0xb5, 0x1058, 0xb, 0xb5, 0x5, 0xb5, 0x105a, 0xa, 0xb5, 
       0x5, 0xb5, 0x105c, 0xa, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x6, 0xb5, 0x1060, 
       0xa, 0xb5, 0xd, 0xb5, 0xe, 0xb5, 0x1061, 0x5, 0xb5, 0x1064, 0xa, 
       0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x7, 0xb5, 0x1068, 0xa, 0xb5, 0xc, 0xb5, 
       0xe, 0xb5, 0x106b, 0xb, 0xb5, 0x5, 0xb5, 0x106d, 0xa, 0xb5, 0x3, 
       0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x5, 0xb6, 0x1072, 0xa, 0xb6, 0x3, 0xb6, 
       0x3, 0xb6, 0x3, 0xb6, 0x7, 0xb6, 0x1077, 0xa, 0xb6, 0xc, 0xb6, 0xe, 
       0xb6, 0x107a, 0xb, 0xb6, 0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 
       0x7, 0xb7, 0x1080, 0xa, 0xb7, 0xc, 0xb7, 0xe, 0xb7, 0x1083, 0xb, 
       0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x5, 0xb7, 0x1087, 0xa, 0xb7, 0x3, 0xb7, 
       0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x7, 0xb7, 0x108e, 0xa, 
       0xb7, 0xc, 0xb7, 0xe, 0xb7, 0x1091, 0xb, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 
       0x3, 0xb7, 0x3, 0xb7, 0x5, 0xb7, 0x1097, 0xa, 0xb7, 0x3, 0xb7, 0x7, 
       0xb7, 0x109a, 0xa, 0xb7, 0xc, 0xb7, 0xe, 0xb7, 0x109d, 0xb, 0xb7, 
       0x5, 0xb7, 0x109f, 0xa, 0xb7, 0x5, 0xb7, 0x10a1, 0xa, 0xb7, 0x3, 
       0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x7, 0xb7, 0x10a7, 0xa, 0xb7, 
       0xc, 0xb7, 0xe, 0xb7, 0x10aa, 0xb, 0xb7, 0x5, 0xb7, 0x10ac, 0xa, 
       0xb7, 0x3, 0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x3, 
       0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x7, 0xb8, 0x10b6, 0xa, 0xb8, 0xc, 0xb8, 
       0xe, 0xb8, 0x10b9, 0xb, 0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x5, 
       0xb8, 0x10be, 0xa, 0xb8, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 
       0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x3, 0xb9, 
       0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x7, 0xba, 0x10ce, 0xa, 
       0xba, 0xc, 0xba, 0xe, 0xba, 0x10d1, 0xb, 0xba, 0x3, 0xba, 0x3, 0xba, 
       0x5, 0xba, 0x10d5, 0xa, 0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 
       0xba, 0x3, 0xba, 0x7, 0xba, 0x10dc, 0xa, 0xba, 0xc, 0xba, 0xe, 0xba, 
       0x10df, 0xb, 0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x5, 0xba, 0x10e4, 
       0xa, 0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 
       0x3, 0xba, 0x3, 0xba, 0x7, 0xba, 0x10ed, 0xa, 0xba, 0xc, 0xba, 0xe, 
       0xba, 0x10f0, 0xb, 0xba, 0x5, 0xba, 0x10f2, 0xa, 0xba, 0x3, 0xbb, 
       0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 
       0x3, 0xbb, 0x7, 0xbb, 0x10fc, 0xa, 0xbb, 0xc, 0xbb, 0xe, 0xbb, 0x10ff, 
       0xb, 0xbb, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x5, 0xbc, 
       0x1105, 0xa, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbd, 0x3, 
       0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 
       0xbd, 0x5, 0xbd, 0x1112, 0xa, 0xbd, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 
       0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 
       0x3, 0xbe, 0x5, 0xbe, 0x111e, 0xa, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 
       0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 
       0xbe, 0x5, 0xbe, 0x1129, 0xa, 0xbe, 0x5, 0xbe, 0x112b, 0xa, 0xbe, 
       0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 
       0x3, 0xbf, 0x3, 0xbf, 0x5, 0xbf, 0x1135, 0xa, 0xbf, 0x3, 0xc0, 0x3, 
       0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 
       0xc0, 0x5, 0xc0, 0x113f, 0xa, 0xc0, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 
       0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x5, 0xc2, 
       0x1149, 0xa, 0xc2, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0x114d, 0xa, 
       0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0x1151, 0xa, 0xc3, 0x3, 0xc3, 
       0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 
       0x5, 0xc3, 0x115a, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 
       0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 
       0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 
       0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 
       0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x5, 0xc3, 0x1175, 0xa, 0xc3, 
       0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 
       0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 
       0x3, 0xc4, 0x5, 0xc4, 0x1184, 0xa, 0xc4, 0x3, 0xc5, 0x3, 0xc5, 0x3, 
       0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x5, 0xc5, 0x118b, 0xa, 0xc5, 0x3, 0xc6, 
       0x3, 0xc6, 0x5, 0xc6, 0x118f, 0xa, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 
       0xc6, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x7, 0xc7, 0x1198, 
       0xa, 0xc7, 0xc, 0xc7, 0xe, 0xc7, 0x119b, 0xb, 0xc7, 0x3, 0xc8, 0x3, 
       0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x5, 0xc8, 0x11a1, 0xa, 0xc8, 0x3, 0xc9, 
       0x3, 0xc9, 0x5, 0xc9, 0x11a5, 0xa, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 
       0xc9, 0x3, 0xca, 0x3, 0xca, 0x5, 0xca, 0x11ac, 0xa, 0xca, 0x3, 0xca, 
       0x3, 0xca, 0x3, 0xca, 0x5, 0xca, 0x11b1, 0xa, 0xca, 0x3, 0xca, 0x5, 
       0xca, 0x11b4, 0xa, 0xca, 0x3, 0xca, 0x5, 0xca, 0x11b7, 0xa, 0xca, 
       0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 
       0x3, 0xcb, 0x5, 0xcb, 0x11c0, 0xa, 0xcb, 0x3, 0xcc, 0x3, 0xcc, 0x5, 
       0xcc, 0x11c4, 0xa, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 
       0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 
       0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 
       0x3, 0xce, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x7, 0xcf, 0x11e0, 0xa, 
       0xcf, 0xc, 0xcf, 0xe, 0xcf, 0x11e3, 0xb, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0x11e9, 0xa, 0xcf, 0x3, 0xcf, 0x3, 
       0xcf, 0x5, 0xcf, 0x11ed, 0xa, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 0x11f4, 0xa, 0xcf, 0x3, 0xcf, 0x5, 
       0xcf, 0x11f7, 0xa, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x5, 0xcf, 
       0x11fc, 0xa, 0xcf, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x1206, 0xa, 0xd0, 
       0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x120a, 0xa, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x1210, 0xa, 0xd0, 0x3, 0xd0, 
       0x5, 0xd0, 0x1213, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x1220, 0xa, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 
       0x1223, 0xa, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x1226, 0xa, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x122a, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 
       0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x1231, 0xa, 0xd0, 0x3, 
       0xd0, 0x5, 0xd0, 0x1234, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 
       0x3, 0xd0, 0x5, 0xd0, 0x123a, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x124c, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 
       0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x1254, 0xa, 
       0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x5, 0xd0, 0x125c, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 
       0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x1264, 0xa, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 
       0xd0, 0x1272, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x1276, 
       0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x127a, 0xa, 0xd0, 0x3, 
       0xd0, 0x5, 0xd0, 0x127d, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 
       0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 
       0x1287, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x128f, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 
       0x5, 0xd0, 0x1293, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x129a, 0xa, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 
       0x129d, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x7, 0xd0, 0x12a4, 0xa, 0xd0, 0xc, 0xd0, 0xe, 0xd0, 0x12a7, 
       0xb, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x12ac, 0xa, 
       0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x12b2, 
       0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 
       0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x12bc, 0xa, 0xd0, 0x5, 
       0xd0, 0x12be, 0xa, 0xd0, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 
       0x5, 0xd1, 0x12c4, 0xa, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0x12c7, 0xa, 
       0xd1, 0x3, 0xd1, 0x5, 0xd1, 0x12ca, 0xa, 0xd1, 0x3, 0xd2, 0x3, 0xd2, 
       0x3, 0xd2, 0x3, 0xd2, 0x5, 0xd2, 0x12d0, 0xa, 0xd2, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0x12de, 
       0xa, 0xd3, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd5, 0x3, 0xd5, 
       0x3, 0xd5, 0x3, 0xd5, 0x3, 0xd5, 0x7, 0xd5, 0x12e8, 0xa, 0xd5, 0xc, 
       0xd5, 0xe, 0xd5, 0x12eb, 0xb, 0xd5, 0x3, 0xd5, 0x3, 0xd5, 0x3, 0xd5, 
       0x3, 0xd5, 0x5, 0xd5, 0x12f1, 0xa, 0xd5, 0x3, 0xd5, 0x5, 0xd5, 0x12f4, 
       0xa, 0xd5, 0x3, 0xd5, 0x3, 0xd5, 0x3, 0xd5, 0x3, 0xd6, 0x3, 0xd6, 
       0x5, 0xd6, 0x12fb, 0xa, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x7, 
       0xd6, 0x1300, 0xa, 0xd6, 0xc, 0xd6, 0xe, 0xd6, 0x1303, 0xb, 0xd6, 
       0x3, 0xd7, 0x3, 0xd7, 0x5, 0xd7, 0x1307, 0xa, 0xd7, 0x3, 0xd7, 0x6, 
       0xd7, 0x130a, 0xa, 0xd7, 0xd, 0xd7, 0xe, 0xd7, 0x130b, 0x3, 0xd8, 
       0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 
       0x7, 0xd8, 0x1315, 0xa, 0xd8, 0xc, 0xd8, 0xe, 0xd8, 0x1318, 0xb, 
       0xd8, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xda, 0x3, 
       0xda, 0x3, 0xdb, 0x3, 0xdb, 0x5, 0xdb, 0x1322, 0xa, 0xdb, 0x3, 0xdb, 
       0x3, 0xdb, 0x3, 0xdb, 0x3, 0xdb, 0x5, 0xdb, 0x1328, 0xa, 0xdb, 0x3, 
       0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x5, 0xdc, 0x132d, 0xa, 0xdc, 0x3, 0xdc, 
       0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x5, 0xdc, 0x1333, 0xa, 0xdc, 0x3, 
       0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 
       0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x5, 0xdc, 0x133f, 0xa, 0xdc, 
       0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 
       0x3, 0xdc, 0x5, 0xdc, 0x1348, 0xa, 0xdc, 0x5, 0xdc, 0x134a, 0xa, 
       0xdc, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x5, 
       0xdd, 0x1351, 0xa, 0xdd, 0x3, 0xdd, 0x5, 0xdd, 0x1354, 0xa, 0xdd, 
       0x3, 0xdd, 0x5, 0xdd, 0x1357, 0xa, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x3, 
       0xdd, 0x3, 0xdd, 0x5, 0xdd, 0x135d, 0xa, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 
       0x5, 0xdd, 0x1361, 0xa, 0xdd, 0x3, 0xde, 0x3, 0xde, 0x3, 0xde, 0x3, 
       0xde, 0x5, 0xde, 0x1367, 0xa, 0xde, 0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 
       0x3, 0xdf, 0x3, 0xdf, 0x3, 0xdf, 0x5, 0xdf, 0x136f, 0xa, 0xdf, 0x3, 
       0xdf, 0x3, 0xdf, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe1, 0x3, 
       0xe1, 0x3, 0xe1, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 
       0xe2, 0x5, 0xe2, 0x137e, 0xa, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 
       0x5, 0xe2, 0x1383, 0xa, 0xe2, 0x3, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x3, 
       0xe3, 0x5, 0xe3, 0x1389, 0xa, 0xe3, 0x3, 0xe4, 0x3, 0xe4, 0x3, 0xe4, 
       0x3, 0xe4, 0x5, 0xe4, 0x138f, 0xa, 0xe4, 0x3, 0xe5, 0x3, 0xe5, 0x3, 
       0xe5, 0x5, 0xe5, 0x1394, 0xa, 0xe5, 0x5, 0xe5, 0x1396, 0xa, 0xe5, 
       0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe6, 0x5, 0xe6, 
       0x139d, 0xa, 0xe6, 0x3, 0xe6, 0x5, 0xe6, 0x13a0, 0xa, 0xe6, 0x3, 
       0xe7, 0x3, 0xe7, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe9, 0x3, 0xe9, 0x3, 
       0xe9, 0x3, 0xe9, 0x5, 0xe9, 0x13aa, 0xa, 0xe9, 0x3, 0xea, 0x3, 0xea, 
       0x5, 0xea, 0x13ae, 0xa, 0xea, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xec, 0x3, 
       0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 
       0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 0xec, 0x3, 
       0xec, 0x6, 0xec, 0x13c0, 0xa, 0xec, 0xd, 0xec, 0xe, 0xec, 0x13c1, 
       0x3, 0xed, 0x3, 0xed, 0x3, 0xed, 0x3, 0xed, 0x3, 0xed, 0x5, 0xed, 
       0x13c9, 0xa, 0xed, 0x5, 0xed, 0x13cb, 0xa, 0xed, 0x3, 0xee, 0x3, 
       0xee, 0x3, 0xee, 0x6, 0xee, 0x13d0, 0xa, 0xee, 0xd, 0xee, 0xe, 0xee, 
       0x13d1, 0x5, 0xee, 0x13d4, 0xa, 0xee, 0x3, 0xef, 0x3, 0xef, 0x5, 
       0xef, 0x13d8, 0xa, 0xef, 0x3, 0xf0, 0x3, 0xf0, 0x3, 0xf0, 0x5, 0xf0, 
       0x13dd, 0xa, 0xf0, 0x3, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x3, 
       0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 0x5, 
       0xf1, 0x13e9, 0xa, 0xf1, 0x3, 0xf2, 0x3, 0xf2, 0x3, 0xf2, 0x5, 0xf2, 
       0x13ee, 0xa, 0xf2, 0x3, 0xf3, 0x3, 0xf3, 0x3, 0xf4, 0x3, 0xf4, 0x5, 
       0xf4, 0x13f4, 0xa, 0xf4, 0x3, 0xf5, 0x5, 0xf5, 0x13f7, 0xa, 0xf5, 
       0x3, 0xf5, 0x3, 0xf5, 0x5, 0xf5, 0x13fb, 0xa, 0xf5, 0x3, 0xf5, 0x6, 
       0xf5, 0x13fe, 0xa, 0xf5, 0xd, 0xf5, 0xe, 0xf5, 0x13ff, 0x3, 0xf5, 
       0x5, 0xf5, 0x1403, 0xa, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x5, 0xf5, 0x1407, 
       0xa, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x5, 0xf5, 0x140b, 0xa, 0xf5, 0x5, 
       0xf5, 0x140d, 0xa, 0xf5, 0x3, 0xf6, 0x3, 0xf6, 0x3, 0xf7, 0x5, 0xf7, 
       0x1412, 0xa, 0xf7, 0x3, 0xf7, 0x3, 0xf7, 0x3, 0xf8, 0x3, 0xf8, 0x5, 
       0xf8, 0x1418, 0xa, 0xf8, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 
       0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 0x5, 0xf9, 0x1422, 0xa, 
       0xf9, 0x3, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x1426, 0xa, 0xfa, 0x3, 0xfa, 
       0x5, 0xfa, 0x1429, 0xa, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x5, 
       0xfa, 0x142e, 0xa, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x1432, 
       0xa, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x1436, 0xa, 0xfa, 0x3, 
       0xfa, 0x5, 0xfa, 0x1439, 0xa, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x143c, 
       0xa, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x1440, 0xa, 0xfa, 0x3, 
       0xfa, 0x5, 0xfa, 0x1443, 0xa, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x1446, 
       0xa, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x144a, 0xa, 0xfa, 0x3, 
       0xfa, 0x5, 0xfa, 0x144d, 0xa, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x1450, 
       0xa, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x1455, 0xa, 
       0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x7, 
       0xfa, 0x145c, 0xa, 0xfa, 0xc, 0xfa, 0xe, 0xfa, 0x145f, 0xb, 0xfa, 
       0x3, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x1463, 0xa, 0xfa, 0x3, 0xfa, 0x3, 
       0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x1468, 0xa, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 
       0x5, 0xfa, 0x146c, 0xa, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 0x146f, 0xa, 
       0xfa, 0x3, 0xfb, 0x3, 0xfb, 0x5, 0xfb, 0x1473, 0xa, 0xfb, 0x3, 0xfb, 
       0x3, 0xfb, 0x5, 0xfb, 0x1477, 0xa, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x3, 
       0xfb, 0x5, 0xfb, 0x147c, 0xa, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 0x3, 0xfb, 
       0x3, 0xfb, 0x3, 0xfb, 0x5, 0xfb, 0x1483, 0xa, 0xfb, 0x3, 0xfb, 0x3, 
       0xfb, 0x5, 0xfb, 0x1487, 0xa, 0xfb, 0x5, 0xfb, 0x1489, 0xa, 0xfb, 
       0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfd, 0x3, 0xfd, 0x3, 0xfd, 0x3, 0xfd, 
       0x3, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 
       0x3, 0xff, 0x3, 0xff, 0x3, 0xff, 0x3, 0xff, 0x5, 0xff, 0x149b, 0xa, 
       0xff, 0x3, 0xff, 0x3, 0xff, 0x3, 0x100, 0x3, 0x100, 0x3, 0x100, 0x7, 
       0x100, 0x14a2, 0xa, 0x100, 0xc, 0x100, 0xe, 0x100, 0x14a5, 0xb, 0x100, 
       0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 0x7, 0x101, 0x14aa, 0xa, 0x101, 
       0xc, 0x101, 0xe, 0x101, 0x14ad, 0xb, 0x101, 0x3, 0x102, 0x3, 0x102, 
       0x3, 0x102, 0x3, 0x102, 0x3, 0x102, 0x3, 0x102, 0x3, 0x102, 0x3, 
       0x102, 0x3, 0x102, 0x3, 0x102, 0x3, 0x102, 0x3, 0x102, 0x7, 0x102, 
       0x14bb, 0xa, 0x102, 0xc, 0x102, 0xe, 0x102, 0x14be, 0xb, 0x102, 0x3, 
       0x103, 0x3, 0x103, 0x3, 0x103, 0x3, 0x103, 0x7, 0x103, 0x14c4, 0xa, 
       0x103, 0xc, 0x103, 0xe, 0x103, 0x14c7, 0xb, 0x103, 0x3, 0x103, 0x3, 
       0x103, 0x3, 0x104, 0x3, 0x104, 0x3, 0x104, 0x7, 0x104, 0x14ce, 0xa, 
       0x104, 0xc, 0x104, 0xe, 0x104, 0x14d1, 0xb, 0x104, 0x3, 0x105, 0x3, 
       0x105, 0x3, 0x105, 0x7, 0x105, 0x14d6, 0xa, 0x105, 0xc, 0x105, 0xe, 
       0x105, 0x14d9, 0xb, 0x105, 0x3, 0x106, 0x3, 0x106, 0x3, 0x106, 0x7, 
       0x106, 0x14de, 0xa, 0x106, 0xc, 0x106, 0xe, 0x106, 0x14e1, 0xb, 0x106, 
       0x3, 0x107, 0x3, 0x107, 0x3, 0x107, 0x7, 0x107, 0x14e6, 0xa, 0x107, 
       0xc, 0x107, 0xe, 0x107, 0x14e9, 0xb, 0x107, 0x3, 0x108, 0x3, 0x108, 
       0x5, 0x108, 0x14ed, 0xa, 0x108, 0x3, 0x109, 0x3, 0x109, 0x3, 0x109, 
       0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10b, 0x3, 
       0x10b, 0x3, 0x10b, 0x3, 0x10b, 0x3, 0x10b, 0x5, 0x10b, 0x14fb, 0xa, 
       0x10b, 0x3, 0x10b, 0x3, 0x10b, 0x3, 0x10b, 0x3, 0x10b, 0x5, 0x10b, 
       0x1501, 0xa, 0x10b, 0x3, 0x10b, 0x3, 0x10b, 0x5, 0x10b, 0x1505, 0xa, 
       0x10b, 0x3, 0x10b, 0x3, 0x10b, 0x5, 0x10b, 0x1509, 0xa, 0x10b, 0x3, 
       0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x6, 0x10c, 0x152d, 0xa, 0x10c, 0xd, 0x10c, 0xe, 0x10c, 0x152e, 
       0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x1533, 0xa, 0x10c, 0x3, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x3, 0x10c, 0x6, 0x10c, 0x153d, 0xa, 0x10c, 0xd, 0x10c, 0xe, 
       0x10c, 0x153e, 0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x1543, 0xa, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x154c, 0xa, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 
       0x1554, 0xa, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 
       0x1559, 0xa, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x1561, 0xa, 0x10c, 0x3, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x1566, 0xa, 0x10c, 0x3, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x156b, 0xa, 0x10c, 0x5, 0x10c, 
       0x156d, 0xa, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x1576, 0xa, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x157b, 0xa, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x5, 0x10c, 0x1583, 0xa, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x5, 0x10c, 0x1588, 0xa, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x1590, 0xa, 
       0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 
       0x3, 0x10c, 0x5, 0x10c, 0x1598, 0xa, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 
       0x159b, 0xa, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 
       0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 0x15a5, 
       0xa, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 
       0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x3, 0x10c, 0x5, 0x10c, 
       0x15b0, 0xa, 0x10c, 0x3, 0x10d, 0x3, 0x10d, 0x3, 0x10d, 0x5, 0x10d, 
       0x15b5, 0xa, 0x10d, 0x3, 0x10d, 0x3, 0x10d, 0x3, 0x10d, 0x5, 0x10d, 
       0x15ba, 0xa, 0x10d, 0x7, 0x10d, 0x15bc, 0xa, 0x10d, 0xc, 0x10d, 0xe, 
       0x10d, 0x15bf, 0xb, 0x10d, 0x3, 0x10d, 0x3, 0x10d, 0x3, 0x10d, 0x3, 
       0x10d, 0x3, 0x10d, 0x5, 0x10d, 0x15c6, 0xa, 0x10d, 0x3, 0x10e, 0x3, 
       0x10e, 0x3, 0x10e, 0x5, 0x10e, 0x15cb, 0xa, 0x10e, 0x3, 0x10e, 0x3, 
       0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 
       0x5, 0x10e, 0x15d4, 0xa, 0x10e, 0x3, 0x10e, 0x5, 0x10e, 0x15d7, 0xa, 
       0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 
       0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x5, 
       0x10e, 0x15e3, 0xa, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 
       0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x5, 0x10e, 0x15eb, 0xa, 0x10e, 0x3, 
       0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 
       0x7, 0x10e, 0x15f3, 0xa, 0x10e, 0xc, 0x10e, 0xe, 0x10e, 0x15f6, 0xb, 
       0x10e, 0x5, 0x10e, 0x15f8, 0xa, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x5, 
       0x10e, 0x15fc, 0xa, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x5, 0x10e, 0x1600, 
       0xa, 0x10e, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 
       0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 
       0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 
       0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 0x3, 0x10f, 
       0x3, 0x10f, 0x5, 0x10f, 0x1618, 0xa, 0x10f, 0x3, 0x110, 0x3, 0x110, 
       0x3, 0x110, 0x3, 0x110, 0x5, 0x110, 0x161e, 0xa, 0x110, 0x3, 0x110, 
       0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x3, 0x110, 0x5, 0x110, 0x1625, 
       0xa, 0x110, 0x7, 0x110, 0x1627, 0xa, 0x110, 0xc, 0x110, 0xe, 0x110, 
       0x162a, 0xb, 0x110, 0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 
       0x5, 0x111, 0x1630, 0xa, 0x111, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 
       0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x5, 0x112, 0x1638, 0xa, 0x112, 
       0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x5, 0x112, 0x163d, 0xa, 0x112, 
       0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 0x112, 0x7, 0x112, 0x1643, 
       0xa, 0x112, 0xc, 0x112, 0xe, 0x112, 0x1646, 0xb, 0x112, 0x3, 0x113, 
       0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x164b, 0xa, 0x113, 0x3, 0x113, 
       0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 
       0x113, 0x3, 0x113, 0x5, 0x113, 0x1655, 0xa, 0x113, 0x3, 0x113, 0x3, 
       0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 
       0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0x1662, 
       0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 
       0x113, 0x1668, 0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 
       0x113, 0x5, 0x113, 0x166e, 0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 
       0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 
       0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 
       0x113, 0x5, 0x113, 0x167e, 0xa, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 
       0x113, 0x3, 0x113, 0x5, 0x113, 0x1684, 0xa, 0x113, 0x7, 0x113, 0x1686, 
       0xa, 0x113, 0xc, 0x113, 0xe, 0x113, 0x1689, 0xb, 0x113, 0x3, 0x114, 
       0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 
       0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 
       0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x5, 0x114, 0x169b, 
       0xa, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 
       0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x5, 0x114, 0x16a5, 0xa, 
       0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 
       0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x7, 0x114, 0x16af, 0xa, 0x114, 
       0xc, 0x114, 0xe, 0x114, 0x16b2, 0xb, 0x114, 0x3, 0x115, 0x3, 0x115, 
       0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 
       0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 
       0x3, 0x116, 0x3, 0x116, 0x3, 0x116, 0x5, 0x116, 0x16c4, 0xa, 0x116, 
       0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 0x3, 
       0x117, 0x3, 0x117, 0x5, 0x117, 0x16cd, 0xa, 0x117, 0x3, 0x118, 0x3, 
       0x118, 0x3, 0x118, 0x3, 0x118, 0x3, 0x118, 0x3, 0x118, 0x3, 0x118, 
       0x5, 0x118, 0x16d6, 0xa, 0x118, 0x3, 0x119, 0x3, 0x119, 0x3, 0x11a, 
       0x3, 0x11a, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11c, 0x3, 0x11c, 0x3, 
       0x11d, 0x3, 0x11d, 0x3, 0x11e, 0x3, 0x11e, 0x3, 0x11f, 0x3, 0x11f, 
       0x3, 0x120, 0x3, 0x120, 0x3, 0x120, 0x2, 0x5, 0x222, 0x224, 0x226, 
       0x121, 0x2, 0x4, 0x6, 0x8, 0xa, 0xc, 0xe, 0x10, 0x12, 0x14, 0x16, 
       0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 
       0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 
       0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 
       0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 
       0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 
       0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 
       0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 
       0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 
       0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 
       0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 
       0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x100, 0x102, 0x104, 0x106, 0x108, 
       0x10a, 0x10c, 0x10e, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11a, 0x11c, 
       0x11e, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12a, 0x12c, 0x12e, 0x130, 
       0x132, 0x134, 0x136, 0x138, 0x13a, 0x13c, 0x13e, 0x140, 0x142, 0x144, 
       0x146, 0x148, 0x14a, 0x14c, 0x14e, 0x150, 0x152, 0x154, 0x156, 0x158, 
       0x15a, 0x15c, 0x15e, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16a, 0x16c, 
       0x16e, 0x170, 0x172, 0x174, 0x176, 0x178, 0x17a, 0x17c, 0x17e, 0x180, 
       0x182, 0x184, 0x186, 0x188, 0x18a, 0x18c, 0x18e, 0x190, 0x192, 0x194, 
       0x196, 0x198, 0x19a, 0x19c, 0x19e, 0x1a0, 0x1a2, 0x1a4, 0x1a6, 0x1a8, 
       0x1aa, 0x1ac, 0x1ae, 0x1b0, 0x1b2, 0x1b4, 0x1b6, 0x1b8, 0x1ba, 0x1bc, 
       0x1be, 0x1c0, 0x1c2, 0x1c4, 0x1c6, 0x1c8, 0x1ca, 0x1cc, 0x1ce, 0x1d0, 
       0x1d2, 0x1d4, 0x1d6, 0x1d8, 0x1da, 0x1dc, 0x1de, 0x1e0, 0x1e2, 0x1e4, 
       0x1e6, 0x1e8, 0x1ea, 0x1ec, 0x1ee, 0x1f0, 0x1f2, 0x1f4, 0x1f6, 0x1f8, 
       0x1fa, 0x1fc, 0x1fe, 0x200, 0x202, 0x204, 0x206, 0x208, 0x20a, 0x20c, 
       0x20e, 0x210, 0x212, 0x214, 0x216, 0x218, 0x21a, 0x21c, 0x21e, 0x220, 
       0x222, 0x224, 0x226, 0x228, 0x22a, 0x22c, 0x22e, 0x230, 0x232, 0x234, 
       0x236, 0x238, 0x23a, 0x23c, 0x23e, 0x2, 0x74, 0x4, 0x2, 0x23, 0x23, 
       0x83, 0x83, 0x4, 0x2, 0x1a0, 0x1a0, 0x1a5, 0x1a5, 0x5, 0x2, 0x3d, 
       0x3d, 0x89, 0x89, 0x9d, 0x9d, 0x5, 0x2, 0x26, 0x26, 0x121, 0x121, 
       0x15f, 0x15f, 0x6, 0x2, 0x26, 0x26, 0x140, 0x140, 0x19f, 0x19f, 0x1e3, 
       0x1e3, 0x4, 0x2, 0x197, 0x197, 0x3c0, 0x3c0, 0x4, 0x2, 0x43, 0x43, 
       0x7c, 0x7c, 0x4, 0x2, 0xe, 0xe, 0xf9, 0xf9, 0x5, 0x2, 0x28, 0x28, 
       0x49, 0x49, 0xa0, 0xa0, 0x4, 0x2, 0x14d, 0x14d, 0x1b7, 0x1b7, 0x5, 
       0x2, 0x190, 0x190, 0x206, 0x206, 0x20c, 0x20c, 0x4, 0x2, 0x127, 0x127, 
       0x163, 0x163, 0x4, 0x2, 0x109, 0x109, 0x171, 0x171, 0x4, 0x2, 0x107, 
       0x107, 0x156, 0x156, 0x5, 0x2, 0x44, 0x44, 0x48, 0x48, 0x6d, 0x6d, 
       0x5, 0x2, 0x26, 0x26, 0x131, 0x131, 0x14b, 0x14b, 0x5, 0x2, 0x26, 
       0x26, 0x12d, 0x12d, 0x265, 0x265, 0x4, 0x2, 0x45, 0x45, 0x4f, 0x4f, 
       0x5, 0x2, 0x14f, 0x14f, 0x1ae, 0x1ae, 0x1e5, 0x1e5, 0x4, 0x2, 0x3d, 
       0x3d, 0x89, 0x89, 0x3, 0x2, 0x3b6, 0x3b7, 0x5, 0x2, 0x14a, 0x14a, 
       0x16c, 0x16c, 0x19d, 0x19d, 0x4, 0x2, 0x26, 0x26, 0x3b6, 0x3b7, 0x8, 
       0x2, 0x26, 0x26, 0x117, 0x117, 0x119, 0x119, 0x131, 0x131, 0x14b, 
       0x14b, 0x1c4, 0x1c4, 0x4, 0x2, 0x74, 0x74, 0x170, 0x170, 0x3, 0x2, 
       0x3b7, 0x3b8, 0x4, 0x2, 0x7, 0x7, 0x2e, 0x2e, 0x4, 0x2, 0xc, 0xc, 
       0x97, 0x97, 0x4, 0x2, 0xa8, 0xa8, 0x21c, 0x21c, 0x4, 0x2, 0x13, 0x13, 
       0x7e, 0x7e, 0x5, 0x2, 0x27, 0x27, 0x41, 0x41, 0x5c, 0x5c, 0x4, 0x2, 
       0x5c, 0x5c, 0x11b, 0x11b, 0x4, 0x2, 0x113, 0x113, 0x147, 0x147, 0x4, 
       0x2, 0x58, 0x58, 0x1db, 0x1db, 0x4, 0x2, 0x27, 0x27, 0x5c, 0x5c, 
       0x4, 0x2, 0x8, 0x8, 0x2c, 0x2c, 0x4, 0x2, 0xa4, 0xa4, 0x217, 0x217, 
       0x6, 0x2, 0x14a, 0x14a, 0x16c, 0x16c, 0x19c, 0x19c, 0x1ba, 0x1ba, 
       0x4, 0x2, 0x14a, 0x14a, 0x19c, 0x19c, 0x4, 0x2, 0xd, 0xd, 0x29, 0x29, 
       0x5, 0x2, 0x3a, 0x3a, 0x43, 0x43, 0xa2, 0xa2, 0x4, 0x2, 0x20, 0x20, 
       0x47, 0x47, 0x4, 0x2, 0x54, 0x54, 0x81, 0x81, 0x4, 0x2, 0x8, 0x8, 
       0x2c, 0x2d, 0x3, 0x2, 0x1f2, 0x1f3, 0x4, 0x2, 0x152, 0x152, 0x1e1, 
       0x1e1, 0x4, 0x2, 0xbe, 0xbe, 0x174, 0x174, 0x4, 0x2, 0xe, 0xe, 0x97, 
       0x97, 0x7, 0x2, 0x5d, 0x5d, 0x179, 0x17a, 0x17c, 0x17c, 0x180, 0x188, 
       0x1c6, 0x1c6, 0x6, 0x2, 0x176, 0x177, 0x17b, 0x17b, 0x17d, 0x17e, 
       0x1c7, 0x1c7, 0x5, 0x2, 0x5e, 0x5e, 0x175, 0x175, 0x17f, 0x17f, 0x4, 
       0x2, 0x165, 0x165, 0x1f4, 0x1f4, 0x4, 0x2, 0x1ee, 0x1ee, 0x1f0, 0x1f0, 
       0x4, 0x2, 0x103, 0x103, 0x1f5, 0x1f5, 0x4, 0x2, 0x4e, 0x4e, 0x1d5, 
       0x1d5, 0x4, 0x2, 0x3c0, 0x3c0, 0x3cb, 0x3cb, 0x4, 0x2, 0x2e, 0x2e, 
       0x125, 0x125, 0x5, 0x2, 0x1d, 0x1d, 0x35, 0x35, 0x9b, 0x9b, 0x5, 
       0x2, 0x72, 0x72, 0x94, 0x94, 0x150, 0x150, 0x4, 0x2, 0x5a, 0x5a, 
       0x9e, 0x9e, 0x4, 0x2, 0x10f, 0x10f, 0x1e6, 0x1e6, 0x4, 0x2, 0x24, 
       0x24, 0x219, 0x219, 0x4, 0x2, 0x1a3, 0x1a3, 0x1b1, 0x1b1, 0x4, 0x2, 
       0x65, 0x65, 0x171, 0x171, 0x4, 0x2, 0x143, 0x143, 0x1c0, 0x1c0, 0x6, 
       0x2, 0xb0, 0xb0, 0xb2, 0xb2, 0xb5, 0xb5, 0x1fd, 0x1fd, 0x4, 0x2, 
       0x104, 0x104, 0x1c8, 0x1c8, 0x4, 0x2, 0x1fa, 0x1fa, 0x218, 0x218, 
       0x4, 0x2, 0x3c, 0x3c, 0x44, 0x44, 0x8, 0x2, 0x72, 0x72, 0x94, 0x94, 
       0x99, 0x99, 0x13c, 0x13c, 0x150, 0x150, 0x219, 0x219, 0x4, 0x2, 0x196, 
       0x196, 0x1fa, 0x1fa, 0x4, 0x2, 0x139, 0x139, 0x21b, 0x21b, 0x4, 0x2, 
       0x72, 0x72, 0x150, 0x150, 0x5, 0x2, 0x45, 0x45, 0x50, 0x50, 0x15d, 
       0x15d, 0x4, 0x2, 0x11c, 0x11c, 0x1bf, 0x1bf, 0x8, 0x2, 0xbe, 0xbe, 
       0x136, 0x136, 0x138, 0x138, 0x151, 0x151, 0x1c5, 0x1c5, 0x1e7, 0x1e7, 
       0x4, 0x2, 0x29, 0x2a, 0x36, 0x36, 0x4, 0x2, 0x169, 0x169, 0x208, 
       0x208, 0x3, 0x2, 0x3cb, 0x3cc, 0x3, 0x2, 0x260, 0x26a, 0x4, 0x2, 
       0x3b6, 0x3b8, 0x3c1, 0x3c1, 0x4, 0x2, 0x37, 0x37, 0x9a, 0x9a, 0x4, 
       0x2, 0x66, 0x66, 0x3c4, 0x3c4, 0x4, 0x2, 0xbc, 0xbd, 0xc4, 0xc7, 
       0x3, 0x2, 0xac, 0xb1, 0x3, 0x2, 0xb2, 0xb4, 0x3, 0x2, 0xb5, 0xb6, 
       0x5, 0x2, 0xb7, 0xb7, 0xbb, 0xbb, 0xc0, 0xc3, 0x5, 0x2, 0xb8, 0xba, 
       0xbe, 0xbf, 0x105, 0x105, 0x4, 0x2, 0x86, 0x86, 0xc8, 0xc8, 0x4, 
       0x2, 0xbe, 0xbe, 0x19a, 0x19a, 0x4, 0x2, 0x9f, 0x9f, 0x1e4, 0x1e4, 
       0x3, 0x2, 0x26f, 0x275, 0x4, 0x2, 0x21, 0x21, 0xe4, 0xe7, 0x3, 0x2, 
       0xf0, 0xf1, 0x5, 0x2, 0x10, 0x10, 0x52, 0x52, 0x98, 0x98, 0x4, 0x2, 
       0xbc, 0xbc, 0xbe, 0xbe, 0x4, 0x2, 0xb7, 0xb8, 0xba, 0xba, 0x5, 0x2, 
       0xd, 0xd, 0x29, 0x29, 0x329, 0x329, 0x5, 0x2, 0xd4, 0xd4, 0xda, 0xdb, 
       0xe0, 0xe0, 0x5, 0x2, 0xd5, 0xd7, 0xdc, 0xdf, 0xe1, 0xe3, 0x4, 0x2, 
       0x64, 0x64, 0x3ab, 0x3ab, 0x5, 0x2, 0x37, 0x37, 0x9a, 0x9a, 0x210, 
       0x210, 0x4, 0x2, 0x78, 0x78, 0x82, 0x82, 0x5, 0x2, 0x8, 0x8, 0xfc, 
       0xfc, 0x1ea, 0x1ea, 0x5, 0x2, 0x64, 0x64, 0x3a4, 0x3a5, 0x3ab, 0x3ac, 
       0x3, 0x2, 0x3a1, 0x3a7, 0x3, 0x2, 0x238, 0x25f, 0x3, 0x2, 0x26b, 
       0x26e, 0x3, 0x2, 0x22f, 0x237, 0x3, 0x2, 0x227, 0x22e, 0x5, 0x2, 
       0xb7, 0xbb, 0xc5, 0xc5, 0xc8, 0xc8, 0x3c, 0x2, 0xf8, 0xf9, 0xfb, 
       0x105, 0x107, 0x107, 0x109, 0x10a, 0x10d, 0x10f, 0x111, 0x119, 0x11b, 
       0x11e, 0x120, 0x121, 0x123, 0x124, 0x127, 0x128, 0x12a, 0x132, 0x135, 
       0x137, 0x139, 0x141, 0x144, 0x144, 0x147, 0x147, 0x14a, 0x14b, 0x14f, 
       0x150, 0x152, 0x153, 0x156, 0x156, 0x158, 0x158, 0x15a, 0x15a, 0x15c, 
       0x15c, 0x15e, 0x160, 0x163, 0x163, 0x167, 0x168, 0x16a, 0x16c, 0x16e, 
       0x174, 0x189, 0x18e, 0x190, 0x191, 0x193, 0x193, 0x195, 0x19a, 0x19d, 
       0x1a3, 0x1a5, 0x1a6, 0x1a9, 0x1ab, 0x1ad, 0x1b1, 0x1b5, 0x1b6, 0x1b9, 
       0x1b9, 0x1bb, 0x1c1, 0x1c3, 0x1c4, 0x1c8, 0x1cb, 0x1d3, 0x1d3, 0x1d6, 
       0x1d8, 0x1da, 0x1e6, 0x1e8, 0x1ea, 0x1ec, 0x1ec, 0x1f1, 0x1f3, 0x1f5, 
       0x1fa, 0x1fc, 0x1fc, 0x1fe, 0x200, 0x204, 0x207, 0x209, 0x209, 0x20b, 
       0x20e, 0x210, 0x210, 0x212, 0x213, 0x217, 0x21b, 0x21d, 0x21f, 0x221, 
       0x221, 0x265, 0x265, 0xa, 0x2, 0x54, 0x54, 0x81, 0x81, 0xb7, 0xb9, 
       0xbb, 0xbb, 0xd8, 0xd8, 0xef, 0xef, 0x227, 0x22e, 0x26f, 0x397, 0x2, 
       0x1ae8, 0x2, 0x241, 0x3, 0x2, 0x2, 0x2, 0x4, 0x253, 0x3, 0x2, 0x2, 
       0x2, 0x6, 0x268, 0x3, 0x2, 0x2, 0x2, 0x8, 0x26a, 0x3, 0x2, 0x2, 0x2, 
       0xa, 0x28f, 0x3, 0x2, 0x2, 0x2, 0xc, 0x29b, 0x3, 0x2, 0x2, 0x2, 0xe, 
       0x2a6, 0x3, 0x2, 0x2, 0x2, 0x10, 0x2b7, 0x3, 0x2, 0x2, 0x2, 0x12, 
       0x2bc, 0x3, 0x2, 0x2, 0x2, 0x14, 0x2c8, 0x3, 0x2, 0x2, 0x2, 0x16, 
       0x2e3, 0x3, 0x2, 0x2, 0x2, 0x18, 0x2e9, 0x3, 0x2, 0x2, 0x2, 0x1a, 
       0x2eb, 0x3, 0x2, 0x2, 0x2, 0x1c, 0x2f7, 0x3, 0x2, 0x2, 0x2, 0x1e, 
       0x319, 0x3, 0x2, 0x2, 0x2, 0x20, 0x33a, 0x3, 0x2, 0x2, 0x2, 0x22, 
       0x36d, 0x3, 0x2, 0x2, 0x2, 0x24, 0x387, 0x3, 0x2, 0x2, 0x2, 0x26, 
       0x3a3, 0x3, 0x2, 0x2, 0x2, 0x28, 0x404, 0x3, 0x2, 0x2, 0x2, 0x2a, 
       0x406, 0x3, 0x2, 0x2, 0x2, 0x2c, 0x418, 0x3, 0x2, 0x2, 0x2, 0x2e, 
       0x455, 0x3, 0x2, 0x2, 0x2, 0x30, 0x468, 0x3, 0x2, 0x2, 0x2, 0x32, 
       0x49d, 0x3, 0x2, 0x2, 0x2, 0x34, 0x49f, 0x3, 0x2, 0x2, 0x2, 0x36, 
       0x4cb, 0x3, 0x2, 0x2, 0x2, 0x38, 0x4d1, 0x3, 0x2, 0x2, 0x2, 0x3a, 
       0x4d3, 0x3, 0x2, 0x2, 0x2, 0x3c, 0x4e8, 0x3, 0x2, 0x2, 0x2, 0x3e, 
       0x4ea, 0x3, 0x2, 0x2, 0x2, 0x40, 0x4f8, 0x3, 0x2, 0x2, 0x2, 0x42, 
       0x4fa, 0x3, 0x2, 0x2, 0x2, 0x44, 0x4fe, 0x3, 0x2, 0x2, 0x2, 0x46, 
       0x518, 0x3, 0x2, 0x2, 0x2, 0x48, 0x528, 0x3, 0x2, 0x2, 0x2, 0x4a, 
       0x52a, 0x3, 0x2, 0x2, 0x2, 0x4c, 0x53a, 0x3, 0x2, 0x2, 0x2, 0x4e, 
       0x53c, 0x3, 0x2, 0x2, 0x2, 0x50, 0x556, 0x3, 0x2, 0x2, 0x2, 0x52, 
       0x594, 0x3, 0x2, 0x2, 0x2, 0x54, 0x596, 0x3, 0x2, 0x2, 0x2, 0x56, 
       0x5a1, 0x3, 0x2, 0x2, 0x2, 0x58, 0x5a9, 0x3, 0x2, 0x2, 0x2, 0x5a, 
       0x5b7, 0x3, 0x2, 0x2, 0x2, 0x5c, 0x5d5, 0x3, 0x2, 0x2, 0x2, 0x5e, 
       0x66b, 0x3, 0x2, 0x2, 0x2, 0x60, 0x66d, 0x3, 0x2, 0x2, 0x2, 0x62, 
       0x697, 0x3, 0x2, 0x2, 0x2, 0x64, 0x6ae, 0x3, 0x2, 0x2, 0x2, 0x66, 
       0x6b0, 0x3, 0x2, 0x2, 0x2, 0x68, 0x70f, 0x3, 0x2, 0x2, 0x2, 0x6a, 
       0x760, 0x3, 0x2, 0x2, 0x2, 0x6c, 0x762, 0x3, 0x2, 0x2, 0x2, 0x6e, 
       0x789, 0x3, 0x2, 0x2, 0x2, 0x70, 0x792, 0x3, 0x2, 0x2, 0x2, 0x72, 
       0x799, 0x3, 0x2, 0x2, 0x2, 0x74, 0x7b0, 0x3, 0x2, 0x2, 0x2, 0x76, 
       0x7b9, 0x3, 0x2, 0x2, 0x2, 0x78, 0x7c8, 0x3, 0x2, 0x2, 0x2, 0x7a, 
       0x7df, 0x3, 0x2, 0x2, 0x2, 0x7c, 0x7f3, 0x3, 0x2, 0x2, 0x2, 0x7e, 
       0x945, 0x3, 0x2, 0x2, 0x2, 0x80, 0x947, 0x3, 0x2, 0x2, 0x2, 0x82, 
       0x94e, 0x3, 0x2, 0x2, 0x2, 0x84, 0x955, 0x3, 0x2, 0x2, 0x2, 0x86, 
       0x96b, 0x3, 0x2, 0x2, 0x2, 0x88, 0x973, 0x3, 0x2, 0x2, 0x2, 0x8a, 
       0x97a, 0x3, 0x2, 0x2, 0x2, 0x8c, 0x981, 0x3, 0x2, 0x2, 0x2, 0x8e, 
       0x988, 0x3, 0x2, 0x2, 0x2, 0x90, 0x994, 0x3, 0x2, 0x2, 0x2, 0x92, 
       0x99e, 0x3, 0x2, 0x2, 0x2, 0x94, 0x9a5, 0x3, 0x2, 0x2, 0x2, 0x96, 
       0x9b5, 0x3, 0x2, 0x2, 0x2, 0x98, 0x9c4, 0x3, 0x2, 0x2, 0x2, 0x9a, 
       0x9ca, 0x3, 0x2, 0x2, 0x2, 0x9c, 0x9d6, 0x3, 0x2, 0x2, 0x2, 0x9e, 
       0x9d8, 0x3, 0x2, 0x2, 0x2, 0xa0, 0x9df, 0x3, 0x2, 0x2, 0x2, 0xa2, 
       0x9e1, 0x3, 0x2, 0x2, 0x2, 0xa4, 0xa13, 0x3, 0x2, 0x2, 0x2, 0xa6, 
       0xa6f, 0x3, 0x2, 0x2, 0x2, 0xa8, 0xaaa, 0x3, 0x2, 0x2, 0x2, 0xaa, 
       0xb16, 0x3, 0x2, 0x2, 0x2, 0xac, 0xb1a, 0x3, 0x2, 0x2, 0x2, 0xae, 
       0xb2b, 0x3, 0x2, 0x2, 0x2, 0xb0, 0xb2d, 0x3, 0x2, 0x2, 0x2, 0xb2, 
       0xb33, 0x3, 0x2, 0x2, 0x2, 0xb4, 0xb35, 0x3, 0x2, 0x2, 0x2, 0xb6, 
       0xb53, 0x3, 0x2, 0x2, 0x2, 0xb8, 0xb8a, 0x3, 0x2, 0x2, 0x2, 0xba, 
       0xb93, 0x3, 0x2, 0x2, 0x2, 0xbc, 0xba7, 0x3, 0x2, 0x2, 0x2, 0xbe, 
       0xbb3, 0x3, 0x2, 0x2, 0x2, 0xc0, 0xbb7, 0x3, 0x2, 0x2, 0x2, 0xc2, 
       0xbd8, 0x3, 0x2, 0x2, 0x2, 0xc4, 0xbed, 0x3, 0x2, 0x2, 0x2, 0xc6, 
       0xbf7, 0x3, 0x2, 0x2, 0x2, 0xc8, 0xbfb, 0x3, 0x2, 0x2, 0x2, 0xca, 
       0xc14, 0x3, 0x2, 0x2, 0x2, 0xcc, 0xc3e, 0x3, 0x2, 0x2, 0x2, 0xce, 
       0xc40, 0x3, 0x2, 0x2, 0x2, 0xd0, 0xc7c, 0x3, 0x2, 0x2, 0x2, 0xd2, 
       0xc7e, 0x3, 0x2, 0x2, 0x2, 0xd4, 0xc88, 0x3, 0x2, 0x2, 0x2, 0xd6, 
       0xc92, 0x3, 0x2, 0x2, 0x2, 0xd8, 0xc94, 0x3, 0x2, 0x2, 0x2, 0xda, 
       0xca8, 0x3, 0x2, 0x2, 0x2, 0xdc, 0xcb9, 0x3, 0x2, 0x2, 0x2, 0xde, 
       0xcbf, 0x3, 0x2, 0x2, 0x2, 0xe0, 0xccf, 0x3, 0x2, 0x2, 0x2, 0xe2, 
       0xcd3, 0x3, 0x2, 0x2, 0x2, 0xe4, 0xcf9, 0x3, 0x2, 0x2, 0x2, 0xe6, 
       0xd37, 0x3, 0x2, 0x2, 0x2, 0xe8, 0xd39, 0x3, 0x2, 0x2, 0x2, 0xea, 
       0xd53, 0x3, 0x2, 0x2, 0x2, 0xec, 0xd57, 0x3, 0x2, 0x2, 0x2, 0xee, 
       0xd64, 0x3, 0x2, 0x2, 0x2, 0xf0, 0xd70, 0x3, 0x2, 0x2, 0x2, 0xf2, 
       0xd74, 0x3, 0x2, 0x2, 0x2, 0xf4, 0xd85, 0x3, 0x2, 0x2, 0x2, 0xf6, 
       0xd96, 0x3, 0x2, 0x2, 0x2, 0xf8, 0xd99, 0x3, 0x2, 0x2, 0x2, 0xfa, 
       0xda3, 0x3, 0x2, 0x2, 0x2, 0xfc, 0xda7, 0x3, 0x2, 0x2, 0x2, 0xfe, 
       0xdb1, 0x3, 0x2, 0x2, 0x2, 0x100, 0xdb4, 0x3, 0x2, 0x2, 0x2, 0x102, 
       0xdb9, 0x3, 0x2, 0x2, 0x2, 0x104, 0xdcd, 0x3, 0x2, 0x2, 0x2, 0x106, 
       0xdcf, 0x3, 0x2, 0x2, 0x2, 0x108, 0xde7, 0x3, 0x2, 0x2, 0x2, 0x10a, 
       0xdf0, 0x3, 0x2, 0x2, 0x2, 0x10c, 0xdf2, 0x3, 0x2, 0x2, 0x2, 0x10e, 
       0xe00, 0x3, 0x2, 0x2, 0x2, 0x110, 0xe0b, 0x3, 0x2, 0x2, 0x2, 0x112, 
       0xe11, 0x3, 0x2, 0x2, 0x2, 0x114, 0xe14, 0x3, 0x2, 0x2, 0x2, 0x116, 
       0xe1c, 0x3, 0x2, 0x2, 0x2, 0x118, 0xe35, 0x3, 0x2, 0x2, 0x2, 0x11a, 
       0xe41, 0x3, 0x2, 0x2, 0x2, 0x11c, 0xe44, 0x3, 0x2, 0x2, 0x2, 0x11e, 
       0xe64, 0x3, 0x2, 0x2, 0x2, 0x120, 0xe66, 0x3, 0x2, 0x2, 0x2, 0x122, 
       0xe68, 0x3, 0x2, 0x2, 0x2, 0x124, 0xe6a, 0x3, 0x2, 0x2, 0x2, 0x126, 
       0xe6c, 0x3, 0x2, 0x2, 0x2, 0x128, 0xe9a, 0x3, 0x2, 0x2, 0x2, 0x12a, 
       0xe9c, 0x3, 0x2, 0x2, 0x2, 0x12c, 0xeb0, 0x3, 0x2, 0x2, 0x2, 0x12e, 
       0xebe, 0x3, 0x2, 0x2, 0x2, 0x130, 0xec9, 0x3, 0x2, 0x2, 0x2, 0x132, 
       0xecb, 0x3, 0x2, 0x2, 0x2, 0x134, 0xed1, 0x3, 0x2, 0x2, 0x2, 0x136, 
       0xedb, 0x3, 0x2, 0x2, 0x2, 0x138, 0xedf, 0x3, 0x2, 0x2, 0x2, 0x13a, 
       0xee6, 0x3, 0x2, 0x2, 0x2, 0x13c, 0xeea, 0x3, 0x2, 0x2, 0x2, 0x13e, 
       0xef0, 0x3, 0x2, 0x2, 0x2, 0x140, 0xef5, 0x3, 0x2, 0x2, 0x2, 0x142, 
       0xefb, 0x3, 0x2, 0x2, 0x2, 0x144, 0xf01, 0x3, 0x2, 0x2, 0x2, 0x146, 
       0xf06, 0x3, 0x2, 0x2, 0x2, 0x148, 0xf34, 0x3, 0x2, 0x2, 0x2, 0x14a, 
       0xf53, 0x3, 0x2, 0x2, 0x2, 0x14c, 0xf73, 0x3, 0x2, 0x2, 0x2, 0x14e, 
       0xf76, 0x3, 0x2, 0x2, 0x2, 0x150, 0xf7c, 0x3, 0x2, 0x2, 0x2, 0x152, 
       0xf8c, 0x3, 0x2, 0x2, 0x2, 0x154, 0xf9b, 0x3, 0x2, 0x2, 0x2, 0x156, 
       0xfa1, 0x3, 0x2, 0x2, 0x2, 0x158, 0xfbf, 0x3, 0x2, 0x2, 0x2, 0x15a, 
       0xfc1, 0x3, 0x2, 0x2, 0x2, 0x15c, 0xfc8, 0x3, 0x2, 0x2, 0x2, 0x15e, 
       0xfd4, 0x3, 0x2, 0x2, 0x2, 0x160, 0xfda, 0x3, 0x2, 0x2, 0x2, 0x162, 
       0xff3, 0x3, 0x2, 0x2, 0x2, 0x164, 0xff7, 0x3, 0x2, 0x2, 0x2, 0x166, 
       0x1034, 0x3, 0x2, 0x2, 0x2, 0x168, 0x106c, 0x3, 0x2, 0x2, 0x2, 0x16a, 
       0x106e, 0x3, 0x2, 0x2, 0x2, 0x16c, 0x107b, 0x3, 0x2, 0x2, 0x2, 0x16e, 
       0x10ad, 0x3, 0x2, 0x2, 0x2, 0x170, 0x10bf, 0x3, 0x2, 0x2, 0x2, 0x172, 
       0x10f1, 0x3, 0x2, 0x2, 0x2, 0x174, 0x10f3, 0x3, 0x2, 0x2, 0x2, 0x176, 
       0x1100, 0x3, 0x2, 0x2, 0x2, 0x178, 0x1109, 0x3, 0x2, 0x2, 0x2, 0x17a, 
       0x112a, 0x3, 0x2, 0x2, 0x2, 0x17c, 0x1134, 0x3, 0x2, 0x2, 0x2, 0x17e, 
       0x113e, 0x3, 0x2, 0x2, 0x2, 0x180, 0x1140, 0x3, 0x2, 0x2, 0x2, 0x182, 
       0x1143, 0x3, 0x2, 0x2, 0x2, 0x184, 0x1174, 0x3, 0x2, 0x2, 0x2, 0x186, 
       0x1183, 0x3, 0x2, 0x2, 0x2, 0x188, 0x118a, 0x3, 0x2, 0x2, 0x2, 0x18a, 
       0x118c, 0x3, 0x2, 0x2, 0x2, 0x18c, 0x1193, 0x3, 0x2, 0x2, 0x2, 0x18e, 
       0x119c, 0x3, 0x2, 0x2, 0x2, 0x190, 0x11a2, 0x3, 0x2, 0x2, 0x2, 0x192, 
       0x11a9, 0x3, 0x2, 0x2, 0x2, 0x194, 0x11bf, 0x3, 0x2, 0x2, 0x2, 0x196, 
       0x11c1, 0x3, 0x2, 0x2, 0x2, 0x198, 0x11cc, 0x3, 0x2, 0x2, 0x2, 0x19a, 
       0x11d2, 0x3, 0x2, 0x2, 0x2, 0x19c, 0x11fb, 0x3, 0x2, 0x2, 0x2, 0x19e, 
       0x12bd, 0x3, 0x2, 0x2, 0x2, 0x1a0, 0x12c9, 0x3, 0x2, 0x2, 0x2, 0x1a2, 
       0x12cf, 0x3, 0x2, 0x2, 0x2, 0x1a4, 0x12dd, 0x3, 0x2, 0x2, 0x2, 0x1a6, 
       0x12df, 0x3, 0x2, 0x2, 0x2, 0x1a8, 0x12e2, 0x3, 0x2, 0x2, 0x2, 0x1aa, 
       0x12f8, 0x3, 0x2, 0x2, 0x2, 0x1ac, 0x1304, 0x3, 0x2, 0x2, 0x2, 0x1ae, 
       0x130d, 0x3, 0x2, 0x2, 0x2, 0x1b0, 0x1319, 0x3, 0x2, 0x2, 0x2, 0x1b2, 
       0x131d, 0x3, 0x2, 0x2, 0x2, 0x1b4, 0x131f, 0x3, 0x2, 0x2, 0x2, 0x1b6, 
       0x1349, 0x3, 0x2, 0x2, 0x2, 0x1b8, 0x134b, 0x3, 0x2, 0x2, 0x2, 0x1ba, 
       0x1362, 0x3, 0x2, 0x2, 0x2, 0x1bc, 0x1368, 0x3, 0x2, 0x2, 0x2, 0x1be, 
       0x1372, 0x3, 0x2, 0x2, 0x2, 0x1c0, 0x1375, 0x3, 0x2, 0x2, 0x2, 0x1c2, 
       0x1382, 0x3, 0x2, 0x2, 0x2, 0x1c4, 0x1384, 0x3, 0x2, 0x2, 0x2, 0x1c6, 
       0x138a, 0x3, 0x2, 0x2, 0x2, 0x1c8, 0x1390, 0x3, 0x2, 0x2, 0x2, 0x1ca, 
       0x1397, 0x3, 0x2, 0x2, 0x2, 0x1cc, 0x13a1, 0x3, 0x2, 0x2, 0x2, 0x1ce, 
       0x13a3, 0x3, 0x2, 0x2, 0x2, 0x1d0, 0x13a9, 0x3, 0x2, 0x2, 0x2, 0x1d2, 
       0x13ad, 0x3, 0x2, 0x2, 0x2, 0x1d4, 0x13af, 0x3, 0x2, 0x2, 0x2, 0x1d6, 
       0x13b1, 0x3, 0x2, 0x2, 0x2, 0x1d8, 0x13c3, 0x3, 0x2, 0x2, 0x2, 0x1da, 
       0x13d3, 0x3, 0x2, 0x2, 0x2, 0x1dc, 0x13d7, 0x3, 0x2, 0x2, 0x2, 0x1de, 
       0x13dc, 0x3, 0x2, 0x2, 0x2, 0x1e0, 0x13e8, 0x3, 0x2, 0x2, 0x2, 0x1e2, 
       0x13ed, 0x3, 0x2, 0x2, 0x2, 0x1e4, 0x13ef, 0x3, 0x2, 0x2, 0x2, 0x1e6, 
       0x13f3, 0x3, 0x2, 0x2, 0x2, 0x1e8, 0x140c, 0x3, 0x2, 0x2, 0x2, 0x1ea, 
       0x140e, 0x3, 0x2, 0x2, 0x2, 0x1ec, 0x1411, 0x3, 0x2, 0x2, 0x2, 0x1ee, 
       0x1417, 0x3, 0x2, 0x2, 0x2, 0x1f0, 0x1421, 0x3, 0x2, 0x2, 0x2, 0x1f2, 
       0x146e, 0x3, 0x2, 0x2, 0x2, 0x1f4, 0x1488, 0x3, 0x2, 0x2, 0x2, 0x1f6, 
       0x148a, 0x3, 0x2, 0x2, 0x2, 0x1f8, 0x148c, 0x3, 0x2, 0x2, 0x2, 0x1fa, 
       0x1490, 0x3, 0x2, 0x2, 0x2, 0x1fc, 0x1496, 0x3, 0x2, 0x2, 0x2, 0x1fe, 
       0x149e, 0x3, 0x2, 0x2, 0x2, 0x200, 0x14a6, 0x3, 0x2, 0x2, 0x2, 0x202, 
       0x14ae, 0x3, 0x2, 0x2, 0x2, 0x204, 0x14bf, 0x3, 0x2, 0x2, 0x2, 0x206, 
       0x14ca, 0x3, 0x2, 0x2, 0x2, 0x208, 0x14d2, 0x3, 0x2, 0x2, 0x2, 0x20a, 
       0x14da, 0x3, 0x2, 0x2, 0x2, 0x20c, 0x14e2, 0x3, 0x2, 0x2, 0x2, 0x20e, 
       0x14ec, 0x3, 0x2, 0x2, 0x2, 0x210, 0x14ee, 0x3, 0x2, 0x2, 0x2, 0x212, 
       0x14f1, 0x3, 0x2, 0x2, 0x2, 0x214, 0x1508, 0x3, 0x2, 0x2, 0x2, 0x216, 
       0x15af, 0x3, 0x2, 0x2, 0x2, 0x218, 0x15c5, 0x3, 0x2, 0x2, 0x2, 0x21a, 
       0x15ff, 0x3, 0x2, 0x2, 0x2, 0x21c, 0x1617, 0x3, 0x2, 0x2, 0x2, 0x21e, 
       0x161d, 0x3, 0x2, 0x2, 0x2, 0x220, 0x162f, 0x3, 0x2, 0x2, 0x2, 0x222, 
       0x163c, 0x3, 0x2, 0x2, 0x2, 0x224, 0x1647, 0x3, 0x2, 0x2, 0x2, 0x226, 
       0x16a4, 0x3, 0x2, 0x2, 0x2, 0x228, 0x16b3, 0x3, 0x2, 0x2, 0x2, 0x22a, 
       0x16c3, 0x3, 0x2, 0x2, 0x2, 0x22c, 0x16cc, 0x3, 0x2, 0x2, 0x2, 0x22e, 
       0x16d5, 0x3, 0x2, 0x2, 0x2, 0x230, 0x16d7, 0x3, 0x2, 0x2, 0x2, 0x232, 
       0x16d9, 0x3, 0x2, 0x2, 0x2, 0x234, 0x16db, 0x3, 0x2, 0x2, 0x2, 0x236, 
       0x16dd, 0x3, 0x2, 0x2, 0x2, 0x238, 0x16df, 0x3, 0x2, 0x2, 0x2, 0x23a, 
       0x16e1, 0x3, 0x2, 0x2, 0x2, 0x23c, 0x16e3, 0x3, 0x2, 0x2, 0x2, 0x23e, 
       0x16e5, 0x3, 0x2, 0x2, 0x2, 0x240, 0x242, 0x5, 0x4, 0x3, 0x2, 0x241, 
       0x240, 0x3, 0x2, 0x2, 0x2, 0x241, 0x242, 0x3, 0x2, 0x2, 0x2, 0x242, 
       0x245, 0x3, 0x2, 0x2, 0x2, 0x243, 0x244, 0x7, 0x3a5, 0x2, 0x2, 0x244, 
       0x246, 0x7, 0x3a5, 0x2, 0x2, 0x245, 0x243, 0x3, 0x2, 0x2, 0x2, 0x245, 
       0x246, 0x3, 0x2, 0x2, 0x2, 0x246, 0x247, 0x3, 0x2, 0x2, 0x2, 0x247, 
       0x248, 0x7, 0x2, 0x2, 0x3, 0x248, 0x3, 0x3, 0x2, 0x2, 0x2, 0x249, 
       0x24c, 0x5, 0x6, 0x4, 0x2, 0x24a, 0x24b, 0x7, 0x3a5, 0x2, 0x2, 0x24b, 
       0x24d, 0x7, 0x3a5, 0x2, 0x2, 0x24c, 0x24a, 0x3, 0x2, 0x2, 0x2, 0x24c, 
       0x24d, 0x3, 0x2, 0x2, 0x2, 0x24d, 0x24e, 0x3, 0x2, 0x2, 0x2, 0x24e, 
       0x24f, 0x7, 0x3b4, 0x2, 0x2, 0x24f, 0x252, 0x3, 0x2, 0x2, 0x2, 0x250, 
       0x252, 0x5, 0x8, 0x5, 0x2, 0x251, 0x249, 0x3, 0x2, 0x2, 0x2, 0x251, 
       0x250, 0x3, 0x2, 0x2, 0x2, 0x252, 0x255, 0x3, 0x2, 0x2, 0x2, 0x253, 
       0x251, 0x3, 0x2, 0x2, 0x2, 0x253, 0x254, 0x3, 0x2, 0x2, 0x2, 0x254, 
       0x25f, 0x3, 0x2, 0x2, 0x2, 0x255, 0x253, 0x3, 0x2, 0x2, 0x2, 0x256, 
       0x25c, 0x5, 0x6, 0x4, 0x2, 0x257, 0x258, 0x7, 0x3a5, 0x2, 0x2, 0x258, 
       0x25a, 0x7, 0x3a5, 0x2, 0x2, 0x259, 0x257, 0x3, 0x2, 0x2, 0x2, 0x259, 
       0x25a, 0x3, 0x2, 0x2, 0x2, 0x25a, 0x25b, 0x3, 0x2, 0x2, 0x2, 0x25b, 
       0x25d, 0x7, 0x3b4, 0x2, 0x2, 0x25c, 0x259, 0x3, 0x2, 0x2, 0x2, 0x25c, 
       0x25d, 0x3, 0x2, 0x2, 0x2, 0x25d, 0x260, 0x3, 0x2, 0x2, 0x2, 0x25e, 
       0x260, 0x5, 0x8, 0x5, 0x2, 0x25f, 0x256, 0x3, 0x2, 0x2, 0x2, 0x25f, 
       0x25e, 0x3, 0x2, 0x2, 0x2, 0x260, 0x5, 0x3, 0x2, 0x2, 0x2, 0x261, 
       0x269, 0x5, 0xa, 0x6, 0x2, 0x262, 0x269, 0x5, 0xc, 0x7, 0x2, 0x263, 
       0x269, 0x5, 0xe, 0x8, 0x2, 0x264, 0x269, 0x5, 0x10, 0x9, 0x2, 0x265, 
       0x269, 0x5, 0x12, 0xa, 0x2, 0x266, 0x269, 0x5, 0x16, 0xc, 0x2, 0x267, 
       0x269, 0x5, 0x18, 0xd, 0x2, 0x268, 0x261, 0x3, 0x2, 0x2, 0x2, 0x268, 
       0x262, 0x3, 0x2, 0x2, 0x2, 0x268, 0x263, 0x3, 0x2, 0x2, 0x2, 0x268, 
       0x264, 0x3, 0x2, 0x2, 0x2, 0x268, 0x265, 0x3, 0x2, 0x2, 0x2, 0x268, 
       0x266, 0x3, 0x2, 0x2, 0x2, 0x268, 0x267, 0x3, 0x2, 0x2, 0x2, 0x269, 
       0x7, 0x3, 0x2, 0x2, 0x2, 0x26a, 0x26b, 0x7, 0x3b4, 0x2, 0x2, 0x26b, 
       0x9, 0x3, 0x2, 0x2, 0x2, 0x26c, 0x290, 0x5, 0x1a, 0xe, 0x2, 0x26d, 
       0x290, 0x5, 0x1c, 0xf, 0x2, 0x26e, 0x290, 0x5, 0x1e, 0x10, 0x2, 0x26f, 
       0x290, 0x5, 0x20, 0x11, 0x2, 0x270, 0x290, 0x5, 0x22, 0x12, 0x2, 
       0x271, 0x290, 0x5, 0x24, 0x13, 0x2, 0x272, 0x290, 0x5, 0x26, 0x14, 
       0x2, 0x273, 0x290, 0x5, 0x28, 0x15, 0x2, 0x274, 0x290, 0x5, 0x2a, 
       0x16, 0x2, 0x275, 0x290, 0x5, 0x2c, 0x17, 0x2, 0x276, 0x290, 0x5, 
       0x2e, 0x18, 0x2, 0x277, 0x290, 0x5, 0x30, 0x19, 0x2, 0x278, 0x290, 
       0x5, 0x6a, 0x36, 0x2, 0x279, 0x290, 0x5, 0x6c, 0x37, 0x2, 0x27a, 
       0x290, 0x5, 0x6e, 0x38, 0x2, 0x27b, 0x290, 0x5, 0x70, 0x39, 0x2, 
       0x27c, 0x290, 0x5, 0x72, 0x3a, 0x2, 0x27d, 0x290, 0x5, 0x74, 0x3b, 
       0x2, 0x27e, 0x290, 0x5, 0x76, 0x3c, 0x2, 0x27f, 0x290, 0x5, 0x78, 
       0x3d, 0x2, 0x280, 0x290, 0x5, 0x7a, 0x3e, 0x2, 0x281, 0x290, 0x5, 
       0x7c, 0x3f, 0x2, 0x282, 0x290, 0x5, 0x80, 0x41, 0x2, 0x283, 0x290, 
       0x5, 0x82, 0x42, 0x2, 0x284, 0x290, 0x5, 0x84, 0x43, 0x2, 0x285, 
       0x290, 0x5, 0x86, 0x44, 0x2, 0x286, 0x290, 0x5, 0x88, 0x45, 0x2, 
       0x287, 0x290, 0x5, 0x8a, 0x46, 0x2, 0x288, 0x290, 0x5, 0x8c, 0x47, 
       0x2, 0x289, 0x290, 0x5, 0x8e, 0x48, 0x2, 0x28a, 0x290, 0x5, 0x90, 
       0x49, 0x2, 0x28b, 0x290, 0x5, 0x92, 0x4a, 0x2, 0x28c, 0x290, 0x5, 
       0x94, 0x4b, 0x2, 0x28d, 0x290, 0x5, 0x96, 0x4c, 0x2, 0x28e, 0x290, 
       0x5, 0x98, 0x4d, 0x2, 0x28f, 0x26c, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x26d, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x26e, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x26f, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x270, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x271, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x272, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x273, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x274, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x275, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x276, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x277, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x278, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x279, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x27a, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x27b, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x27c, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x27d, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x27e, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x27f, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x280, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x281, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x282, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x283, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x284, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x285, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x286, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x287, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x288, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x289, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x28a, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x28b, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x28c, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x28d, 
       0x3, 0x2, 0x2, 0x2, 0x28f, 0x28e, 0x3, 0x2, 0x2, 0x2, 0x290, 0xb, 
       0x3, 0x2, 0x2, 0x2, 0x291, 0x29c, 0x5, 0xaa, 0x56, 0x2, 0x292, 0x29c, 
       0x5, 0xa2, 0x52, 0x2, 0x293, 0x29c, 0x5, 0xac, 0x57, 0x2, 0x294, 
       0x29c, 0x5, 0x9c, 0x4f, 0x2, 0x295, 0x29c, 0x5, 0xa8, 0x55, 0x2, 
       0x296, 0x29c, 0x5, 0x9a, 0x4e, 0x2, 0x297, 0x29c, 0x5, 0xa4, 0x53, 
       0x2, 0x298, 0x29c, 0x5, 0xa6, 0x54, 0x2, 0x299, 0x29c, 0x5, 0x9e, 
       0x50, 0x2, 0x29a, 0x29c, 0x5, 0xa0, 0x51, 0x2, 0x29b, 0x291, 0x3, 
       0x2, 0x2, 0x2, 0x29b, 0x292, 0x3, 0x2, 0x2, 0x2, 0x29b, 0x293, 0x3, 
       0x2, 0x2, 0x2, 0x29b, 0x294, 0x3, 0x2, 0x2, 0x2, 0x29b, 0x295, 0x3, 
       0x2, 0x2, 0x2, 0x29b, 0x296, 0x3, 0x2, 0x2, 0x2, 0x29b, 0x297, 0x3, 
       0x2, 0x2, 0x2, 0x29b, 0x298, 0x3, 0x2, 0x2, 0x2, 0x29b, 0x299, 0x3, 
       0x2, 0x2, 0x2, 0x29b, 0x29a, 0x3, 0x2, 0x2, 0x2, 0x29c, 0xd, 0x3, 
       0x2, 0x2, 0x2, 0x29d, 0x2a7, 0x5, 0xee, 0x78, 0x2, 0x29e, 0x2a7, 
       0x5, 0xf0, 0x79, 0x2, 0x29f, 0x2a7, 0x5, 0xf2, 0x7a, 0x2, 0x2a0, 
       0x2a7, 0x5, 0xf4, 0x7b, 0x2, 0x2a1, 0x2a7, 0x5, 0xf6, 0x7c, 0x2, 
       0x2a2, 0x2a7, 0x5, 0xf8, 0x7d, 0x2, 0x2a3, 0x2a7, 0x5, 0xfa, 0x7e, 
       0x2, 0x2a4, 0x2a7, 0x5, 0xfc, 0x7f, 0x2, 0x2a5, 0x2a7, 0x5, 0xfe, 
       0x80, 0x2, 0x2a6, 0x29d, 0x3, 0x2, 0x2, 0x2, 0x2a6, 0x29e, 0x3, 0x2, 
       0x2, 0x2, 0x2a6, 0x29f, 0x3, 0x2, 0x2, 0x2, 0x2a6, 0x2a0, 0x3, 0x2, 
       0x2, 0x2, 0x2a6, 0x2a1, 0x3, 0x2, 0x2, 0x2, 0x2a6, 0x2a2, 0x3, 0x2, 
       0x2, 0x2, 0x2a6, 0x2a3, 0x3, 0x2, 0x2, 0x2, 0x2a6, 0x2a4, 0x3, 0x2, 
       0x2, 0x2, 0x2a6, 0x2a5, 0x3, 0x2, 0x2, 0x2, 0x2a7, 0xf, 0x3, 0x2, 
       0x2, 0x2, 0x2a8, 0x2b8, 0x5, 0x10c, 0x87, 0x2, 0x2a9, 0x2b8, 0x5, 
       0x10e, 0x88, 0x2, 0x2aa, 0x2b8, 0x5, 0x110, 0x89, 0x2, 0x2ab, 0x2b8, 
       0x5, 0x112, 0x8a, 0x2, 0x2ac, 0x2b8, 0x5, 0x114, 0x8b, 0x2, 0x2ad, 
       0x2b8, 0x5, 0x116, 0x8c, 0x2, 0x2ae, 0x2b8, 0x5, 0x118, 0x8d, 0x2, 
       0x2af, 0x2b8, 0x5, 0x11a, 0x8e, 0x2, 0x2b0, 0x2b8, 0x5, 0x11c, 0x8f, 
       0x2, 0x2b1, 0x2b8, 0x5, 0x132, 0x9a, 0x2, 0x2b2, 0x2b8, 0x5, 0x134, 
       0x9b, 0x2, 0x2b3, 0x2b8, 0x5, 0x136, 0x9c, 0x2, 0x2b4, 0x2b8, 0x5, 
       0x138, 0x9d, 0x2, 0x2b5, 0x2b8, 0x5, 0x13a, 0x9e, 0x2, 0x2b6, 0x2b8, 
       0x5, 0x13c, 0x9f, 0x2, 0x2b7, 0x2a8, 0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2a9, 
       0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2aa, 0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2ab, 
       0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2ac, 0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2ad, 
       0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2ae, 0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2af, 
       0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2b0, 0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2b1, 
       0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2b2, 0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2b3, 
       0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2b4, 0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2b5, 
       0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2b6, 0x3, 0x2, 0x2, 0x2, 0x2b8, 0x11, 
       0x3, 0x2, 0x2, 0x2, 0x2b9, 0x2bd, 0x5, 0x13e, 0xa0, 0x2, 0x2ba, 0x2bd, 
       0x5, 0x140, 0xa1, 0x2, 0x2bb, 0x2bd, 0x5, 0x142, 0xa2, 0x2, 0x2bc, 
       0x2b9, 0x3, 0x2, 0x2, 0x2, 0x2bc, 0x2ba, 0x3, 0x2, 0x2, 0x2, 0x2bc, 
       0x2bb, 0x3, 0x2, 0x2, 0x2, 0x2bd, 0x13, 0x3, 0x2, 0x2, 0x2, 0x2be, 
       0x2c9, 0x5, 0x146, 0xa4, 0x2, 0x2bf, 0x2c9, 0x5, 0x148, 0xa5, 0x2, 
       0x2c0, 0x2c9, 0x5, 0x14a, 0xa6, 0x2, 0x2c1, 0x2c9, 0x5, 0x14e, 0xa8, 
       0x2, 0x2c2, 0x2c9, 0x5, 0x150, 0xa9, 0x2, 0x2c3, 0x2c9, 0x5, 0x152, 
       0xaa, 0x2, 0x2c4, 0x2c9, 0x5, 0x156, 0xac, 0x2, 0x2c5, 0x2c9, 0x5, 
       0x14c, 0xa7, 0x2, 0x2c6, 0x2c9, 0x5, 0x154, 0xab, 0x2, 0x2c7, 0x2c9, 
       0x5, 0x158, 0xad, 0x2, 0x2c8, 0x2be, 0x3, 0x2, 0x2, 0x2, 0x2c8, 0x2bf, 
       0x3, 0x2, 0x2, 0x2, 0x2c8, 0x2c0, 0x3, 0x2, 0x2, 0x2, 0x2c8, 0x2c1, 
       0x3, 0x2, 0x2, 0x2, 0x2c8, 0x2c2, 0x3, 0x2, 0x2, 0x2, 0x2c8, 0x2c3, 
       0x3, 0x2, 0x2, 0x2, 0x2c8, 0x2c4, 0x3, 0x2, 0x2, 0x2, 0x2c8, 0x2c5, 
       0x3, 0x2, 0x2, 0x2, 0x2c8, 0x2c6, 0x3, 0x2, 0x2, 0x2, 0x2c8, 0x2c7, 
       0x3, 0x2, 0x2, 0x2, 0x2c9, 0x15, 0x3, 0x2, 0x2, 0x2, 0x2ca, 0x2e4, 
       0x5, 0x166, 0xb4, 0x2, 0x2cb, 0x2e4, 0x5, 0x168, 0xb5, 0x2, 0x2cc, 
       0x2e4, 0x5, 0x16a, 0xb6, 0x2, 0x2cd, 0x2e4, 0x5, 0x16c, 0xb7, 0x2, 
       0x2ce, 0x2e4, 0x5, 0x16e, 0xb8, 0x2, 0x2cf, 0x2e4, 0x5, 0x170, 0xb9, 
       0x2, 0x2d0, 0x2e4, 0x5, 0x172, 0xba, 0x2, 0x2d1, 0x2e4, 0x5, 0x174, 
       0xbb, 0x2, 0x2d2, 0x2e4, 0x5, 0x18a, 0xc6, 0x2, 0x2d3, 0x2e4, 0x5, 
       0x18c, 0xc7, 0x2, 0x2d4, 0x2e4, 0x5, 0x18e, 0xc8, 0x2, 0x2d5, 0x2e4, 
       0x5, 0x190, 0xc9, 0x2, 0x2d6, 0x2e4, 0x5, 0x192, 0xca, 0x2, 0x2d7, 
       0x2e4, 0x5, 0x196, 0xcc, 0x2, 0x2d8, 0x2e4, 0x5, 0x198, 0xcd, 0x2, 
       0x2d9, 0x2e4, 0x5, 0x19a, 0xce, 0x2, 0x2da, 0x2e4, 0x5, 0x19c, 0xcf, 
       0x2, 0x2db, 0x2e4, 0x5, 0x19e, 0xd0, 0x2, 0x2dc, 0x2e4, 0x5, 0x1a6, 
       0xd4, 0x2, 0x2dd, 0x2e4, 0x5, 0x1a8, 0xd5, 0x2, 0x2de, 0x2e4, 0x5, 
       0x1aa, 0xd6, 0x2, 0x2df, 0x2e4, 0x5, 0x1ac, 0xd7, 0x2, 0x2e0, 0x2e4, 
       0x5, 0x1ae, 0xd8, 0x2, 0x2e1, 0x2e4, 0x5, 0x1b0, 0xd9, 0x2, 0x2e2, 
       0x2e4, 0x5, 0x1b2, 0xda, 0x2, 0x2e3, 0x2ca, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2cb, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2cc, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2cd, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2ce, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2cf, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2d0, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2d1, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2d2, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2d3, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2d4, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2d5, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2d6, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2d7, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2d8, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2d9, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2da, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2db, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2dc, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2dd, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2de, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2df, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2e0, 0x3, 0x2, 0x2, 0x2, 0x2e3, 
       0x2e1, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2e2, 0x3, 0x2, 0x2, 0x2, 0x2e4, 
       0x17, 0x3, 0x2, 0x2, 0x2, 0x2e5, 0x2ea, 0x5, 0x1ba, 0xde, 0x2, 0x2e6, 
       0x2ea, 0x5, 0x1bc, 0xdf, 0x2, 0x2e7, 0x2ea, 0x5, 0x1be, 0xe0, 0x2, 
       0x2e8, 0x2ea, 0x5, 0x1c0, 0xe1, 0x2, 0x2e9, 0x2e5, 0x3, 0x2, 0x2, 
       0x2, 0x2e9, 0x2e6, 0x3, 0x2, 0x2, 0x2, 0x2e9, 0x2e7, 0x3, 0x2, 0x2, 
       0x2, 0x2e9, 0x2e8, 0x3, 0x2, 0x2, 0x2, 0x2ea, 0x19, 0x3, 0x2, 0x2, 
       0x2, 0x2eb, 0x2ec, 0x7, 0x1f, 0x2, 0x2, 0x2ec, 0x2ee, 0x9, 0x2, 0x2, 
       0x2, 0x2ed, 0x2ef, 0x5, 0x212, 0x10a, 0x2, 0x2ee, 0x2ed, 0x3, 0x2, 
       0x2, 0x2, 0x2ee, 0x2ef, 0x3, 0x2, 0x2, 0x2, 0x2ef, 0x2f0, 0x3, 0x2, 
       0x2, 0x2, 0x2f0, 0x2f4, 0x5, 0x1de, 0xf0, 0x2, 0x2f1, 0x2f3, 0x5, 
       0x32, 0x1a, 0x2, 0x2f2, 0x2f1, 0x3, 0x2, 0x2, 0x2, 0x2f3, 0x2f6, 
       0x3, 0x2, 0x2, 0x2, 0x2f4, 0x2f2, 0x3, 0x2, 0x2, 0x2, 0x2f4, 0x2f5, 
       0x3, 0x2, 0x2, 0x2, 0x2f5, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x2f6, 0x2f4, 
       0x3, 0x2, 0x2, 0x2, 0x2f7, 0x2f9, 0x7, 0x1f, 0x2, 0x2, 0x2f8, 0x2fa, 
       0x5, 0x34, 0x1b, 0x2, 0x2f9, 0x2f8, 0x3, 0x2, 0x2, 0x2, 0x2f9, 0x2fa, 
       0x3, 0x2, 0x2, 0x2, 0x2fa, 0x2fb, 0x3, 0x2, 0x2, 0x2, 0x2fb, 0x2fd, 
       0x7, 0x13c, 0x2, 0x2, 0x2fc, 0x2fe, 0x5, 0x212, 0x10a, 0x2, 0x2fd, 
       0x2fc, 0x3, 0x2, 0x2, 0x2, 0x2fd, 0x2fe, 0x3, 0x2, 0x2, 0x2, 0x2fe, 
       0x2ff, 0x3, 0x2, 0x2, 0x2, 0x2ff, 0x300, 0x5, 0x1c6, 0xe4, 0x2, 0x300, 
       0x301, 0x7, 0x67, 0x2, 0x2, 0x301, 0x302, 0x7, 0x1de, 0x2, 0x2, 0x302, 
       0x309, 0x5, 0x36, 0x1c, 0x2, 0x303, 0x304, 0x7, 0x67, 0x2, 0x2, 0x304, 
       0x306, 0x7, 0x118, 0x2, 0x2, 0x305, 0x307, 0x7, 0x64, 0x2, 0x2, 0x306, 
       0x305, 0x3, 0x2, 0x2, 0x2, 0x306, 0x307, 0x3, 0x2, 0x2, 0x2, 0x307, 
       0x308, 0x3, 0x2, 0x2, 0x2, 0x308, 0x30a, 0x7, 0x1b9, 0x2, 0x2, 0x309, 
       0x303, 0x3, 0x2, 0x2, 0x2, 0x309, 0x30a, 0x3, 0x2, 0x2, 0x2, 0x30a, 
       0x310, 0x3, 0x2, 0x2, 0x2, 0x30b, 0x311, 0x7, 0x132, 0x2, 0x2, 0x30c, 
       0x311, 0x7, 0x12b, 0x2, 0x2, 0x30d, 0x30e, 0x7, 0x12b, 0x2, 0x2, 
       0x30e, 0x30f, 0x7, 0x67, 0x2, 0x2, 0x30f, 0x311, 0x7, 0x1e6, 0x2, 
       0x2, 0x310, 0x30b, 0x3, 0x2, 0x2, 0x2, 0x310, 0x30c, 0x3, 0x2, 0x2, 
       0x2, 0x310, 0x30d, 0x3, 0x2, 0x2, 0x2, 0x310, 0x311, 0x3, 0x2, 0x2, 
       0x2, 0x311, 0x314, 0x3, 0x2, 0x2, 0x2, 0x312, 0x313, 0x7, 0x115, 
       0x2, 0x2, 0x313, 0x315, 0x7, 0x3c0, 0x2, 0x2, 0x314, 0x312, 0x3, 
       0x2, 0x2, 0x2, 0x314, 0x315, 0x3, 0x2, 0x2, 0x2, 0x315, 0x316, 0x3, 
       0x2, 0x2, 0x2, 0x316, 0x317, 0x7, 0x12e, 0x2, 0x2, 0x317, 0x318, 
       0x5, 0x144, 0xa3, 0x2, 0x318, 0x1d, 0x3, 0x2, 0x2, 0x2, 0x319, 0x31b, 
       0x7, 0x1f, 0x2, 0x2, 0x31a, 0x31c, 0x9, 0x3, 0x2, 0x2, 0x31b, 0x31a, 
       0x3, 0x2, 0x2, 0x2, 0x31b, 0x31c, 0x3, 0x2, 0x2, 0x2, 0x31c, 0x31e, 
       0x3, 0x2, 0x2, 0x2, 0x31d, 0x31f, 0x9, 0x4, 0x2, 0x2, 0x31e, 0x31d, 
       0x3, 0x2, 0x2, 0x2, 0x31e, 0x31f, 0x3, 0x2, 0x2, 0x2, 0x31f, 0x320, 
       0x3, 0x2, 0x2, 0x2, 0x320, 0x321, 0x7, 0x45, 0x2, 0x2, 0x321, 0x323, 
       0x5, 0x1de, 0xf0, 0x2, 0x322, 0x324, 0x5, 0x3e, 0x20, 0x2, 0x323, 
       0x322, 0x3, 0x2, 0x2, 0x2, 0x323, 0x324, 0x3, 0x2, 0x2, 0x2, 0x324, 
       0x325, 0x3, 0x2, 0x2, 0x2, 0x325, 0x326, 0x7, 0x67, 0x2, 0x2, 0x326, 
       0x327, 0x5, 0x1c4, 0xe3, 0x2, 0x327, 0x32b, 0x5, 0x204, 0x103, 0x2, 
       0x328, 0x32a, 0x5, 0x40, 0x21, 0x2, 0x329, 0x328, 0x3, 0x2, 0x2, 
       0x2, 0x32a, 0x32d, 0x3, 0x2, 0x2, 0x2, 0x32b, 0x329, 0x3, 0x2, 0x2, 
       0x2, 0x32b, 0x32c, 0x3, 0x2, 0x2, 0x2, 0x32c, 0x338, 0x3, 0x2, 0x2, 
       0x2, 0x32d, 0x32b, 0x3, 0x2, 0x2, 0x2, 0x32e, 0x330, 0x7, 0xfb, 0x2, 
       0x2, 0x32f, 0x331, 0x7, 0x3a8, 0x2, 0x2, 0x330, 0x32f, 0x3, 0x2, 
       0x2, 0x2, 0x330, 0x331, 0x3, 0x2, 0x2, 0x2, 0x331, 0x332, 0x3, 0x2, 
       0x2, 0x2, 0x332, 0x339, 0x9, 0x5, 0x2, 0x2, 0x333, 0x335, 0x7, 0x5a, 
       0x2, 0x2, 0x334, 0x336, 0x7, 0x3a8, 0x2, 0x2, 0x335, 0x334, 0x3, 
       0x2, 0x2, 0x2, 0x335, 0x336, 0x3, 0x2, 0x2, 0x2, 0x336, 0x337, 0x3, 
       0x2, 0x2, 0x2, 0x337, 0x339, 0x9, 0x6, 0x2, 0x2, 0x338, 0x32e, 0x3, 
       0x2, 0x2, 0x2, 0x338, 0x333, 0x3, 0x2, 0x2, 0x2, 0x338, 0x339, 0x3, 
       0x2, 0x2, 0x2, 0x339, 0x1f, 0x3, 0x2, 0x2, 0x2, 0x33a, 0x33b, 0x7, 
       0x1f, 0x2, 0x2, 0x33b, 0x33c, 0x7, 0x172, 0x2, 0x2, 0x33c, 0x33d, 
       0x7, 0x3f, 0x2, 0x2, 0x33d, 0x33e, 0x5, 0x1de, 0xf0, 0x2, 0x33e, 
       0x33f, 0x7, 0x7, 0x2, 0x2, 0x33f, 0x340, 0x7, 0x20d, 0x2, 0x2, 0x340, 
       0x346, 0x7, 0x3c0, 0x2, 0x2, 0x341, 0x343, 0x7, 0x15e, 0x2, 0x2, 
       0x342, 0x344, 0x7, 0x3a8, 0x2, 0x2, 0x343, 0x342, 0x3, 0x2, 0x2, 
       0x2, 0x343, 0x344, 0x3, 0x2, 0x2, 0x2, 0x344, 0x345, 0x3, 0x2, 0x2, 
       0x2, 0x345, 0x347, 0x5, 0x1e6, 0xf4, 0x2, 0x346, 0x341, 0x3, 0x2, 
       0x2, 0x2, 0x346, 0x347, 0x3, 0x2, 0x2, 0x2, 0x347, 0x34d, 0x3, 0x2, 
       0x2, 0x2, 0x348, 0x34a, 0x7, 0x20e, 0x2, 0x2, 0x349, 0x34b, 0x7, 
       0x3a8, 0x2, 0x2, 0x34a, 0x349, 0x3, 0x2, 0x2, 0x2, 0x34a, 0x34b, 
       0x3, 0x2, 0x2, 0x2, 0x34b, 0x34c, 0x3, 0x2, 0x2, 0x2, 0x34c, 0x34e, 
       0x5, 0x1e6, 0xf4, 0x2, 0x34d, 0x348, 0x3, 0x2, 0x2, 0x2, 0x34d, 0x34e, 
       0x3, 0x2, 0x2, 0x2, 0x34e, 0x354, 0x3, 0x2, 0x2, 0x2, 0x34f, 0x351, 
       0x7, 0x1c3, 0x2, 0x2, 0x350, 0x352, 0x7, 0x3a8, 0x2, 0x2, 0x351, 
       0x350, 0x3, 0x2, 0x2, 0x2, 0x351, 0x352, 0x3, 0x2, 0x2, 0x2, 0x352, 
       0x353, 0x3, 0x2, 0x2, 0x2, 0x353, 0x355, 0x5, 0x1e6, 0xf4, 0x2, 0x354, 
       0x34f, 0x3, 0x2, 0x2, 0x2, 0x354, 0x355, 0x3, 0x2, 0x2, 0x2, 0x355, 
       0x35b, 0x3, 0x2, 0x2, 0x2, 0x356, 0x358, 0x7, 0x19e, 0x2, 0x2, 0x357, 
       0x359, 0x7, 0x3a8, 0x2, 0x2, 0x358, 0x357, 0x3, 0x2, 0x2, 0x2, 0x358, 
       0x359, 0x3, 0x2, 0x2, 0x2, 0x359, 0x35a, 0x3, 0x2, 0x2, 0x2, 0x35a, 
       0x35c, 0x5, 0x1de, 0xf0, 0x2, 0x35b, 0x356, 0x3, 0x2, 0x2, 0x2, 0x35b, 
       0x35c, 0x3, 0x2, 0x2, 0x2, 0x35c, 0x35e, 0x3, 0x2, 0x2, 0x2, 0x35d, 
       0x35f, 0x7, 0x21a, 0x2, 0x2, 0x35e, 0x35d, 0x3, 0x2, 0x2, 0x2, 0x35e, 
       0x35f, 0x3, 0x2, 0x2, 0x2, 0x35f, 0x365, 0x3, 0x2, 0x2, 0x2, 0x360, 
       0x362, 0x7, 0x115, 0x2, 0x2, 0x361, 0x363, 0x7, 0x3a8, 0x2, 0x2, 
       0x362, 0x361, 0x3, 0x2, 0x2, 0x2, 0x362, 0x363, 0x3, 0x2, 0x2, 0x2, 
       0x363, 0x364, 0x3, 0x2, 0x2, 0x2, 0x364, 0x366, 0x7, 0x3c0, 0x2, 
       0x2, 0x365, 0x360, 0x3, 0x2, 0x2, 0x2, 0x365, 0x366, 0x3, 0x2, 0x2, 
       0x2, 0x366, 0x367, 0x3, 0x2, 0x2, 0x2, 0x367, 0x369, 0x7, 0x136, 
       0x2, 0x2, 0x368, 0x36a, 0x7, 0x3a8, 0x2, 0x2, 0x369, 0x368, 0x3, 
       0x2, 0x2, 0x2, 0x369, 0x36a, 0x3, 0x2, 0x2, 0x2, 0x36a, 0x36b, 0x3, 
       0x2, 0x2, 0x2, 0x36b, 0x36c, 0x5, 0x1d4, 0xeb, 0x2, 0x36c, 0x21, 
       0x3, 0x2, 0x2, 0x2, 0x36d, 0x36f, 0x7, 0x1f, 0x2, 0x2, 0x36e, 0x370, 
       0x5, 0x34, 0x1b, 0x2, 0x36f, 0x36e, 0x3, 0x2, 0x2, 0x2, 0x36f, 0x370, 
       0x3, 0x2, 0x2, 0x2, 0x370, 0x371, 0x3, 0x2, 0x2, 0x2, 0x371, 0x372, 
       0x7, 0x72, 0x2, 0x2, 0x372, 0x373, 0x5, 0x1c6, 0xe4, 0x2, 0x373, 
       0x375, 0x7, 0x3b1, 0x2, 0x2, 0x374, 0x376, 0x5, 0x42, 0x22, 0x2, 
       0x375, 0x374, 0x3, 0x2, 0x2, 0x2, 0x375, 0x376, 0x3, 0x2, 0x2, 0x2, 
       0x376, 0x37b, 0x3, 0x2, 0x2, 0x2, 0x377, 0x378, 0x7, 0x3b3, 0x2, 
       0x2, 0x378, 0x37a, 0x5, 0x42, 0x22, 0x2, 0x379, 0x377, 0x3, 0x2, 
       0x2, 0x2, 0x37a, 0x37d, 0x3, 0x2, 0x2, 0x2, 0x37b, 0x379, 0x3, 0x2, 
       0x2, 0x2, 0x37b, 0x37c, 0x3, 0x2, 0x2, 0x2, 0x37c, 0x37e, 0x3, 0x2, 
       0x2, 0x2, 0x37d, 0x37b, 0x3, 0x2, 0x2, 0x2, 0x37e, 0x382, 0x7, 0x3b2, 
       0x2, 0x2, 0x37f, 0x381, 0x5, 0x46, 0x24, 0x2, 0x380, 0x37f, 0x3, 
       0x2, 0x2, 0x2, 0x381, 0x384, 0x3, 0x2, 0x2, 0x2, 0x382, 0x380, 0x3, 
       0x2, 0x2, 0x2, 0x382, 0x383, 0x3, 0x2, 0x2, 0x2, 0x383, 0x385, 0x3, 
       0x2, 0x2, 0x2, 0x384, 0x382, 0x3, 0x2, 0x2, 0x2, 0x385, 0x386, 0x5, 
       0x144, 0xa3, 0x2, 0x386, 0x23, 0x3, 0x2, 0x2, 0x2, 0x387, 0x389, 
       0x7, 0x1f, 0x2, 0x2, 0x388, 0x38a, 0x5, 0x34, 0x1b, 0x2, 0x389, 0x388, 
       0x3, 0x2, 0x2, 0x2, 0x389, 0x38a, 0x3, 0x2, 0x2, 0x2, 0x38a, 0x38b, 
       0x3, 0x2, 0x2, 0x2, 0x38b, 0x38c, 0x7, 0x150, 0x2, 0x2, 0x38c, 0x38d, 
       0x5, 0x1c6, 0xe4, 0x2, 0x38d, 0x38f, 0x7, 0x3b1, 0x2, 0x2, 0x38e, 
       0x390, 0x5, 0x44, 0x23, 0x2, 0x38f, 0x38e, 0x3, 0x2, 0x2, 0x2, 0x38f, 
       0x390, 0x3, 0x2, 0x2, 0x2, 0x390, 0x395, 0x3, 0x2, 0x2, 0x2, 0x391, 
       0x392, 0x7, 0x3b3, 0x2, 0x2, 0x392, 0x394, 0x5, 0x44, 0x23, 0x2, 
       0x393, 0x391, 0x3, 0x2, 0x2, 0x2, 0x394, 0x397, 0x3, 0x2, 0x2, 0x2, 
       0x395, 0x393, 0x3, 0x2, 0x2, 0x2, 0x395, 0x396, 0x3, 0x2, 0x2, 0x2, 
       0x396, 0x398, 0x3, 0x2, 0x2, 0x2, 0x397, 0x395, 0x3, 0x2, 0x2, 0x2, 
       0x398, 0x399, 0x7, 0x3b2, 0x2, 0x2, 0x399, 0x39a, 0x7, 0x1d6, 0x2, 
       0x2, 0x39a, 0x39e, 0x5, 0x1f2, 0xfa, 0x2, 0x39b, 0x39d, 0x5, 0x46, 
       0x24, 0x2, 0x39c, 0x39b, 0x3, 0x2, 0x2, 0x2, 0x39d, 0x3a0, 0x3, 0x2, 
       0x2, 0x2, 0x39e, 0x39c, 0x3, 0x2, 0x2, 0x2, 0x39e, 0x39f, 0x3, 0x2, 
       0x2, 0x2, 0x39f, 0x3a1, 0x3, 0x2, 0x2, 0x2, 0x3a0, 0x39e, 0x3, 0x2, 
       0x2, 0x2, 0x3a1, 0x3a2, 0x5, 0x144, 0xa3, 0x2, 0x3a2, 0x25, 0x3, 
       0x2, 0x2, 0x2, 0x3a3, 0x3a4, 0x7, 0x1f, 0x2, 0x2, 0x3a4, 0x3a5, 0x7, 
       0x1e0, 0x2, 0x2, 0x3a5, 0x3a6, 0x5, 0x1de, 0xf0, 0x2, 0x3a6, 0x3a7, 
       0x7, 0x3b, 0x2, 0x2, 0x3a7, 0x3a8, 0x7, 0x123, 0x2, 0x2, 0x3a8, 0x3a9, 
       0x7, 0x21e, 0x2, 0x2, 0x3a9, 0x3aa, 0x9, 0x7, 0x2, 0x2, 0x3aa, 0x3ab, 
       0x7, 0x1a9, 0x2, 0x2, 0x3ab, 0x3ac, 0x7, 0x3b1, 0x2, 0x2, 0x3ac, 
       0x3b1, 0x5, 0x48, 0x25, 0x2, 0x3ad, 0x3ae, 0x7, 0x3b3, 0x2, 0x2, 
       0x3ae, 0x3b0, 0x5, 0x48, 0x25, 0x2, 0x3af, 0x3ad, 0x3, 0x2, 0x2, 
       0x2, 0x3b0, 0x3b3, 0x3, 0x2, 0x2, 0x2, 0x3b1, 0x3af, 0x3, 0x2, 0x2, 
       0x2, 0x3b1, 0x3b2, 0x3, 0x2, 0x2, 0x2, 0x3b2, 0x3b4, 0x3, 0x2, 0x2, 
       0x2, 0x3b3, 0x3b1, 0x3, 0x2, 0x2, 0x2, 0x3b4, 0x3b5, 0x7, 0x3b2, 
       0x2, 0x2, 0x3b5, 0x27, 0x3, 0x2, 0x2, 0x2, 0x3b6, 0x3b8, 0x7, 0x1f, 
       0x2, 0x2, 0x3b7, 0x3b9, 0x7, 0x205, 0x2, 0x2, 0x3b8, 0x3b7, 0x3, 
       0x2, 0x2, 0x2, 0x3b8, 0x3b9, 0x3, 0x2, 0x2, 0x2, 0x3b9, 0x3ba, 0x3, 
       0x2, 0x2, 0x2, 0x3ba, 0x3bc, 0x7, 0x94, 0x2, 0x2, 0x3bb, 0x3bd, 0x5, 
       0x212, 0x10a, 0x2, 0x3bc, 0x3bb, 0x3, 0x2, 0x2, 0x2, 0x3bc, 0x3bd, 
       0x3, 0x2, 0x2, 0x2, 0x3bd, 0x3be, 0x3, 0x2, 0x2, 0x2, 0x3be, 0x3c6, 
       0x5, 0x1c4, 0xe3, 0x2, 0x3bf, 0x3c0, 0x7, 0x55, 0x2, 0x2, 0x3c0, 
       0x3c7, 0x5, 0x1c4, 0xe3, 0x2, 0x3c1, 0x3c2, 0x7, 0x3b1, 0x2, 0x2, 
       0x3c2, 0x3c3, 0x7, 0x55, 0x2, 0x2, 0x3c3, 0x3c4, 0x5, 0x1c4, 0xe3, 
       0x2, 0x3c4, 0x3c5, 0x7, 0x3b2, 0x2, 0x2, 0x3c5, 0x3c7, 0x3, 0x2, 
       0x2, 0x2, 0x3c6, 0x3bf, 0x3, 0x2, 0x2, 0x2, 0x3c6, 0x3c1, 0x3, 0x2, 
       0x2, 0x2, 0x3c7, 0x405, 0x3, 0x2, 0x2, 0x2, 0x3c8, 0x3ca, 0x7, 0x1f, 
       0x2, 0x2, 0x3c9, 0x3cb, 0x7, 0x205, 0x2, 0x2, 0x3ca, 0x3c9, 0x3, 
       0x2, 0x2, 0x2, 0x3ca, 0x3cb, 0x3, 0x2, 0x2, 0x2, 0x3cb, 0x3cc, 0x3, 
       0x2, 0x2, 0x2, 0x3cc, 0x3ce, 0x7, 0x94, 0x2, 0x2, 0x3cd, 0x3cf, 0x5, 
       0x212, 0x10a, 0x2, 0x3ce, 0x3cd, 0x3, 0x2, 0x2, 0x2, 0x3ce, 0x3cf, 
       0x3, 0x2, 0x2, 0x2, 0x3cf, 0x3d0, 0x3, 0x2, 0x2, 0x2, 0x3d0, 0x3d2, 
       0x5, 0x1c4, 0xe3, 0x2, 0x3d1, 0x3d3, 0x5, 0x4a, 0x26, 0x2, 0x3d2, 
       0x3d1, 0x3, 0x2, 0x2, 0x2, 0x3d2, 0x3d3, 0x3, 0x2, 0x2, 0x2, 0x3d3, 
       0x3de, 0x3, 0x2, 0x2, 0x2, 0x3d4, 0x3db, 0x5, 0x5e, 0x30, 0x2, 0x3d5, 
       0x3d7, 0x7, 0x3b3, 0x2, 0x2, 0x3d6, 0x3d5, 0x3, 0x2, 0x2, 0x2, 0x3d6, 
       0x3d7, 0x3, 0x2, 0x2, 0x2, 0x3d7, 0x3d8, 0x3, 0x2, 0x2, 0x2, 0x3d8, 
       0x3da, 0x5, 0x5e, 0x30, 0x2, 0x3d9, 0x3d6, 0x3, 0x2, 0x2, 0x2, 0x3da, 
       0x3dd, 0x3, 0x2, 0x2, 0x2, 0x3db, 0x3d9, 0x3, 0x2, 0x2, 0x2, 0x3db, 
       0x3dc, 0x3, 0x2, 0x2, 0x2, 0x3dc, 0x3df, 0x3, 0x2, 0x2, 0x2, 0x3dd, 
       0x3db, 0x3, 0x2, 0x2, 0x2, 0x3de, 0x3d4, 0x3, 0x2, 0x2, 0x2, 0x3de, 
       0x3df, 0x3, 0x2, 0x2, 0x2, 0x3df, 0x3e1, 0x3, 0x2, 0x2, 0x2, 0x3e0, 
       0x3e2, 0x5, 0x60, 0x31, 0x2, 0x3e1, 0x3e0, 0x3, 0x2, 0x2, 0x2, 0x3e1, 
       0x3e2, 0x3, 0x2, 0x2, 0x2, 0x3e2, 0x3e4, 0x3, 0x2, 0x2, 0x2, 0x3e3, 
       0x3e5, 0x9, 0x8, 0x2, 0x2, 0x3e4, 0x3e3, 0x3, 0x2, 0x2, 0x2, 0x3e4, 
       0x3e5, 0x3, 0x2, 0x2, 0x2, 0x3e5, 0x3e7, 0x3, 0x2, 0x2, 0x2, 0x3e6, 
       0x3e8, 0x7, 0xc, 0x2, 0x2, 0x3e7, 0x3e6, 0x3, 0x2, 0x2, 0x2, 0x3e7, 
       0x3e8, 0x3, 0x2, 0x2, 0x2, 0x3e8, 0x3e9, 0x3, 0x2, 0x2, 0x2, 0x3e9, 
       0x3ea, 0x5, 0xaa, 0x56, 0x2, 0x3ea, 0x405, 0x3, 0x2, 0x2, 0x2, 0x3eb, 
       0x3ed, 0x7, 0x1f, 0x2, 0x2, 0x3ec, 0x3ee, 0x7, 0x205, 0x2, 0x2, 0x3ed, 
       0x3ec, 0x3, 0x2, 0x2, 0x2, 0x3ed, 0x3ee, 0x3, 0x2, 0x2, 0x2, 0x3ee, 
       0x3ef, 0x3, 0x2, 0x2, 0x2, 0x3ef, 0x3f1, 0x7, 0x94, 0x2, 0x2, 0x3f0, 
       0x3f2, 0x5, 0x212, 0x10a, 0x2, 0x3f1, 0x3f0, 0x3, 0x2, 0x2, 0x2, 
       0x3f1, 0x3f2, 0x3, 0x2, 0x2, 0x2, 0x3f2, 0x3f3, 0x3, 0x2, 0x2, 0x2, 
       0x3f3, 0x3f4, 0x5, 0x1c4, 0xe3, 0x2, 0x3f4, 0x3ff, 0x5, 0x4a, 0x26, 
       0x2, 0x3f5, 0x3fc, 0x5, 0x5e, 0x30, 0x2, 0x3f6, 0x3f8, 0x7, 0x3b3, 
       0x2, 0x2, 0x3f7, 0x3f6, 0x3, 0x2, 0x2, 0x2, 0x3f7, 0x3f8, 0x3, 0x2, 
       0x2, 0x2, 0x3f8, 0x3f9, 0x3, 0x2, 0x2, 0x2, 0x3f9, 0x3fb, 0x5, 0x5e, 
       0x30, 0x2, 0x3fa, 0x3f7, 0x3, 0x2, 0x2, 0x2, 0x3fb, 0x3fe, 0x3, 0x2, 
       0x2, 0x2, 0x3fc, 0x3fa, 0x3, 0x2, 0x2, 0x2, 0x3fc, 0x3fd, 0x3, 0x2, 
       0x2, 0x2, 0x3fd, 0x400, 0x3, 0x2, 0x2, 0x2, 0x3fe, 0x3fc, 0x3, 0x2, 
       0x2, 0x2, 0x3ff, 0x3f5, 0x3, 0x2, 0x2, 0x2, 0x3ff, 0x400, 0x3, 0x2, 
       0x2, 0x2, 0x400, 0x402, 0x3, 0x2, 0x2, 0x2, 0x401, 0x403, 0x5, 0x60, 
       0x31, 0x2, 0x402, 0x401, 0x3, 0x2, 0x2, 0x2, 0x402, 0x403, 0x3, 0x2, 
       0x2, 0x2, 0x403, 0x405, 0x3, 0x2, 0x2, 0x2, 0x404, 0x3b6, 0x3, 0x2, 
       0x2, 0x2, 0x404, 0x3c8, 0x3, 0x2, 0x2, 0x2, 0x404, 0x3eb, 0x3, 0x2, 
       0x2, 0x2, 0x405, 0x29, 0x3, 0x2, 0x2, 0x2, 0x406, 0x407, 0x7, 0x1f, 
       0x2, 0x2, 0x407, 0x408, 0x7, 0x204, 0x2, 0x2, 0x408, 0x409, 0x5, 
       0x1de, 0xf0, 0x2, 0x409, 0x40a, 0x7, 0x7, 0x2, 0x2, 0x40a, 0x40b, 
       0x7, 0x124, 0x2, 0x2, 0x40b, 0x40f, 0x7, 0x3c0, 0x2, 0x2, 0x40c, 
       0x40d, 0x7, 0x148, 0x2, 0x2, 0x40d, 0x40e, 0x7, 0x3a8, 0x2, 0x2, 
       0x40e, 0x410, 0x5, 0x1e6, 0xf4, 0x2, 0x40f, 0x40c, 0x3, 0x2, 0x2, 
       0x2, 0x40f, 0x410, 0x3, 0x2, 0x2, 0x2, 0x410, 0x416, 0x3, 0x2, 0x2, 
       0x2, 0x411, 0x413, 0x7, 0x136, 0x2, 0x2, 0x412, 0x414, 0x7, 0x3a8, 
       0x2, 0x2, 0x413, 0x412, 0x3, 0x2, 0x2, 0x2, 0x413, 0x414, 0x3, 0x2, 
       0x2, 0x2, 0x414, 0x415, 0x3, 0x2, 0x2, 0x2, 0x415, 0x417, 0x5, 0x1d4, 
       0xeb, 0x2, 0x416, 0x411, 0x3, 0x2, 0x2, 0x2, 0x416, 0x417, 0x3, 0x2, 
       0x2, 0x2, 0x417, 0x2b, 0x3, 0x2, 0x2, 0x2, 0x418, 0x419, 0x7, 0x1f, 
       0x2, 0x2, 0x419, 0x41a, 0x7, 0x204, 0x2, 0x2, 0x41a, 0x41b, 0x5, 
       0x1de, 0xf0, 0x2, 0x41b, 0x41c, 0x7, 0x7, 0x2, 0x2, 0x41c, 0x41d, 
       0x7, 0x124, 0x2, 0x2, 0x41d, 0x41e, 0x7, 0x3c0, 0x2, 0x2, 0x41e, 
       0x41f, 0x7, 0xa2, 0x2, 0x2, 0x41f, 0x420, 0x7, 0x172, 0x2, 0x2, 0x420, 
       0x421, 0x7, 0x3f, 0x2, 0x2, 0x421, 0x427, 0x5, 0x1de, 0xf0, 0x2, 
       0x422, 0x424, 0x7, 0x144, 0x2, 0x2, 0x423, 0x425, 0x7, 0x3a8, 0x2, 
       0x2, 0x424, 0x423, 0x3, 0x2, 0x2, 0x2, 0x424, 0x425, 0x3, 0x2, 0x2, 
       0x2, 0x425, 0x426, 0x3, 0x2, 0x2, 0x2, 0x426, 0x428, 0x5, 0x1e6, 
       0xf4, 0x2, 0x427, 0x422, 0x3, 0x2, 0x2, 0x2, 0x427, 0x428, 0x3, 0x2, 
       0x2, 0x2, 0x428, 0x42e, 0x3, 0x2, 0x2, 0x2, 0x429, 0x42b, 0x7, 0x15e, 
       0x2, 0x2, 0x42a, 0x42c, 0x7, 0x3a8, 0x2, 0x2, 0x42b, 0x42a, 0x3, 
       0x2, 0x2, 0x2, 0x42b, 0x42c, 0x3, 0x2, 0x2, 0x2, 0x42c, 0x42d, 0x3, 
       0x2, 0x2, 0x2, 0x42d, 0x42f, 0x5, 0x1e6, 0xf4, 0x2, 0x42e, 0x429, 
       0x3, 0x2, 0x2, 0x2, 0x42e, 0x42f, 0x3, 0x2, 0x2, 0x2, 0x42f, 0x435, 
       0x3, 0x2, 0x2, 0x2, 0x430, 0x432, 0x7, 0x100, 0x2, 0x2, 0x431, 0x433, 
       0x7, 0x3a8, 0x2, 0x2, 0x432, 0x431, 0x3, 0x2, 0x2, 0x2, 0x432, 0x433, 
       0x3, 0x2, 0x2, 0x2, 0x433, 0x434, 0x3, 0x2, 0x2, 0x2, 0x434, 0x436, 
       0x5, 0x1e6, 0xf4, 0x2, 0x435, 0x430, 0x3, 0x2, 0x2, 0x2, 0x435, 0x436, 
       0x3, 0x2, 0x2, 0x2, 0x436, 0x43c, 0x3, 0x2, 0x2, 0x2, 0x437, 0x439, 
       0x7, 0x18c, 0x2, 0x2, 0x438, 0x43a, 0x7, 0x3a8, 0x2, 0x2, 0x439, 
       0x438, 0x3, 0x2, 0x2, 0x2, 0x439, 0x43a, 0x3, 0x2, 0x2, 0x2, 0x43a, 
       0x43b, 0x3, 0x2, 0x2, 0x2, 0x43b, 0x43d, 0x5, 0x1e6, 0xf4, 0x2, 0x43c, 
       0x437, 0x3, 0x2, 0x2, 0x2, 0x43c, 0x43d, 0x3, 0x2, 0x2, 0x2, 0x43d, 
       0x443, 0x3, 0x2, 0x2, 0x2, 0x43e, 0x440, 0x7, 0x19e, 0x2, 0x2, 0x43f, 
       0x441, 0x7, 0x3a8, 0x2, 0x2, 0x440, 0x43f, 0x3, 0x2, 0x2, 0x2, 0x440, 
       0x441, 0x3, 0x2, 0x2, 0x2, 0x441, 0x442, 0x3, 0x2, 0x2, 0x2, 0x442, 
       0x444, 0x5, 0x1de, 0xf0, 0x2, 0x443, 0x43e, 0x3, 0x2, 0x2, 0x2, 0x443, 
       0x444, 0x3, 0x2, 0x2, 0x2, 0x444, 0x446, 0x3, 0x2, 0x2, 0x2, 0x445, 
       0x447, 0x7, 0x21a, 0x2, 0x2, 0x446, 0x445, 0x3, 0x2, 0x2, 0x2, 0x446, 
       0x447, 0x3, 0x2, 0x2, 0x2, 0x447, 0x44d, 0x3, 0x2, 0x2, 0x2, 0x448, 
       0x44a, 0x7, 0x115, 0x2, 0x2, 0x449, 0x44b, 0x7, 0x3a8, 0x2, 0x2, 
       0x44a, 0x449, 0x3, 0x2, 0x2, 0x2, 0x44a, 0x44b, 0x3, 0x2, 0x2, 0x2, 
       0x44b, 0x44c, 0x3, 0x2, 0x2, 0x2, 0x44c, 0x44e, 0x7, 0x3c0, 0x2, 
       0x2, 0x44d, 0x448, 0x3, 0x2, 0x2, 0x2, 0x44d, 0x44e, 0x3, 0x2, 0x2, 
       0x2, 0x44e, 0x44f, 0x3, 0x2, 0x2, 0x2, 0x44f, 0x451, 0x7, 0x136, 
       0x2, 0x2, 0x450, 0x452, 0x7, 0x3a8, 0x2, 0x2, 0x451, 0x450, 0x3, 
       0x2, 0x2, 0x2, 0x451, 0x452, 0x3, 0x2, 0x2, 0x2, 0x452, 0x453, 0x3, 
       0x2, 0x2, 0x2, 0x453, 0x454, 0x5, 0x1d4, 0xeb, 0x2, 0x454, 0x2d, 
       0x3, 0x2, 0x2, 0x2, 0x455, 0x457, 0x7, 0x1f, 0x2, 0x2, 0x456, 0x458, 
       0x5, 0x34, 0x1b, 0x2, 0x457, 0x456, 0x3, 0x2, 0x2, 0x2, 0x457, 0x458, 
       0x3, 0x2, 0x2, 0x2, 0x458, 0x459, 0x3, 0x2, 0x2, 0x2, 0x459, 0x45a, 
       0x7, 0x99, 0x2, 0x2, 0x45a, 0x45b, 0x5, 0x1c6, 0xe4, 0x2, 0x45b, 
       0x45c, 0x9, 0x9, 0x2, 0x2, 0x45c, 0x45d, 0x9, 0xa, 0x2, 0x2, 0x45d, 
       0x45e, 0x7, 0x67, 0x2, 0x2, 0x45e, 0x45f, 0x5, 0x1c4, 0xe3, 0x2, 
       0x45f, 0x460, 0x7, 0x39, 0x2, 0x2, 0x460, 0x461, 0x7, 0x2f, 0x2, 
       0x2, 0x461, 0x464, 0x7, 0x1da, 0x2, 0x2, 0x462, 0x463, 0x9, 0xb, 
       0x2, 0x2, 0x463, 0x465, 0x5, 0x1c6, 0xe4, 0x2, 0x464, 0x462, 0x3, 
       0x2, 0x2, 0x2, 0x464, 0x465, 0x3, 0x2, 0x2, 0x2, 0x465, 0x466, 0x3, 
       0x2, 0x2, 0x2, 0x466, 0x467, 0x5, 0x144, 0xa3, 0x2, 0x467, 0x2f, 
       0x3, 0x2, 0x2, 0x2, 0x468, 0x46b, 0x7, 0x1f, 0x2, 0x2, 0x469, 0x46a, 
       0x7, 0x6b, 0x2, 0x2, 0x46a, 0x46c, 0x7, 0x7c, 0x2, 0x2, 0x46b, 0x469, 
       0x3, 0x2, 0x2, 0x2, 0x46b, 0x46c, 0x3, 0x2, 0x2, 0x2, 0x46c, 0x470, 
       0x3, 0x2, 0x2, 0x2, 0x46d, 0x46e, 0x7, 0xfb, 0x2, 0x2, 0x46e, 0x46f, 
       0x7, 0x3a8, 0x2, 0x2, 0x46f, 0x471, 0x9, 0xc, 0x2, 0x2, 0x470, 0x46d, 
       0x3, 0x2, 0x2, 0x2, 0x470, 0x471, 0x3, 0x2, 0x2, 0x2, 0x471, 0x473, 
       0x3, 0x2, 0x2, 0x2, 0x472, 0x474, 0x5, 0x34, 0x1b, 0x2, 0x473, 0x472, 
       0x3, 0x2, 0x2, 0x2, 0x473, 0x474, 0x3, 0x2, 0x2, 0x2, 0x474, 0x478, 
       0x3, 0x2, 0x2, 0x2, 0x475, 0x476, 0x7, 0x8a, 0x2, 0x2, 0x476, 0x477, 
       0x7, 0x1df, 0x2, 0x2, 0x477, 0x479, 0x9, 0xd, 0x2, 0x2, 0x478, 0x475, 
       0x3, 0x2, 0x2, 0x2, 0x478, 0x479, 0x3, 0x2, 0x2, 0x2, 0x479, 0x47a, 
       0x3, 0x2, 0x2, 0x2, 0x47a, 0x47b, 0x7, 0x219, 0x2, 0x2, 0x47b, 0x480, 
       0x5, 0x1c6, 0xe4, 0x2, 0x47c, 0x47d, 0x7, 0x3b1, 0x2, 0x2, 0x47d, 
       0x47e, 0x5, 0x1fe, 0x100, 0x2, 0x47e, 0x47f, 0x7, 0x3b2, 0x2, 0x2, 
       0x47f, 0x481, 0x3, 0x2, 0x2, 0x2, 0x480, 0x47c, 0x3, 0x2, 0x2, 0x2, 
       0x480, 0x481, 0x3, 0x2, 0x2, 0x2, 0x481, 0x482, 0x3, 0x2, 0x2, 0x2, 
       0x482, 0x483, 0x7, 0xc, 0x2, 0x2, 0x483, 0x48a, 0x5, 0xaa, 0x56, 
       0x2, 0x484, 0x486, 0x7, 0xa8, 0x2, 0x2, 0x485, 0x487, 0x9, 0xe, 0x2, 
       0x2, 0x486, 0x485, 0x3, 0x2, 0x2, 0x2, 0x486, 0x487, 0x3, 0x2, 0x2, 
       0x2, 0x487, 0x488, 0x3, 0x2, 0x2, 0x2, 0x488, 0x489, 0x7, 0x18, 0x2, 
       0x2, 0x489, 0x48b, 0x7, 0x69, 0x2, 0x2, 0x48a, 0x484, 0x3, 0x2, 0x2, 
       0x2, 0x48a, 0x48b, 0x3, 0x2, 0x2, 0x2, 0x48b, 0x31, 0x3, 0x2, 0x2, 
       0x2, 0x48c, 0x48e, 0x7, 0x26, 0x2, 0x2, 0x48d, 0x48c, 0x3, 0x2, 0x2, 
       0x2, 0x48d, 0x48e, 0x3, 0x2, 0x2, 0x2, 0x48e, 0x48f, 0x3, 0x2, 0x2, 
       0x2, 0x48f, 0x490, 0x7, 0x17, 0x2, 0x2, 0x490, 0x492, 0x7, 0x86, 
       0x2, 0x2, 0x491, 0x493, 0x7, 0x3a8, 0x2, 0x2, 0x492, 0x491, 0x3, 
       0x2, 0x2, 0x2, 0x492, 0x493, 0x3, 0x2, 0x2, 0x2, 0x493, 0x494, 0x3, 
       0x2, 0x2, 0x2, 0x494, 0x49e, 0x5, 0x1d0, 0xe9, 0x2, 0x495, 0x497, 
       0x7, 0x26, 0x2, 0x2, 0x496, 0x495, 0x3, 0x2, 0x2, 0x2, 0x496, 0x497, 
       0x3, 0x2, 0x2, 0x2, 0x497, 0x498, 0x3, 0x2, 0x2, 0x2, 0x498, 0x49a, 
       0x7, 0x19, 0x2, 0x2, 0x499, 0x49b, 0x7, 0x3a8, 0x2, 0x2, 0x49a, 0x499, 
       0x3, 0x2, 0x2, 0x2, 0x49a, 0x49b, 0x3, 0x2, 0x2, 0x2, 0x49b, 0x49c, 
       0x3, 0x2, 0x2, 0x2, 0x49c, 0x49e, 0x5, 0x1d2, 0xea, 0x2, 0x49d, 0x48d, 
       0x3, 0x2, 0x2, 0x2, 0x49d, 0x496, 0x3, 0x2, 0x2, 0x2, 0x49e, 0x33, 
       0x3, 0x2, 0x2, 0x2, 0x49f, 0x4a0, 0x7, 0x127, 0x2, 0x2, 0x4a0, 0x4a7, 
       0x7, 0x3a8, 0x2, 0x2, 0x4a1, 0x4a8, 0x5, 0x1cc, 0xe7, 0x2, 0x4a2, 
       0x4a5, 0x7, 0x21, 0x2, 0x2, 0x4a3, 0x4a4, 0x7, 0x3b1, 0x2, 0x2, 0x4a4, 
       0x4a6, 0x7, 0x3b2, 0x2, 0x2, 0x4a5, 0x4a3, 0x3, 0x2, 0x2, 0x2, 0x4a5, 
       0x4a6, 0x3, 0x2, 0x2, 0x2, 0x4a6, 0x4a8, 0x3, 0x2, 0x2, 0x2, 0x4a7, 
       0x4a1, 0x3, 0x2, 0x2, 0x2, 0x4a7, 0x4a2, 0x3, 0x2, 0x2, 0x2, 0x4a8, 
       0x35, 0x3, 0x2, 0x2, 0x2, 0x4a9, 0x4aa, 0x7, 0xfd, 0x2, 0x2, 0x4aa, 
       0x4ae, 0x5, 0x38, 0x1d, 0x2, 0x4ab, 0x4ad, 0x5, 0x3a, 0x1e, 0x2, 
       0x4ac, 0x4ab, 0x3, 0x2, 0x2, 0x2, 0x4ad, 0x4b0, 0x3, 0x2, 0x2, 0x2, 
       0x4ae, 0x4ac, 0x3, 0x2, 0x2, 0x2, 0x4ae, 0x4af, 0x3, 0x2, 0x2, 0x2, 
       0x4af, 0x4cc, 0x3, 0x2, 0x2, 0x2, 0x4b0, 0x4ae, 0x3, 0x2, 0x2, 0x2, 
       0x4b1, 0x4b4, 0x7, 0x13e, 0x2, 0x2, 0x4b2, 0x4b5, 0x5, 0x1e4, 0xf3, 
       0x2, 0x4b3, 0x4b5, 0x5, 0x222, 0x112, 0x2, 0x4b4, 0x4b2, 0x3, 0x2, 
       0x2, 0x2, 0x4b4, 0x4b3, 0x3, 0x2, 0x2, 0x2, 0x4b5, 0x4b6, 0x3, 0x2, 
       0x2, 0x2, 0x4b6, 0x4bf, 0x5, 0x3c, 0x1f, 0x2, 0x4b7, 0x4b8, 0x7, 
       0x1f6, 0x2, 0x2, 0x4b8, 0x4bc, 0x5, 0x38, 0x1d, 0x2, 0x4b9, 0x4bb, 
       0x5, 0x3a, 0x1e, 0x2, 0x4ba, 0x4b9, 0x3, 0x2, 0x2, 0x2, 0x4bb, 0x4be, 
       0x3, 0x2, 0x2, 0x2, 0x4bc, 0x4ba, 0x3, 0x2, 0x2, 0x2, 0x4bc, 0x4bd, 
       0x3, 0x2, 0x2, 0x2, 0x4bd, 0x4c0, 0x3, 0x2, 0x2, 0x2, 0x4be, 0x4bc, 
       0x3, 0x2, 0x2, 0x2, 0x4bf, 0x4b7, 0x3, 0x2, 0x2, 0x2, 0x4bf, 0x4c0, 
       0x3, 0x2, 0x2, 0x2, 0x4c0, 0x4c9, 0x3, 0x2, 0x2, 0x2, 0x4c1, 0x4c2, 
       0x7, 0x135, 0x2, 0x2, 0x4c2, 0x4c6, 0x5, 0x38, 0x1d, 0x2, 0x4c3, 
       0x4c5, 0x5, 0x3a, 0x1e, 0x2, 0x4c4, 0x4c3, 0x3, 0x2, 0x2, 0x2, 0x4c5, 
       0x4c8, 0x3, 0x2, 0x2, 0x2, 0x4c6, 0x4c4, 0x3, 0x2, 0x2, 0x2, 0x4c6, 
       0x4c7, 0x3, 0x2, 0x2, 0x2, 0x4c7, 0x4ca, 0x3, 0x2, 0x2, 0x2, 0x4c8, 
       0x4c6, 0x3, 0x2, 0x2, 0x2, 0x4c9, 0x4c1, 0x3, 0x2, 0x2, 0x2, 0x4c9, 
       0x4ca, 0x3, 0x2, 0x2, 0x2, 0x4ca, 0x4cc, 0x3, 0x2, 0x2, 0x2, 0x4cb, 
       0x4a9, 0x3, 0x2, 0x2, 0x2, 0x4cb, 0x4b1, 0x3, 0x2, 0x2, 0x2, 0x4cc, 
       0x37, 0x3, 0x2, 0x2, 0x2, 0x4cd, 0x4d2, 0x7, 0xe6, 0x2, 0x2, 0x4ce, 
       0x4d2, 0x5, 0x1e8, 0xf5, 0x2, 0x4cf, 0x4d2, 0x5, 0x1e4, 0xf3, 0x2, 
       0x4d0, 0x4d2, 0x5, 0x222, 0x112, 0x2, 0x4d1, 0x4cd, 0x3, 0x2, 0x2, 
       0x2, 0x4d1, 0x4ce, 0x3, 0x2, 0x2, 0x2, 0x4d1, 0x4cf, 0x3, 0x2, 0x2, 
       0x2, 0x4d1, 0x4d0, 0x3, 0x2, 0x2, 0x2, 0x4d2, 0x39, 0x3, 0x2, 0x2, 
       0x2, 0x4d3, 0x4d4, 0x7, 0x3a4, 0x2, 0x2, 0x4d4, 0x4d7, 0x7, 0x4a, 
       0x2, 0x2, 0x4d5, 0x4d8, 0x5, 0x1e4, 0xf3, 0x2, 0x4d6, 0x4d8, 0x5, 
       0x222, 0x112, 0x2, 0x4d7, 0x4d5, 0x3, 0x2, 0x2, 0x2, 0x4d7, 0x4d6, 
       0x3, 0x2, 0x2, 0x2, 0x4d8, 0x4d9, 0x3, 0x2, 0x2, 0x2, 0x4d9, 0x4da, 
       0x5, 0x3c, 0x1f, 0x2, 0x4da, 0x3b, 0x3, 0x2, 0x2, 0x2, 0x4db, 0x4e9, 
       0x5, 0x238, 0x11d, 0x2, 0x4dc, 0x4e9, 0x7, 0xbb, 0x2, 0x2, 0x4dd, 
       0x4e9, 0x7, 0xc9, 0x2, 0x2, 0x4de, 0x4e9, 0x7, 0xca, 0x2, 0x2, 0x4df, 
       0x4e9, 0x7, 0xcb, 0x2, 0x2, 0x4e0, 0x4e9, 0x7, 0xcc, 0x2, 0x2, 0x4e1, 
       0x4e9, 0x7, 0xcd, 0x2, 0x2, 0x4e2, 0x4e9, 0x7, 0xce, 0x2, 0x2, 0x4e3, 
       0x4e9, 0x7, 0xcf, 0x2, 0x2, 0x4e4, 0x4e9, 0x7, 0xd0, 0x2, 0x2, 0x4e5, 
       0x4e9, 0x7, 0xd1, 0x2, 0x2, 0x4e6, 0x4e9, 0x7, 0xd2, 0x2, 0x2, 0x4e7, 
       0x4e9, 0x7, 0xd3, 0x2, 0x2, 0x4e8, 0x4db, 0x3, 0x2, 0x2, 0x2, 0x4e8, 
       0x4dc, 0x3, 0x2, 0x2, 0x2, 0x4e8, 0x4dd, 0x3, 0x2, 0x2, 0x2, 0x4e8, 
       0x4de, 0x3, 0x2, 0x2, 0x2, 0x4e8, 0x4df, 0x3, 0x2, 0x2, 0x2, 0x4e8, 
       0x4e0, 0x3, 0x2, 0x2, 0x2, 0x4e8, 0x4e1, 0x3, 0x2, 0x2, 0x2, 0x4e8, 
       0x4e2, 0x3, 0x2, 0x2, 0x2, 0x4e8, 0x4e3, 0x3, 0x2, 0x2, 0x2, 0x4e8, 
       0x4e4, 0x3, 0x2, 0x2, 0x2, 0x4e8, 0x4e5, 0x3, 0x2, 0x2, 0x2, 0x4e8, 
       0x4e6, 0x3, 0x2, 0x2, 0x2, 0x4e8, 0x4e7, 0x3, 0x2, 0x2, 0x2, 0x4e9, 
       0x3d, 0x3, 0x2, 0x2, 0x2, 0x4ea, 0x4eb, 0x7, 0xa3, 0x2, 0x2, 0x4eb, 
       0x4ec, 0x9, 0xf, 0x2, 0x2, 0x4ec, 0x3f, 0x3, 0x2, 0x2, 0x2, 0x4ed, 
       0x4ef, 0x7, 0x16a, 0x2, 0x2, 0x4ee, 0x4f0, 0x7, 0x3a8, 0x2, 0x2, 
       0x4ef, 0x4ee, 0x3, 0x2, 0x2, 0x2, 0x4ef, 0x4f0, 0x3, 0x2, 0x2, 0x2, 
       0x4f0, 0x4f1, 0x3, 0x2, 0x2, 0x2, 0x4f1, 0x4f9, 0x5, 0x1e6, 0xf4, 
       0x2, 0x4f2, 0x4f9, 0x5, 0x3e, 0x20, 0x2, 0x4f3, 0x4f4, 0x7, 0xa8, 
       0x2, 0x2, 0x4f4, 0x4f5, 0x7, 0x1ad, 0x2, 0x2, 0x4f5, 0x4f9, 0x5, 
       0x1de, 0xf0, 0x2, 0x4f6, 0x4f7, 0x7, 0x115, 0x2, 0x2, 0x4f7, 0x4f9, 
       0x7, 0x3c0, 0x2, 0x2, 0x4f8, 0x4ed, 0x3, 0x2, 0x2, 0x2, 0x4f8, 0x4f2, 
       0x3, 0x2, 0x2, 0x2, 0x4f8, 0x4f3, 0x3, 0x2, 0x2, 0x2, 0x4f8, 0x4f6, 
       0x3, 0x2, 0x2, 0x2, 0x4f9, 0x41, 0x3, 0x2, 0x2, 0x2, 0x4fa, 0x4fb, 
       0x9, 0x10, 0x2, 0x2, 0x4fb, 0x4fc, 0x5, 0x1de, 0xf0, 0x2, 0x4fc, 
       0x4fd, 0x5, 0x1f2, 0xfa, 0x2, 0x4fd, 0x43, 0x3, 0x2, 0x2, 0x2, 0x4fe, 
       0x4ff, 0x5, 0x1de, 0xf0, 0x2, 0x4ff, 0x500, 0x5, 0x1f2, 0xfa, 0x2, 
       0x500, 0x45, 0x3, 0x2, 0x2, 0x2, 0x501, 0x502, 0x7, 0x115, 0x2, 0x2, 
       0x502, 0x519, 0x7, 0x3c0, 0x2, 0x2, 0x503, 0x504, 0x7, 0x16b, 0x2, 
       0x2, 0x504, 0x519, 0x7, 0x8a, 0x2, 0x2, 0x505, 0x507, 0x7, 0x64, 
       0x2, 0x2, 0x506, 0x505, 0x3, 0x2, 0x2, 0x2, 0x506, 0x507, 0x3, 0x2, 
       0x2, 0x2, 0x507, 0x508, 0x3, 0x2, 0x2, 0x2, 0x508, 0x519, 0x7, 0x2b, 
       0x2, 0x2, 0x509, 0x50a, 0x7, 0x11e, 0x2, 0x2, 0x50a, 0x514, 0x7, 
       0x8a, 0x2, 0x2, 0x50b, 0x50c, 0x7, 0x19d, 0x2, 0x2, 0x50c, 0x514, 
       0x7, 0x8a, 0x2, 0x2, 0x50d, 0x50e, 0x7, 0x76, 0x2, 0x2, 0x50e, 0x50f, 
       0x7, 0x8a, 0x2, 0x2, 0x50f, 0x514, 0x7, 0x123, 0x2, 0x2, 0x510, 0x511, 
       0x7, 0x61, 0x2, 0x2, 0x511, 0x512, 0x7, 0x8a, 0x2, 0x2, 0x512, 0x514, 
       0x7, 0x123, 0x2, 0x2, 0x513, 0x509, 0x3, 0x2, 0x2, 0x2, 0x513, 0x50b, 
       0x3, 0x2, 0x2, 0x2, 0x513, 0x50d, 0x3, 0x2, 0x2, 0x2, 0x513, 0x510, 
       0x3, 0x2, 0x2, 0x2, 0x514, 0x519, 0x3, 0x2, 0x2, 0x2, 0x515, 0x516, 
       0x7, 0x8a, 0x2, 0x2, 0x516, 0x517, 0x7, 0x1df, 0x2, 0x2, 0x517, 0x519, 
       0x9, 0xd, 0x2, 0x2, 0x518, 0x501, 0x3, 0x2, 0x2, 0x2, 0x518, 0x503, 
       0x3, 0x2, 0x2, 0x2, 0x518, 0x506, 0x3, 0x2, 0x2, 0x2, 0x518, 0x513, 
       0x3, 0x2, 0x2, 0x2, 0x518, 0x515, 0x3, 0x2, 0x2, 0x2, 0x519, 0x47, 
       0x3, 0x2, 0x2, 0x2, 0x51a, 0x51b, 0x7, 0x158, 0x2, 0x2, 0x51b, 0x529, 
       0x7, 0x3c0, 0x2, 0x2, 0x51c, 0x51d, 0x7, 0x23, 0x2, 0x2, 0x51d, 0x529, 
       0x7, 0x3c0, 0x2, 0x2, 0x51e, 0x51f, 0x7, 0x213, 0x2, 0x2, 0x51f, 
       0x529, 0x7, 0x3c0, 0x2, 0x2, 0x520, 0x521, 0x7, 0x1b1, 0x2, 0x2, 
       0x521, 0x529, 0x7, 0x3c0, 0x2, 0x2, 0x522, 0x523, 0x7, 0x1e9, 0x2, 
       0x2, 0x523, 0x529, 0x7, 0x3c0, 0x2, 0x2, 0x524, 0x525, 0x7, 0x1aa, 
       0x2, 0x2, 0x525, 0x529, 0x7, 0x3c0, 0x2, 0x2, 0x526, 0x527, 0x7, 
       0x1b6, 0x2, 0x2, 0x527, 0x529, 0x5, 0x1e4, 0xf3, 0x2, 0x528, 0x51a, 
       0x3, 0x2, 0x2, 0x2, 0x528, 0x51c, 0x3, 0x2, 0x2, 0x2, 0x528, 0x51e, 
       0x3, 0x2, 0x2, 0x2, 0x528, 0x520, 0x3, 0x2, 0x2, 0x2, 0x528, 0x522, 
       0x3, 0x2, 0x2, 0x2, 0x528, 0x524, 0x3, 0x2, 0x2, 0x2, 0x528, 0x526, 
       0x3, 0x2, 0x2, 0x2, 0x529, 0x49, 0x3, 0x2, 0x2, 0x2, 0x52a, 0x52b, 
       0x7, 0x3b1, 0x2, 0x2, 0x52b, 0x530, 0x5, 0x4c, 0x27, 0x2, 0x52c, 
       0x52d, 0x7, 0x3b3, 0x2, 0x2, 0x52d, 0x52f, 0x5, 0x4c, 0x27, 0x2, 
       0x52e, 0x52c, 0x3, 0x2, 0x2, 0x2, 0x52f, 0x532, 0x3, 0x2, 0x2, 0x2, 
       0x530, 0x52e, 0x3, 0x2, 0x2, 0x2, 0x530, 0x531, 0x3, 0x2, 0x2, 0x2, 
       0x531, 0x533, 0x3, 0x2, 0x2, 0x2, 0x532, 0x530, 0x3, 0x2, 0x2, 0x2, 
       0x533, 0x534, 0x7, 0x3b2, 0x2, 0x2, 0x534, 0x4b, 0x3, 0x2, 0x2, 0x2, 
       0x535, 0x536, 0x5, 0x1de, 0xf0, 0x2, 0x536, 0x537, 0x5, 0x4e, 0x28, 
       0x2, 0x537, 0x53b, 0x3, 0x2, 0x2, 0x2, 0x538, 0x53b, 0x5, 0x52, 0x2a, 
       0x2, 0x539, 0x53b, 0x5, 0x5c, 0x2f, 0x2, 0x53a, 0x535, 0x3, 0x2, 
       0x2, 0x2, 0x53a, 0x538, 0x3, 0x2, 0x2, 0x2, 0x53a, 0x539, 0x3, 0x2, 
       0x2, 0x2, 0x53b, 0x4d, 0x3, 0x2, 0x2, 0x2, 0x53c, 0x540, 0x5, 0x1f2, 
       0xfa, 0x2, 0x53d, 0x53f, 0x5, 0x50, 0x29, 0x2, 0x53e, 0x53d, 0x3, 
       0x2, 0x2, 0x2, 0x53f, 0x542, 0x3, 0x2, 0x2, 0x2, 0x540, 0x53e, 0x3, 
       0x2, 0x2, 0x2, 0x540, 0x541, 0x3, 0x2, 0x2, 0x2, 0x541, 0x4f, 0x3, 
       0x2, 0x2, 0x2, 0x542, 0x540, 0x3, 0x2, 0x2, 0x2, 0x543, 0x557, 0x5, 
       0x1ee, 0xf8, 0x2, 0x544, 0x545, 0x7, 0x26, 0x2, 0x2, 0x545, 0x557, 
       0x5, 0x20e, 0x108, 0x2, 0x546, 0x557, 0x7, 0x101, 0x2, 0x2, 0x547, 
       0x549, 0x7, 0x71, 0x2, 0x2, 0x548, 0x547, 0x3, 0x2, 0x2, 0x2, 0x548, 
       0x549, 0x3, 0x2, 0x2, 0x2, 0x549, 0x54a, 0x3, 0x2, 0x2, 0x2, 0x54a, 
       0x557, 0x7, 0x4f, 0x2, 0x2, 0x54b, 0x54d, 0x7, 0x9d, 0x2, 0x2, 0x54c, 
       0x54e, 0x7, 0x4f, 0x2, 0x2, 0x54d, 0x54c, 0x3, 0x2, 0x2, 0x2, 0x54d, 
       0x54e, 0x3, 0x2, 0x2, 0x2, 0x54e, 0x557, 0x3, 0x2, 0x2, 0x2, 
  };
  static uint16_t serializedATNSegment1[] = {
    0x54f, 0x550, 0x7, 0x115, 0x2, 0x2, 0x550, 0x557, 0x7, 0x3c0, 0x2, 0x2, 
       0x551, 0x552, 0x7, 0x114, 0x2, 0x2, 0x552, 0x557, 0x9, 0x11, 0x2, 
       0x2, 0x553, 0x554, 0x7, 0x1fc, 0x2, 0x2, 0x554, 0x557, 0x9, 0x12, 
       0x2, 0x2, 0x555, 0x557, 0x5, 0x54, 0x2b, 0x2, 0x556, 0x543, 0x3, 
       0x2, 0x2, 0x2, 0x556, 0x544, 0x3, 0x2, 0x2, 0x2, 0x556, 0x546, 0x3, 
       0x2, 0x2, 0x2, 0x556, 0x548, 0x3, 0x2, 0x2, 0x2, 0x556, 0x54b, 0x3, 
       0x2, 0x2, 0x2, 0x556, 0x54f, 0x3, 0x2, 0x2, 0x2, 0x556, 0x551, 0x3, 
       0x2, 0x2, 0x2, 0x556, 0x553, 0x3, 0x2, 0x2, 0x2, 0x556, 0x555, 0x3, 
       0x2, 0x2, 0x2, 0x557, 0x51, 0x3, 0x2, 0x2, 0x2, 0x558, 0x55a, 0x7, 
       0x1c, 0x2, 0x2, 0x559, 0x55b, 0x5, 0x1de, 0xf0, 0x2, 0x55a, 0x559, 
       0x3, 0x2, 0x2, 0x2, 0x55a, 0x55b, 0x3, 0x2, 0x2, 0x2, 0x55b, 0x55d, 
       0x3, 0x2, 0x2, 0x2, 0x55c, 0x558, 0x3, 0x2, 0x2, 0x2, 0x55c, 0x55d, 
       0x3, 0x2, 0x2, 0x2, 0x55d, 0x55e, 0x3, 0x2, 0x2, 0x2, 0x55e, 0x55f, 
       0x7, 0x71, 0x2, 0x2, 0x55f, 0x561, 0x7, 0x4f, 0x2, 0x2, 0x560, 0x562, 
       0x5, 0x3e, 0x20, 0x2, 0x561, 0x560, 0x3, 0x2, 0x2, 0x2, 0x561, 0x562, 
       0x3, 0x2, 0x2, 0x2, 0x562, 0x563, 0x3, 0x2, 0x2, 0x2, 0x563, 0x567, 
       0x5, 0x204, 0x103, 0x2, 0x564, 0x566, 0x5, 0x40, 0x21, 0x2, 0x565, 
       0x564, 0x3, 0x2, 0x2, 0x2, 0x566, 0x569, 0x3, 0x2, 0x2, 0x2, 0x567, 
       0x565, 0x3, 0x2, 0x2, 0x2, 0x567, 0x568, 0x3, 0x2, 0x2, 0x2, 0x568, 
       0x595, 0x3, 0x2, 0x2, 0x2, 0x569, 0x567, 0x3, 0x2, 0x2, 0x2, 0x56a, 
       0x56c, 0x7, 0x1c, 0x2, 0x2, 0x56b, 0x56d, 0x5, 0x1de, 0xf0, 0x2, 
       0x56c, 0x56b, 0x3, 0x2, 0x2, 0x2, 0x56c, 0x56d, 0x3, 0x2, 0x2, 0x2, 
       0x56d, 0x56f, 0x3, 0x2, 0x2, 0x2, 0x56e, 0x56a, 0x3, 0x2, 0x2, 0x2, 
       0x56e, 0x56f, 0x3, 0x2, 0x2, 0x2, 0x56f, 0x570, 0x3, 0x2, 0x2, 0x2, 
       0x570, 0x572, 0x7, 0x9d, 0x2, 0x2, 0x571, 0x573, 0x9, 0x13, 0x2, 
       0x2, 0x572, 0x571, 0x3, 0x2, 0x2, 0x2, 0x572, 0x573, 0x3, 0x2, 0x2, 
       0x2, 0x573, 0x575, 0x3, 0x2, 0x2, 0x2, 0x574, 0x576, 0x5, 0x1de, 
       0xf0, 0x2, 0x575, 0x574, 0x3, 0x2, 0x2, 0x2, 0x575, 0x576, 0x3, 0x2, 
       0x2, 0x2, 0x576, 0x578, 0x3, 0x2, 0x2, 0x2, 0x577, 0x579, 0x5, 0x3e, 
       0x20, 0x2, 0x578, 0x577, 0x3, 0x2, 0x2, 0x2, 0x578, 0x579, 0x3, 0x2, 
       0x2, 0x2, 0x579, 0x57a, 0x3, 0x2, 0x2, 0x2, 0x57a, 0x57e, 0x5, 0x204, 
       0x103, 0x2, 0x57b, 0x57d, 0x5, 0x40, 0x21, 0x2, 0x57c, 0x57b, 0x3, 
       0x2, 0x2, 0x2, 0x57d, 0x580, 0x3, 0x2, 0x2, 0x2, 0x57e, 0x57c, 0x3, 
       0x2, 0x2, 0x2, 0x57e, 0x57f, 0x3, 0x2, 0x2, 0x2, 0x57f, 0x595, 0x3, 
       0x2, 0x2, 0x2, 0x580, 0x57e, 0x3, 0x2, 0x2, 0x2, 0x581, 0x583, 0x7, 
       0x1c, 0x2, 0x2, 0x582, 0x584, 0x5, 0x1de, 0xf0, 0x2, 0x583, 0x582, 
       0x3, 0x2, 0x2, 0x2, 0x583, 0x584, 0x3, 0x2, 0x2, 0x2, 0x584, 0x586, 
       0x3, 0x2, 0x2, 0x2, 0x585, 0x581, 0x3, 0x2, 0x2, 0x2, 0x585, 0x586, 
       0x3, 0x2, 0x2, 0x2, 0x586, 0x587, 0x3, 0x2, 0x2, 0x2, 0x587, 0x588, 
       0x7, 0x3b, 0x2, 0x2, 0x588, 0x58a, 0x7, 0x4f, 0x2, 0x2, 0x589, 0x58b, 
       0x5, 0x1de, 0xf0, 0x2, 0x58a, 0x589, 0x3, 0x2, 0x2, 0x2, 0x58a, 0x58b, 
       0x3, 0x2, 0x2, 0x2, 0x58b, 0x58c, 0x3, 0x2, 0x2, 0x2, 0x58c, 0x58d, 
       0x5, 0x204, 0x103, 0x2, 0x58d, 0x58e, 0x5, 0x54, 0x2b, 0x2, 0x58e, 
       0x595, 0x3, 0x2, 0x2, 0x2, 0x58f, 0x590, 0x7, 0x18, 0x2, 0x2, 0x590, 
       0x591, 0x7, 0x3b1, 0x2, 0x2, 0x591, 0x592, 0x5, 0x222, 0x112, 0x2, 
       0x592, 0x593, 0x7, 0x3b2, 0x2, 0x2, 0x593, 0x595, 0x3, 0x2, 0x2, 
       0x2, 0x594, 0x55c, 0x3, 0x2, 0x2, 0x2, 0x594, 0x56e, 0x3, 0x2, 0x2, 
       0x2, 0x594, 0x585, 0x3, 0x2, 0x2, 0x2, 0x594, 0x58f, 0x3, 0x2, 0x2, 
       0x2, 0x595, 0x53, 0x3, 0x2, 0x2, 0x2, 0x596, 0x597, 0x7, 0x77, 0x2, 
       0x2, 0x597, 0x598, 0x5, 0x1c4, 0xe3, 0x2, 0x598, 0x59b, 0x5, 0x204, 
       0x103, 0x2, 0x599, 0x59a, 0x7, 0x5f, 0x2, 0x2, 0x59a, 0x59c, 0x9, 
       0x14, 0x2, 0x2, 0x59b, 0x599, 0x3, 0x2, 0x2, 0x2, 0x59b, 0x59c, 0x3, 
       0x2, 0x2, 0x2, 0x59c, 0x59f, 0x3, 0x2, 0x2, 0x2, 0x59d, 0x5a0, 0x5, 
       0x56, 0x2c, 0x2, 0x59e, 0x5a0, 0x5, 0x58, 0x2d, 0x2, 0x59f, 0x59d, 
       0x3, 0x2, 0x2, 0x2, 0x59f, 0x59e, 0x3, 0x2, 0x2, 0x2, 0x59f, 0x5a0, 
       0x3, 0x2, 0x2, 0x2, 0x5a0, 0x55, 0x3, 0x2, 0x2, 0x2, 0x5a1, 0x5a2, 
       0x7, 0x67, 0x2, 0x2, 0x5a2, 0x5a3, 0x7, 0x28, 0x2, 0x2, 0x5a3, 0x5a7, 
       0x5, 0x5a, 0x2e, 0x2, 0x5a4, 0x5a5, 0x7, 0x67, 0x2, 0x2, 0x5a5, 0x5a6, 
       0x7, 0xa0, 0x2, 0x2, 0x5a6, 0x5a8, 0x5, 0x5a, 0x2e, 0x2, 0x5a7, 0x5a4, 
       0x3, 0x2, 0x2, 0x2, 0x5a7, 0x5a8, 0x3, 0x2, 0x2, 0x2, 0x5a8, 0x57, 
       0x3, 0x2, 0x2, 0x2, 0x5a9, 0x5aa, 0x7, 0x67, 0x2, 0x2, 0x5aa, 0x5ab, 
       0x7, 0xa0, 0x2, 0x2, 0x5ab, 0x5af, 0x5, 0x5a, 0x2e, 0x2, 0x5ac, 0x5ad, 
       0x7, 0x67, 0x2, 0x2, 0x5ad, 0x5ae, 0x7, 0x28, 0x2, 0x2, 0x5ae, 0x5b0, 
       0x5, 0x5a, 0x2e, 0x2, 0x5af, 0x5ac, 0x3, 0x2, 0x2, 0x2, 0x5af, 0x5b0, 
       0x3, 0x2, 0x2, 0x2, 0x5b0, 0x59, 0x3, 0x2, 0x2, 0x2, 0x5b1, 0x5b8, 
       0x7, 0x7e, 0x2, 0x2, 0x5b2, 0x5b8, 0x7, 0x13, 0x2, 0x2, 0x5b3, 0x5b4, 
       0x7, 0x86, 0x2, 0x2, 0x5b4, 0x5b8, 0x7, 0x66, 0x2, 0x2, 0x5b5, 0x5b6, 
       0x7, 0x19d, 0x2, 0x2, 0x5b6, 0x5b8, 0x7, 0xf8, 0x2, 0x2, 0x5b7, 0x5b1, 
       0x3, 0x2, 0x2, 0x2, 0x5b7, 0x5b2, 0x3, 0x2, 0x2, 0x2, 0x5b7, 0x5b3, 
       0x3, 0x2, 0x2, 0x2, 0x5b7, 0x5b5, 0x3, 0x2, 0x2, 0x2, 0x5b8, 0x5b, 
       0x3, 0x2, 0x2, 0x2, 0x5b9, 0x5bb, 0x9, 0x13, 0x2, 0x2, 0x5ba, 0x5bc, 
       0x5, 0x1de, 0xf0, 0x2, 0x5bb, 0x5ba, 0x3, 0x2, 0x2, 0x2, 0x5bb, 0x5bc, 
       0x3, 0x2, 0x2, 0x2, 0x5bc, 0x5be, 0x3, 0x2, 0x2, 0x2, 0x5bd, 0x5bf, 
       0x5, 0x3e, 0x20, 0x2, 0x5be, 0x5bd, 0x3, 0x2, 0x2, 0x2, 0x5be, 0x5bf, 
       0x3, 0x2, 0x2, 0x2, 0x5bf, 0x5c0, 0x3, 0x2, 0x2, 0x2, 0x5c0, 0x5c4, 
       0x5, 0x204, 0x103, 0x2, 0x5c1, 0x5c3, 0x5, 0x40, 0x21, 0x2, 0x5c2, 
       0x5c1, 0x3, 0x2, 0x2, 0x2, 0x5c3, 0x5c6, 0x3, 0x2, 0x2, 0x2, 0x5c4, 
       0x5c2, 0x3, 0x2, 0x2, 0x2, 0x5c4, 0x5c5, 0x3, 0x2, 0x2, 0x2, 0x5c5, 
       0x5d6, 0x3, 0x2, 0x2, 0x2, 0x5c6, 0x5c4, 0x3, 0x2, 0x2, 0x2, 0x5c7, 
       0x5c9, 0x9, 0x15, 0x2, 0x2, 0x5c8, 0x5ca, 0x9, 0x13, 0x2, 0x2, 0x5c9, 
       0x5c8, 0x3, 0x2, 0x2, 0x2, 0x5c9, 0x5ca, 0x3, 0x2, 0x2, 0x2, 0x5ca, 
       0x5cc, 0x3, 0x2, 0x2, 0x2, 0x5cb, 0x5cd, 0x5, 0x1de, 0xf0, 0x2, 0x5cc, 
       0x5cb, 0x3, 0x2, 0x2, 0x2, 0x5cc, 0x5cd, 0x3, 0x2, 0x2, 0x2, 0x5cd, 
       0x5ce, 0x3, 0x2, 0x2, 0x2, 0x5ce, 0x5d2, 0x5, 0x204, 0x103, 0x2, 
       0x5cf, 0x5d1, 0x5, 0x40, 0x21, 0x2, 0x5d0, 0x5cf, 0x3, 0x2, 0x2, 
       0x2, 0x5d1, 0x5d4, 0x3, 0x2, 0x2, 0x2, 0x5d2, 0x5d0, 0x3, 0x2, 0x2, 
       0x2, 0x5d2, 0x5d3, 0x3, 0x2, 0x2, 0x2, 0x5d3, 0x5d6, 0x3, 0x2, 0x2, 
       0x2, 0x5d4, 0x5d2, 0x3, 0x2, 0x2, 0x2, 0x5d5, 0x5b9, 0x3, 0x2, 0x2, 
       0x2, 0x5d5, 0x5c7, 0x3, 0x2, 0x2, 0x2, 0x5d6, 0x5d, 0x3, 0x2, 0x2, 
       0x2, 0x5d7, 0x5d9, 0x7, 0x136, 0x2, 0x2, 0x5d8, 0x5da, 0x7, 0x3a8, 
       0x2, 0x2, 0x5d9, 0x5d8, 0x3, 0x2, 0x2, 0x2, 0x5d9, 0x5da, 0x3, 0x2, 
       0x2, 0x2, 0x5da, 0x5db, 0x3, 0x2, 0x2, 0x2, 0x5db, 0x66c, 0x5, 0x1d4, 
       0xeb, 0x2, 0x5dc, 0x5de, 0x7, 0x101, 0x2, 0x2, 0x5dd, 0x5df, 0x7, 
       0x3a8, 0x2, 0x2, 0x5de, 0x5dd, 0x3, 0x2, 0x2, 0x2, 0x5de, 0x5df, 
       0x3, 0x2, 0x2, 0x2, 0x5df, 0x5e0, 0x3, 0x2, 0x2, 0x2, 0x5e0, 0x66c, 
       0x5, 0x1e4, 0xf3, 0x2, 0x5e1, 0x5e3, 0x7, 0x102, 0x2, 0x2, 0x5e2, 
       0x5e4, 0x7, 0x3a8, 0x2, 0x2, 0x5e3, 0x5e2, 0x3, 0x2, 0x2, 0x2, 0x5e3, 
       0x5e4, 0x3, 0x2, 0x2, 0x2, 0x5e4, 0x5e5, 0x3, 0x2, 0x2, 0x2, 0x5e5, 
       0x66c, 0x5, 0x1e4, 0xf3, 0x2, 0x5e6, 0x5e8, 0x7, 0x26, 0x2, 0x2, 
       0x5e7, 0x5e6, 0x3, 0x2, 0x2, 0x2, 0x5e7, 0x5e8, 0x3, 0x2, 0x2, 0x2, 
       0x5e8, 0x5ec, 0x3, 0x2, 0x2, 0x2, 0x5e9, 0x5ea, 0x7, 0x17, 0x2, 0x2, 
       0x5ea, 0x5ed, 0x7, 0x86, 0x2, 0x2, 0x5eb, 0x5ed, 0x7, 0x292, 0x2, 
       0x2, 0x5ec, 0x5e9, 0x3, 0x2, 0x2, 0x2, 0x5ec, 0x5eb, 0x3, 0x2, 0x2, 
       0x2, 0x5ed, 0x5ef, 0x3, 0x2, 0x2, 0x2, 0x5ee, 0x5f0, 0x7, 0x3a8, 
       0x2, 0x2, 0x5ef, 0x5ee, 0x3, 0x2, 0x2, 0x2, 0x5ef, 0x5f0, 0x3, 0x2, 
       0x2, 0x2, 0x5f0, 0x5f1, 0x3, 0x2, 0x2, 0x2, 0x5f1, 0x66c, 0x5, 0x1d0, 
       0xe9, 0x2, 0x5f2, 0x5f4, 0x7, 0x10d, 0x2, 0x2, 0x5f3, 0x5f5, 0x7, 
       0x3a8, 0x2, 0x2, 0x5f4, 0x5f3, 0x3, 0x2, 0x2, 0x2, 0x5f4, 0x5f5, 
       0x3, 0x2, 0x2, 0x2, 0x5f5, 0x5f6, 0x3, 0x2, 0x2, 0x2, 0x5f6, 0x66c, 
       0x9, 0x16, 0x2, 0x2, 0x5f7, 0x5f9, 0x7, 0x26, 0x2, 0x2, 0x5f8, 0x5f7, 
       0x3, 0x2, 0x2, 0x2, 0x5f8, 0x5f9, 0x3, 0x2, 0x2, 0x2, 0x5f9, 0x5fa, 
       0x3, 0x2, 0x2, 0x2, 0x5fa, 0x5fc, 0x7, 0x19, 0x2, 0x2, 0x5fb, 0x5fd, 
       0x7, 0x3a8, 0x2, 0x2, 0x5fc, 0x5fb, 0x3, 0x2, 0x2, 0x2, 0x5fc, 0x5fd, 
       0x3, 0x2, 0x2, 0x2, 0x5fd, 0x5fe, 0x3, 0x2, 0x2, 0x2, 0x5fe, 0x66c, 
       0x5, 0x1d2, 0xea, 0x2, 0x5ff, 0x601, 0x7, 0x115, 0x2, 0x2, 0x600, 
       0x602, 0x7, 0x3a8, 0x2, 0x2, 0x601, 0x600, 0x3, 0x2, 0x2, 0x2, 0x601, 
       0x602, 0x3, 0x2, 0x2, 0x2, 0x602, 0x603, 0x3, 0x2, 0x2, 0x2, 0x603, 
       0x66c, 0x7, 0x3c0, 0x2, 0x2, 0x604, 0x606, 0x7, 0x11a, 0x2, 0x2, 
       0x605, 0x607, 0x7, 0x3a8, 0x2, 0x2, 0x606, 0x605, 0x3, 0x2, 0x2, 
       0x2, 0x606, 0x607, 0x3, 0x2, 0x2, 0x2, 0x607, 0x608, 0x3, 0x2, 0x2, 
       0x2, 0x608, 0x66c, 0x7, 0x3c0, 0x2, 0x2, 0x609, 0x60b, 0x7, 0x11c, 
       0x2, 0x2, 0x60a, 0x60c, 0x7, 0x3a8, 0x2, 0x2, 0x60b, 0x60a, 0x3, 
       0x2, 0x2, 0x2, 0x60b, 0x60c, 0x3, 0x2, 0x2, 0x2, 0x60c, 0x60d, 0x3, 
       0x2, 0x2, 0x2, 0x60d, 0x66c, 0x7, 0x3c0, 0x2, 0x2, 0x60e, 0x60f, 
       0x7, 0x123, 0x2, 0x2, 0x60f, 0x611, 0x7, 0x12a, 0x2, 0x2, 0x610, 
       0x612, 0x7, 0x3a8, 0x2, 0x2, 0x611, 0x610, 0x3, 0x2, 0x2, 0x2, 0x611, 
       0x612, 0x3, 0x2, 0x2, 0x2, 0x612, 0x613, 0x3, 0x2, 0x2, 0x2, 0x613, 
       0x66c, 0x7, 0x3c0, 0x2, 0x2, 0x614, 0x616, 0x7, 0x128, 0x2, 0x2, 
       0x615, 0x617, 0x7, 0x3a8, 0x2, 0x2, 0x616, 0x615, 0x3, 0x2, 0x2, 
       0x2, 0x616, 0x617, 0x3, 0x2, 0x2, 0x2, 0x617, 0x618, 0x3, 0x2, 0x2, 
       0x2, 0x618, 0x66c, 0x9, 0x16, 0x2, 0x2, 0x619, 0x61b, 0x7, 0x133, 
       0x2, 0x2, 0x61a, 0x61c, 0x7, 0x3a8, 0x2, 0x2, 0x61b, 0x61a, 0x3, 
       0x2, 0x2, 0x2, 0x61b, 0x61c, 0x3, 0x2, 0x2, 0x2, 0x61c, 0x61d, 0x3, 
       0x2, 0x2, 0x2, 0x61d, 0x66c, 0x7, 0x3c0, 0x2, 0x2, 0x61e, 0x61f, 
       0x7, 0x45, 0x2, 0x2, 0x61f, 0x621, 0x7, 0x12a, 0x2, 0x2, 0x620, 0x622, 
       0x7, 0x3a8, 0x2, 0x2, 0x621, 0x620, 0x3, 0x2, 0x2, 0x2, 0x621, 0x622, 
       0x3, 0x2, 0x2, 0x2, 0x622, 0x623, 0x3, 0x2, 0x2, 0x2, 0x623, 0x66c, 
       0x7, 0x3c0, 0x2, 0x2, 0x624, 0x626, 0x7, 0x160, 0x2, 0x2, 0x625, 
       0x627, 0x7, 0x3a8, 0x2, 0x2, 0x626, 0x625, 0x3, 0x2, 0x2, 0x2, 0x626, 
       0x627, 0x3, 0x2, 0x2, 0x2, 0x627, 0x628, 0x3, 0x2, 0x2, 0x2, 0x628, 
       0x66c, 0x9, 0x17, 0x2, 0x2, 0x629, 0x62b, 0x7, 0x16a, 0x2, 0x2, 0x62a, 
       0x62c, 0x7, 0x3a8, 0x2, 0x2, 0x62b, 0x62a, 0x3, 0x2, 0x2, 0x2, 0x62b, 
       0x62c, 0x3, 0x2, 0x2, 0x2, 0x62c, 0x62d, 0x3, 0x2, 0x2, 0x2, 0x62d, 
       0x66c, 0x5, 0x1e6, 0xf4, 0x2, 0x62e, 0x630, 0x7, 0x18b, 0x2, 0x2, 
       0x62f, 0x631, 0x7, 0x3a8, 0x2, 0x2, 0x630, 0x62f, 0x3, 0x2, 0x2, 
       0x2, 0x630, 0x631, 0x3, 0x2, 0x2, 0x2, 0x631, 0x632, 0x3, 0x2, 0x2, 
       0x2, 0x632, 0x66c, 0x5, 0x1e4, 0xf3, 0x2, 0x633, 0x635, 0x7, 0x193, 
       0x2, 0x2, 0x634, 0x636, 0x7, 0x3a8, 0x2, 0x2, 0x635, 0x634, 0x3, 
       0x2, 0x2, 0x2, 0x635, 0x636, 0x3, 0x2, 0x2, 0x2, 0x636, 0x637, 0x3, 
       0x2, 0x2, 0x2, 0x637, 0x66c, 0x5, 0x1e4, 0xf3, 0x2, 0x638, 0x63a, 
       0x7, 0x1ab, 0x2, 0x2, 0x639, 0x63b, 0x7, 0x3a8, 0x2, 0x2, 0x63a, 
       0x639, 0x3, 0x2, 0x2, 0x2, 0x63a, 0x63b, 0x3, 0x2, 0x2, 0x2, 0x63b, 
       0x63c, 0x3, 0x2, 0x2, 0x2, 0x63c, 0x66c, 0x9, 0x18, 0x2, 0x2, 0x63d, 
       0x63f, 0x7, 0x1b1, 0x2, 0x2, 0x63e, 0x640, 0x7, 0x3a8, 0x2, 0x2, 
       0x63f, 0x63e, 0x3, 0x2, 0x2, 0x2, 0x63f, 0x640, 0x3, 0x2, 0x2, 0x2, 
       0x640, 0x641, 0x3, 0x2, 0x2, 0x2, 0x641, 0x66c, 0x7, 0x3c0, 0x2, 
       0x2, 0x642, 0x644, 0x7, 0x1dc, 0x2, 0x2, 0x643, 0x645, 0x7, 0x3a8, 
       0x2, 0x2, 0x644, 0x643, 0x3, 0x2, 0x2, 0x2, 0x644, 0x645, 0x3, 0x2, 
       0x2, 0x2, 0x645, 0x646, 0x3, 0x2, 0x2, 0x2, 0x646, 0x66c, 0x9, 0x19, 
       0x2, 0x2, 0x647, 0x649, 0x7, 0x1f7, 0x2, 0x2, 0x648, 0x64a, 0x7, 
       0x3a8, 0x2, 0x2, 0x649, 0x648, 0x3, 0x2, 0x2, 0x2, 0x649, 0x64a, 
       0x3, 0x2, 0x2, 0x2, 0x64a, 0x64b, 0x3, 0x2, 0x2, 0x2, 0x64b, 0x66c, 
       0x9, 0x18, 0x2, 0x2, 0x64c, 0x64e, 0x7, 0x1f8, 0x2, 0x2, 0x64d, 0x64f, 
       0x7, 0x3a8, 0x2, 0x2, 0x64e, 0x64d, 0x3, 0x2, 0x2, 0x2, 0x64e, 0x64f, 
       0x3, 0x2, 0x2, 0x2, 0x64f, 0x650, 0x3, 0x2, 0x2, 0x2, 0x650, 0x66c, 
       0x9, 0x18, 0x2, 0x2, 0x651, 0x653, 0x7, 0x1f9, 0x2, 0x2, 0x652, 0x654, 
       0x7, 0x3a8, 0x2, 0x2, 0x653, 0x652, 0x3, 0x2, 0x2, 0x2, 0x653, 0x654, 
       0x3, 0x2, 0x2, 0x2, 0x654, 0x655, 0x3, 0x2, 0x2, 0x2, 0x655, 0x66c, 
       0x5, 0x1e4, 0xf3, 0x2, 0x656, 0x657, 0x7, 0x204, 0x2, 0x2, 0x657, 
       0x65a, 0x5, 0x1de, 0xf0, 0x2, 0x658, 0x659, 0x7, 0x1fc, 0x2, 0x2, 
       0x659, 0x65b, 0x9, 0x12, 0x2, 0x2, 0x65a, 0x658, 0x3, 0x2, 0x2, 0x2, 
       0x65a, 0x65b, 0x3, 0x2, 0x2, 0x2, 0x65b, 0x66c, 0x3, 0x2, 0x2, 0x2, 
       0x65c, 0x65e, 0x7, 0x9c, 0x2, 0x2, 0x65d, 0x65f, 0x7, 0x3a8, 0x2, 
       0x2, 0x65e, 0x65d, 0x3, 0x2, 0x2, 0x2, 0x65e, 0x65f, 0x3, 0x2, 0x2, 
       0x2, 0x65f, 0x660, 0x3, 0x2, 0x2, 0x2, 0x660, 0x661, 0x7, 0x3b1, 
       0x2, 0x2, 0x661, 0x666, 0x5, 0x1c4, 0xe3, 0x2, 0x662, 0x663, 0x7, 
       0x3b3, 0x2, 0x2, 0x663, 0x665, 0x5, 0x1c4, 0xe3, 0x2, 0x664, 0x662, 
       0x3, 0x2, 0x2, 0x2, 0x665, 0x668, 0x3, 0x2, 0x2, 0x2, 0x666, 0x664, 
       0x3, 0x2, 0x2, 0x2, 0x666, 0x667, 0x3, 0x2, 0x2, 0x2, 0x667, 0x669, 
       0x3, 0x2, 0x2, 0x2, 0x668, 0x666, 0x3, 0x2, 0x2, 0x2, 0x669, 0x66a, 
       0x7, 0x3b2, 0x2, 0x2, 0x66a, 0x66c, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x5d7, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x5dc, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x5e1, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x5e7, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x5f2, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x5f8, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x5ff, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x604, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x609, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x60e, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x614, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x619, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x61e, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x624, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x629, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x62e, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x633, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x638, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x63d, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x642, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x647, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x64c, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x651, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x656, 0x3, 0x2, 0x2, 0x2, 0x66b, 0x65c, 
       0x3, 0x2, 0x2, 0x2, 0x66c, 0x5f, 0x3, 0x2, 0x2, 0x2, 0x66d, 0x66e, 
       0x7, 0x70, 0x2, 0x2, 0x66e, 0x66f, 0x7, 0x11, 0x2, 0x2, 0x66f, 0x672, 
       0x5, 0x62, 0x32, 0x2, 0x670, 0x671, 0x7, 0x1b0, 0x2, 0x2, 0x671, 
       0x673, 0x5, 0x1e4, 0xf3, 0x2, 0x672, 0x670, 0x3, 0x2, 0x2, 0x2, 0x672, 
       0x673, 0x3, 0x2, 0x2, 0x2, 0x673, 0x67b, 0x3, 0x2, 0x2, 0x2, 0x674, 
       0x675, 0x7, 0x1ff, 0x2, 0x2, 0x675, 0x676, 0x7, 0x11, 0x2, 0x2, 0x676, 
       0x679, 0x5, 0x64, 0x33, 0x2, 0x677, 0x678, 0x7, 0x200, 0x2, 0x2, 
       0x678, 0x67a, 0x5, 0x1e4, 0xf3, 0x2, 0x679, 0x677, 0x3, 0x2, 0x2, 
       0x2, 0x679, 0x67a, 0x3, 0x2, 0x2, 0x2, 0x67a, 0x67c, 0x3, 0x2, 0x2, 
       0x2, 0x67b, 0x674, 0x3, 0x2, 0x2, 0x2, 0x67b, 0x67c, 0x3, 0x2, 0x2, 
       0x2, 0x67c, 0x688, 0x3, 0x2, 0x2, 0x2, 0x67d, 0x67e, 0x7, 0x3b1, 
       0x2, 0x2, 0x67e, 0x683, 0x5, 0x66, 0x34, 0x2, 0x67f, 0x680, 0x7, 
       0x3b3, 0x2, 0x2, 0x680, 0x682, 0x5, 0x66, 0x34, 0x2, 0x681, 0x67f, 
       0x3, 0x2, 0x2, 0x2, 0x682, 0x685, 0x3, 0x2, 0x2, 0x2, 0x683, 0x681, 
       0x3, 0x2, 0x2, 0x2, 0x683, 0x684, 0x3, 0x2, 0x2, 0x2, 0x684, 0x686, 
       0x3, 0x2, 0x2, 0x2, 0x685, 0x683, 0x3, 0x2, 0x2, 0x2, 0x686, 0x687, 
       0x7, 0x3b2, 0x2, 0x2, 0x687, 0x689, 0x3, 0x2, 0x2, 0x2, 0x688, 0x67d, 
       0x3, 0x2, 0x2, 0x2, 0x688, 0x689, 0x3, 0x2, 0x2, 0x2, 0x689, 0x61, 
       0x3, 0x2, 0x2, 0x2, 0x68a, 0x698, 0x5, 0x64, 0x33, 0x2, 0x68b, 0x695, 
       0x9, 0x1a, 0x2, 0x2, 0x68c, 0x68d, 0x7, 0x3b1, 0x2, 0x2, 0x68d, 0x68e, 
       0x5, 0x222, 0x112, 0x2, 0x68e, 0x68f, 0x7, 0x3b2, 0x2, 0x2, 0x68f, 
       0x696, 0x3, 0x2, 0x2, 0x2, 0x690, 0x691, 0x7, 0x113, 0x2, 0x2, 0x691, 
       0x692, 0x7, 0x3b1, 0x2, 0x2, 0x692, 0x693, 0x5, 0x1fe, 0x100, 0x2, 
       0x693, 0x694, 0x7, 0x3b2, 0x2, 0x2, 0x694, 0x696, 0x3, 0x2, 0x2, 
       0x2, 0x695, 0x68c, 0x3, 0x2, 0x2, 0x2, 0x695, 0x690, 0x3, 0x2, 0x2, 
       0x2, 0x696, 0x698, 0x3, 0x2, 0x2, 0x2, 0x697, 0x68a, 0x3, 0x2, 0x2, 
       0x2, 0x697, 0x68b, 0x3, 0x2, 0x2, 0x2, 0x698, 0x63, 0x3, 0x2, 0x2, 
       0x2, 0x699, 0x69b, 0x7, 0x57, 0x2, 0x2, 0x69a, 0x699, 0x3, 0x2, 0x2, 
       0x2, 0x69a, 0x69b, 0x3, 0x2, 0x2, 0x2, 0x69b, 0x69c, 0x3, 0x2, 0x2, 
       0x2, 0x69c, 0x69d, 0x7, 0x156, 0x2, 0x2, 0x69d, 0x69e, 0x7, 0x3b1, 
       0x2, 0x2, 0x69e, 0x69f, 0x5, 0x222, 0x112, 0x2, 0x69f, 0x6a0, 0x7, 
       0x3b2, 0x2, 0x2, 0x6a0, 0x6af, 0x3, 0x2, 0x2, 0x2, 0x6a1, 0x6a3, 
       0x7, 0x57, 0x2, 0x2, 0x6a2, 0x6a1, 0x3, 0x2, 0x2, 0x2, 0x6a2, 0x6a3, 
       0x3, 0x2, 0x2, 0x2, 0x6a3, 0x6a4, 0x3, 0x2, 0x2, 0x2, 0x6a4, 0x6a8, 
       0x7, 0x4f, 0x2, 0x2, 0x6a5, 0x6a6, 0x7, 0xfb, 0x2, 0x2, 0x6a6, 0x6a7, 
       0x7, 0x3a8, 0x2, 0x2, 0x6a7, 0x6a9, 0x9, 0x1b, 0x2, 0x2, 0x6a8, 0x6a5, 
       0x3, 0x2, 0x2, 0x2, 0x6a8, 0x6a9, 0x3, 0x2, 0x2, 0x2, 0x6a9, 0x6aa, 
       0x3, 0x2, 0x2, 0x2, 0x6aa, 0x6ab, 0x7, 0x3b1, 0x2, 0x2, 0x6ab, 0x6ac, 
       0x5, 0x1fe, 0x100, 0x2, 0x6ac, 0x6ad, 0x7, 0x3b2, 0x2, 0x2, 0x6ad, 
       0x6af, 0x3, 0x2, 0x2, 0x2, 0x6ae, 0x69a, 0x3, 0x2, 0x2, 0x2, 0x6ae, 
       0x6a2, 0x3, 0x2, 0x2, 0x2, 0x6af, 0x65, 0x3, 0x2, 0x2, 0x2, 0x6b0, 
       0x6b1, 0x7, 0x70, 0x2, 0x2, 0x6b1, 0x6c6, 0x5, 0x1de, 0xf0, 0x2, 
       0x6b2, 0x6c4, 0x7, 0xa4, 0x2, 0x2, 0x6b3, 0x6b4, 0x7, 0x16e, 0x2, 
       0x2, 0x6b4, 0x6bd, 0x7, 0x207, 0x2, 0x2, 0x6b5, 0x6b8, 0x7, 0x3b1, 
       0x2, 0x2, 0x6b6, 0x6b9, 0x5, 0x222, 0x112, 0x2, 0x6b7, 0x6b9, 0x5, 
       0x208, 0x105, 0x2, 0x6b8, 0x6b6, 0x3, 0x2, 0x2, 0x2, 0x6b8, 0x6b7, 
       0x3, 0x2, 0x2, 0x2, 0x6b9, 0x6ba, 0x3, 0x2, 0x2, 0x2, 0x6ba, 0x6bb, 
       0x7, 0x3b2, 0x2, 0x2, 0x6bb, 0x6be, 0x3, 0x2, 0x2, 0x2, 0x6bc, 0x6be, 
       0x7, 0x60, 0x2, 0x2, 0x6bd, 0x6b5, 0x3, 0x2, 0x2, 0x2, 0x6bd, 0x6bc, 
       0x3, 0x2, 0x2, 0x2, 0x6be, 0x6c5, 0x3, 0x2, 0x2, 0x2, 0x6bf, 0x6c0, 
       0x7, 0x44, 0x2, 0x2, 0x6c0, 0x6c1, 0x7, 0x3b1, 0x2, 0x2, 0x6c1, 0x6c2, 
       0x5, 0x208, 0x105, 0x2, 0x6c2, 0x6c3, 0x7, 0x3b2, 0x2, 0x2, 0x6c3, 
       0x6c5, 0x3, 0x2, 0x2, 0x2, 0x6c4, 0x6b3, 0x3, 0x2, 0x2, 0x2, 0x6c4, 
       0x6bf, 0x3, 0x2, 0x2, 0x2, 0x6c5, 0x6c7, 0x3, 0x2, 0x2, 0x2, 0x6c6, 
       0x6b2, 0x3, 0x2, 0x2, 0x2, 0x6c6, 0x6c7, 0x3, 0x2, 0x2, 0x2, 0x6c7, 
       0x6d0, 0x3, 0x2, 0x2, 0x2, 0x6c8, 0x6ca, 0x7, 0x1fc, 0x2, 0x2, 0x6c9, 
       0x6c8, 0x3, 0x2, 0x2, 0x2, 0x6c9, 0x6ca, 0x3, 0x2, 0x2, 0x2, 0x6ca, 
       0x6cb, 0x3, 0x2, 0x2, 0x2, 0x6cb, 0x6cd, 0x7, 0x136, 0x2, 0x2, 0x6cc, 
       0x6ce, 0x7, 0x3a8, 0x2, 0x2, 0x6cd, 0x6cc, 0x3, 0x2, 0x2, 0x2, 0x6cd, 
       0x6ce, 0x3, 0x2, 0x2, 0x2, 0x6ce, 0x6cf, 0x3, 0x2, 0x2, 0x2, 0x6cf, 
       0x6d1, 0x5, 0x1d4, 0xeb, 0x2, 0x6d0, 0x6c9, 0x3, 0x2, 0x2, 0x2, 0x6d0, 
       0x6d1, 0x3, 0x2, 0x2, 0x2, 0x6d1, 0x6d7, 0x3, 0x2, 0x2, 0x2, 0x6d2, 
       0x6d4, 0x7, 0x115, 0x2, 0x2, 0x6d3, 0x6d5, 0x7, 0x3a8, 0x2, 0x2, 
       0x6d4, 0x6d3, 0x3, 0x2, 0x2, 0x2, 0x6d4, 0x6d5, 0x3, 0x2, 0x2, 0x2, 
       0x6d5, 0x6d6, 0x3, 0x2, 0x2, 0x2, 0x6d6, 0x6d8, 0x7, 0x3c0, 0x2, 
       0x2, 0x6d7, 0x6d2, 0x3, 0x2, 0x2, 0x2, 0x6d7, 0x6d8, 0x3, 0x2, 0x2, 
       0x2, 0x6d8, 0x6df, 0x3, 0x2, 0x2, 0x2, 0x6d9, 0x6da, 0x7, 0x123, 
       0x2, 0x2, 0x6da, 0x6dc, 0x7, 0x12a, 0x2, 0x2, 0x6db, 0x6dd, 0x7, 
       0x3a8, 0x2, 0x2, 0x6dc, 0x6db, 0x3, 0x2, 0x2, 0x2, 0x6dc, 0x6dd, 
       0x3, 0x2, 0x2, 0x2, 0x6dd, 0x6de, 0x3, 0x2, 0x2, 0x2, 0x6de, 0x6e0, 
       0x7, 0x3c0, 0x2, 0x2, 0x6df, 0x6d9, 0x3, 0x2, 0x2, 0x2, 0x6df, 0x6e0, 
       0x3, 0x2, 0x2, 0x2, 0x6e0, 0x6e7, 0x3, 0x2, 0x2, 0x2, 0x6e1, 0x6e2, 
       0x7, 0x45, 0x2, 0x2, 0x6e2, 0x6e4, 0x7, 0x12a, 0x2, 0x2, 0x6e3, 0x6e5, 
       0x7, 0x3a8, 0x2, 0x2, 0x6e4, 0x6e3, 0x3, 0x2, 0x2, 0x2, 0x6e4, 0x6e5, 
       0x3, 0x2, 0x2, 0x2, 0x6e5, 0x6e6, 0x3, 0x2, 0x2, 0x2, 0x6e6, 0x6e8, 
       0x7, 0x3c0, 0x2, 0x2, 0x6e7, 0x6e1, 0x3, 0x2, 0x2, 0x2, 0x6e7, 0x6e8, 
       0x3, 0x2, 0x2, 0x2, 0x6e8, 0x6ee, 0x3, 0x2, 0x2, 0x2, 0x6e9, 0x6eb, 
       0x7, 0x18b, 0x2, 0x2, 0x6ea, 0x6ec, 0x7, 0x3a8, 0x2, 0x2, 0x6eb, 
       0x6ea, 0x3, 0x2, 0x2, 0x2, 0x6eb, 0x6ec, 0x3, 0x2, 0x2, 0x2, 0x6ec, 
       0x6ed, 0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6ef, 0x5, 0x1e4, 0xf3, 0x2, 0x6ee, 
       0x6e9, 0x3, 0x2, 0x2, 0x2, 0x6ee, 0x6ef, 0x3, 0x2, 0x2, 0x2, 0x6ef, 
       0x6f5, 0x3, 0x2, 0x2, 0x2, 0x6f0, 0x6f2, 0x7, 0x193, 0x2, 0x2, 0x6f1, 
       0x6f3, 0x7, 0x3a8, 0x2, 0x2, 0x6f2, 0x6f1, 0x3, 0x2, 0x2, 0x2, 0x6f2, 
       0x6f3, 0x3, 0x2, 0x2, 0x2, 0x6f3, 0x6f4, 0x3, 0x2, 0x2, 0x2, 0x6f4, 
       0x6f6, 0x5, 0x1e4, 0xf3, 0x2, 0x6f5, 0x6f0, 0x3, 0x2, 0x2, 0x2, 0x6f5, 
       0x6f6, 0x3, 0x2, 0x2, 0x2, 0x6f6, 0x6fc, 0x3, 0x2, 0x2, 0x2, 0x6f7, 
       0x6f9, 0x7, 0x204, 0x2, 0x2, 0x6f8, 0x6fa, 0x7, 0x3a8, 0x2, 0x2, 
       0x6f9, 0x6f8, 0x3, 0x2, 0x2, 0x2, 0x6f9, 0x6fa, 0x3, 0x2, 0x2, 0x2, 
       0x6fa, 0x6fb, 0x3, 0x2, 0x2, 0x2, 0x6fb, 0x6fd, 0x5, 0x1de, 0xf0, 
       0x2, 0x6fc, 0x6f7, 0x3, 0x2, 0x2, 0x2, 0x6fc, 0x6fd, 0x3, 0x2, 0x2, 
       0x2, 0x6fd, 0x703, 0x3, 0x2, 0x2, 0x2, 0x6fe, 0x700, 0x7, 0x19e, 
       0x2, 0x2, 0x6ff, 0x701, 0x7, 0x3a8, 0x2, 0x2, 0x700, 0x6ff, 0x3, 
       0x2, 0x2, 0x2, 0x700, 0x701, 0x3, 0x2, 0x2, 0x2, 0x701, 0x702, 0x3, 
       0x2, 0x2, 0x2, 0x702, 0x704, 0x5, 0x1de, 0xf0, 0x2, 0x703, 0x6fe, 
       0x3, 0x2, 0x2, 0x2, 0x703, 0x704, 0x3, 0x2, 0x2, 0x2, 0x704, 0x70d, 
       0x3, 0x2, 0x2, 0x2, 0x705, 0x70a, 0x5, 0x68, 0x35, 0x2, 0x706, 0x707, 
       0x7, 0x3b3, 0x2, 0x2, 0x707, 0x709, 0x5, 0x68, 0x35, 0x2, 0x708, 
       0x706, 0x3, 0x2, 0x2, 0x2, 0x709, 0x70c, 0x3, 0x2, 0x2, 0x2, 0x70a, 
       0x708, 0x3, 0x2, 0x2, 0x2, 0x70a, 0x70b, 0x3, 0x2, 0x2, 0x2, 0x70b, 
       0x70e, 0x3, 0x2, 0x2, 0x2, 0x70c, 0x70a, 0x3, 0x2, 0x2, 0x2, 0x70d, 
       0x705, 0x3, 0x2, 0x2, 0x2, 0x70d, 0x70e, 0x3, 0x2, 0x2, 0x2, 0x70e, 
       0x67, 0x3, 0x2, 0x2, 0x2, 0x70f, 0x710, 0x7, 0x1ff, 0x2, 0x2, 0x710, 
       0x719, 0x5, 0x1de, 0xf0, 0x2, 0x711, 0x713, 0x7, 0x1fc, 0x2, 0x2, 
       0x712, 0x711, 0x3, 0x2, 0x2, 0x2, 0x712, 0x713, 0x3, 0x2, 0x2, 0x2, 
       0x713, 0x714, 0x3, 0x2, 0x2, 0x2, 0x714, 0x716, 0x7, 0x136, 0x2, 
       0x2, 0x715, 0x717, 0x7, 0x3a8, 0x2, 0x2, 0x716, 0x715, 0x3, 0x2, 
       0x2, 0x2, 0x716, 0x717, 0x3, 0x2, 0x2, 0x2, 0x717, 0x718, 0x3, 0x2, 
       0x2, 0x2, 0x718, 0x71a, 0x5, 0x1d4, 0xeb, 0x2, 0x719, 0x712, 0x3, 
       0x2, 0x2, 0x2, 0x719, 0x71a, 0x3, 0x2, 0x2, 0x2, 0x71a, 0x720, 0x3, 
       0x2, 0x2, 0x2, 0x71b, 0x71d, 0x7, 0x115, 0x2, 0x2, 0x71c, 0x71e, 
       0x7, 0x3a8, 0x2, 0x2, 0x71d, 0x71c, 0x3, 0x2, 0x2, 0x2, 0x71d, 0x71e, 
       0x3, 0x2, 0x2, 0x2, 0x71e, 0x71f, 0x3, 0x2, 0x2, 0x2, 0x71f, 0x721, 
       0x7, 0x3c0, 0x2, 0x2, 0x720, 0x71b, 0x3, 0x2, 0x2, 0x2, 0x720, 0x721, 
       0x3, 0x2, 0x2, 0x2, 0x721, 0x728, 0x3, 0x2, 0x2, 0x2, 0x722, 0x723, 
       0x7, 0x123, 0x2, 0x2, 0x723, 0x725, 0x7, 0x12a, 0x2, 0x2, 0x724, 
       0x726, 0x7, 0x3a8, 0x2, 0x2, 0x725, 0x724, 0x3, 0x2, 0x2, 0x2, 0x725, 
       0x726, 0x3, 0x2, 0x2, 0x2, 0x726, 0x727, 0x3, 0x2, 0x2, 0x2, 0x727, 
       0x729, 0x7, 0x3c0, 0x2, 0x2, 0x728, 0x722, 0x3, 0x2, 0x2, 0x2, 0x728, 
       0x729, 0x3, 0x2, 0x2, 0x2, 0x729, 0x730, 0x3, 0x2, 0x2, 0x2, 0x72a, 
       0x72b, 0x7, 0x45, 0x2, 0x2, 0x72b, 0x72d, 0x7, 0x12a, 0x2, 0x2, 0x72c, 
       0x72e, 0x7, 0x3a8, 0x2, 0x2, 0x72d, 0x72c, 0x3, 0x2, 0x2, 0x2, 0x72d, 
       0x72e, 0x3, 0x2, 0x2, 0x2, 0x72e, 0x72f, 0x3, 0x2, 0x2, 0x2, 0x72f, 
       0x731, 0x7, 0x3c0, 0x2, 0x2, 0x730, 0x72a, 0x3, 0x2, 0x2, 0x2, 0x730, 
       0x731, 0x3, 0x2, 0x2, 0x2, 0x731, 0x737, 0x3, 0x2, 0x2, 0x2, 0x732, 
       0x734, 0x7, 0x18b, 0x2, 0x2, 0x733, 0x735, 0x7, 0x3a8, 0x2, 0x2, 
       0x734, 0x733, 0x3, 0x2, 0x2, 0x2, 0x734, 0x735, 0x3, 0x2, 0x2, 0x2, 
       0x735, 0x736, 0x3, 0x2, 0x2, 0x2, 0x736, 0x738, 0x5, 0x1e4, 0xf3, 
       0x2, 0x737, 0x732, 0x3, 0x2, 0x2, 0x2, 0x737, 0x738, 0x3, 0x2, 0x2, 
       0x2, 0x738, 0x73e, 0x3, 0x2, 0x2, 0x2, 0x739, 0x73b, 0x7, 0x193, 
       0x2, 0x2, 0x73a, 0x73c, 0x7, 0x3a8, 0x2, 0x2, 0x73b, 0x73a, 0x3, 
       0x2, 0x2, 0x2, 0x73b, 0x73c, 0x3, 0x2, 0x2, 0x2, 0x73c, 0x73d, 0x3, 
       0x2, 0x2, 0x2, 0x73d, 0x73f, 0x5, 0x1e4, 0xf3, 0x2, 0x73e, 0x739, 
       0x3, 0x2, 0x2, 0x2, 0x73e, 0x73f, 0x3, 0x2, 0x2, 0x2, 0x73f, 0x745, 
       0x3, 0x2, 0x2, 0x2, 0x740, 0x742, 0x7, 0x204, 0x2, 0x2, 0x741, 0x743, 
       0x7, 0x3a8, 0x2, 0x2, 0x742, 0x741, 0x3, 0x2, 0x2, 0x2, 0x742, 0x743, 
       0x3, 0x2, 0x2, 0x2, 0x743, 0x744, 0x3, 0x2, 0x2, 0x2, 0x744, 0x746, 
       0x5, 0x1de, 0xf0, 0x2, 0x745, 0x740, 0x3, 0x2, 0x2, 0x2, 0x745, 0x746, 
       0x3, 0x2, 0x2, 0x2, 0x746, 0x74c, 0x3, 0x2, 0x2, 0x2, 0x747, 0x749, 
       0x7, 0x19e, 0x2, 0x2, 0x748, 0x74a, 0x7, 0x3a8, 0x2, 0x2, 0x749, 
       0x748, 0x3, 0x2, 0x2, 0x2, 0x749, 0x74a, 0x3, 0x2, 0x2, 0x2, 0x74a, 
       0x74b, 0x3, 0x2, 0x2, 0x2, 0x74b, 0x74d, 0x5, 0x1de, 0xf0, 0x2, 0x74c, 
       0x747, 0x3, 0x2, 0x2, 0x2, 0x74c, 0x74d, 0x3, 0x2, 0x2, 0x2, 0x74d, 
       0x69, 0x3, 0x2, 0x2, 0x2, 0x74e, 0x74f, 0x7, 0x9, 0x2, 0x2, 0x74f, 
       0x751, 0x9, 0x2, 0x2, 0x2, 0x750, 0x752, 0x5, 0x1de, 0xf0, 0x2, 0x751, 
       0x750, 0x3, 0x2, 0x2, 0x2, 0x751, 0x752, 0x3, 0x2, 0x2, 0x2, 0x752, 
       0x754, 0x3, 0x2, 0x2, 0x2, 0x753, 0x755, 0x5, 0x32, 0x1a, 0x2, 0x754, 
       0x753, 0x3, 0x2, 0x2, 0x2, 0x755, 0x756, 0x3, 0x2, 0x2, 0x2, 0x756, 
       0x754, 0x3, 0x2, 0x2, 0x2, 0x756, 0x757, 0x3, 0x2, 0x2, 0x2, 0x757, 
       0x761, 0x3, 0x2, 0x2, 0x2, 0x758, 0x759, 0x7, 0x9, 0x2, 0x2, 0x759, 
       0x75a, 0x9, 0x2, 0x2, 0x2, 0x75a, 0x75b, 0x5, 0x1de, 0xf0, 0x2, 0x75b, 
       0x75c, 0x7, 0x212, 0x2, 0x2, 0x75c, 0x75d, 0x7, 0x123, 0x2, 0x2, 
       0x75d, 0x75e, 0x7, 0x12a, 0x2, 0x2, 0x75e, 0x75f, 0x7, 0x198, 0x2, 
       0x2, 0x75f, 0x761, 0x3, 0x2, 0x2, 0x2, 0x760, 0x74e, 0x3, 0x2, 0x2, 
       0x2, 0x760, 0x758, 0x3, 0x2, 0x2, 0x2, 0x761, 0x6b, 0x3, 0x2, 0x2, 
       0x2, 0x762, 0x764, 0x7, 0x9, 0x2, 0x2, 0x763, 0x765, 0x5, 0x34, 0x1b, 
       0x2, 0x764, 0x763, 0x3, 0x2, 0x2, 0x2, 0x764, 0x765, 0x3, 0x2, 0x2, 
       0x2, 0x765, 0x766, 0x3, 0x2, 0x2, 0x2, 0x766, 0x767, 0x7, 0x13c, 
       0x2, 0x2, 0x767, 0x76b, 0x5, 0x1c6, 0xe4, 0x2, 0x768, 0x769, 0x7, 
       0x67, 0x2, 0x2, 0x769, 0x76a, 0x7, 0x1de, 0x2, 0x2, 0x76a, 0x76c, 
       0x5, 0x36, 0x1c, 0x2, 0x76b, 0x768, 0x3, 0x2, 0x2, 0x2, 0x76b, 0x76c, 
       0x3, 0x2, 0x2, 0x2, 0x76c, 0x773, 0x3, 0x2, 0x2, 0x2, 0x76d, 0x76e, 
       0x7, 0x67, 0x2, 0x2, 0x76e, 0x770, 0x7, 0x118, 0x2, 0x2, 0x76f, 0x771, 
       0x7, 0x64, 0x2, 0x2, 0x770, 0x76f, 0x3, 0x2, 0x2, 0x2, 0x770, 0x771, 
       0x3, 0x2, 0x2, 0x2, 0x771, 0x772, 0x3, 0x2, 0x2, 0x2, 0x772, 0x774, 
       0x7, 0x1b9, 0x2, 0x2, 0x773, 0x76d, 0x3, 0x2, 0x2, 0x2, 0x773, 0x774, 
       0x3, 0x2, 0x2, 0x2, 0x774, 0x778, 0x3, 0x2, 0x2, 0x2, 0x775, 0x776, 
       0x7, 0x7a, 0x2, 0x2, 0x776, 0x777, 0x7, 0x97, 0x2, 0x2, 0x777, 0x779, 
       0x5, 0x1c6, 0xe4, 0x2, 0x778, 0x775, 0x3, 0x2, 0x2, 0x2, 0x778, 0x779, 
       0x3, 0x2, 0x2, 0x2, 0x779, 0x77f, 0x3, 0x2, 0x2, 0x2, 0x77a, 0x780, 
       0x7, 0x132, 0x2, 0x2, 0x77b, 0x780, 0x7, 0x12b, 0x2, 0x2, 0x77c, 
       0x77d, 0x7, 0x12b, 0x2, 0x2, 0x77d, 0x77e, 0x7, 0x67, 0x2, 0x2, 0x77e, 
       0x780, 0x7, 0x1e6, 0x2, 0x2, 0x77f, 0x77a, 0x3, 0x2, 0x2, 0x2, 0x77f, 
       0x77b, 0x3, 0x2, 0x2, 0x2, 0x77f, 0x77c, 0x3, 0x2, 0x2, 0x2, 0x77f, 
       0x780, 0x3, 0x2, 0x2, 0x2, 0x780, 0x783, 0x3, 0x2, 0x2, 0x2, 0x781, 
       0x782, 0x7, 0x115, 0x2, 0x2, 0x782, 0x784, 0x7, 0x3c0, 0x2, 0x2, 
       0x783, 0x781, 0x3, 0x2, 0x2, 0x2, 0x783, 0x784, 0x3, 0x2, 0x2, 0x2, 
       0x784, 0x787, 0x3, 0x2, 0x2, 0x2, 0x785, 0x786, 0x7, 0x12e, 0x2, 
       0x2, 0x786, 0x788, 0x5, 0x144, 0xa3, 0x2, 0x787, 0x785, 0x3, 0x2, 
       0x2, 0x2, 0x787, 0x788, 0x3, 0x2, 0x2, 0x2, 0x788, 0x6d, 0x3, 0x2, 
       0x2, 0x2, 0x789, 0x78a, 0x7, 0x9, 0x2, 0x2, 0x78a, 0x78b, 0x7, 0x150, 
       0x2, 0x2, 0x78b, 0x78f, 0x5, 0x1c6, 0xe4, 0x2, 0x78c, 0x78e, 0x5, 
       0x46, 0x24, 0x2, 0x78d, 0x78c, 0x3, 0x2, 0x2, 0x2, 0x78e, 0x791, 
       0x3, 0x2, 0x2, 0x2, 0x78f, 0x78d, 0x3, 0x2, 0x2, 0x2, 0x78f, 0x790, 
       0x3, 0x2, 0x2, 0x2, 0x790, 0x6f, 0x3, 0x2, 0x2, 0x2, 0x791, 0x78f, 
       0x3, 0x2, 0x2, 0x2, 0x792, 0x793, 0x7, 0x9, 0x2, 0x2, 0x793, 0x794, 
       0x7, 0x162, 0x2, 0x2, 0x794, 0x795, 0x7, 0x1d9, 0x2, 0x2, 0x795, 
       0x796, 0x7, 0x264, 0x2, 0x2, 0x796, 0x797, 0x7, 0x174, 0x2, 0x2, 
       0x797, 0x798, 0x7, 0x4f, 0x2, 0x2, 0x798, 0x71, 0x3, 0x2, 0x2, 0x2, 
       0x799, 0x79a, 0x7, 0x9, 0x2, 0x2, 0x79a, 0x79b, 0x7, 0x172, 0x2, 
       0x2, 0x79b, 0x79c, 0x7, 0x3f, 0x2, 0x2, 0x79c, 0x79d, 0x5, 0x1de, 
       0xf0, 0x2, 0x79d, 0x79e, 0x7, 0x7, 0x2, 0x2, 0x79e, 0x79f, 0x7, 0x20d, 
       0x2, 0x2, 0x79f, 0x7a5, 0x7, 0x3c0, 0x2, 0x2, 0x7a0, 0x7a2, 0x7, 
       0x15e, 0x2, 0x2, 0x7a1, 0x7a3, 0x7, 0x3a8, 0x2, 0x2, 0x7a2, 0x7a1, 
       0x3, 0x2, 0x2, 0x2, 0x7a2, 0x7a3, 0x3, 0x2, 0x2, 0x2, 0x7a3, 0x7a4, 
       0x3, 0x2, 0x2, 0x2, 0x7a4, 0x7a6, 0x5, 0x1e6, 0xf4, 0x2, 0x7a5, 0x7a0, 
       0x3, 0x2, 0x2, 0x2, 0x7a5, 0x7a6, 0x3, 0x2, 0x2, 0x2, 0x7a6, 0x7a8, 
       0x3, 0x2, 0x2, 0x2, 0x7a7, 0x7a9, 0x7, 0x21a, 0x2, 0x2, 0x7a8, 0x7a7, 
       0x3, 0x2, 0x2, 0x2, 0x7a8, 0x7a9, 0x3, 0x2, 0x2, 0x2, 0x7a9, 0x7aa, 
       0x3, 0x2, 0x2, 0x2, 0x7aa, 0x7ac, 0x7, 0x136, 0x2, 0x2, 0x7ab, 0x7ad, 
       0x7, 0x3a8, 0x2, 0x2, 0x7ac, 0x7ab, 0x3, 0x2, 0x2, 0x2, 0x7ac, 0x7ad, 
       0x3, 0x2, 0x2, 0x2, 0x7ad, 0x7ae, 0x3, 0x2, 0x2, 0x2, 0x7ae, 0x7af, 
       0x5, 0x1d4, 0xeb, 0x2, 0x7af, 0x73, 0x3, 0x2, 0x2, 0x2, 0x7b0, 0x7b1, 
       0x7, 0x9, 0x2, 0x2, 0x7b1, 0x7b2, 0x7, 0x72, 0x2, 0x2, 0x7b2, 0x7b6, 
       0x5, 0x1c6, 0xe4, 0x2, 0x7b3, 0x7b5, 0x5, 0x46, 0x24, 0x2, 0x7b4, 
       0x7b3, 0x3, 0x2, 0x2, 0x2, 0x7b5, 0x7b8, 0x3, 0x2, 0x2, 0x2, 0x7b6, 
       0x7b4, 0x3, 0x2, 0x2, 0x2, 0x7b6, 0x7b7, 0x3, 0x2, 0x2, 0x2, 0x7b7, 
       0x75, 0x3, 0x2, 0x2, 0x2, 0x7b8, 0x7b6, 0x3, 0x2, 0x2, 0x2, 0x7b9, 
       0x7ba, 0x7, 0x9, 0x2, 0x2, 0x7ba, 0x7bb, 0x7, 0x1e0, 0x2, 0x2, 0x7bb, 
       0x7bc, 0x5, 0x1de, 0xf0, 0x2, 0x7bc, 0x7bd, 0x7, 0x1a9, 0x2, 0x2, 
       0x7bd, 0x7be, 0x7, 0x3b1, 0x2, 0x2, 0x7be, 0x7c3, 0x5, 0x48, 0x25, 
       0x2, 0x7bf, 0x7c0, 0x7, 0x3b3, 0x2, 0x2, 0x7c0, 0x7c2, 0x5, 0x48, 
       0x25, 0x2, 0x7c1, 0x7bf, 0x3, 0x2, 0x2, 0x2, 0x7c2, 0x7c5, 0x3, 0x2, 
       0x2, 0x2, 0x7c3, 0x7c1, 0x3, 0x2, 0x2, 0x2, 0x7c3, 0x7c4, 0x3, 0x2, 
       0x2, 0x2, 0x7c4, 0x7c6, 0x3, 0x2, 0x2, 0x2, 0x7c5, 0x7c3, 0x3, 0x2, 
       0x2, 0x2, 0x7c6, 0x7c7, 0x7, 0x3b2, 0x2, 0x2, 0x7c7, 0x77, 0x3, 0x2, 
       0x2, 0x2, 0x7c8, 0x7ca, 0x7, 0x9, 0x2, 0x2, 0x7c9, 0x7cb, 0x9, 0x3, 
       0x2, 0x2, 0x7ca, 0x7c9, 0x3, 0x2, 0x2, 0x2, 0x7ca, 0x7cb, 0x3, 0x2, 
       0x2, 0x2, 0x7cb, 0x7cd, 0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7ce, 0x7, 0x43, 
       0x2, 0x2, 0x7cd, 0x7cc, 0x3, 0x2, 0x2, 0x2, 0x7cd, 0x7ce, 0x3, 0x2, 
       0x2, 0x2, 0x7ce, 0x7cf, 0x3, 0x2, 0x2, 0x2, 0x7cf, 0x7d0, 0x7, 0x94, 
       0x2, 0x2, 0x7d0, 0x7d1, 0x5, 0x1c4, 0xe3, 0x2, 0x7d1, 0x7d6, 0x5, 
       0x7e, 0x40, 0x2, 0x7d2, 0x7d3, 0x7, 0x3b3, 0x2, 0x2, 0x7d3, 0x7d5, 
       0x5, 0x7e, 0x40, 0x2, 0x7d4, 0x7d2, 0x3, 0x2, 0x2, 0x2, 0x7d5, 0x7d8, 
       0x3, 0x2, 0x2, 0x2, 0x7d6, 0x7d4, 0x3, 0x2, 0x2, 0x2, 0x7d6, 0x7d7, 
       0x3, 0x2, 0x2, 0x2, 0x7d7, 0x7dc, 0x3, 0x2, 0x2, 0x2, 0x7d8, 0x7d6, 
       0x3, 0x2, 0x2, 0x2, 0x7d9, 0x7db, 0x5, 0x60, 0x31, 0x2, 0x7da, 0x7d9, 
       0x3, 0x2, 0x2, 0x2, 0x7db, 0x7de, 0x3, 0x2, 0x2, 0x2, 0x7dc, 0x7da, 
       0x3, 0x2, 0x2, 0x2, 0x7dc, 0x7dd, 0x3, 0x2, 0x2, 0x2, 0x7dd, 0x79, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x7dc, 0x3, 0x2, 0x2, 0x2, 0x7df, 0x7e0, 
       0x7, 0x9, 0x2, 0x2, 0x7e0, 0x7e1, 0x7, 0x204, 0x2, 0x2, 0x7e1, 0x7e2, 
       0x5, 0x1de, 0xf0, 0x2, 0x7e2, 0x7e3, 0x9, 0x1c, 0x2, 0x2, 0x7e3, 
       0x7e4, 0x7, 0x124, 0x2, 0x2, 0x7e4, 0x7e8, 0x7, 0x3c0, 0x2, 0x2, 
       0x7e5, 0x7e6, 0x7, 0x15e, 0x2, 0x2, 0x7e6, 0x7e7, 0x7, 0x3a8, 0x2, 
       0x2, 0x7e7, 0x7e9, 0x5, 0x1e6, 0xf4, 0x2, 0x7e8, 0x7e5, 0x3, 0x2, 
       0x2, 0x2, 0x7e8, 0x7e9, 0x3, 0x2, 0x2, 0x2, 0x7e9, 0x7eb, 0x3, 0x2, 
       0x2, 0x2, 0x7ea, 0x7ec, 0x7, 0x21a, 0x2, 0x2, 0x7eb, 0x7ea, 0x3, 
       0x2, 0x2, 0x2, 0x7eb, 0x7ec, 0x3, 0x2, 0x2, 0x2, 0x7ec, 0x7ed, 0x3, 
       0x2, 0x2, 0x2, 0x7ed, 0x7ef, 0x7, 0x136, 0x2, 0x2, 0x7ee, 0x7f0, 
       0x7, 0x3a8, 0x2, 0x2, 0x7ef, 0x7ee, 0x3, 0x2, 0x2, 0x2, 0x7ef, 0x7f0, 
       0x3, 0x2, 0x2, 0x2, 0x7f0, 0x7f1, 0x3, 0x2, 0x2, 0x2, 0x7f1, 0x7f2, 
       0x5, 0x1d4, 0xeb, 0x2, 0x7f2, 0x7b, 0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7f7, 
       0x7, 0x9, 0x2, 0x2, 0x7f4, 0x7f5, 0x7, 0xfb, 0x2, 0x2, 0x7f5, 0x7f6, 
       0x7, 0x3a8, 0x2, 0x2, 0x7f6, 0x7f8, 0x9, 0xc, 0x2, 0x2, 0x7f7, 0x7f4, 
       0x3, 0x2, 0x2, 0x2, 0x7f7, 0x7f8, 0x3, 0x2, 0x2, 0x2, 0x7f8, 0x7fa, 
       0x3, 0x2, 0x2, 0x2, 0x7f9, 0x7fb, 0x5, 0x34, 0x1b, 0x2, 0x7fa, 0x7f9, 
       0x3, 0x2, 0x2, 0x2, 0x7fa, 0x7fb, 0x3, 0x2, 0x2, 0x2, 0x7fb, 0x7ff, 
       0x3, 0x2, 0x2, 0x2, 0x7fc, 0x7fd, 0x7, 0x8a, 0x2, 0x2, 0x7fd, 0x7fe, 
       0x7, 0x1df, 0x2, 0x2, 0x7fe, 0x800, 0x9, 0xd, 0x2, 0x2, 0x7ff, 0x7fc, 
       0x3, 0x2, 0x2, 0x2, 0x7ff, 0x800, 0x3, 0x2, 0x2, 0x2, 0x800, 0x801, 
       0x3, 0x2, 0x2, 0x2, 0x801, 0x802, 0x7, 0x219, 0x2, 0x2, 0x802, 0x807, 
       0x5, 0x1c6, 0xe4, 0x2, 0x803, 0x804, 0x7, 0x3b1, 0x2, 0x2, 0x804, 
       0x805, 0x5, 0x1fe, 0x100, 0x2, 0x805, 0x806, 0x7, 0x3b2, 0x2, 0x2, 
       0x806, 0x808, 0x3, 0x2, 0x2, 0x2, 0x807, 0x803, 0x3, 0x2, 0x2, 0x2, 
       0x807, 0x808, 0x3, 0x2, 0x2, 0x2, 0x808, 0x809, 0x3, 0x2, 0x2, 0x2, 
       0x809, 0x80a, 0x7, 0xc, 0x2, 0x2, 0x80a, 0x811, 0x5, 0xaa, 0x56, 
       0x2, 0x80b, 0x80d, 0x7, 0xa8, 0x2, 0x2, 0x80c, 0x80e, 0x9, 0xe, 0x2, 
       0x2, 0x80d, 0x80c, 0x3, 0x2, 0x2, 0x2, 0x80d, 0x80e, 0x3, 0x2, 0x2, 
       0x2, 0x80e, 0x80f, 0x3, 0x2, 0x2, 0x2, 0x80f, 0x810, 0x7, 0x18, 0x2, 
       0x2, 0x810, 0x812, 0x7, 0x69, 0x2, 0x2, 0x811, 0x80b, 0x3, 0x2, 0x2, 
       0x2, 0x811, 0x812, 0x3, 0x2, 0x2, 0x2, 0x812, 0x7d, 0x3, 0x2, 0x2, 
       0x2, 0x813, 0x946, 0x5, 0x5e, 0x30, 0x2, 0x814, 0x816, 0x7, 0x7, 
       0x2, 0x2, 0x815, 0x817, 0x7, 0x1a, 0x2, 0x2, 0x816, 0x815, 0x3, 0x2, 
       0x2, 0x2, 0x816, 0x817, 0x3, 0x2, 0x2, 0x2, 0x817, 0x818, 0x3, 0x2, 
       0x2, 0x2, 0x818, 0x819, 0x5, 0x1de, 0xf0, 0x2, 0x819, 0x81d, 0x5, 
       0x4e, 0x28, 0x2, 0x81a, 0x81e, 0x7, 0x14a, 0x2, 0x2, 0x81b, 0x81c, 
       0x7, 0xf9, 0x2, 0x2, 0x81c, 0x81e, 0x5, 0x1de, 0xf0, 0x2, 0x81d, 
       0x81a, 0x3, 0x2, 0x2, 0x2, 0x81d, 0x81b, 0x3, 0x2, 0x2, 0x2, 0x81d, 
       0x81e, 0x3, 0x2, 0x2, 0x2, 0x81e, 0x946, 0x3, 0x2, 0x2, 0x2, 0x81f, 
       0x821, 0x7, 0x7, 0x2, 0x2, 0x820, 0x822, 0x7, 0x1a, 0x2, 0x2, 0x821, 
       0x820, 0x3, 0x2, 0x2, 0x2, 0x821, 0x822, 0x3, 0x2, 0x2, 0x2, 0x822, 
       0x823, 0x3, 0x2, 0x2, 0x2, 0x823, 0x824, 0x7, 0x3b1, 0x2, 0x2, 0x824, 
       0x825, 0x5, 0x1de, 0xf0, 0x2, 0x825, 0x82c, 0x5, 0x4e, 0x28, 0x2, 
       0x826, 0x827, 0x7, 0x3b3, 0x2, 0x2, 0x827, 0x828, 0x5, 0x1de, 0xf0, 
       0x2, 0x828, 0x829, 0x5, 0x4e, 0x28, 0x2, 0x829, 0x82b, 0x3, 0x2, 
       0x2, 0x2, 0x82a, 0x826, 0x3, 0x2, 0x2, 0x2, 0x82b, 0x82e, 0x3, 0x2, 
       0x2, 0x2, 0x82c, 0x82a, 0x3, 0x2, 0x2, 0x2, 0x82c, 0x82d, 0x3, 0x2, 
       0x2, 0x2, 0x82d, 0x82f, 0x3, 0x2, 0x2, 0x2, 0x82e, 0x82c, 0x3, 0x2, 
       0x2, 0x2, 0x82f, 0x830, 0x7, 0x3b2, 0x2, 0x2, 0x830, 0x946, 0x3, 
       0x2, 0x2, 0x2, 0x831, 0x832, 0x7, 0x7, 0x2, 0x2, 0x832, 0x834, 0x9, 
       0x13, 0x2, 0x2, 0x833, 0x835, 0x5, 0x1de, 0xf0, 0x2, 0x834, 0x833, 
       0x3, 0x2, 0x2, 0x2, 0x834, 0x835, 0x3, 0x2, 0x2, 0x2, 0x835, 0x837, 
       0x3, 0x2, 0x2, 0x2, 0x836, 0x838, 0x5, 0x3e, 0x20, 0x2, 0x837, 0x836, 
       0x3, 0x2, 0x2, 0x2, 0x837, 0x838, 0x3, 0x2, 0x2, 0x2, 0x838, 0x839, 
       0x3, 0x2, 0x2, 0x2, 0x839, 0x83d, 0x5, 0x204, 0x103, 0x2, 0x83a, 
       0x83c, 0x5, 0x40, 0x21, 0x2, 0x83b, 0x83a, 0x3, 0x2, 0x2, 0x2, 0x83c, 
       0x83f, 0x3, 0x2, 0x2, 0x2, 0x83d, 0x83b, 0x3, 0x2, 0x2, 0x2, 0x83d, 
       0x83e, 0x3, 0x2, 0x2, 0x2, 0x83e, 0x946, 0x3, 0x2, 0x2, 0x2, 0x83f, 
       0x83d, 0x3, 0x2, 0x2, 0x2, 0x840, 0x845, 0x7, 0x7, 0x2, 0x2, 0x841, 
       0x843, 0x7, 0x1c, 0x2, 0x2, 0x842, 0x844, 0x5, 0x1de, 0xf0, 0x2, 
       0x843, 0x842, 0x3, 0x2, 0x2, 0x2, 0x843, 0x844, 0x3, 0x2, 0x2, 0x2, 
       0x844, 0x846, 0x3, 0x2, 0x2, 0x2, 0x845, 0x841, 0x3, 0x2, 0x2, 0x2, 
       0x845, 0x846, 0x3, 0x2, 0x2, 0x2, 0x846, 0x847, 0x3, 0x2, 0x2, 0x2, 
       0x847, 0x848, 0x7, 0x71, 0x2, 0x2, 0x848, 0x84a, 0x7, 0x4f, 0x2, 
       0x2, 0x849, 0x84b, 0x5, 0x3e, 0x20, 0x2, 0x84a, 0x849, 0x3, 0x2, 
       0x2, 0x2, 0x84a, 0x84b, 0x3, 0x2, 0x2, 0x2, 0x84b, 0x84c, 0x3, 0x2, 
       0x2, 0x2, 0x84c, 0x850, 0x5, 0x204, 0x103, 0x2, 0x84d, 0x84f, 0x5, 
       0x40, 0x21, 0x2, 0x84e, 0x84d, 0x3, 0x2, 0x2, 0x2, 0x84f, 0x852, 
       0x3, 0x2, 0x2, 0x2, 0x850, 0x84e, 0x3, 0x2, 0x2, 0x2, 0x850, 0x851, 
       0x3, 0x2, 0x2, 0x2, 0x851, 0x946, 0x3, 0x2, 0x2, 0x2, 0x852, 0x850, 
       0x3, 0x2, 0x2, 0x2, 0x853, 0x858, 0x7, 0x7, 0x2, 0x2, 0x854, 0x856, 
       0x7, 0x1c, 0x2, 0x2, 0x855, 0x857, 0x5, 0x1de, 0xf0, 0x2, 0x856, 
       0x855, 0x3, 0x2, 0x2, 0x2, 0x856, 0x857, 0x3, 0x2, 0x2, 0x2, 0x857, 
       0x859, 0x3, 0x2, 0x2, 0x2, 0x858, 0x854, 0x3, 0x2, 0x2, 0x2, 0x858, 
       0x859, 0x3, 0x2, 0x2, 0x2, 0x859, 0x85a, 0x3, 0x2, 0x2, 0x2, 0x85a, 
       0x85c, 0x7, 0x9d, 0x2, 0x2, 0x85b, 0x85d, 0x9, 0x13, 0x2, 0x2, 0x85c, 
       0x85b, 0x3, 0x2, 0x2, 0x2, 0x85c, 0x85d, 0x3, 0x2, 0x2, 0x2, 0x85d, 
       0x85f, 0x3, 0x2, 0x2, 0x2, 0x85e, 0x860, 0x5, 0x1de, 0xf0, 0x2, 0x85f, 
       0x85e, 0x3, 0x2, 0x2, 0x2, 0x85f, 0x860, 0x3, 0x2, 0x2, 0x2, 0x860, 
       0x862, 0x3, 0x2, 0x2, 0x2, 0x861, 0x863, 0x5, 0x3e, 0x20, 0x2, 0x862, 
       0x861, 0x3, 0x2, 0x2, 0x2, 0x862, 0x863, 0x3, 0x2, 0x2, 0x2, 0x863, 
       0x864, 0x3, 0x2, 0x2, 0x2, 0x864, 0x868, 0x5, 0x204, 0x103, 0x2, 
       0x865, 0x867, 0x5, 0x40, 0x21, 0x2, 0x866, 0x865, 0x3, 0x2, 0x2, 
       0x2, 0x867, 0x86a, 0x3, 0x2, 0x2, 0x2, 0x868, 0x866, 0x3, 0x2, 0x2, 
       0x2, 0x868, 0x869, 0x3, 0x2, 0x2, 0x2, 0x869, 0x946, 0x3, 0x2, 0x2, 
       0x2, 0x86a, 0x868, 0x3, 0x2, 0x2, 0x2, 0x86b, 0x86c, 0x7, 0x7, 0x2, 
       0x2, 0x86c, 0x86e, 0x9, 0x15, 0x2, 0x2, 0x86d, 0x86f, 0x9, 0x13, 
       0x2, 0x2, 0x86e, 0x86d, 0x3, 0x2, 0x2, 0x2, 0x86e, 0x86f, 0x3, 0x2, 
       0x2, 0x2, 0x86f, 0x871, 0x3, 0x2, 0x2, 0x2, 0x870, 0x872, 0x5, 0x1de, 
       0xf0, 0x2, 0x871, 0x870, 0x3, 0x2, 0x2, 0x2, 0x871, 0x872, 0x3, 0x2, 
       0x2, 0x2, 0x872, 0x873, 0x3, 0x2, 0x2, 0x2, 0x873, 0x877, 0x5, 0x204, 
       0x103, 0x2, 0x874, 0x876, 0x5, 0x40, 0x21, 0x2, 0x875, 0x874, 0x3, 
       0x2, 0x2, 0x2, 0x876, 0x879, 0x3, 0x2, 0x2, 0x2, 0x877, 0x875, 0x3, 
       0x2, 0x2, 0x2, 0x877, 0x878, 0x3, 0x2, 0x2, 0x2, 0x878, 0x946, 0x3, 
       0x2, 0x2, 0x2, 0x879, 0x877, 0x3, 0x2, 0x2, 0x2, 0x87a, 0x87f, 0x7, 
       0x7, 0x2, 0x2, 0x87b, 0x87d, 0x7, 0x1c, 0x2, 0x2, 0x87c, 0x87e, 0x5, 
       0x1de, 0xf0, 0x2, 0x87d, 0x87c, 0x3, 0x2, 0x2, 0x2, 0x87d, 0x87e, 
       0x3, 0x2, 0x2, 0x2, 0x87e, 0x880, 0x3, 0x2, 0x2, 0x2, 0x87f, 0x87b, 
       0x3, 0x2, 0x2, 0x2, 0x87f, 0x880, 0x3, 0x2, 0x2, 0x2, 0x880, 0x881, 
       0x3, 0x2, 0x2, 0x2, 0x881, 0x882, 0x7, 0x3b, 0x2, 0x2, 0x882, 0x884, 
       0x7, 0x4f, 0x2, 0x2, 0x883, 0x885, 0x5, 0x1de, 0xf0, 0x2, 0x884, 
       0x883, 0x3, 0x2, 0x2, 0x2, 0x884, 0x885, 0x3, 0x2, 0x2, 0x2, 0x885, 
       0x886, 0x3, 0x2, 0x2, 0x2, 0x886, 0x887, 0x5, 0x204, 0x103, 0x2, 
       0x887, 0x888, 0x5, 0x54, 0x2b, 0x2, 0x888, 0x946, 0x3, 0x2, 0x2, 
       0x2, 0x889, 0x88b, 0x7, 0xfb, 0x2, 0x2, 0x88a, 0x88c, 0x7, 0x3a8, 
       0x2, 0x2, 0x88b, 0x88a, 0x3, 0x2, 0x2, 0x2, 0x88b, 0x88c, 0x3, 0x2, 
       0x2, 0x2, 0x88c, 0x88d, 0x3, 0x2, 0x2, 0x2, 0x88d, 0x946, 0x9, 0x5, 
       0x2, 0x2, 0x88e, 0x890, 0x7, 0x9, 0x2, 0x2, 0x88f, 0x891, 0x7, 0x1a, 
       0x2, 0x2, 0x890, 0x88f, 0x3, 0x2, 0x2, 0x2, 0x890, 0x891, 0x3, 0x2, 
       0x2, 0x2, 0x891, 0x892, 0x3, 0x2, 0x2, 0x2, 0x892, 0x898, 0x5, 0x1de, 
       0xf0, 0x2, 0x893, 0x894, 0x7, 0x86, 0x2, 0x2, 0x894, 0x895, 0x7, 
       0x26, 0x2, 0x2, 0x895, 0x899, 0x5, 0x20e, 0x108, 0x2, 0x896, 0x897, 
       0x7, 0x2e, 0x2, 0x2, 0x897, 0x899, 0x7, 0x26, 0x2, 0x2, 0x898, 0x893, 
       0x3, 0x2, 0x2, 0x2, 0x898, 0x896, 0x3, 0x2, 0x2, 0x2, 0x899, 0x946, 
       0x3, 0x2, 0x2, 0x2, 0x89a, 0x89c, 0x7, 0x16, 0x2, 0x2, 0x89b, 0x89d, 
       0x7, 0x1a, 0x2, 0x2, 0x89c, 0x89b, 0x3, 0x2, 0x2, 0x2, 0x89c, 0x89d, 
       0x3, 0x2, 0x2, 0x2, 0x89d, 0x89e, 0x3, 0x2, 0x2, 0x2, 0x89e, 0x89f, 
       0x5, 0x1de, 0xf0, 0x2, 0x89f, 0x8a0, 0x5, 0x1de, 0xf0, 0x2, 0x8a0, 
       0x8a4, 0x5, 0x4e, 0x28, 0x2, 0x8a1, 0x8a5, 0x7, 0x14a, 0x2, 0x2, 
       0x8a2, 0x8a3, 0x7, 0xf9, 0x2, 0x2, 0x8a3, 0x8a5, 0x5, 0x1de, 0xf0, 
       0x2, 0x8a4, 0x8a1, 0x3, 0x2, 0x2, 0x2, 0x8a4, 0x8a2, 0x3, 0x2, 0x2, 
       0x2, 0x8a4, 0x8a5, 0x3, 0x2, 0x2, 0x2, 0x8a5, 0x946, 0x3, 0x2, 0x2, 
       0x2, 0x8a6, 0x8a8, 0x7, 0x5a, 0x2, 0x2, 0x8a7, 0x8a9, 0x7, 0x3a8, 
       0x2, 0x2, 0x8a8, 0x8a7, 0x3, 0x2, 0x2, 0x2, 0x8a8, 0x8a9, 0x3, 0x2, 
       0x2, 0x2, 0x8a9, 0x8aa, 0x3, 0x2, 0x2, 0x2, 0x8aa, 0x946, 0x9, 0x6, 
       0x2, 0x2, 0x8ab, 0x8ad, 0x7, 0x195, 0x2, 0x2, 0x8ac, 0x8ae, 0x7, 
       0x1a, 0x2, 0x2, 0x8ad, 0x8ac, 0x3, 0x2, 0x2, 0x2, 0x8ad, 0x8ae, 0x3, 
       0x2, 0x2, 0x2, 0x8ae, 0x8af, 0x3, 0x2, 0x2, 0x2, 0x8af, 0x8b0, 0x5, 
       0x1de, 0xf0, 0x2, 0x8b0, 0x8b4, 0x5, 0x4e, 0x28, 0x2, 0x8b1, 0x8b5, 
       0x7, 0x14a, 0x2, 0x2, 0x8b2, 0x8b3, 0x7, 0xf9, 0x2, 0x2, 0x8b3, 0x8b5, 
       0x5, 0x1de, 0xf0, 0x2, 0x8b4, 0x8b1, 0x3, 0x2, 0x2, 0x2, 0x8b4, 0x8b2, 
       0x3, 0x2, 0x2, 0x2, 0x8b4, 0x8b5, 0x3, 0x2, 0x2, 0x2, 0x8b5, 0x946, 
       0x3, 0x2, 0x2, 0x2, 0x8b6, 0x8b8, 0x7, 0x2e, 0x2, 0x2, 0x8b7, 0x8b9, 
       0x7, 0x1a, 0x2, 0x2, 0x8b8, 0x8b7, 0x3, 0x2, 0x2, 0x2, 0x8b8, 0x8b9, 
       0x3, 0x2, 0x2, 0x2, 0x8b9, 0x8ba, 0x3, 0x2, 0x2, 0x2, 0x8ba, 0x946, 
       0x5, 0x1de, 0xf0, 0x2, 0x8bb, 0x8bc, 0x7, 0x2e, 0x2, 0x2, 0x8bc, 
       0x8bd, 0x7, 0x71, 0x2, 0x2, 0x8bd, 0x946, 0x7, 0x4f, 0x2, 0x2, 0x8be, 
       0x8bf, 0x7, 0x2e, 0x2, 0x2, 0x8bf, 0x8c0, 0x9, 0x13, 0x2, 0x2, 0x8c0, 
       0x946, 0x5, 0x1de, 0xf0, 0x2, 0x8c1, 0x8c2, 0x7, 0x2e, 0x2, 0x2, 
       0x8c2, 0x8c3, 0x7, 0x3b, 0x2, 0x2, 0x8c3, 0x8c4, 0x7, 0x4f, 0x2, 
       0x2, 0x8c4, 0x946, 0x5, 0x1de, 0xf0, 0x2, 0x8c5, 0x8c6, 0x7, 0x12b, 
       0x2, 0x2, 0x8c6, 0x946, 0x7, 0x50, 0x2, 0x2, 0x8c7, 0x8c8, 0x7, 0x132, 
       0x2, 0x2, 0x8c8, 0x946, 0x7, 0x50, 0x2, 0x2, 0x8c9, 0x8cb, 0x7, 0x7a, 
       0x2, 0x2, 0x8ca, 0x8cc, 0x9, 0x1d, 0x2, 0x2, 0x8cb, 0x8ca, 0x3, 0x2, 
       0x2, 0x2, 0x8cb, 0x8cc, 0x3, 0x2, 0x2, 0x2, 0x8cc, 0x8cd, 0x3, 0x2, 
       0x2, 0x2, 0x8cd, 0x946, 0x5, 0x1de, 0xf0, 0x2, 0x8ce, 0x8cf, 0x7, 
       0x6c, 0x2, 0x2, 0x8cf, 0x8d0, 0x7, 0x11, 0x2, 0x2, 0x8d0, 0x946, 
       0x5, 0x1fe, 0x100, 0x2, 0x8d1, 0x8d2, 0x7, 0x1e, 0x2, 0x2, 0x8d2, 
       0x8d3, 0x7, 0x97, 0x2, 0x2, 0x8d3, 0x8d4, 0x7, 0x17, 0x2, 0x2, 0x8d4, 
       0x8d5, 0x7, 0x86, 0x2, 0x2, 0x8d5, 0x8d8, 0x5, 0x1d0, 0xe9, 0x2, 
       0x8d6, 0x8d7, 0x7, 0x19, 0x2, 0x2, 0x8d7, 0x8d9, 0x5, 0x1d2, 0xea, 
       0x2, 0x8d8, 0x8d6, 0x3, 0x2, 0x2, 0x2, 0x8d8, 0x8d9, 0x3, 0x2, 0x2, 
       0x2, 0x8d9, 0x946, 0x3, 0x2, 0x2, 0x2, 0x8da, 0x8dc, 0x7, 0x26, 0x2, 
       0x2, 0x8db, 0x8da, 0x3, 0x2, 0x2, 0x2, 0x8db, 0x8dc, 0x3, 0x2, 0x2, 
       0x2, 0x8dc, 0x8dd, 0x3, 0x2, 0x2, 0x2, 0x8dd, 0x8de, 0x7, 0x17, 0x2, 
       0x2, 0x8de, 0x8df, 0x7, 0x86, 0x2, 0x2, 0x8df, 0x8e0, 0x7, 0x3a8, 
       0x2, 0x2, 0x8e0, 0x8e4, 0x5, 0x1d0, 0xe9, 0x2, 0x8e1, 0x8e2, 0x7, 
       0x19, 0x2, 0x2, 0x8e2, 0x8e3, 0x7, 0x3a8, 0x2, 0x2, 0x8e3, 0x8e5, 
       0x5, 0x1d2, 0xea, 0x2, 0x8e4, 0x8e1, 0x3, 0x2, 0x2, 0x2, 0x8e4, 0x8e5, 
       0x3, 0x2, 0x2, 0x2, 0x8e5, 0x946, 0x3, 0x2, 0x2, 0x2, 0x8e6, 0x8e7, 
       0x7, 0x12c, 0x2, 0x2, 0x8e7, 0x946, 0x7, 0x204, 0x2, 0x2, 0x8e8, 
       0x8e9, 0x7, 0x15c, 0x2, 0x2, 0x8e9, 0x946, 0x7, 0x204, 0x2, 0x2, 
       0x8ea, 0x946, 0x7, 0x3a, 0x2, 0x2, 0x8eb, 0x8ec, 0x9, 0x1e, 0x2, 
       0x2, 0x8ec, 0x946, 0x7, 0x216, 0x2, 0x2, 0x8ed, 0x8ee, 0x7, 0x7, 
       0x2, 0x2, 0x8ee, 0x8ef, 0x7, 0x70, 0x2, 0x2, 0x8ef, 0x946, 0x5, 0x66, 
       0x34, 0x2, 0x8f0, 0x8f1, 0x7, 0x2e, 0x2, 0x2, 0x8f1, 0x8f2, 0x7, 
       0x70, 0x2, 0x2, 0x8f2, 0x946, 0x5, 0x1fe, 0x100, 0x2, 0x8f3, 0x8f4, 
       0x7, 0x12c, 0x2, 0x2, 0x8f4, 0x8f7, 0x7, 0x70, 0x2, 0x2, 0x8f5, 0x8f8, 
       0x5, 0x1fe, 0x100, 0x2, 0x8f6, 0x8f8, 0x7, 0x8, 0x2, 0x2, 0x8f7, 
       0x8f5, 0x3, 0x2, 0x2, 0x2, 0x8f7, 0x8f6, 0x3, 0x2, 0x2, 0x2, 0x8f8, 
       0x8f9, 0x3, 0x2, 0x2, 0x2, 0x8f9, 0x946, 0x7, 0x204, 0x2, 0x2, 0x8fa, 
       0x8fb, 0x7, 0x15c, 0x2, 0x2, 0x8fb, 0x8fe, 0x7, 0x70, 0x2, 0x2, 0x8fc, 
       0x8ff, 0x5, 0x1fe, 0x100, 0x2, 0x8fd, 0x8ff, 0x7, 0x8, 0x2, 0x2, 
       0x8fe, 0x8fc, 0x3, 0x2, 0x2, 0x2, 0x8fe, 0x8fd, 0x3, 0x2, 0x2, 0x2, 
       0x8ff, 0x900, 0x3, 0x2, 0x2, 0x2, 0x900, 0x946, 0x7, 0x204, 0x2, 
       0x2, 0x901, 0x902, 0x7, 0x20b, 0x2, 0x2, 0x902, 0x905, 0x7, 0x70, 
       0x2, 0x2, 0x903, 0x906, 0x5, 0x1fe, 0x100, 0x2, 0x904, 0x906, 0x7, 
       0x8, 0x2, 0x2, 0x905, 0x903, 0x3, 0x2, 0x2, 0x2, 0x905, 0x904, 0x3, 
       0x2, 0x2, 0x2, 0x906, 0x946, 0x3, 0x2, 0x2, 0x2, 0x907, 0x908, 0x7, 
       0x111, 0x2, 0x2, 0x908, 0x909, 0x7, 0x70, 0x2, 0x2, 0x909, 0x946, 
       0x5, 0x1e4, 0xf3, 0x2, 0x90a, 0x90b, 0x7, 0x1ca, 0x2, 0x2, 0x90b, 
       0x90c, 0x7, 0x70, 0x2, 0x2, 0x90c, 0x90d, 0x5, 0x1fe, 0x100, 0x2, 
       0x90d, 0x90e, 0x7, 0x4b, 0x2, 0x2, 0x90e, 0x90f, 0x7, 0x3b1, 0x2, 
       0x2, 0x90f, 0x914, 0x5, 0x66, 0x34, 0x2, 0x910, 0x911, 0x7, 0x3b3, 
       0x2, 0x2, 0x911, 0x913, 0x5, 0x66, 0x34, 0x2, 0x912, 0x910, 0x3, 
       0x2, 0x2, 0x2, 0x913, 0x916, 0x3, 0x2, 0x2, 0x2, 0x914, 0x912, 0x3, 
       0x2, 0x2, 0x2, 0x914, 0x915, 0x3, 0x2, 0x2, 0x2, 0x915, 0x917, 0x3, 
       0x2, 0x2, 0x2, 0x916, 0x914, 0x3, 0x2, 0x2, 0x2, 0x917, 0x918, 0x7, 
       0x3b2, 0x2, 0x2, 0x918, 0x946, 0x3, 0x2, 0x2, 0x2, 0x919, 0x91a, 
       0x7, 0x13f, 0x2, 0x2, 0x91a, 0x91b, 0x7, 0x70, 0x2, 0x2, 0x91b, 0x91c, 
       0x5, 0x1de, 0xf0, 0x2, 0x91c, 0x91d, 0x7, 0xa8, 0x2, 0x2, 0x91d, 
       0x91e, 0x7, 0x94, 0x2, 0x2, 0x91e, 0x921, 0x5, 0x1c4, 0xe3, 0x2, 
       0x91f, 0x920, 0x9, 0x1e, 0x2, 0x2, 0x920, 0x922, 0x7, 0x216, 0x2, 
       0x2, 0x921, 0x91f, 0x3, 0x2, 0x2, 0x2, 0x921, 0x922, 0x3, 0x2, 0x2, 
       0x2, 0x922, 0x946, 0x3, 0x2, 0x2, 0x2, 0x923, 0x924, 0x7, 0xa, 0x2, 
       0x2, 0x924, 0x927, 0x7, 0x70, 0x2, 0x2, 0x925, 0x928, 0x5, 0x1fe, 
       0x100, 0x2, 0x926, 0x928, 0x7, 0x8, 0x2, 0x2, 0x927, 0x925, 0x3, 
       0x2, 0x2, 0x2, 0x927, 0x926, 0x3, 0x2, 0x2, 0x2, 0x928, 0x946, 0x3, 
       0x2, 0x2, 0x2, 0x929, 0x92a, 0x7, 0x18, 0x2, 0x2, 0x92a, 0x92d, 0x7, 
       0x70, 0x2, 0x2, 0x92b, 0x92e, 0x5, 0x1fe, 0x100, 0x2, 0x92c, 0x92e, 
       0x7, 0x8, 0x2, 0x2, 0x92d, 0x92b, 0x3, 0x2, 0x2, 0x2, 0x92d, 0x92c, 
       0x3, 0x2, 0x2, 0x2, 0x92e, 0x946, 0x3, 0x2, 0x2, 0x2, 0x92f, 0x930, 
       0x7, 0x68, 0x2, 0x2, 0x930, 0x933, 0x7, 0x70, 0x2, 0x2, 0x931, 0x934, 
       0x5, 0x1fe, 0x100, 0x2, 0x932, 0x934, 0x7, 0x8, 0x2, 0x2, 0x933, 
       0x931, 0x3, 0x2, 0x2, 0x2, 0x933, 0x932, 0x3, 0x2, 0x2, 0x2, 0x934, 
       0x946, 0x3, 0x2, 0x2, 0x2, 0x935, 0x936, 0x7, 0x1c1, 0x2, 0x2, 0x936, 
       0x939, 0x7, 0x70, 0x2, 0x2, 0x937, 0x93a, 0x5, 0x1fe, 0x100, 0x2, 
       0x938, 0x93a, 0x7, 0x8, 0x2, 0x2, 0x939, 0x937, 0x3, 0x2, 0x2, 0x2, 
       0x939, 0x938, 0x3, 0x2, 0x2, 0x2, 0x93a, 0x946, 0x3, 0x2, 0x2, 0x2, 
       0x93b, 0x93c, 0x7, 0x1cb, 0x2, 0x2, 0x93c, 0x93f, 0x7, 0x70, 0x2, 
       0x2, 0x93d, 0x940, 0x5, 0x1fe, 0x100, 0x2, 0x93e, 0x940, 0x7, 0x8, 
       0x2, 0x2, 0x93f, 0x93d, 0x3, 0x2, 0x2, 0x2, 0x93f, 0x93e, 0x3, 0x2, 
       0x2, 0x2, 0x940, 0x946, 0x3, 0x2, 0x2, 0x2, 0x941, 0x942, 0x7, 0x1c9, 
       0x2, 0x2, 0x942, 0x946, 0x7, 0x1af, 0x2, 0x2, 0x943, 0x944, 0x7, 
       0x212, 0x2, 0x2, 0x944, 0x946, 0x7, 0x1af, 0x2, 0x2, 0x945, 0x813, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x814, 0x3, 0x2, 0x2, 0x2, 0x945, 0x81f, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x831, 0x3, 0x2, 0x2, 0x2, 0x945, 0x840, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x853, 0x3, 0x2, 0x2, 0x2, 0x945, 0x86b, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x87a, 0x3, 0x2, 0x2, 0x2, 0x945, 0x889, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x88e, 0x3, 0x2, 0x2, 0x2, 0x945, 0x89a, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x8a6, 0x3, 0x2, 0x2, 0x2, 0x945, 0x8ab, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x8b6, 0x3, 0x2, 0x2, 0x2, 0x945, 0x8bb, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x8be, 0x3, 0x2, 0x2, 0x2, 0x945, 0x8c1, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x8c5, 0x3, 0x2, 0x2, 0x2, 0x945, 0x8c7, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x8c9, 0x3, 0x2, 0x2, 0x2, 0x945, 0x8ce, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x8d1, 0x3, 0x2, 0x2, 0x2, 0x945, 0x8db, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x8e6, 0x3, 0x2, 0x2, 0x2, 0x945, 0x8e8, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x8ea, 0x3, 0x2, 0x2, 0x2, 0x945, 0x8eb, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x8ed, 0x3, 0x2, 0x2, 0x2, 0x945, 0x8f0, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x8f3, 0x3, 0x2, 0x2, 0x2, 0x945, 0x8fa, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x901, 0x3, 0x2, 0x2, 0x2, 0x945, 0x907, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x90a, 0x3, 0x2, 0x2, 0x2, 0x945, 0x919, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x923, 0x3, 0x2, 0x2, 0x2, 0x945, 0x929, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x92f, 0x3, 0x2, 0x2, 0x2, 0x945, 0x935, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x93b, 0x3, 0x2, 0x2, 0x2, 0x945, 0x941, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x943, 0x3, 0x2, 0x2, 0x2, 0x946, 0x7f, 
       0x3, 0x2, 0x2, 0x2, 0x947, 0x948, 0x7, 0x2e, 0x2, 0x2, 0x948, 0x94a, 
       0x9, 0x2, 0x2, 0x2, 0x949, 0x94b, 0x5, 0x210, 0x109, 0x2, 0x94a, 
       0x949, 0x3, 0x2, 0x2, 0x2, 0x94a, 0x94b, 0x3, 0x2, 0x2, 0x2, 0x94b, 
       0x94c, 0x3, 0x2, 0x2, 0x2, 0x94c, 0x94d, 0x5, 0x1de, 0xf0, 0x2, 0x94d, 
       0x81, 0x3, 0x2, 0x2, 0x2, 0x94e, 0x94f, 0x7, 0x2e, 0x2, 0x2, 0x94f, 
       0x951, 0x7, 0x13c, 0x2, 0x2, 0x950, 0x952, 0x5, 0x210, 0x109, 0x2, 
       0x951, 0x950, 0x3, 0x2, 0x2, 0x2, 0x951, 0x952, 0x3, 0x2, 0x2, 0x2, 
       0x952, 0x953, 0x3, 0x2, 0x2, 0x2, 0x953, 0x954, 0x5, 0x1c6, 0xe4, 
       0x2, 0x954, 0x83, 0x3, 0x2, 0x2, 0x2, 0x955, 0x956, 0x7, 0x2e, 0x2, 
       0x2, 0x956, 0x958, 0x7, 0x45, 0x2, 0x2, 0x957, 0x959, 0x9, 0x3, 0x2, 
       0x2, 0x958, 0x957, 0x3, 0x2, 0x2, 0x2, 0x958, 0x959, 0x3, 0x2, 0x2, 
       0x2, 0x959, 0x95a, 0x3, 0x2, 0x2, 0x2, 0x95a, 0x95b, 0x5, 0x1de, 
       0xf0, 0x2, 0x95b, 0x95c, 0x7, 0x67, 0x2, 0x2, 0x95c, 0x962, 0x5, 
       0x1c4, 0xe3, 0x2, 0x95d, 0x95f, 0x7, 0xfb, 0x2, 0x2, 0x95e, 0x960, 
       0x7, 0x3a8, 0x2, 0x2, 0x95f, 0x95e, 0x3, 0x2, 0x2, 0x2, 0x95f, 0x960, 
       0x3, 0x2, 0x2, 0x2, 0x960, 0x961, 0x3, 0x2, 0x2, 0x2, 0x961, 0x963, 
       0x9, 0x5, 0x2, 0x2, 0x962, 0x95d, 0x3, 0x2, 0x2, 0x2, 0x962, 0x963, 
       0x3, 0x2, 0x2, 0x2, 0x963, 0x969, 0x3, 0x2, 0x2, 0x2, 0x964, 0x966, 
       0x7, 0x5a, 0x2, 0x2, 0x965, 0x967, 0x7, 0x3a8, 0x2, 0x2, 0x966, 0x965, 
       0x3, 0x2, 0x2, 0x2, 0x966, 0x967, 0x3, 0x2, 0x2, 0x2, 0x967, 0x968, 
       0x3, 0x2, 0x2, 0x2, 0x968, 0x96a, 0x9, 0x6, 0x2, 0x2, 0x969, 0x964, 
       0x3, 0x2, 0x2, 0x2, 0x969, 0x96a, 0x3, 0x2, 0x2, 0x2, 0x96a, 0x85, 
       0x3, 0x2, 0x2, 0x2, 0x96b, 0x96c, 0x7, 0x2e, 0x2, 0x2, 0x96c, 0x96d, 
       0x7, 0x172, 0x2, 0x2, 0x96d, 0x96e, 0x7, 0x3f, 0x2, 0x2, 0x96e, 0x96f, 
       0x5, 0x1de, 0xf0, 0x2, 0x96f, 0x970, 0x7, 0x136, 0x2, 0x2, 0x970, 
       0x971, 0x7, 0x3a8, 0x2, 0x2, 0x971, 0x972, 0x5, 0x1d4, 0xeb, 0x2, 
       0x972, 0x87, 0x3, 0x2, 0x2, 0x2, 0x973, 0x974, 0x7, 0x2e, 0x2, 0x2, 
       0x974, 0x976, 0x7, 0x72, 0x2, 0x2, 0x975, 0x977, 0x5, 0x210, 0x109, 
       0x2, 0x976, 0x975, 0x3, 0x2, 0x2, 0x2, 0x976, 0x977, 0x3, 0x2, 0x2, 
       0x2, 0x977, 0x978, 0x3, 0x2, 0x2, 0x2, 0x978, 0x979, 0x5, 0x1c6, 
       0xe4, 0x2, 0x979, 0x89, 0x3, 0x2, 0x2, 0x2, 0x97a, 0x97b, 0x7, 0x2e, 
       0x2, 0x2, 0x97b, 0x97d, 0x7, 0x150, 0x2, 0x2, 0x97c, 0x97e, 0x5, 
       0x210, 0x109, 0x2, 0x97d, 0x97c, 0x3, 0x2, 0x2, 0x2, 0x97d, 0x97e, 
       0x3, 0x2, 0x2, 0x2, 0x97e, 0x97f, 0x3, 0x2, 0x2, 0x2, 0x97f, 0x980, 
       0x5, 0x1c6, 0xe4, 0x2, 0x980, 0x8b, 0x3, 0x2, 0x2, 0x2, 0x981, 0x982, 
       0x7, 0x2e, 0x2, 0x2, 0x982, 0x984, 0x7, 0x1e0, 0x2, 0x2, 0x983, 0x985, 
       0x5, 0x210, 0x109, 0x2, 0x984, 0x983, 0x3, 0x2, 0x2, 0x2, 0x984, 
       0x985, 0x3, 0x2, 0x2, 0x2, 0x985, 0x986, 0x3, 0x2, 0x2, 0x2, 0x986, 
       0x987, 0x5, 0x1de, 0xf0, 0x2, 0x987, 0x8d, 0x3, 0x2, 0x2, 0x2, 0x988, 
       0x98a, 0x7, 0x2e, 0x2, 0x2, 0x989, 0x98b, 0x7, 0x205, 0x2, 0x2, 0x98a, 
       0x989, 0x3, 0x2, 0x2, 0x2, 0x98a, 0x98b, 0x3, 0x2, 0x2, 0x2, 0x98b, 
       0x98c, 0x3, 0x2, 0x2, 0x2, 0x98c, 0x98e, 0x7, 0x94, 0x2, 0x2, 0x98d, 
       0x98f, 0x5, 0x210, 0x109, 0x2, 0x98e, 0x98d, 0x3, 0x2, 0x2, 0x2, 
       0x98e, 0x98f, 0x3, 0x2, 0x2, 0x2, 0x98f, 0x990, 0x3, 0x2, 0x2, 0x2, 
       0x990, 0x992, 0x5, 0x200, 0x101, 0x2, 0x991, 0x993, 0x9, 0x1f, 0x2, 
       0x2, 0x992, 0x991, 0x3, 0x2, 0x2, 0x2, 0x992, 0x993, 0x3, 0x2, 0x2, 
       0x2, 0x993, 0x8f, 0x3, 0x2, 0x2, 0x2, 0x994, 0x995, 0x7, 0x2e, 0x2, 
       0x2, 0x995, 0x996, 0x7, 0x204, 0x2, 0x2, 0x996, 0x99c, 0x5, 0x1de, 
       0xf0, 0x2, 0x997, 0x999, 0x7, 0x136, 0x2, 0x2, 0x998, 0x99a, 0x7, 
       0x3a8, 0x2, 0x2, 0x999, 0x998, 0x3, 0x2, 0x2, 0x2, 0x999, 0x99a, 
       0x3, 0x2, 0x2, 0x2, 0x99a, 0x99b, 0x3, 0x2, 0x2, 0x2, 0x99b, 0x99d, 
       0x5, 0x1d4, 0xeb, 0x2, 0x99c, 0x997, 0x3, 0x2, 0x2, 0x2, 0x99c, 0x99d, 
       0x3, 0x2, 0x2, 0x2, 0x99d, 0x91, 0x3, 0x2, 0x2, 0x2, 0x99e, 0x99f, 
       0x7, 0x2e, 0x2, 0x2, 0x99f, 0x9a1, 0x7, 0x99, 0x2, 0x2, 0x9a0, 0x9a2, 
       0x5, 0x210, 0x109, 0x2, 0x9a1, 0x9a0, 0x3, 0x2, 0x2, 0x2, 0x9a1, 
       0x9a2, 0x3, 0x2, 0x2, 0x2, 0x9a2, 0x9a3, 0x3, 0x2, 0x2, 0x2, 0x9a3, 
       0x9a4, 0x5, 0x1c6, 0xe4, 0x2, 0x9a4, 0x93, 0x3, 0x2, 0x2, 0x2, 0x9a5, 
       0x9a6, 0x7, 0x2e, 0x2, 0x2, 0x9a6, 0x9a8, 0x7, 0x219, 0x2, 0x2, 0x9a7, 
       0x9a9, 0x5, 0x210, 0x109, 0x2, 0x9a8, 0x9a7, 0x3, 0x2, 0x2, 0x2, 
       0x9a8, 0x9a9, 0x3, 0x2, 0x2, 0x2, 0x9a9, 0x9aa, 0x3, 0x2, 0x2, 0x2, 
       0x9aa, 0x9af, 0x5, 0x1c6, 0xe4, 0x2, 0x9ab, 0x9ac, 0x7, 0x3b3, 0x2, 
       0x2, 0x9ac, 0x9ae, 0x5, 0x1c6, 0xe4, 0x2, 0x9ad, 0x9ab, 0x3, 0x2, 
       0x2, 0x2, 0x9ae, 0x9b1, 0x3, 0x2, 0x2, 0x2, 0x9af, 0x9ad, 0x3, 0x2, 
       0x2, 0x2, 0x9af, 0x9b0, 0x3, 0x2, 0x2, 0x2, 0x9b0, 0x9b3, 0x3, 0x2, 
       0x2, 0x2, 0x9b1, 0x9af, 0x3, 0x2, 0x2, 0x2, 0x9b2, 0x9b4, 0x9, 0x1f, 
       0x2, 0x2, 0x9b3, 0x9b2, 0x3, 0x2, 0x2, 0x2, 0x9b3, 0x9b4, 0x3, 0x2, 
       0x2, 0x2, 0x9b4, 0x95, 0x3, 0x2, 0x2, 0x2, 0x9b5, 0x9b6, 0x7, 0x7a, 
       0x2, 0x2, 0x9b6, 0x9b7, 0x7, 0x94, 0x2, 0x2, 0x9b7, 0x9b8, 0x5, 0x1c4, 
       0xe3, 0x2, 0x9b8, 0x9b9, 0x7, 0x97, 0x2, 0x2, 0x9b9, 0x9c1, 0x5, 
       0x1c4, 0xe3, 0x2, 0x9ba, 0x9bb, 0x7, 0x3b3, 0x2, 0x2, 0x9bb, 0x9bc, 
       0x5, 0x1c4, 0xe3, 0x2, 0x9bc, 0x9bd, 0x7, 0x97, 0x2, 0x2, 0x9bd, 
       0x9be, 0x5, 0x1c4, 0xe3, 0x2, 0x9be, 0x9c0, 0x3, 0x2, 0x2, 0x2, 0x9bf, 
       0x9ba, 0x3, 0x2, 0x2, 0x2, 0x9c0, 0x9c3, 0x3, 0x2, 0x2, 0x2, 0x9c1, 
       0x9bf, 0x3, 0x2, 0x2, 0x2, 0x9c1, 0x9c2, 0x3, 0x2, 0x2, 0x2, 0x9c2, 
       0x97, 0x3, 0x2, 0x2, 0x2, 0x9c3, 0x9c1, 0x3, 0x2, 0x2, 0x2, 0x9c4, 
       0x9c6, 0x7, 0x20b, 0x2, 0x2, 0x9c5, 0x9c7, 0x7, 0x94, 0x2, 0x2, 0x9c6, 
       0x9c5, 0x3, 0x2, 0x2, 0x2, 0x9c6, 0x9c7, 0x3, 0x2, 0x2, 0x2, 0x9c7, 
       0x9c8, 0x3, 0x2, 0x2, 0x2, 0x9c8, 0x9c9, 0x5, 0x1c4, 0xe3, 0x2, 0x9c9, 
       0x99, 0x3, 0x2, 0x2, 0x2, 0x9ca, 0x9cb, 0x7, 0x12, 0x2, 0x2, 0x9cb, 
       0x9d2, 0x5, 0x1c6, 0xe4, 0x2, 0x9cc, 0x9cf, 0x7, 0x3b1, 0x2, 0x2, 
       0x9cd, 0x9d0, 0x5, 0x208, 0x105, 0x2, 0x9ce, 0x9d0, 0x5, 0x206, 0x104, 
       0x2, 0x9cf, 0x9cd, 0x3, 0x2, 0x2, 0x2, 0x9cf, 0x9ce, 0x3, 0x2, 0x2, 
       0x2, 0x9cf, 0x9d0, 0x3, 0x2, 0x2, 0x2, 0x9d0, 0x9d1, 0x3, 0x2, 0x2, 
       0x2, 0x9d1, 0x9d3, 0x7, 0x3b2, 0x2, 0x2, 0x9d2, 0x9cc, 0x3, 0x2, 
       0x2, 0x2, 0x9d2, 0x9d3, 0x3, 0x2, 0x2, 0x2, 0x9d3, 0x9b, 0x3, 0x2, 
       0x2, 0x2, 0x9d4, 0x9d7, 0x5, 0xb4, 0x5b, 0x2, 0x9d5, 0x9d7, 0x5, 
       0xb6, 0x5c, 0x2, 0x9d6, 0x9d4, 0x3, 0x2, 0x2, 0x2, 0x9d6, 0x9d5, 
       0x3, 0x2, 0x2, 0x2, 0x9d7, 0x9d, 0x3, 0x2, 0x2, 0x2, 0x9d8, 0x9d9, 
       0x7, 0x12e, 0x2, 0x2, 0x9d9, 0x9da, 0x5, 0x206, 0x104, 0x2, 0x9da, 
       0x9f, 0x3, 0x2, 0x2, 0x2, 0x9db, 0x9e0, 0x5, 0xb8, 0x5d, 0x2, 0x9dc, 
       0x9e0, 0x5, 0xba, 0x5e, 0x2, 0x9dd, 0x9e0, 0x5, 0xbc, 0x5f, 0x2, 
       0x9de, 0x9e0, 0x5, 0xbe, 0x60, 0x2, 0x9df, 0x9db, 0x3, 0x2, 0x2, 
       0x2, 0x9df, 0x9dc, 0x3, 0x2, 0x2, 0x2, 0x9df, 0x9dd, 0x3, 0x2, 0x2, 
       0x2, 0x9df, 0x9de, 0x3, 0x2, 0x2, 0x2, 0x9e0, 0xa1, 0x3, 0x2, 0x2, 
       0x2, 0x9e1, 0x9e3, 0x7, 0x49, 0x2, 0x2, 0x9e2, 0x9e4, 0x9, 0x20, 
       0x2, 0x2, 0x9e3, 0x9e2, 0x3, 0x2, 0x2, 0x2, 0x9e3, 0x9e4, 0x3, 0x2, 
       0x2, 0x2, 0x9e4, 0x9e6, 0x3, 0x2, 0x2, 0x2, 0x9e5, 0x9e7, 0x7, 0x43, 
       0x2, 0x2, 0x9e6, 0x9e5, 0x3, 0x2, 0x2, 0x2, 0x9e6, 0x9e7, 0x3, 0x2, 
       0x2, 0x2, 0x9e7, 0x9e9, 0x3, 0x2, 0x2, 0x2, 0x9e8, 0x9ea, 0x7, 0x4b, 
       0x2, 0x2, 0x9e9, 0x9e8, 0x3, 0x2, 0x2, 0x2, 0x9e9, 0x9ea, 0x3, 0x2, 
       0x2, 0x2, 0x9ea, 0x9eb, 0x3, 0x2, 0x2, 0x2, 0x9eb, 0x9f1, 0x5, 0x1c4, 
       0xe3, 0x2, 0x9ec, 0x9ed, 0x7, 0x70, 0x2, 0x2, 0x9ed, 0x9ee, 0x7, 
       0x3b1, 0x2, 0x2, 0x9ee, 0x9ef, 0x5, 0x1fe, 0x100, 0x2, 0x9ef, 0x9f0, 
       0x7, 0x3b2, 0x2, 0x2, 0x9f0, 0x9f2, 0x3, 0x2, 0x2, 0x2, 0x9f1, 0x9ec, 
       0x3, 0x2, 0x2, 0x2, 0x9f1, 0x9f2, 0x3, 0x2, 0x2, 0x2, 0x9f2, 0xa03, 
       0x3, 0x2, 0x2, 0x2, 0x9f3, 0x9f4, 0x7, 0x3b1, 0x2, 0x2, 0x9f4, 0x9f5, 
       0x5, 0x1fe, 0x100, 0x2, 0x9f5, 0x9f6, 0x7, 0x3b2, 0x2, 0x2, 0x9f6, 
       0x9f8, 0x3, 0x2, 0x2, 0x2, 0x9f7, 0x9f3, 0x3, 0x2, 0x2, 0x2, 0x9f7, 
       0x9f8, 0x3, 0x2, 0x2, 0x2, 0x9f8, 0x9f9, 0x3, 0x2, 0x2, 0x2, 0x9f9, 
       0xa04, 0x5, 0xae, 0x58, 0x2, 0x9fa, 0x9fb, 0x7, 0x86, 0x2, 0x2, 0x9fb, 
       0xa00, 0x5, 0xb0, 0x59, 0x2, 0x9fc, 0x9fd, 0x7, 0x3b3, 0x2, 0x2, 
       0x9fd, 0x9ff, 0x5, 0xb0, 0x59, 0x2, 0x9fe, 0x9fc, 0x3, 0x2, 0x2, 
       0x2, 0x9ff, 0xa02, 0x3, 0x2, 0x2, 0x2, 0xa00, 0x9fe, 0x3, 0x2, 0x2, 
       0x2, 0xa00, 0xa01, 0x3, 0x2, 0x2, 0x2, 0xa01, 0xa04, 0x3, 0x2, 0x2, 
       0x2, 0xa02, 0xa00, 0x3, 0x2, 0x2, 0x2, 0xa03, 0x9f7, 0x3, 0x2, 0x2, 
       0x2, 0xa03, 0x9fa, 0x3, 0x2, 0x2, 0x2, 0xa04, 0xa11, 0x3, 0x2, 0x2, 
       0x2, 0xa05, 0xa06, 0x7, 0x67, 0x2, 0x2, 0xa06, 0xa07, 0x7, 0x130, 
       0x2, 0x2, 0xa07, 0xa08, 0x7, 0x4f, 0x2, 0x2, 0xa08, 0xa09, 0x7, 0xa0, 
       0x2, 0x2, 0xa09, 0xa0e, 0x5, 0xb0, 0x59, 0x2, 0xa0a, 0xa0b, 0x7, 
       0x3b3, 0x2, 0x2, 0xa0b, 0xa0d, 0x5, 0xb0, 0x59, 0x2, 0xa0c, 0xa0a, 
       0x3, 0x2, 0x2, 0x2, 0xa0d, 0xa10, 0x3, 0x2, 0x2, 0x2, 0xa0e, 0xa0c, 
       0x3, 0x2, 0x2, 0x2, 0xa0e, 0xa0f, 0x3, 0x2, 0x2, 0x2, 0xa0f, 0xa12, 
       0x3, 0x2, 0x2, 0x2, 0xa10, 0xa0e, 0x3, 0x2, 0x2, 0x2, 0xa11, 0xa05, 
       0x3, 0x2, 0x2, 0x2, 0xa11, 0xa12, 0x3, 0x2, 0x2, 0x2, 0xa12, 0xa3, 
       0x3, 0x2, 0x2, 0x2, 0xa13, 0xa14, 0x7, 0x59, 0x2, 0x2, 0xa14, 0xa16, 
       0x7, 0x123, 0x2, 0x2, 0xa15, 0xa17, 0x9, 0x21, 0x2, 0x2, 0xa16, 0xa15, 
       0x3, 0x2, 0x2, 0x2, 0xa16, 0xa17, 0x3, 0x2, 0x2, 0x2, 0xa17, 0xa19, 
       0x3, 0x2, 0x2, 0x2, 0xa18, 0xa1a, 0x7, 0x171, 0x2, 0x2, 0xa19, 0xa18, 
       0x3, 0x2, 0x2, 0x2, 0xa19, 0xa1a, 0x3, 0x2, 0x2, 0x2, 0xa1a, 0xa1b, 
       0x3, 0x2, 0x2, 0x2, 0xa1b, 0xa1c, 0x7, 0x46, 0x2, 0x2, 0xa1c, 0xa1e, 
       0x7, 0x3c0, 0x2, 0x2, 0xa1d, 0xa1f, 0x9, 0x8, 0x2, 0x2, 0xa1e, 0xa1d, 
       0x3, 0x2, 0x2, 0x2, 0xa1e, 0xa1f, 0x3, 0x2, 0x2, 0x2, 0xa1f, 0xa20, 
       0x3, 0x2, 0x2, 0x2, 0xa20, 0xa21, 0x7, 0x4b, 0x2, 0x2, 0xa21, 0xa22, 
       0x7, 0x94, 0x2, 0x2, 0xa22, 0xa28, 0x5, 0x1c4, 0xe3, 0x2, 0xa23, 
       0xa24, 0x7, 0x70, 0x2, 0x2, 0xa24, 0xa25, 0x7, 0x3b1, 0x2, 0x2, 0xa25, 
       0xa26, 0x5, 0x1fe, 0x100, 0x2, 0xa26, 0xa27, 0x7, 0x3b2, 0x2, 0x2, 
       0xa27, 0xa29, 0x3, 0x2, 0x2, 0x2, 0xa28, 0xa23, 0x3, 0x2, 0x2, 0x2, 
       0xa28, 0xa29, 0x3, 0x2, 0x2, 0x2, 0xa29, 0xa2d, 0x3, 0x2, 0x2, 0x2, 
       0xa2a, 0xa2b, 0x7, 0x17, 0x2, 0x2, 0xa2b, 0xa2c, 0x7, 0x86, 0x2, 
       0x2, 0xa2c, 0xa2e, 0x5, 0x1d0, 0xe9, 0x2, 0xa2d, 0xa2a, 0x3, 0x2, 
       0x2, 0x2, 0xa2d, 0xa2e, 0x3, 0x2, 0x2, 0x2, 0xa2e, 0xa42, 0x3, 0x2, 
       0x2, 0x2, 0xa2f, 0xa33, 0x9, 0x22, 0x2, 0x2, 0xa30, 0xa31, 0x7, 0x95, 
       0x2, 0x2, 0xa31, 0xa32, 0x7, 0x11, 0x2, 0x2, 0xa32, 0xa34, 0x7, 0x3c0, 
       0x2, 0x2, 0xa33, 0xa30, 0x3, 0x2, 0x2, 0x2, 0xa33, 0xa34, 0x3, 0x2, 
       0x2, 0x2, 0xa34, 0xa3b, 0x3, 0x2, 0x2, 0x2, 0xa35, 0xa37, 0x7, 0x6a, 
       0x2, 0x2, 0xa36, 0xa35, 0x3, 0x2, 0x2, 0x2, 0xa36, 0xa37, 0x3, 0x2, 
       0x2, 0x2, 0xa37, 0xa38, 0x3, 0x2, 0x2, 0x2, 0xa38, 0xa39, 0x7, 0x32, 
       0x2, 0x2, 0xa39, 0xa3a, 0x7, 0x11, 0x2, 0x2, 0xa3a, 0xa3c, 0x7, 0x3c0, 
       0x2, 0x2, 0xa3b, 0xa36, 0x3, 0x2, 0x2, 0x2, 0xa3b, 0xa3c, 0x3, 0x2, 
       0x2, 0x2, 0xa3c, 0xa40, 0x3, 0x2, 0x2, 0x2, 0xa3d, 0xa3e, 0x7, 0x33, 
       0x2, 0x2, 0xa3e, 0xa3f, 0x7, 0x11, 0x2, 0x2, 0xa3f, 0xa41, 0x7, 0x3c0, 
       0x2, 0x2, 0xa40, 0xa3d, 0x3, 0x2, 0x2, 0x2, 0xa40, 0xa41, 0x3, 0x2, 
       0x2, 0x2, 0xa41, 0xa43, 0x3, 0x2, 0x2, 0x2, 0xa42, 0xa2f, 0x3, 0x2, 
       0x2, 0x2, 0xa42, 0xa43, 0x3, 0x2, 0x2, 0x2, 0xa43, 0xa4f, 0x3, 0x2, 
       0x2, 0x2, 0xa44, 0xa48, 0x7, 0x58, 0x2, 0x2, 0xa45, 0xa46, 0x7, 0x92, 
       0x2, 0x2, 0xa46, 0xa47, 0x7, 0x11, 0x2, 0x2, 0xa47, 0xa49, 0x7, 0x3c0, 
       0x2, 0x2, 0xa48, 0xa45, 0x3, 0x2, 0x2, 0x2, 0xa48, 0xa49, 0x3, 0x2, 
       0x2, 0x2, 0xa49, 0xa4d, 0x3, 0x2, 0x2, 0x2, 0xa4a, 0xa4b, 0x7, 0x95, 
       0x2, 0x2, 0xa4b, 0xa4c, 0x7, 0x11, 0x2, 0x2, 0xa4c, 0xa4e, 0x7, 0x3c0, 
       0x2, 0x2, 0xa4d, 0xa4a, 0x3, 0x2, 0x2, 0x2, 0xa4d, 0xa4e, 0x3, 0x2, 
       0x2, 0x2, 0xa4e, 0xa50, 0x3, 0x2, 0x2, 0x2, 0xa4f, 0xa44, 0x3, 0x2, 
       0x2, 0x2, 0xa4f, 0xa50, 0x3, 0x2, 0x2, 0x2, 0xa50, 0xa55, 0x3, 0x2, 
       0x2, 0x2, 0xa51, 0xa52, 0x7, 0x43, 0x2, 0x2, 0xa52, 0xa53, 0x5, 0x1e4, 
       0xf3, 0x2, 0xa53, 0xa54, 0x9, 0x23, 0x2, 0x2, 0xa54, 0xa56, 0x3, 
       0x2, 0x2, 0x2, 0xa55, 0xa51, 0x3, 0x2, 0x2, 0x2, 0xa55, 0xa56, 0x3, 
       0x2, 0x2, 0x2, 0xa56, 0xa62, 0x3, 0x2, 0x2, 0x2, 0xa57, 0xa58, 0x7, 
       0x3b1, 0x2, 0x2, 0xa58, 0xa5d, 0x5, 0xb2, 0x5a, 0x2, 0xa59, 0xa5a, 
       0x7, 0x3b3, 0x2, 0x2, 0xa5a, 0xa5c, 0x5, 0xb2, 0x5a, 0x2, 0xa5b, 
       0xa59, 0x3, 0x2, 0x2, 0x2, 0xa5c, 0xa5f, 0x3, 0x2, 0x2, 0x2, 0xa5d, 
       0xa5b, 0x3, 0x2, 0x2, 0x2, 0xa5d, 0xa5e, 0x3, 0x2, 0x2, 0x2, 0xa5e, 
       0xa60, 0x3, 0x2, 0x2, 0x2, 0xa5f, 0xa5d, 0x3, 0x2, 0x2, 0x2, 0xa60, 
       0xa61, 0x7, 0x3b2, 0x2, 0x2, 0xa61, 0xa63, 0x3, 0x2, 0x2, 0x2, 0xa62, 
       0xa57, 0x3, 0x2, 0x2, 0x2, 0xa62, 0xa63, 0x3, 0x2, 0x2, 0x2, 0xa63, 
       0xa6d, 0x3, 0x2, 0x2, 0x2, 0xa64, 0xa65, 0x7, 0x86, 0x2, 0x2, 0xa65, 
       0xa6a, 0x5, 0xb0, 0x59, 0x2, 0xa66, 0xa67, 0x7, 0x3b3, 0x2, 0x2, 
       0xa67, 0xa69, 0x5, 0xb0, 0x59, 0x2, 0xa68, 0xa66, 0x3, 0x2, 0x2, 
       0x2, 0xa69, 0xa6c, 0x3, 0x2, 0x2, 0x2, 0xa6a, 0xa68, 0x3, 0x2, 0x2, 
       0x2, 0xa6a, 0xa6b, 0x3, 0x2, 0x2, 0x2, 0xa6b, 0xa6e, 0x3, 0x2, 0x2, 
       0x2, 0xa6c, 0xa6a, 0x3, 0x2, 0x2, 0x2, 0xa6d, 0xa64, 0x3, 0x2, 0x2, 
       0x2, 0xa6d, 0xa6e, 0x3, 0x2, 0x2, 0x2, 0xa6e, 0xa5, 0x3, 0x2, 0x2, 
       0x2, 0xa6f, 0xa70, 0x7, 0x59, 0x2, 0x2, 0xa70, 0xa72, 0x7, 0x221, 
       0x2, 0x2, 0xa71, 0xa73, 0x9, 0x21, 0x2, 0x2, 0xa72, 0xa71, 0x3, 0x2, 
       0x2, 0x2, 0xa72, 0xa73, 0x3, 0x2, 0x2, 0x2, 0xa73, 0xa75, 0x3, 0x2, 
       0x2, 0x2, 0xa74, 0xa76, 0x7, 0x171, 0x2, 0x2, 0xa75, 0xa74, 0x3, 
       0x2, 0x2, 0x2, 0xa75, 0xa76, 0x3, 0x2, 0x2, 0x2, 0xa76, 0xa77, 0x3, 
       0x2, 0x2, 0x2, 0xa77, 0xa78, 0x7, 0x46, 0x2, 0x2, 0xa78, 0xa7a, 0x7, 
       0x3c0, 0x2, 0x2, 0xa79, 0xa7b, 0x9, 0x8, 0x2, 0x2, 0xa7a, 0xa79, 
       0x3, 0x2, 0x2, 0x2, 0xa7a, 0xa7b, 0x3, 0x2, 0x2, 0x2, 0xa7b, 0xa7c, 
       0x3, 0x2, 0x2, 0x2, 0xa7c, 0xa7d, 0x7, 0x4b, 0x2, 0x2, 0xa7d, 0xa7e, 
       0x7, 0x94, 0x2, 0x2, 0xa7e, 0xa82, 0x5, 0x1c4, 0xe3, 0x2, 0xa7f, 
       0xa80, 0x7, 0x17, 0x2, 0x2, 0xa80, 0xa81, 0x7, 0x86, 0x2, 0x2, 0xa81, 
       0xa83, 0x5, 0x1d0, 0xe9, 0x2, 0xa82, 0xa7f, 0x3, 0x2, 0x2, 0x2, 0xa82, 
       0xa83, 0x3, 0x2, 0x2, 0x2, 0xa83, 0xa8a, 0x3, 0x2, 0x2, 0x2, 0xa84, 
       0xa85, 0x7, 0x1db, 0x2, 0x2, 0xa85, 0xa86, 0x7, 0x15a, 0x2, 0x2, 
       0xa86, 0xa87, 0x7, 0x11, 0x2, 0x2, 0xa87, 0xa88, 0x7, 0x3aa, 0x2, 
       0x2, 0xa88, 0xa89, 0x7, 0x3c0, 0x2, 0x2, 0xa89, 0xa8b, 0x7, 0x3a9, 
       0x2, 0x2, 0xa8a, 0xa84, 0x3, 0x2, 0x2, 0x2, 0xa8a, 0xa8b, 0x3, 0x2, 
       0x2, 0x2, 0xa8b, 0xa90, 0x3, 0x2, 0x2, 0x2, 0xa8c, 0xa8d, 0x7, 0x43, 
       0x2, 0x2, 0xa8d, 0xa8e, 0x5, 0x1e4, 0xf3, 0x2, 0xa8e, 0xa8f, 0x9, 
       0x23, 0x2, 0x2, 0xa8f, 0xa91, 0x3, 0x2, 0x2, 0x2, 0xa90, 0xa8c, 0x3, 
       0x2, 0x2, 0x2, 0xa90, 0xa91, 0x3, 0x2, 0x2, 0x2, 0xa91, 0xa9d, 0x3, 
       0x2, 0x2, 0x2, 0xa92, 0xa93, 0x7, 0x3b1, 0x2, 0x2, 0xa93, 0xa98, 
       0x5, 0xb2, 0x5a, 0x2, 0xa94, 0xa95, 0x7, 0x3b3, 0x2, 0x2, 0xa95, 
       0xa97, 0x5, 0xb2, 0x5a, 0x2, 0xa96, 0xa94, 0x3, 0x2, 0x2, 0x2, 0xa97, 
       0xa9a, 0x3, 0x2, 0x2, 0x2, 0xa98, 0xa96, 0x3, 0x2, 0x2, 0x2, 0xa98, 
       0xa99, 0x3, 0x2, 0x2, 0x2, 0xa99, 0xa9b, 0x3, 0x2, 0x2, 0x2, 0xa9a, 
       0xa98, 0x3, 0x2, 0x2, 0x2, 0xa9b, 0xa9c, 0x7, 0x3b2, 0x2, 0x2, 0xa9c, 
       0xa9e, 0x3, 0x2, 0x2, 0x2, 0xa9d, 0xa92, 0x3, 0x2, 0x2, 0x2, 0xa9d, 
       0xa9e, 0x3, 0x2, 0x2, 0x2, 0xa9e, 0xaa8, 0x3, 0x2, 0x2, 0x2, 0xa9f, 
       0xaa0, 0x7, 0x86, 0x2, 0x2, 0xaa0, 0xaa5, 0x5, 0xb0, 0x59, 0x2, 0xaa1, 
       0xaa2, 0x7, 0x3b3, 0x2, 0x2, 0xaa2, 0xaa4, 0x5, 0xb0, 0x59, 0x2, 
       0xaa3, 0xaa1, 0x3, 0x2, 0x2, 0x2, 0xaa4, 0xaa7, 0x3, 0x2, 0x2, 0x2, 
       0xaa5, 0xaa3, 0x3, 0x2, 0x2, 0x2, 0xaa5, 0xaa6, 0x3, 0x2, 0x2, 0x2, 
       0xaa6, 0xaa9, 0x3, 0x2, 0x2, 0x2, 0xaa7, 0xaa5, 0x3, 0x2, 0x2, 0x2, 
       0xaa8, 0xa9f, 0x3, 0x2, 0x2, 0x2, 0xaa8, 0xaa9, 0x3, 0x2, 0x2, 0x2, 
       0xaa9, 0xa7, 0x3, 0x2, 0x2, 0x2, 0xaaa, 0xaac, 0x7, 0x7c, 0x2, 0x2, 
       0xaab, 0xaad, 0x9, 0x24, 0x2, 0x2, 0xaac, 0xaab, 0x3, 0x2, 0x2, 0x2, 
       0xaac, 0xaad, 0x3, 0x2, 0x2, 0x2, 0xaad, 0xaaf, 0x3, 0x2, 0x2, 0x2, 
       0xaae, 0xab0, 0x7, 0x4b, 0x2, 0x2, 0xaaf, 0xaae, 0x3, 0x2, 0x2, 0x2, 
       0xaaf, 0xab0, 0x3, 0x2, 0x2, 0x2, 0xab0, 0xab1, 0x3, 0x2, 0x2, 0x2, 
       0xab1, 0xab7, 0x5, 0x1c4, 0xe3, 0x2, 0xab2, 0xab3, 0x7, 0x70, 0x2, 
       0x2, 0xab3, 0xab4, 0x7, 0x3b1, 0x2, 0x2, 0xab4, 0xab5, 0x5, 0x1fe, 
       0x100, 0x2, 0xab5, 0xab6, 0x7, 0x3b2, 0x2, 0x2, 0xab6, 0xab8, 0x3, 
       0x2, 0x2, 0x2, 0xab7, 0xab2, 0x3, 0x2, 0x2, 0x2, 0xab7, 0xab8, 0x3, 
       0x2, 0x2, 0x2, 0xab8, 0xac9, 0x3, 0x2, 0x2, 0x2, 0xab9, 0xaba, 0x7, 
       0x3b1, 0x2, 0x2, 0xaba, 0xabb, 0x5, 0x1fe, 0x100, 0x2, 0xabb, 0xabc, 
       0x7, 0x3b2, 0x2, 0x2, 0xabc, 0xabe, 0x3, 0x2, 0x2, 0x2, 0xabd, 0xab9, 
       0x3, 0x2, 0x2, 0x2, 0xabd, 0xabe, 0x3, 0x2, 0x2, 0x2, 0xabe, 0xabf, 
       0x3, 0x2, 0x2, 0x2, 0xabf, 0xaca, 0x5, 0xae, 0x58, 0x2, 0xac0, 0xac1, 
       0x7, 0x86, 0x2, 0x2, 0xac1, 0xac6, 0x5, 0xb0, 0x59, 0x2, 0xac2, 0xac3, 
       0x7, 0x3b3, 0x2, 0x2, 0xac3, 0xac5, 0x5, 0xb0, 0x59, 0x2, 0xac4, 
       0xac2, 0x3, 0x2, 0x2, 0x2, 0xac5, 0xac8, 0x3, 0x2, 0x2, 0x2, 0xac6, 
       0xac4, 0x3, 0x2, 0x2, 0x2, 0xac6, 0xac7, 0x3, 0x2, 0x2, 0x2, 0xac7, 
       0xaca, 0x3, 0x2, 0x2, 0x2, 0xac8, 0xac6, 0x3, 0x2, 0x2, 0x2, 0xac9, 
       0xabd, 0x3, 0x2, 0x2, 0x2, 0xac9, 0xac0, 0x3, 0x2, 0x2, 0x2, 0xaca, 
       0xa9, 0x3, 0x2, 0x2, 0x2, 0xacb, 0xad2, 0x5, 0xd8, 0x6d, 0x2, 0xacc, 
       0xacd, 0x7, 0x39, 0x2, 0x2, 0xacd, 0xad3, 0x7, 0xa0, 0x2, 0x2, 0xace, 
       0xacf, 0x7, 0x5a, 0x2, 0x2, 0xacf, 0xad0, 0x7, 0x44, 0x2, 0x2, 0xad0, 
       0xad1, 0x7, 0x1e2, 0x2, 0x2, 0xad1, 0xad3, 0x7, 0x194, 0x2, 0x2, 
       0xad2, 0xacc, 0x3, 0x2, 0x2, 0x2, 0xad2, 0xace, 0x3, 0x2, 0x2, 0x2, 
       0xad2, 0xad3, 0x3, 0x2, 0x2, 0x2, 0xad3, 0xb17, 0x3, 0x2, 0x2, 0x2, 
       0xad4, 0xadb, 0x5, 0xd4, 0x6b, 0x2, 0xad5, 0xad6, 0x7, 0x39, 0x2, 
       0x2, 0xad6, 0xadc, 0x7, 0xa0, 0x2, 0x2, 0xad7, 0xad8, 0x7, 0x5a, 
       0x2, 0x2, 0xad8, 0xad9, 0x7, 0x44, 0x2, 0x2, 0xad9, 0xada, 0x7, 0x1e2, 
       0x2, 0x2, 0xada, 0xadc, 0x7, 0x194, 0x2, 0x2, 0xadb, 0xad5, 0x3, 
       0x2, 0x2, 0x2, 0xadb, 0xad7, 0x3, 0x2, 0x2, 0x2, 0xadb, 0xadc, 0x3, 
       0x2, 0x2, 0x2, 0xadc, 0xb17, 0x3, 0x2, 0x2, 0x2, 0xadd, 0xadf, 0x5, 
       0xda, 0x6e, 0x2, 0xade, 0xae0, 0x5, 0xde, 0x70, 0x2, 0xadf, 0xade, 
       0x3, 0x2, 0x2, 0x2, 0xae0, 0xae1, 0x3, 0x2, 0x2, 0x2, 0xae1, 0xadf, 
       0x3, 0x2, 0x2, 0x2, 0xae1, 0xae2, 0x3, 0x2, 0x2, 0x2, 0xae2, 0xaeb, 
       0x3, 0x2, 0x2, 0x2, 0xae3, 0xae5, 0x7, 0x9c, 0x2, 0x2, 0xae4, 0xae6, 
       0x9, 0x25, 0x2, 0x2, 0xae5, 0xae4, 0x3, 0x2, 0x2, 0x2, 0xae5, 0xae6, 
       0x3, 0x2, 0x2, 0x2, 0xae6, 0xae9, 0x3, 0x2, 0x2, 0x2, 0xae7, 0xaea, 
       0x5, 0xd8, 0x6d, 0x2, 0xae8, 0xaea, 0x5, 0xd4, 0x6b, 0x2, 0xae9, 
       0xae7, 0x3, 0x2, 0x2, 0x2, 0xae9, 0xae8, 0x3, 0x2, 0x2, 0x2, 0xaea, 
       0xaec, 0x3, 0x2, 0x2, 0x2, 0xaeb, 0xae3, 0x3, 0x2, 0x2, 0x2, 0xaeb, 
       0xaec, 0x3, 0x2, 0x2, 0x2, 0xaec, 0xaee, 0x3, 0x2, 0x2, 0x2, 0xaed, 
       0xaef, 0x5, 0xc4, 0x63, 0x2, 0xaee, 0xaed, 0x3, 0x2, 0x2, 0x2, 0xaee, 
       0xaef, 0x3, 0x2, 0x2, 0x2, 0xaef, 0xaf1, 0x3, 0x2, 0x2, 0x2, 0xaf0, 
       0xaf2, 0x5, 0xec, 0x77, 0x2, 0xaf1, 0xaf0, 0x3, 0x2, 0x2, 0x2, 0xaf1, 
       0xaf2, 0x3, 0x2, 0x2, 0x2, 0xaf2, 0xaf9, 0x3, 0x2, 0x2, 0x2, 0xaf3, 
       0xaf4, 0x7, 0x39, 0x2, 0x2, 0xaf4, 0xafa, 0x7, 0xa0, 0x2, 0x2, 0xaf5, 
       0xaf6, 0x7, 0x5a, 0x2, 0x2, 0xaf6, 0xaf7, 0x7, 0x44, 0x2, 0x2, 0xaf7, 
       0xaf8, 0x7, 0x1e2, 0x2, 0x2, 0xaf8, 0xafa, 0x7, 0x194, 0x2, 0x2, 
       0xaf9, 0xaf3, 0x3, 0x2, 0x2, 0x2, 0xaf9, 0xaf5, 0x3, 0x2, 0x2, 0x2, 
       0xaf9, 0xafa, 0x3, 0x2, 0x2, 0x2, 0xafa, 0xb17, 0x3, 0x2, 0x2, 0x2, 
       0xafb, 0xafd, 0x5, 0xd6, 0x6c, 0x2, 0xafc, 0xafe, 0x5, 0xdc, 0x6f, 
       0x2, 0xafd, 0xafc, 0x3, 0x2, 0x2, 0x2, 0xafe, 0xaff, 0x3, 0x2, 0x2, 
       0x2, 0xaff, 0xafd, 0x3, 0x2, 0x2, 0x2, 0xaff, 0xb00, 0x3, 0x2, 0x2, 
       0x2, 0xb00, 0xb06, 0x3, 0x2, 0x2, 0x2, 0xb01, 0xb03, 0x7, 0x9c, 0x2, 
       0x2, 0xb02, 0xb04, 0x9, 0x25, 0x2, 0x2, 0xb03, 0xb02, 0x3, 0x2, 0x2, 
       0x2, 0xb03, 0xb04, 0x3, 0x2, 0x2, 0x2, 0xb04, 0xb05, 0x3, 0x2, 0x2, 
       0x2, 0xb05, 0xb07, 0x5, 0xd4, 0x6b, 0x2, 0xb06, 0xb01, 0x3, 0x2, 
       0x2, 0x2, 0xb06, 0xb07, 0x3, 0x2, 0x2, 0x2, 0xb07, 0xb09, 0x3, 0x2, 
       0x2, 0x2, 0xb08, 0xb0a, 0x5, 0xc4, 0x63, 0x2, 0xb09, 0xb08, 0x3, 
       0x2, 0x2, 0x2, 0xb09, 0xb0a, 0x3, 0x2, 0x2, 0x2, 0xb0a, 0xb0c, 0x3, 
       0x2, 0x2, 0x2, 0xb0b, 0xb0d, 0x5, 0xec, 0x77, 0x2, 0xb0c, 0xb0b, 
       0x3, 0x2, 0x2, 0x2, 0xb0c, 0xb0d, 0x3, 0x2, 0x2, 0x2, 0xb0d, 0xb14, 
       0x3, 0x2, 0x2, 0x2, 0xb0e, 0xb0f, 0x7, 0x39, 0x2, 0x2, 0xb0f, 0xb15, 
       0x7, 0xa0, 0x2, 0x2, 0xb10, 0xb11, 0x7, 0x5a, 0x2, 0x2, 0xb11, 0xb12, 
       0x7, 0x44, 0x2, 0x2, 0xb12, 0xb13, 0x7, 0x1e2, 0x2, 0x2, 0xb13, 0xb15, 
       0x7, 0x194, 0x2, 0x2, 0xb14, 0xb0e, 0x3, 0x2, 0x2, 0x2, 0xb14, 0xb10, 
       0x3, 0x2, 0x2, 0x2, 0xb14, 0xb15, 0x3, 0x2, 0x2, 0x2, 0xb15, 0xb17, 
       0x3, 0x2, 0x2, 0x2, 0xb16, 0xacb, 0x3, 0x2, 0x2, 0x2, 0xb16, 0xad4, 
       0x3, 0x2, 0x2, 0x2, 0xb16, 0xadd, 0x3, 0x2, 0x2, 0x2, 0xb16, 0xafb, 
       0x3, 0x2, 0x2, 0x2, 0xb17, 0xab, 0x3, 0x2, 0x2, 0x2, 0xb18, 0xb1b, 
       0x5, 0xc0, 0x61, 0x2, 0xb19, 0xb1b, 0x5, 0xc2, 0x62, 0x2, 0xb1a, 
       0xb18, 0x3, 0x2, 0x2, 0x2, 0xb1a, 0xb19, 0x3, 0x2, 0x2, 0x2, 0xb1b, 
       0xad, 0x3, 0x2, 0x2, 0x2, 0xb1c, 0xb2c, 0x5, 0xaa, 0x56, 0x2, 0xb1d, 
       0xb1e, 0x9, 0x26, 0x2, 0x2, 0xb1e, 0xb1f, 0x7, 0x3b1, 0x2, 0x2, 0xb1f, 
       0xb20, 0x5, 0x206, 0x104, 0x2, 0xb20, 0xb28, 0x7, 0x3b2, 0x2, 0x2, 
       0xb21, 0xb22, 0x7, 0x3b3, 0x2, 0x2, 0xb22, 0xb23, 0x7, 0x3b1, 0x2, 
       0x2, 0xb23, 0xb24, 0x5, 0x206, 0x104, 0x2, 0xb24, 0xb25, 0x7, 0x3b2, 
       0x2, 0x2, 0xb25, 0xb27, 0x3, 0x2, 0x2, 0x2, 0xb26, 0xb21, 0x3, 0x2, 
       0x2, 0x2, 0xb27, 0xb2a, 0x3, 0x2, 0x2, 0x2, 0xb28, 0xb26, 0x3, 0x2, 
       0x2, 0x2, 0xb28, 0xb29, 0x3, 0x2, 0x2, 0x2, 0xb29, 0xb2c, 0x3, 0x2, 
       0x2, 0x2, 0xb2a, 0xb28, 0x3, 0x2, 0x2, 0x2, 0xb2b, 0xb1c, 0x3, 0x2, 
       0x2, 0x2, 0xb2b, 0xb1d, 0x3, 0x2, 0x2, 0x2, 0xb2c, 0xaf, 0x3, 0x2, 
       0x2, 0x2, 0xb2d, 0xb2e, 0x5, 0x1c8, 0xe5, 0x2, 0xb2e, 0xb2f, 0x7, 
       0x3a8, 0x2, 0x2, 0xb2f, 0xb30, 0x5, 0x222, 0x112, 0x2, 0xb30, 0xb1, 
       0x3, 0x2, 0x2, 0x2, 0xb31, 0xb34, 0x5, 0x1de, 0xf0, 0x2, 0xb32, 0xb34, 
       0x7, 0x3cb, 0x2, 0x2, 0xb33, 0xb31, 0x3, 0x2, 0x2, 0x2, 0xb33, 0xb32, 
       0x3, 0x2, 0x2, 0x2, 0xb34, 0xb3, 0x3, 0x2, 0x2, 0x2, 0xb35, 0xb37, 
       0x7, 0x28, 0x2, 0x2, 0xb36, 0xb38, 0x7, 0x5c, 0x2, 0x2, 0xb37, 0xb36, 
       0x3, 0x2, 0x2, 0x2, 0xb37, 0xb38, 0x3, 0x2, 0x2, 0x2, 0xb38, 0xb3a, 
       0x3, 0x2, 0x2, 0x2, 0xb39, 0xb3b, 0x7, 0x1c0, 0x2, 0x2, 0xb3a, 0xb39, 
       0x3, 0x2, 0x2, 0x2, 0xb3a, 0xb3b, 0x3, 0x2, 0x2, 0x2, 0xb3b, 0xb3d, 
       0x3, 0x2, 0x2, 0x2, 0xb3c, 0xb3e, 0x7, 0x43, 0x2, 0x2, 0xb3d, 0xb3c, 
       0x3, 0x2, 0x2, 0x2, 0xb3d, 0xb3e, 0x3, 0x2, 0x2, 0x2, 0xb3e, 0xb3f, 
       0x3, 0x2, 0x2, 0x2, 0xb3f, 0xb40, 0x7, 0x3c, 0x2, 0x2, 0xb40, 0xb46, 
       0x5, 0x1c4, 0xe3, 0x2, 0xb41, 0xb42, 0x7, 0x70, 0x2, 0x2, 0xb42, 
       0xb43, 0x7, 0x3b1, 0x2, 0x2, 0xb43, 0xb44, 0x5, 0x1fe, 0x100, 0x2, 
       0xb44, 0xb45, 0x7, 0x3b2, 0x2, 0x2, 0xb45, 0xb47, 0x3, 0x2, 0x2, 
       0x2, 0xb46, 0xb41, 0x3, 0x2, 0x2, 0x2, 0xb46, 0xb47, 0x3, 0x2, 0x2, 
       0x2, 0xb47, 0xb4a, 0x3, 0x2, 0x2, 0x2, 0xb48, 0xb49, 0x7, 0xa6, 0x2, 
       0x2, 0xb49, 0xb4b, 0x5, 0x222, 0x112, 0x2, 0xb4a, 0xb48, 0x3, 0x2, 
       0x2, 0x2, 0xb4a, 0xb4b, 0x3, 0x2, 0x2, 0x2, 0xb4b, 0xb4d, 0x3, 0x2, 
       0x2, 0x2, 0xb4c, 0xb4e, 0x5, 0xc4, 0x63, 0x2, 0xb4d, 0xb4c, 0x3, 
       0x2, 0x2, 0x2, 0xb4d, 0xb4e, 0x3, 0x2, 0x2, 0x2, 0xb4e, 0xb51, 0x3, 
       0x2, 0x2, 0x2, 0xb4f, 0xb50, 0x7, 0x56, 0x2, 0x2, 0xb50, 0xb52, 0x5, 
       0x1e4, 0xf3, 0x2, 0xb51, 0xb4f, 0x3, 0x2, 0x2, 0x2, 0xb51, 0xb52, 
       0x3, 0x2, 0x2, 0x2, 0xb52, 0xb5, 0x3, 0x2, 0x2, 0x2, 0xb53, 0xb55, 
       0x7, 0x28, 0x2, 0x2, 0xb54, 0xb56, 0x7, 0x5c, 0x2, 0x2, 0xb55, 0xb54, 
       0x3, 0x2, 0x2, 0x2, 0xb55, 0xb56, 0x3, 0x2, 0x2, 0x2, 0xb56, 0xb58, 
       0x3, 0x2, 0x2, 0x2, 0xb57, 0xb59, 0x7, 0x1c0, 0x2, 0x2, 0xb58, 0xb57, 
       0x3, 0x2, 0x2, 0x2, 0xb58, 0xb59, 0x3, 0x2, 0x2, 0x2, 0xb59, 0xb5b, 
       0x3, 0x2, 0x2, 0x2, 0xb5a, 0xb5c, 0x7, 0x43, 0x2, 0x2, 0xb5b, 0xb5a, 
       0x3, 0x2, 0x2, 0x2, 0xb5b, 0xb5c, 0x3, 0x2, 0x2, 0x2, 0xb5c, 0xb84, 
       0x3, 0x2, 0x2, 0x2, 0xb5d, 0xb60, 0x5, 0x1c4, 0xe3, 0x2, 0xb5e, 0xb5f, 
       0x7, 0x3b0, 0x2, 0x2, 0xb5f, 0xb61, 0x7, 0x3a1, 0x2, 0x2, 0xb60, 
       0xb5e, 0x3, 0x2, 0x2, 0x2, 0xb60, 0xb61, 0x3, 0x2, 0x2, 0x2, 0xb61, 
       0xb6a, 0x3, 0x2, 0x2, 0x2, 0xb62, 0xb63, 0x7, 0x3b3, 0x2, 0x2, 0xb63, 
       0xb66, 0x5, 0x1c4, 0xe3, 0x2, 0xb64, 0xb65, 0x7, 0x3b0, 0x2, 0x2, 
       0xb65, 0xb67, 0x7, 0x3a1, 0x2, 0x2, 0xb66, 0xb64, 0x3, 0x2, 0x2, 
       0x2, 0xb66, 0xb67, 0x3, 0x2, 0x2, 0x2, 0xb67, 0xb69, 0x3, 0x2, 0x2, 
       0x2, 0xb68, 0xb62, 0x3, 0x2, 0x2, 0x2, 0xb69, 0xb6c, 0x3, 0x2, 0x2, 
       0x2, 0xb6a, 0xb68, 0x3, 0x2, 0x2, 0x2, 0xb6a, 0xb6b, 0x3, 0x2, 0x2, 
       0x2, 0xb6b, 0xb6d, 0x3, 0x2, 0x2, 0x2, 0xb6c, 0xb6a, 0x3, 0x2, 0x2, 
       0x2, 0xb6d, 0xb6e, 0x7, 0x3c, 0x2, 0x2, 0xb6e, 0xb6f, 0x5, 0xc8, 
       0x65, 0x2, 0xb6f, 0xb85, 0x3, 0x2, 0x2, 0x2, 0xb70, 0xb71, 0x7, 0x3c, 
       0x2, 0x2, 0xb71, 0xb74, 0x5, 0x1c4, 0xe3, 0x2, 0xb72, 0xb73, 0x7, 
       0x3b0, 0x2, 0x2, 0xb73, 0xb75, 0x7, 0x3a1, 0x2, 0x2, 0xb74, 0xb72, 
       0x3, 0x2, 0x2, 0x2, 0xb74, 0xb75, 0x3, 0x2, 0x2, 0x2, 0xb75, 0xb7e, 
       0x3, 0x2, 0x2, 0x2, 0xb76, 0xb77, 0x7, 0x3b3, 0x2, 0x2, 0xb77, 0xb7a, 
       0x5, 0x1c4, 0xe3, 0x2, 0xb78, 0xb79, 0x7, 0x3b0, 0x2, 0x2, 0xb79, 
       0xb7b, 0x7, 0x3a1, 0x2, 0x2, 0xb7a, 0xb78, 0x3, 0x2, 0x2, 0x2, 0xb7a, 
       0xb7b, 0x3, 0x2, 0x2, 0x2, 0xb7b, 0xb7d, 0x3, 0x2, 0x2, 0x2, 0xb7c, 
       0xb76, 0x3, 0x2, 0x2, 0x2, 0xb7d, 0xb80, 0x3, 0x2, 0x2, 0x2, 0xb7e, 
       0xb7c, 0x3, 0x2, 0x2, 0x2, 0xb7e, 0xb7f, 0x3, 0x2, 0x2, 0x2, 0xb7f, 
       0xb81, 0x3, 0x2, 0x2, 0x2, 0xb80, 0xb7e, 0x3, 0x2, 0x2, 0x2, 0xb81, 
       0xb82, 0x7, 0xa3, 0x2, 0x2, 0xb82, 0xb83, 0x5, 0xc8, 0x65, 0x2, 0xb83, 
       0xb85, 0x3, 0x2, 0x2, 0x2, 0xb84, 0xb5d, 0x3, 0x2, 0x2, 0x2, 0xb84, 
       0xb70, 0x3, 0x2, 0x2, 0x2, 0xb85, 0xb88, 0x3, 0x2, 0x2, 0x2, 0xb86, 
       0xb87, 0x7, 0xa6, 0x2, 0x2, 0xb87, 0xb89, 0x5, 0x222, 0x112, 0x2, 
       0xb88, 0xb86, 0x3, 0x2, 0x2, 0x2, 0xb88, 0xb89, 0x3, 0x2, 0x2, 0x2, 
       0xb89, 0xb7, 0x3, 0x2, 0x2, 0x2, 0xb8a, 0xb8b, 0x7, 0x155, 0x2, 0x2, 
       0xb8b, 0xb8c, 0x5, 0x1c4, 0xe3, 0x2, 0xb8c, 0xb91, 0x7, 0x1a7, 0x2, 
       0x2, 0xb8d, 0xb8f, 0x7, 0xc, 0x2, 0x2, 0xb8e, 0xb8d, 0x3, 0x2, 0x2, 
       0x2, 0xb8e, 0xb8f, 0x3, 0x2, 0x2, 0x2, 0xb8f, 0xb90, 0x3, 0x2, 0x2, 
       0x2, 0xb90, 0xb92, 0x5, 0x1de, 0xf0, 0x2, 0xb91, 0xb8e, 0x3, 0x2, 
       0x2, 0x2, 0xb91, 0xb92, 0x3, 0x2, 0x2, 0x2, 0xb92, 0xb9, 0x3, 0x2, 
       0x2, 0x2, 0xb93, 0xb94, 0x7, 0x155, 0x2, 0x2, 0xb94, 0xb95, 0x5, 
       0x1c4, 0xe3, 0x2, 0xb95, 0xb96, 0x7, 0x75, 0x2, 0x2, 0xb96, 0xb9d, 
       0x5, 0x1c6, 0xe4, 0x2, 0xb97, 0xb98, 0x5, 0x22a, 0x116, 0x2, 0xb98, 
       0xb99, 0x7, 0x3b1, 0x2, 0x2, 0xb99, 0xb9a, 0x5, 0x208, 0x105, 0x2, 
       0xb9a, 0xb9b, 0x7, 0x3b2, 0x2, 0x2, 0xb9b, 0xb9e, 0x3, 0x2, 0x2, 
       0x2, 0xb9c, 0xb9e, 0x9, 0x27, 0x2, 0x2, 0xb9d, 0xb97, 0x3, 0x2, 0x2, 
       0x2, 0xb9d, 0xb9c, 0x3, 0x2, 0x2, 0x2, 0xb9e, 0xba1, 0x3, 0x2, 0x2, 
       0x2, 0xb9f, 0xba0, 0x7, 0xa6, 0x2, 0x2, 0xba0, 0xba2, 0x5, 0x222, 
       0x112, 0x2, 0xba1, 0xb9f, 0x3, 0x2, 0x2, 0x2, 0xba1, 0xba2, 0x3, 
       0x2, 0x2, 0x2, 0xba2, 0xba5, 0x3, 0x2, 0x2, 0x2, 0xba3, 0xba4, 0x7, 
       0x56, 0x2, 0x2, 0xba4, 0xba6, 0x5, 0x1e4, 0xf3, 0x2, 0xba5, 0xba3, 
       0x3, 0x2, 0x2, 0x2, 0xba5, 0xba6, 0x3, 0x2, 0x2, 0x2, 0xba6, 0xbb, 
       0x3, 0x2, 0x2, 0x2, 0xba7, 0xba8, 0x7, 0x155, 0x2, 0x2, 0xba8, 0xba9, 
       0x5, 0x1c4, 0xe3, 0x2, 0xba9, 0xbaa, 0x7, 0x75, 0x2, 0x2, 0xbaa, 
       0xbad, 0x9, 0x28, 0x2, 0x2, 0xbab, 0xbac, 0x7, 0xa6, 0x2, 0x2, 0xbac, 
       0xbae, 0x5, 0x222, 0x112, 0x2, 0xbad, 0xbab, 0x3, 0x2, 0x2, 0x2, 
       0xbad, 0xbae, 0x3, 0x2, 0x2, 0x2, 0xbae, 0xbb1, 0x3, 0x2, 0x2, 0x2, 
       0xbaf, 0xbb0, 0x7, 0x56, 0x2, 0x2, 0xbb0, 0xbb2, 0x5, 0x1e4, 0xf3, 
       0x2, 0xbb1, 0xbaf, 0x3, 0x2, 0x2, 0x2, 0xbb1, 0xbb2, 0x3, 0x2, 0x2, 
       0x2, 0xbb2, 0xbd, 0x3, 0x2, 0x2, 0x2, 0xbb3, 0xbb4, 0x7, 0x155, 0x2, 
       0x2, 0xbb4, 0xbb5, 0x5, 0x1c4, 0xe3, 0x2, 0xbb5, 0xbb6, 0x7, 0x110, 
       0x2, 0x2, 0xbb6, 0xbf, 0x3, 0x2, 0x2, 0x2, 0xbb7, 0xbb9, 0x7, 0xa0, 
       0x2, 0x2, 0xbb8, 0xbba, 0x7, 0x5c, 0x2, 0x2, 0xbb9, 0xbb8, 0x3, 0x2, 
       0x2, 0x2, 0xbb9, 0xbba, 0x3, 0x2, 0x2, 0x2, 0xbba, 0xbbc, 0x3, 0x2, 
       0x2, 0x2, 0xbbb, 0xbbd, 0x7, 0x43, 0x2, 0x2, 0xbbc, 0xbbb, 0x3, 0x2, 
       0x2, 0x2, 0xbbc, 0xbbd, 0x3, 0x2, 0x2, 0x2, 0xbbd, 0xbbe, 0x3, 0x2, 
       0x2, 0x2, 0xbbe, 0xbc3, 0x5, 0x1c4, 0xe3, 0x2, 0xbbf, 0xbc1, 0x7, 
       0xc, 0x2, 0x2, 0xbc0, 0xbbf, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbc1, 0x3, 
       0x2, 0x2, 0x2, 0xbc1, 0xbc2, 0x3, 0x2, 0x2, 0x2, 0xbc2, 0xbc4, 0x5, 
       0x1de, 0xf0, 0x2, 0xbc3, 0xbc0, 0x3, 0x2, 0x2, 0x2, 0xbc3, 0xbc4, 
       0x3, 0x2, 0x2, 0x2, 0xbc4, 0xbc5, 0x3, 0x2, 0x2, 0x2, 0xbc5, 0xbc6, 
       0x7, 0x86, 0x2, 0x2, 0xbc6, 0xbcb, 0x5, 0xb0, 0x59, 0x2, 0xbc7, 0xbc8, 
       0x7, 0x3b3, 0x2, 0x2, 0xbc8, 0xbca, 0x5, 0xb0, 0x59, 0x2, 0xbc9, 
       0xbc7, 0x3, 0x2, 0x2, 0x2, 0xbca, 0xbcd, 0x3, 0x2, 0x2, 0x2, 0xbcb, 
       0xbc9, 0x3, 0x2, 0x2, 0x2, 0xbcb, 0xbcc, 0x3, 0x2, 0x2, 0x2, 0xbcc, 
       0xbd0, 0x3, 0x2, 0x2, 0x2, 0xbcd, 0xbcb, 0x3, 0x2, 0x2, 0x2, 0xbce, 
       0xbcf, 0x7, 0xa6, 0x2, 0x2, 0xbcf, 0xbd1, 0x5, 0x222, 0x112, 0x2, 
       0xbd0, 0xbce, 0x3, 0x2, 0x2, 0x2, 0xbd0, 0xbd1, 0x3, 0x2, 0x2, 0x2, 
       0xbd1, 0xbd3, 0x3, 0x2, 0x2, 0x2, 0xbd2, 0xbd4, 0x5, 0xc4, 0x63, 
       0x2, 0xbd3, 0xbd2, 0x3, 0x2, 0x2, 0x2, 0xbd3, 0xbd4, 0x3, 0x2, 0x2, 
       0x2, 0xbd4, 0xbd6, 0x3, 0x2, 0x2, 0x2, 0xbd5, 0xbd7, 0x5, 0xec, 0x77, 
       0x2, 0xbd6, 0xbd5, 0x3, 0x2, 0x2, 0x2, 0xbd6, 0xbd7, 0x3, 0x2, 0x2, 
       0x2, 0xbd7, 0xc1, 0x3, 0x2, 0x2, 0x2, 0xbd8, 0xbda, 0x7, 0xa0, 0x2, 
       0x2, 0xbd9, 0xbdb, 0x7, 0x5c, 0x2, 0x2, 0xbda, 0xbd9, 0x3, 0x2, 0x2, 
       0x2, 0xbda, 0xbdb, 0x3, 0x2, 0x2, 0x2, 0xbdb, 0xbdd, 0x3, 0x2, 0x2, 
       0x2, 0xbdc, 0xbde, 0x7, 0x43, 0x2, 0x2, 0xbdd, 0xbdc, 0x3, 0x2, 0x2, 
       0x2, 0xbdd, 0xbde, 0x3, 0x2, 0x2, 0x2, 0xbde, 0xbdf, 0x3, 0x2, 0x2, 
       0x2, 0xbdf, 0xbe0, 0x5, 0xc8, 0x65, 0x2, 0xbe0, 0xbe1, 0x7, 0x86, 
       0x2, 0x2, 0xbe1, 0xbe6, 0x5, 0xb0, 0x59, 0x2, 0xbe2, 0xbe3, 0x7, 
       0x3b3, 0x2, 0x2, 0xbe3, 0xbe5, 0x5, 0xb0, 0x59, 0x2, 0xbe4, 0xbe2, 
       0x3, 0x2, 0x2, 0x2, 0xbe5, 0xbe8, 0x3, 0x2, 0x2, 0x2, 0xbe6, 0xbe4, 
       0x3, 0x2, 0x2, 0x2, 0xbe6, 0xbe7, 0x3, 0x2, 0x2, 0x2, 0xbe7, 0xbeb, 
       0x3, 0x2, 0x2, 0x2, 0xbe8, 0xbe6, 0x3, 0x2, 0x2, 0x2, 0xbe9, 0xbea, 
       0x7, 0xa6, 0x2, 0x2, 0xbea, 0xbec, 0x5, 0x222, 0x112, 0x2, 0xbeb, 
       0xbe9, 0x3, 0x2, 0x2, 0x2, 0xbeb, 0xbec, 0x3, 0x2, 0x2, 0x2, 0xbec, 
       0xc3, 0x3, 0x2, 0x2, 0x2, 0xbed, 0xbee, 0x7, 0x6c, 0x2, 0x2, 0xbee, 
       0xbef, 0x7, 0x11, 0x2, 0x2, 0xbef, 0xbf4, 0x5, 0xc6, 0x64, 0x2, 0xbf0, 
       0xbf1, 0x7, 0x3b3, 0x2, 0x2, 0xbf1, 0xbf3, 0x5, 0xc6, 0x64, 0x2, 
       0xbf2, 0xbf0, 0x3, 0x2, 0x2, 0x2, 0xbf3, 0xbf6, 0x3, 0x2, 0x2, 0x2, 
       0xbf4, 0xbf2, 0x3, 0x2, 0x2, 0x2, 0xbf4, 0xbf5, 0x3, 0x2, 0x2, 0x2, 
       0xbf5, 0xc5, 0x3, 0x2, 0x2, 0x2, 0xbf6, 0xbf4, 0x3, 0x2, 0x2, 0x2, 
       0xbf7, 0xbf9, 0x5, 0x222, 0x112, 0x2, 0xbf8, 0xbfa, 0x9, 0x29, 0x2, 
       0x2, 0xbf9, 0xbf8, 0x3, 0x2, 0x2, 0x2, 0xbf9, 0xbfa, 0x3, 0x2, 0x2, 
       0x2, 0xbfa, 0xc7, 0x3, 0x2, 0x2, 0x2, 0xbfb, 0xc00, 0x5, 0xca, 0x66, 
       0x2, 0xbfc, 0xbfd, 0x7, 0x3b3, 0x2, 0x2, 0xbfd, 0xbff, 0x5, 0xca, 
       0x66, 0x2, 0xbfe, 0xbfc, 0x3, 0x2, 0x2, 0x2, 0xbff, 0xc02, 0x3, 0x2, 
       0x2, 0x2, 0xc00, 0xbfe, 0x3, 0x2, 0x2, 0x2, 0xc00, 0xc01, 0x3, 0x2, 
       0x2, 0x2, 0xc01, 0xc9, 0x3, 0x2, 0x2, 0x2, 0xc02, 0xc00, 0x3, 0x2, 
       0x2, 0x2, 0xc03, 0xc07, 0x5, 0xcc, 0x67, 0x2, 0xc04, 0xc06, 0x5, 
       0xd0, 0x69, 0x2, 0xc05, 0xc04, 0x3, 0x2, 0x2, 0x2, 0xc06, 0xc09, 
       0x3, 0x2, 0x2, 0x2, 0xc07, 0xc05, 0x3, 0x2, 0x2, 0x2, 0xc07, 0xc08, 
       0x3, 0x2, 0x2, 0x2, 0xc08, 0xc15, 0x3, 0x2, 0x2, 0x2, 0xc09, 0xc07, 
       0x3, 0x2, 0x2, 0x2, 0xc0a, 0xc0b, 0x7, 0x3b1, 0x2, 0x2, 0xc0b, 0xc0f, 
       0x5, 0xcc, 0x67, 0x2, 0xc0c, 0xc0e, 0x5, 0xd0, 0x69, 0x2, 0xc0d, 
       0xc0c, 0x3, 0x2, 0x2, 0x2, 0xc0e, 0xc11, 0x3, 0x2, 0x2, 0x2, 0xc0f, 
       0xc0d, 0x3, 0x2, 0x2, 0x2, 0xc0f, 0xc10, 0x3, 0x2, 0x2, 0x2, 0xc10, 
       0xc12, 0x3, 0x2, 0x2, 0x2, 0xc11, 0xc0f, 0x3, 0x2, 0x2, 0x2, 0xc12, 
       0xc13, 0x7, 0x3b2, 0x2, 0x2, 0xc13, 0xc15, 0x3, 0x2, 0x2, 0x2, 0xc14, 
       0xc03, 0x3, 0x2, 0x2, 0x2, 0xc14, 0xc0a, 0x3, 0x2, 0x2, 0x2, 0xc15, 
       0xcb, 0x3, 0x2, 0x2, 0x2, 0xc16, 0xc1c, 0x5, 0x1c4, 0xe3, 0x2, 0xc17, 
       0xc18, 0x7, 0x70, 0x2, 0x2, 0xc18, 0xc19, 0x7, 0x3b1, 0x2, 0x2, 0xc19, 
       0xc1a, 0x5, 0x1fe, 0x100, 0x2, 0xc1a, 0xc1b, 0x7, 0x3b2, 0x2, 0x2, 
       0xc1b, 0xc1d, 0x3, 0x2, 0x2, 0x2, 0xc1c, 0xc17, 0x3, 0x2, 0x2, 0x2, 
       0xc1c, 0xc1d, 0x3, 0x2, 0x2, 0x2, 0xc1d, 0xc22, 0x3, 0x2, 0x2, 0x2, 
       0xc1e, 0xc20, 0x7, 0xc, 0x2, 0x2, 0xc1f, 0xc1e, 0x3, 0x2, 0x2, 0x2, 
       0xc1f, 0xc20, 0x3, 0x2, 0x2, 0x2, 0xc20, 0xc21, 0x3, 0x2, 0x2, 0x2, 
       0xc21, 0xc23, 0x5, 0x1de, 0xf0, 0x2, 0xc22, 0xc1f, 0x3, 0x2, 0x2, 
       0x2, 0xc22, 0xc23, 0x3, 0x2, 0x2, 0x2, 0xc23, 0xc2c, 0x3, 0x2, 0x2, 
       0x2, 0xc24, 0xc29, 0x5, 0xce, 0x68, 0x2, 0xc25, 0xc26, 0x7, 0x3b3, 
       0x2, 0x2, 0xc26, 0xc28, 0x5, 0xce, 0x68, 0x2, 0xc27, 0xc25, 0x3, 
       0x2, 0x2, 0x2, 0xc28, 0xc2b, 0x3, 0x2, 0x2, 0x2, 0xc29, 0xc27, 0x3, 
       0x2, 0x2, 0x2, 0xc29, 0xc2a, 0x3, 0x2, 0x2, 0x2, 0xc2a, 0xc2d, 0x3, 
       0x2, 0x2, 0x2, 0xc2b, 0xc29, 0x3, 0x2, 0x2, 0x2, 0xc2c, 0xc24, 0x3, 
       0x2, 0x2, 0x2, 0xc2c, 0xc2d, 0x3, 0x2, 0x2, 0x2, 0xc2d, 0xc3f, 0x3, 
       0x2, 0x2, 0x2, 0xc2e, 0xc34, 0x5, 0xd2, 0x6a, 0x2, 0xc2f, 0xc30, 
       0x7, 0x3b1, 0x2, 0x2, 0xc30, 0xc31, 0x5, 0xd2, 0x6a, 0x2, 0xc31, 
       0xc32, 0x7, 0x3b2, 0x2, 0x2, 0xc32, 0xc34, 0x3, 0x2, 0x2, 0x2, 0xc33, 
       0xc2e, 0x3, 0x2, 0x2, 0x2, 0xc33, 0xc2f, 0x3, 0x2, 0x2, 0x2, 0xc34, 
       0xc36, 0x3, 0x2, 0x2, 0x2, 0xc35, 0xc37, 0x7, 0xc, 0x2, 0x2, 0xc36, 
       0xc35, 0x3, 0x2, 0x2, 0x2, 0xc36, 0xc37, 0x3, 0x2, 0x2, 0x2, 0xc37, 
       0xc38, 0x3, 0x2, 0x2, 0x2, 0xc38, 0xc39, 0x5, 0x1de, 0xf0, 0x2, 0xc39, 
       0xc3f, 0x3, 0x2, 0x2, 0x2, 0xc3a, 0xc3b, 0x7, 0x3b1, 0x2, 0x2, 0xc3b, 
       0xc3c, 0x5, 0xc8, 0x65, 0x2, 0xc3c, 0xc3d, 0x7, 0x3b2, 0x2, 0x2, 
       0xc3d, 0xc3f, 0x3, 0x2, 0x2, 0x2, 0xc3e, 0xc16, 0x3, 0x2, 0x2, 0x2, 
       0xc3e, 0xc33, 0x3, 0x2, 0x2, 0x2, 0xc3e, 0xc3a, 0x3, 0x2, 0x2, 0x2, 
       0xc3f, 0xcd, 0x3, 0x2, 0x2, 0x2, 0xc40, 0xc41, 0x9, 0x2a, 0x2, 0x2, 
       0xc41, 0xc4a, 0x9, 0x13, 0x2, 0x2, 0xc42, 0xc48, 0x7, 0x39, 0x2, 
       0x2, 0xc43, 0xc49, 0x7, 0x4e, 0x2, 0x2, 0xc44, 0xc45, 0x7, 0x6c, 
       0x2, 0x2, 0xc45, 0xc49, 0x7, 0x11, 0x2, 0x2, 0xc46, 0xc47, 0x7, 0x3f, 
       0x2, 0x2, 0xc47, 0xc49, 0x7, 0x11, 0x2, 0x2, 0xc48, 0xc43, 0x3, 0x2, 
       0x2, 0x2, 0xc48, 0xc44, 0x3, 0x2, 0x2, 0x2, 0xc48, 0xc46, 0x3, 0x2, 
       0x2, 0x2, 0xc49, 0xc4b, 0x3, 0x2, 0x2, 0x2, 0xc4a, 0xc42, 0x3, 0x2, 
       0x2, 0x2, 0xc4a, 0xc4b, 0x3, 0x2, 0x2, 0x2, 0xc4b, 0xc4c, 0x3, 0x2, 
       0x2, 0x2, 0xc4c, 0xc4d, 0x7, 0x3b1, 0x2, 0x2, 0xc4d, 0xc4e, 0x5, 
       0x1fe, 0x100, 0x2, 0xc4e, 0xc4f, 0x7, 0x3b2, 0x2, 0x2, 0xc4f, 0xcf, 
       0x3, 0x2, 0x2, 0x2, 0xc50, 0xc52, 0x9, 0x2b, 0x2, 0x2, 0xc51, 0xc50, 
       0x3, 0x2, 0x2, 0x2, 0xc51, 0xc52, 0x3, 0x2, 0x2, 0x2, 0xc52, 0xc53, 
       0x3, 0x2, 0x2, 0x2, 0xc53, 0xc54, 0x7, 0x4e, 0x2, 0x2, 0xc54, 0xc5c, 
       0x5, 0xcc, 0x67, 0x2, 0xc55, 0xc56, 0x7, 0x67, 0x2, 0x2, 0xc56, 0xc5d, 
       0x5, 0x222, 0x112, 0x2, 0xc57, 0xc58, 0x7, 0xa3, 0x2, 0x2, 0xc58, 
       0xc59, 0x7, 0x3b1, 0x2, 0x2, 0xc59, 0xc5a, 0x5, 0x1fe, 0x100, 0x2, 
       0xc5a, 0xc5b, 0x7, 0x3b2, 0x2, 0x2, 0xc5b, 0xc5d, 0x3, 0x2, 0x2, 
       0x2, 0xc5c, 0xc55, 0x3, 0x2, 0x2, 0x2, 0xc5c, 0xc57, 0x3, 0x2, 0x2, 
       0x2, 0xc5c, 0xc5d, 0x3, 0x2, 0x2, 0x2, 0xc5d, 0xc7d, 0x3, 0x2, 0x2, 
       0x2, 0xc5e, 0xc5f, 0x7, 0x93, 0x2, 0x2, 0xc5f, 0xc62, 0x5, 0xcc, 
       0x67, 0x2, 0xc60, 0xc61, 0x7, 0x67, 0x2, 0x2, 0xc61, 0xc63, 0x5, 
       0x222, 0x112, 0x2, 0xc62, 0xc60, 0x3, 0x2, 0x2, 0x2, 0xc62, 0xc63, 
       0x3, 0x2, 0x2, 0x2, 0xc63, 0xc7d, 0x3, 0x2, 0x2, 0x2, 0xc64, 0xc66, 
       0x9, 0x2c, 0x2, 0x2, 0xc65, 0xc67, 0x7, 0x6e, 0x2, 0x2, 0xc66, 0xc65, 
       0x3, 0x2, 0x2, 0x2, 0xc66, 0xc67, 0x3, 0x2, 0x2, 0x2, 0xc67, 0xc68, 
       0x3, 0x2, 0x2, 0x2, 0xc68, 0xc69, 0x7, 0x4e, 0x2, 0x2, 0xc69, 0xc71, 
       0x5, 0xcc, 0x67, 0x2, 0xc6a, 0xc6b, 0x7, 0x67, 0x2, 0x2, 0xc6b, 0xc72, 
       0x5, 0x222, 0x112, 0x2, 0xc6c, 0xc6d, 0x7, 0xa3, 0x2, 0x2, 0xc6d, 
       0xc6e, 0x7, 0x3b1, 0x2, 0x2, 0xc6e, 0xc6f, 0x5, 0x1fe, 0x100, 0x2, 
       0xc6f, 0xc70, 0x7, 0x3b2, 0x2, 0x2, 0xc70, 0xc72, 0x3, 0x2, 0x2, 
       0x2, 0xc71, 0xc6a, 0x3, 0x2, 0x2, 0x2, 0xc71, 0xc6c, 0x3, 0x2, 0x2, 
       0x2, 0xc72, 0xc7d, 0x3, 0x2, 0x2, 0x2, 0xc73, 0xc78, 0x7, 0x62, 0x2, 
       0x2, 0xc74, 0xc76, 0x9, 0x2c, 0x2, 0x2, 0xc75, 0xc77, 0x7, 0x6e, 
       0x2, 0x2, 0xc76, 0xc75, 0x3, 0x2, 0x2, 0x2, 0xc76, 0xc77, 0x3, 0x2, 
       0x2, 0x2, 0xc77, 0xc79, 0x3, 0x2, 0x2, 0x2, 0xc78, 0xc74, 0x3, 0x2, 
       0x2, 0x2, 0xc78, 0xc79, 0x3, 0x2, 0x2, 0x2, 0xc79, 0xc7a, 0x3, 0x2, 
       0x2, 0x2, 0xc7a, 0xc7b, 0x7, 0x4e, 0x2, 0x2, 0xc7b, 0xc7d, 0x5, 0xcc, 
       0x67, 0x2, 0xc7c, 0xc51, 0x3, 0x2, 0x2, 0x2, 0xc7c, 0xc5e, 0x3, 0x2, 
       0x2, 0x2, 0xc7c, 0xc64, 0x3, 0x2, 0x2, 0x2, 0xc7c, 0xc73, 0x3, 0x2, 
       0x2, 0x2, 0xc7d, 0xd1, 0x3, 0x2, 0x2, 0x2, 0xc7e, 0xc7f, 0x5, 0xaa, 
       0x56, 0x2, 0xc7f, 0xd3, 0x3, 0x2, 0x2, 0x2, 0xc80, 0xc81, 0x7, 0x3b1, 
       0x2, 0x2, 0xc81, 0xc82, 0x5, 0xd8, 0x6d, 0x2, 0xc82, 0xc83, 0x7, 
       0x3b2, 0x2, 0x2, 0xc83, 0xc89, 0x3, 0x2, 0x2, 0x2, 0xc84, 0xc85, 
       0x7, 0x3b1, 0x2, 0x2, 0xc85, 0xc86, 0x5, 0xd4, 0x6b, 0x2, 0xc86, 
       0xc87, 0x7, 0x3b2, 0x2, 0x2, 0xc87, 0xc89, 0x3, 0x2, 0x2, 0x2, 0xc88, 
       0xc80, 0x3, 0x2, 0x2, 0x2, 0xc88, 0xc84, 0x3, 0x2, 0x2, 0x2, 0xc89, 
       0xd5, 0x3, 0x2, 0x2, 0x2, 0xc8a, 0xc8b, 0x7, 0x3b1, 0x2, 0x2, 0xc8b, 
       0xc8c, 0x5, 0xda, 0x6e, 0x2, 0xc8c, 0xc8d, 0x7, 0x3b2, 0x2, 0x2, 
       0xc8d, 0xc93, 0x3, 0x2, 0x2, 0x2, 0xc8e, 0xc8f, 0x7, 0x3b1, 0x2, 
       0x2, 0xc8f, 0xc90, 0x5, 0xd6, 0x6c, 0x2, 0xc90, 0xc91, 0x7, 0x3b2, 
       0x2, 0x2, 0xc91, 0xc93, 0x3, 0x2, 0x2, 0x2, 0xc92, 0xc8a, 0x3, 0x2, 
       0x2, 0x2, 0xc92, 0xc8e, 0x3, 0x2, 0x2, 0x2, 0xc93, 0xd7, 0x3, 0x2, 
       0x2, 0x2, 0xc94, 0xc98, 0x7, 0x85, 0x2, 0x2, 0xc95, 0xc97, 0x5, 0xe0, 
       0x71, 0x2, 0xc96, 0xc95, 0x3, 0x2, 0x2, 0x2, 0xc97, 0xc9a, 0x3, 0x2, 
       0x2, 0x2, 0xc98, 0xc96, 0x3, 0x2, 0x2, 0x2, 0xc98, 0xc99, 0x3, 0x2, 
       0x2, 0x2, 0xc99, 0xc9b, 0x3, 0x2, 0x2, 0x2, 0xc9a, 0xc98, 0x3, 0x2, 
       0x2, 0x2, 0xc9b, 0xc9d, 0x5, 0xe2, 0x72, 0x2, 0xc9c, 0xc9e, 0x5, 
       0xe6, 0x74, 0x2, 0xc9d, 0xc9c, 0x3, 0x2, 0x2, 0x2, 0xc9d, 0xc9e, 
       0x3, 0x2, 0x2, 0x2, 0xc9e, 0xca0, 0x3, 0x2, 0x2, 0x2, 0xc9f, 0xca1, 
       0x5, 0xe8, 0x75, 0x2, 0xca0, 0xc9f, 0x3, 0x2, 0x2, 0x2, 0xca0, 0xca1, 
       0x3, 0x2, 0x2, 0x2, 0xca1, 0xca3, 0x3, 0x2, 0x2, 0x2, 0xca2, 0xca4, 
       0x5, 0xc4, 0x63, 0x2, 0xca3, 0xca2, 0x3, 0x2, 0x2, 0x2, 0xca3, 0xca4, 
       0x3, 0x2, 0x2, 0x2, 0xca4, 0xca6, 0x3, 0x2, 0x2, 0x2, 0xca5, 0xca7, 
       0x5, 0xec, 0x77, 0x2, 0xca6, 0xca5, 0x3, 0x2, 0x2, 0x2, 0xca6, 0xca7, 
       0x3, 0x2, 0x2, 0x2, 0xca7, 0xd9, 0x3, 0x2, 0x2, 0x2, 0xca8, 0xcac, 
       0x7, 0x85, 0x2, 0x2, 0xca9, 0xcab, 0x5, 0xe0, 0x71, 0x2, 0xcaa, 0xca9, 
       0x3, 0x2, 0x2, 0x2, 0xcab, 0xcae, 0x3, 0x2, 0x2, 0x2, 0xcac, 0xcaa, 
       0x3, 0x2, 0x2, 0x2, 0xcac, 0xcad, 0x3, 0x2, 0x2, 0x2, 0xcad, 0xcaf, 
       0x3, 0x2, 0x2, 0x2, 0xcae, 0xcac, 0x3, 0x2, 0x2, 0x2, 0xcaf, 0xcb1, 
       0x5, 0xe2, 0x72, 0x2, 0xcb0, 0xcb2, 0x5, 0xe8, 0x75, 0x2, 0xcb1, 
       0xcb0, 0x3, 0x2, 0x2, 0x2, 0xcb1, 0xcb2, 0x3, 0x2, 0x2, 0x2, 0xcb2, 
       0xcb4, 0x3, 0x2, 0x2, 0x2, 0xcb3, 0xcb5, 0x5, 0xc4, 0x63, 0x2, 0xcb4, 
       0xcb3, 0x3, 0x2, 0x2, 0x2, 0xcb4, 0xcb5, 0x3, 0x2, 0x2, 0x2, 0xcb5, 
       0xcb7, 0x3, 0x2, 0x2, 0x2, 0xcb6, 0xcb8, 0x5, 0xec, 0x77, 0x2, 0xcb7, 
       0xcb6, 0x3, 0x2, 0x2, 0x2, 0xcb7, 0xcb8, 0x3, 0x2, 0x2, 0x2, 0xcb8, 
       0xdb, 0x3, 0x2, 0x2, 0x2, 0xcb9, 0xcbb, 0x7, 0x9c, 0x2, 0x2, 0xcba, 
       0xcbc, 0x9, 0x25, 0x2, 0x2, 0xcbb, 0xcba, 0x3, 0x2, 0x2, 0x2, 0xcbb, 
       0xcbc, 0x3, 0x2, 0x2, 0x2, 0xcbc, 0xcbd, 0x3, 0x2, 0x2, 0x2, 0xcbd, 
       0xcbe, 0x5, 0xd6, 0x6c, 0x2, 0xcbe, 0xdd, 0x3, 0x2, 0x2, 0x2, 0xcbf, 
       0xcc1, 0x7, 0x9c, 0x2, 0x2, 0xcc0, 0xcc2, 0x9, 0x25, 0x2, 0x2, 0xcc1, 
       0xcc0, 0x3, 0x2, 0x2, 0x2, 0xcc1, 0xcc2, 0x3, 0x2, 0x2, 0x2, 0xcc2, 
       0xcc5, 0x3, 0x2, 0x2, 0x2, 0xcc3, 0xcc6, 0x5, 0xda, 0x6e, 0x2, 0xcc4, 
       0xcc6, 0x5, 0xd6, 0x6c, 0x2, 0xcc5, 0xcc3, 0x3, 0x2, 0x2, 0x2, 0xcc5, 
       0xcc4, 0x3, 0x2, 0x2, 0x2, 0xcc6, 0xdf, 0x3, 0x2, 0x2, 0x2, 0xcc7, 
       0xcd0, 0x9, 0x2d, 0x2, 0x2, 0xcc8, 0xcd0, 0x7, 0x41, 0x2, 0x2, 0xcc9, 
       0xcd0, 0x7, 0x93, 0x2, 0x2, 0xcca, 0xcd0, 0x7, 0x90, 0x2, 0x2, 0xccb, 
       0xcd0, 0x7, 0x8e, 0x2, 0x2, 0xccc, 0xcd0, 0x7, 0x1f1, 0x2, 0x2, 0xccd, 
       0xcd0, 0x9, 0x2e, 0x2, 0x2, 0xcce, 0xcd0, 0x7, 0x8f, 0x2, 0x2, 0xccf, 
       0xcc7, 0x3, 0x2, 0x2, 0x2, 0xccf, 0xcc8, 0x3, 0x2, 0x2, 0x2, 0xccf, 
       0xcc9, 0x3, 0x2, 0x2, 0x2, 0xccf, 0xcca, 0x3, 0x2, 0x2, 0x2, 0xccf, 
       0xccb, 0x3, 0x2, 0x2, 0x2, 0xccf, 0xccc, 0x3, 0x2, 0x2, 0x2, 0xccf, 
       0xccd, 0x3, 0x2, 0x2, 0x2, 0xccf, 0xcce, 0x3, 0x2, 0x2, 0x2, 0xcd0, 
       0xe1, 0x3, 0x2, 0x2, 0x2, 0xcd1, 0xcd4, 0x7, 0x3a1, 0x2, 0x2, 0xcd2, 
       0xcd4, 0x5, 0xe4, 0x73, 0x2, 0xcd3, 0xcd1, 0x3, 0x2, 0x2, 0x2, 0xcd3, 
       0xcd2, 0x3, 0x2, 0x2, 0x2, 0xcd4, 0xcd9, 0x3, 0x2, 0x2, 0x2, 0xcd5, 
       0xcd6, 0x7, 0x3b3, 0x2, 0x2, 0xcd6, 0xcd8, 0x5, 0xe4, 0x73, 0x2, 
       0xcd7, 0xcd5, 0x3, 0x2, 0x2, 0x2, 0xcd8, 0xcdb, 0x3, 0x2, 0x2, 0x2, 
       0xcd9, 0xcd7, 0x3, 0x2, 0x2, 0x2, 0xcd9, 0xcda, 0x3, 0x2, 0x2, 0x2, 
       0xcda, 0xe3, 0x3, 0x2, 0x2, 0x2, 0xcdb, 0xcd9, 0x3, 0x2, 0x2, 0x2, 
       0xcdc, 0xcdd, 0x5, 0x1c6, 0xe4, 0x2, 0xcdd, 0xcde, 0x7, 0x3b0, 0x2, 
       0x2, 0xcde, 0xcdf, 0x7, 0x3a1, 0x2, 0x2, 0xcdf, 0xcfa, 0x3, 0x2, 
       0x2, 0x2, 0xce0, 0xce5, 0x5, 0x1c8, 0xe5, 0x2, 0xce1, 0xce3, 0x7, 
       0xc, 0x2, 0x2, 0xce2, 0xce1, 0x3, 0x2, 0x2, 0x2, 0xce2, 0xce3, 0x3, 
       0x2, 0x2, 0x2, 0xce3, 0xce4, 0x3, 0x2, 0x2, 0x2, 0xce4, 0xce6, 0x5, 
       0x1de, 0xf0, 0x2, 0xce5, 0xce2, 0x3, 0x2, 0x2, 0x2, 0xce5, 0xce6, 
       0x3, 0x2, 0x2, 0x2, 0xce6, 0xcfa, 0x3, 0x2, 0x2, 0x2, 0xce7, 0xcec, 
       0x5, 0x214, 0x10b, 0x2, 0xce8, 0xcea, 0x7, 0xc, 0x2, 0x2, 0xce9, 
       0xce8, 0x3, 0x2, 0x2, 0x2, 0xce9, 0xcea, 0x3, 0x2, 0x2, 0x2, 0xcea, 
       0xceb, 0x3, 0x2, 0x2, 0x2, 0xceb, 0xced, 0x5, 0x1de, 0xf0, 0x2, 0xcec, 
       0xce9, 0x3, 0x2, 0x2, 0x2, 0xcec, 0xced, 0x3, 0x2, 0x2, 0x2, 0xced, 
       0xcfa, 0x3, 0x2, 0x2, 0x2, 0xcee, 0xcef, 0x7, 0x3cb, 0x2, 0x2, 0xcef, 
       0xcf1, 0x7, 0x398, 0x2, 0x2, 0xcf0, 0xcee, 0x3, 0x2, 0x2, 0x2, 0xcf0, 
       0xcf1, 0x3, 0x2, 0x2, 0x2, 0xcf1, 0xcf2, 0x3, 0x2, 0x2, 0x2, 0xcf2, 
       0xcf7, 0x5, 0x222, 0x112, 0x2, 0xcf3, 0xcf5, 0x7, 0xc, 0x2, 0x2, 
       0xcf4, 0xcf3, 0x3, 0x2, 0x2, 0x2, 0xcf4, 0xcf5, 0x3, 0x2, 0x2, 0x2, 
       0xcf5, 0xcf6, 0x3, 0x2, 0x2, 0x2, 0xcf6, 0xcf8, 0x5, 0x1de, 0xf0, 
       0x2, 0xcf7, 0xcf4, 0x3, 0x2, 0x2, 0x2, 0xcf7, 0xcf8, 0x3, 0x2, 0x2, 
       0x2, 0xcf8, 0xcfa, 0x3, 0x2, 0x2, 0x2, 0xcf9, 0xcdc, 0x3, 0x2, 0x2, 
       0x2, 0xcf9, 0xce0, 0x3, 0x2, 0x2, 0x2, 0xcf9, 0xce7, 0x3, 0x2, 0x2, 
       0x2, 0xcf9, 0xcf0, 0x3, 0x2, 0x2, 0x2, 0xcfa, 0xe5, 0x3, 0x2, 0x2, 
       0x2, 0xcfb, 0xcfe, 0x7, 0x4b, 0x2, 0x2, 0xcfc, 0xcff, 0x7, 0x3cb, 
       0x2, 0x2, 0xcfd, 0xcff, 0x5, 0x1de, 0xf0, 0x2, 0xcfe, 0xcfc, 0x3, 
       0x2, 0x2, 0x2, 0xcfe, 0xcfd, 0x3, 0x2, 0x2, 0x2, 0xcff, 0xd07, 0x3, 
       0x2, 0x2, 0x2, 0xd00, 0xd03, 0x7, 0x3b3, 0x2, 0x2, 0xd01, 0xd04, 
       0x7, 0x3cb, 0x2, 0x2, 0xd02, 0xd04, 0x5, 0x1de, 0xf0, 0x2, 0xd03, 
       0xd01, 0x3, 0x2, 0x2, 0x2, 0xd03, 0xd02, 0x3, 0x2, 0x2, 0x2, 0xd04, 
       0xd06, 0x3, 0x2, 0x2, 0x2, 0xd05, 0xd00, 0x3, 0x2, 0x2, 0x2, 0xd06, 
       0xd09, 0x3, 0x2, 0x2, 0x2, 0xd07, 0xd05, 0x3, 0x2, 0x2, 0x2, 0xd07, 
       0xd08, 0x3, 0x2, 0x2, 0x2, 0xd08, 0xd38, 0x3, 0x2, 0x2, 0x2, 0xd09, 
       0xd07, 0x3, 0x2, 0x2, 0x2, 0xd0a, 0xd0b, 0x7, 0x4b, 0x2, 0x2, 0xd0b, 
       0xd0c, 0x7, 0x12f, 0x2, 0x2, 0xd0c, 0xd38, 0x7, 0x3c0, 0x2, 0x2, 
       0xd0d, 0xd0e, 0x7, 0x4b, 0x2, 0x2, 0xd0e, 0xd0f, 0x7, 0x6f, 0x2, 
       0x2, 0xd0f, 0xd13, 0x7, 0x3c0, 0x2, 0x2, 0xd10, 0xd11, 0x7, 0x17, 
       0x2, 0x2, 0xd11, 0xd12, 0x7, 0x86, 0x2, 0x2, 0xd12, 0xd14, 0x5, 0x1d0, 
       0xe9, 0x2, 0xd13, 0xd10, 0x3, 0x2, 0x2, 0x2, 0xd13, 0xd14, 0x3, 0x2, 
       0x2, 0x2, 0xd14, 0xd28, 0x3, 0x2, 0x2, 0x2, 0xd15, 0xd19, 0x9, 0x22, 
       0x2, 0x2, 0xd16, 0xd17, 0x7, 0x95, 0x2, 0x2, 0xd17, 0xd18, 0x7, 0x11, 
       0x2, 0x2, 0xd18, 0xd1a, 0x7, 0x3c0, 0x2, 0x2, 0xd19, 0xd16, 0x3, 
       0x2, 0x2, 0x2, 0xd19, 0xd1a, 0x3, 0x2, 0x2, 0x2, 0xd1a, 0xd21, 0x3, 
       0x2, 0x2, 0x2, 0xd1b, 0xd1d, 0x7, 0x6a, 0x2, 0x2, 0xd1c, 0xd1b, 0x3, 
       0x2, 0x2, 0x2, 0xd1c, 0xd1d, 0x3, 0x2, 0x2, 0x2, 0xd1d, 0xd1e, 0x3, 
       0x2, 0x2, 0x2, 0xd1e, 0xd1f, 0x7, 0x32, 0x2, 0x2, 0xd1f, 0xd20, 0x7, 
       0x11, 0x2, 0x2, 0xd20, 0xd22, 0x7, 0x3c0, 0x2, 0x2, 0xd21, 0xd1c, 
       0x3, 0x2, 0x2, 0x2, 0xd21, 0xd22, 0x3, 0x2, 0x2, 0x2, 0xd22, 0xd26, 
       0x3, 0x2, 0x2, 0x2, 0xd23, 0xd24, 0x7, 0x33, 0x2, 0x2, 0xd24, 0xd25, 
       0x7, 0x11, 0x2, 0x2, 0xd25, 0xd27, 0x7, 0x3c0, 0x2, 0x2, 0xd26, 0xd23, 
       0x3, 0x2, 0x2, 0x2, 0xd26, 0xd27, 0x3, 0x2, 0x2, 0x2, 0xd27, 0xd29, 
       0x3, 0x2, 0x2, 0x2, 0xd28, 0xd15, 0x3, 0x2, 0x2, 0x2, 0xd28, 0xd29, 
       0x3, 0x2, 0x2, 0x2, 0xd29, 0xd35, 0x3, 0x2, 0x2, 0x2, 0xd2a, 0xd2e, 
       0x7, 0x58, 0x2, 0x2, 0xd2b, 0xd2c, 0x7, 0x92, 0x2, 0x2, 0xd2c, 0xd2d, 
       0x7, 0x11, 0x2, 0x2, 0xd2d, 0xd2f, 0x7, 0x3c0, 0x2, 0x2, 0xd2e, 0xd2b, 
       0x3, 0x2, 0x2, 0x2, 0xd2e, 0xd2f, 0x3, 0x2, 0x2, 0x2, 0xd2f, 0xd33, 
       0x3, 0x2, 0x2, 0x2, 0xd30, 0xd31, 0x7, 0x95, 0x2, 0x2, 0xd31, 0xd32, 
       0x7, 0x11, 0x2, 0x2, 0xd32, 0xd34, 0x7, 0x3c0, 0x2, 0x2, 0xd33, 0xd30, 
       0x3, 0x2, 0x2, 0x2, 0xd33, 0xd34, 0x3, 0x2, 0x2, 0x2, 0xd34, 0xd36, 
       0x3, 0x2, 0x2, 0x2, 0xd35, 0xd2a, 0x3, 0x2, 0x2, 0x2, 0xd35, 0xd36, 
       0x3, 0x2, 0x2, 0x2, 0xd36, 0xd38, 0x3, 0x2, 0x2, 0x2, 0xd37, 0xcfb, 
       0x3, 0x2, 0x2, 0x2, 0xd37, 0xd0a, 0x3, 0x2, 0x2, 0x2, 0xd37, 0xd0d, 
       0x3, 0x2, 0x2, 0x2, 0xd38, 0xe7, 0x3, 0x2, 0x2, 0x2, 0xd39, 0xd3a, 
       0x7, 0x3c, 0x2, 0x2, 0xd3a, 0xd3d, 0x5, 0xc8, 0x65, 0x2, 0xd3b, 0xd3c, 
       0x7, 0xa6, 0x2, 0x2, 0xd3c, 0xd3e, 0x5, 0x222, 0x112, 0x2, 0xd3d, 
       0xd3b, 0x3, 0x2, 0x2, 0x2, 0xd3d, 0xd3e, 0x3, 0x2, 0x2, 0x2, 0xd3e, 
       0xd4d, 0x3, 0x2, 0x2, 0x2, 0xd3f, 0xd40, 0x7, 0x3f, 0x2, 0x2, 0xd40, 
       0xd41, 0x7, 0x11, 0x2, 0x2, 0xd41, 0xd46, 0x5, 0xea, 0x76, 0x2, 0xd42, 
       0xd43, 0x7, 0x3b3, 0x2, 0x2, 0xd43, 0xd45, 0x5, 0xea, 0x76, 0x2, 
       0xd44, 0xd42, 0x3, 0x2, 0x2, 0x2, 0xd45, 0xd48, 0x3, 0x2, 0x2, 0x2, 
       0xd46, 0xd44, 0x3, 0x2, 0x2, 0x2, 0xd46, 0xd47, 0x3, 0x2, 0x2, 0x2, 
       0xd47, 0xd4b, 0x3, 0x2, 0x2, 0x2, 0xd48, 0xd46, 0x3, 0x2, 0x2, 0x2, 
       0xd49, 0xd4a, 0x7, 0xa8, 0x2, 0x2, 0xd4a, 0xd4c, 0x7, 0x1d8, 0x2, 
       0x2, 0xd4b, 0xd49, 0x3, 0x2, 0x2, 0x2, 0xd4b, 0xd4c, 0x3, 0x2, 0x2, 
       0x2, 0xd4c, 0xd4e, 0x3, 0x2, 0x2, 0x2, 0xd4d, 0xd3f, 0x3, 0x2, 0x2, 
       0x2, 0xd4d, 0xd4e, 0x3, 0x2, 0x2, 0x2, 0xd4e, 0xd51, 0x3, 0x2, 0x2, 
       0x2, 0xd4f, 0xd50, 0x7, 0x40, 0x2, 0x2, 0xd50, 0xd52, 0x5, 0x222, 
       0x112, 0x2, 0xd51, 0xd4f, 0x3, 0x2, 0x2, 0x2, 0xd51, 0xd52, 0x3, 
       0x2, 0x2, 0x2, 0xd52, 0xe9, 0x3, 0x2, 0x2, 0x2, 0xd53, 0xd55, 0x5, 
       0x222, 0x112, 0x2, 0xd54, 0xd56, 0x9, 0x29, 0x2, 0x2, 0xd55, 0xd54, 
       0x3, 0x2, 0x2, 0x2, 0xd55, 0xd56, 0x3, 0x2, 0x2, 0x2, 0xd56, 0xeb, 
       0x3, 0x2, 0x2, 0x2, 0xd57, 0xd62, 0x7, 0x56, 0x2, 0x2, 0xd58, 0xd59, 
       0x5, 0x1e4, 0xf3, 0x2, 0xd59, 0xd5a, 0x7, 0x3b3, 0x2, 0x2, 0xd5a, 
       0xd5c, 0x3, 0x2, 0x2, 0x2, 0xd5b, 0xd58, 0x3, 0x2, 0x2, 0x2, 0xd5b, 
       0xd5c, 0x3, 0x2, 0x2, 0x2, 0xd5c, 0xd5d, 0x3, 0x2, 0x2, 0x2, 0xd5d, 
       0xd63, 0x5, 0x1e4, 0xf3, 0x2, 0xd5e, 0xd5f, 0x5, 0x1e4, 0xf3, 0x2, 
       0xd5f, 0xd60, 0x7, 0x1a1, 0x2, 0x2, 0xd60, 0xd61, 0x5, 0x1e4, 0xf3, 
       0x2, 0xd61, 0xd63, 0x3, 0x2, 0x2, 0x2, 0xd62, 0xd5b, 0x3, 0x2, 0x2, 
       0x2, 0xd62, 0xd5e, 0x3, 0x2, 0x2, 0x2, 0xd63, 0xed, 0x3, 0x2, 0x2, 
       0x2, 0xd64, 0xd65, 0x7, 0x1f5, 0x2, 0x2, 0xd65, 0xd6e, 0x7, 0x209, 
       0x2, 0x2, 0xd66, 0xd6b, 0x5, 0x104, 0x83, 0x2, 0xd67, 0xd68, 0x7, 
       0x3b3, 0x2, 0x2, 0xd68, 0xd6a, 0x5, 0x104, 0x83, 0x2, 0xd69, 0xd67, 
       0x3, 0x2, 0x2, 0x2, 0xd6a, 0xd6d, 0x3, 0x2, 0x2, 0x2, 0xd6b, 0xd69, 
       0x3, 0x2, 0x2, 0x2, 0xd6b, 0xd6c, 0x3, 0x2, 0x2, 0x2, 0xd6c, 0xd6f, 
       0x3, 0x2, 0x2, 0x2, 0xd6d, 0xd6b, 0x3, 0x2, 0x2, 0x2, 0xd6e, 0xd66, 
       0x3, 0x2, 0x2, 0x2, 0xd6e, 0xd6f, 0x3, 0x2, 0x2, 0x2, 0xd6f, 0xef, 
       0x3, 0x2, 0x2, 0x2, 0xd70, 0xd72, 0x7, 0x103, 0x2, 0x2, 0xd71, 0xd73, 
       0x7, 0x21d, 0x2, 0x2, 0xd72, 0xd71, 0x3, 0x2, 0x2, 0x2, 0xd72, 0xd73, 
       0x3, 0x2, 0x2, 0x2, 0xd73, 0xf1, 0x3, 0x2, 0x2, 0x2, 0xd74, 0xd76, 
       0x7, 0x116, 0x2, 0x2, 0xd75, 0xd77, 0x7, 0x21d, 0x2, 0x2, 0xd76, 
       0xd75, 0x3, 0x2, 0x2, 0x2, 0xd76, 0xd77, 0x3, 0x2, 0x2, 0x2, 0xd77, 
       0xd7d, 0x3, 0x2, 0x2, 0x2, 0xd78, 0xd7a, 0x7, 0xb, 0x2, 0x2, 0xd79, 
       0xd7b, 0x7, 0x19d, 0x2, 0x2, 0xd7a, 0xd79, 0x3, 0x2, 0x2, 0x2, 0xd7a, 
       0xd7b, 0x3, 0x2, 0x2, 0x2, 0xd7b, 0xd7c, 0x3, 0x2, 0x2, 0x2, 0xd7c, 
       0xd7e, 0x7, 0x10a, 0x2, 0x2, 0xd7d, 0xd78, 0x3, 0x2, 0x2, 0x2, 0xd7d, 
       0xd7e, 0x3, 0x2, 0x2, 0x2, 0xd7e, 0xd83, 0x3, 0x2, 0x2, 0x2, 0xd7f, 
       0xd81, 0x7, 0x19d, 0x2, 0x2, 0xd80, 0xd7f, 0x3, 0x2, 0x2, 0x2, 0xd80, 
       0xd81, 0x3, 0x2, 0x2, 0x2, 0xd81, 0xd82, 0x3, 0x2, 0x2, 0x2, 0xd82, 
       0xd84, 0x7, 0x79, 0x2, 0x2, 0xd83, 0xd80, 0x3, 0x2, 0x2, 0x2, 0xd83, 
       0xd84, 0x3, 0x2, 0x2, 0x2, 0xd84, 0xf3, 0x3, 0x2, 0x2, 0x2, 0xd85, 
       0xd87, 0x7, 0x1d7, 0x2, 0x2, 0xd86, 0xd88, 0x7, 0x21d, 0x2, 0x2, 
       0xd87, 0xd86, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xd88, 0x3, 0x2, 0x2, 0x2, 
       0xd88, 0xd8e, 0x3, 0x2, 0x2, 0x2, 0xd89, 0xd8b, 0x7, 0xb, 0x2, 0x2, 
       0xd8a, 0xd8c, 0x7, 0x19d, 0x2, 0x2, 0xd8b, 0xd8a, 0x3, 0x2, 0x2, 
       0x2, 0xd8b, 0xd8c, 0x3, 0x2, 0x2, 0x2, 0xd8c, 0xd8d, 0x3, 0x2, 0x2, 
       0x2, 0xd8d, 0xd8f, 0x7, 0x10a, 0x2, 0x2, 0xd8e, 0xd89, 0x3, 0x2, 
       0x2, 0x2, 0xd8e, 0xd8f, 0x3, 0x2, 0x2, 0x2, 0xd8f, 0xd94, 0x3, 0x2, 
       0x2, 0x2, 0xd90, 0xd92, 0x7, 0x19d, 0x2, 0x2, 0xd91, 0xd90, 0x3, 
       0x2, 0x2, 0x2, 0xd91, 0xd92, 0x3, 0x2, 0x2, 0x2, 0xd92, 0xd93, 0x3, 
       0x2, 0x2, 0x2, 0xd93, 0xd95, 0x7, 0x79, 0x2, 0x2, 0xd94, 0xd91, 0x3, 
       0x2, 0x2, 0x2, 0xd94, 0xd95, 0x3, 0x2, 0x2, 0x2, 0xd95, 0xf5, 0x3, 
       0x2, 0x2, 0x2, 0xd96, 0xd97, 0x7, 0x1dd, 0x2, 0x2, 0xd97, 0xd98, 
       0x5, 0x1de, 0xf0, 0x2, 0xd98, 0xf7, 0x3, 0x2, 0x2, 0x2, 0xd99, 0xd9b, 
       0x7, 0x1d7, 0x2, 0x2, 0xd9a, 0xd9c, 0x7, 0x21d, 0x2, 0x2, 0xd9b, 
       0xd9a, 0x3, 0x2, 0x2, 0x2, 0xd9b, 0xd9c, 0x3, 0x2, 0x2, 0x2, 0xd9c, 
       0xd9d, 0x3, 0x2, 0x2, 0x2, 0xd9d, 0xd9f, 0x7, 0x97, 0x2, 0x2, 0xd9e, 
       0xda0, 0x7, 0x1dd, 0x2, 0x2, 0xd9f, 0xd9e, 0x3, 0x2, 0x2, 0x2, 0xd9f, 
       0xda0, 0x3, 0x2, 0x2, 0x2, 0xda0, 0xda1, 0x3, 0x2, 0x2, 0x2, 0xda1, 
       0xda2, 0x5, 0x1de, 0xf0, 0x2, 0xda2, 0xf9, 0x3, 0x2, 0x2, 0x2, 0xda3, 
       0xda4, 0x7, 0x79, 0x2, 0x2, 0xda4, 0xda5, 0x7, 0x1dd, 0x2, 0x2, 0xda5, 
       0xda6, 0x5, 0x1de, 0xf0, 0x2, 0xda6, 0xfb, 0x3, 0x2, 0x2, 0x2, 0xda7, 
       0xda8, 0x7, 0x5a, 0x2, 0x2, 0xda8, 0xda9, 0x7, 0x22f, 0x2, 0x2, 0xda9, 
       0xdae, 0x5, 0x106, 0x84, 0x2, 0xdaa, 0xdab, 0x7, 0x3b3, 0x2, 0x2, 
       0xdab, 0xdad, 0x5, 0x106, 0x84, 0x2, 0xdac, 0xdaa, 0x3, 0x2, 0x2, 
       0x2, 0xdad, 0xdb0, 0x3, 0x2, 0x2, 0x2, 0xdae, 0xdac, 0x3, 0x2, 0x2, 
       0x2, 0xdae, 0xdaf, 0x3, 0x2, 0x2, 0x2, 0xdaf, 0xfd, 0x3, 0x2, 0x2, 
       0x2, 0xdb0, 0xdae, 0x3, 0x2, 0x2, 0x2, 0xdb1, 0xdb2, 0x7, 0x9e, 0x2, 
       0x2, 0xdb2, 0xdb3, 0x7, 0x22f, 0x2, 0x2, 0xdb3, 0xff, 0x3, 0x2, 0x2, 
       0x2, 0xdb4, 0xdb5, 0x7, 0x86, 0x2, 0x2, 0xdb5, 0xdb6, 0x7, 0xff, 
       0x2, 0x2, 0xdb6, 0xdb7, 0x7, 0x3a8, 0x2, 0x2, 0xdb7, 0xdb8, 0x9, 
       0x16, 0x2, 0x2, 0xdb8, 0x101, 0x3, 0x2, 0x2, 0x2, 0xdb9, 0xdbb, 0x7, 
       0x86, 0x2, 0x2, 0xdba, 0xdbc, 0x9, 0x2f, 0x2, 0x2, 0xdbb, 0xdba, 
       0x3, 0x2, 0x2, 0x2, 0xdbb, 0xdbc, 0x3, 0x2, 0x2, 0x2, 0xdbc, 0xdbd, 
       0x3, 0x2, 0x2, 0x2, 0xdbd, 0xdbe, 0x7, 0x209, 0x2, 0x2, 0xdbe, 0xdc3, 
       0x5, 0x108, 0x85, 0x2, 0xdbf, 0xdc0, 0x7, 0x3b3, 0x2, 0x2, 0xdc0, 
       0xdc2, 0x5, 0x108, 0x85, 0x2, 0xdc1, 0xdbf, 0x3, 0x2, 0x2, 0x2, 0xdc2, 
       0xdc5, 0x3, 0x2, 0x2, 0x2, 0xdc3, 0xdc1, 0x3, 0x2, 0x2, 0x2, 0xdc3, 
       0xdc4, 0x3, 0x2, 0x2, 0x2, 0xdc4, 0x103, 0x3, 0x2, 0x2, 0x2, 0xdc5, 
       0xdc3, 0x3, 0x2, 0x2, 0x2, 0xdc6, 0xdc7, 0x7, 0xa8, 0x2, 0x2, 0xdc7, 
       0xdc8, 0x7, 0x11d, 0x2, 0x2, 0xdc8, 0xdce, 0x7, 0x1e8, 0x2, 0x2, 
       0xdc9, 0xdca, 0x7, 0x75, 0x2, 0x2, 0xdca, 0xdce, 0x7, 0xa9, 0x2, 
       0x2, 0xdcb, 0xdcc, 0x7, 0x75, 0x2, 0x2, 0xdcc, 0xdce, 0x7, 0x1a6, 
       0x2, 0x2, 0xdcd, 0xdc6, 0x3, 0x2, 0x2, 0x2, 0xdcd, 0xdc9, 0x3, 0x2, 
       0x2, 0x2, 0xdcd, 0xdcb, 0x3, 0x2, 0x2, 0x2, 0xdce, 0x105, 0x3, 0x2, 
       0x2, 0x2, 0xdcf, 0xdd4, 0x5, 0x1c4, 0xe3, 0x2, 0xdd0, 0xdd2, 0x7, 
       0xc, 0x2, 0x2, 0xdd1, 0xdd0, 0x3, 0x2, 0x2, 0x2, 0xdd1, 0xdd2, 0x3, 
       0x2, 0x2, 0x2, 0xdd2, 0xdd3, 0x3, 0x2, 0x2, 0x2, 0xdd3, 0xdd5, 0x5, 
       0x1de, 0xf0, 0x2, 0xdd4, 0xdd1, 0x3, 0x2, 0x2, 0x2, 0xdd4, 0xdd5, 
       0x3, 0x2, 0x2, 0x2, 0xdd5, 0xdde, 0x3, 0x2, 0x2, 0x2, 0xdd6, 0xdd8, 
       0x7, 0x75, 0x2, 0x2, 0xdd7, 0xdd9, 0x7, 0x171, 0x2, 0x2, 0xdd8, 0xdd7, 
       0x3, 0x2, 0x2, 0x2, 0xdd8, 0xdd9, 0x3, 0x2, 0x2, 0x2, 0xdd9, 0xddf, 
       0x3, 0x2, 0x2, 0x2, 0xdda, 0xddc, 0x7, 0x5c, 0x2, 0x2, 0xddb, 0xdda, 
       0x3, 0x2, 0x2, 0x2, 0xddb, 0xddc, 0x3, 0x2, 0x2, 0x2, 0xddc, 0xddd, 
       0x3, 0x2, 0x2, 0x2, 0xddd, 0xddf, 0x7, 0xa9, 0x2, 0x2, 0xdde, 0xdd6, 
       0x3, 0x2, 0x2, 0x2, 0xdde, 0xddb, 0x3, 0x2, 0x2, 0x2, 0xddf, 0x107, 
       0x3, 0x2, 0x2, 0x2, 0xde0, 0xde1, 0x7, 0x167, 0x2, 0x2, 0xde1, 0xde2, 
       0x7, 0x16f, 0x2, 0x2, 0xde2, 0xde8, 0x5, 0x10a, 0x86, 0x2, 0xde3, 
       0xde4, 0x7, 0x75, 0x2, 0x2, 0xde4, 0xde8, 0x7, 0xa9, 0x2, 0x2, 0xde5, 
       0xde6, 0x7, 0x75, 0x2, 0x2, 0xde6, 0xde8, 0x7, 0x1a6, 0x2, 0x2, 0xde7, 
       0xde0, 0x3, 0x2, 0x2, 0x2, 0xde7, 0xde3, 0x3, 0x2, 0x2, 0x2, 0xde7, 
       0xde5, 0x3, 0x2, 0x2, 0x2, 0xde8, 0x109, 0x3, 0x2, 0x2, 0x2, 0xde9, 
       0xdea, 0x7, 0x26b, 0x2, 0x2, 0xdea, 0xdf1, 0x7, 0x75, 0x2, 0x2, 0xdeb, 
       0xdec, 0x7, 0x75, 0x2, 0x2, 0xdec, 0xdf1, 0x7, 0x26c, 0x2, 0x2, 0xded, 
       0xdee, 0x7, 0x75, 0x2, 0x2, 0xdee, 0xdf1, 0x7, 0x26d, 0x2, 0x2, 0xdef, 
       0xdf1, 0x7, 0x26e, 0x2, 0x2, 0xdf0, 0xde9, 0x3, 0x2, 0x2, 0x2, 0xdf0, 
       0xdeb, 0x3, 0x2, 0x2, 0x2, 0xdf0, 0xded, 0x3, 0x2, 0x2, 0x2, 0xdf0, 
       0xdef, 0x3, 0x2, 0x2, 0x2, 0xdf1, 0x10b, 0x3, 0x2, 0x2, 0x2, 0xdf2, 
       0xdf3, 0x7, 0x16, 0x2, 0x2, 0xdf3, 0xdf4, 0x7, 0x174, 0x2, 0x2, 0xdf4, 
       0xdf5, 0x7, 0x97, 0x2, 0x2, 0xdf5, 0xdfa, 0x5, 0x11e, 0x90, 0x2, 
       0xdf6, 0xdf7, 0x7, 0x3b3, 0x2, 0x2, 0xdf7, 0xdf9, 0x5, 0x11e, 0x90, 
       0x2, 0xdf8, 0xdf6, 0x3, 0x2, 0x2, 0x2, 0xdf9, 0xdfc, 0x3, 0x2, 0x2, 
       0x2, 0xdfa, 0xdf8, 0x3, 0x2, 0x2, 0x2, 0xdfa, 0xdfb, 0x3, 0x2, 0x2, 
       0x2, 0xdfb, 0xdfe, 0x3, 0x2, 0x2, 0x2, 0xdfc, 0xdfa, 0x3, 0x2, 0x2, 
       0x2, 0xdfd, 0xdff, 0x5, 0x126, 0x94, 0x2, 0xdfe, 0xdfd, 0x3, 0x2, 
       0x2, 0x2, 0xdfe, 0xdff, 0x3, 0x2, 0x2, 0x2, 0xdff, 0x10d, 0x3, 0x2, 
       0x2, 0x2, 0xe00, 0xe01, 0x7, 0x16, 0x2, 0x2, 0xe01, 0xe02, 0x7, 0x1d3, 
       0x2, 0x2, 0xe02, 0xe03, 0x7, 0x149, 0x2, 0x2, 0xe03, 0xe08, 0x5, 
       0x128, 0x95, 0x2, 0xe04, 0xe05, 0x7, 0x3b3, 0x2, 0x2, 0xe05, 0xe07, 
       0x5, 0x128, 0x95, 0x2, 0xe06, 0xe04, 0x3, 0x2, 0x2, 0x2, 0xe07, 0xe0a, 
       0x3, 0x2, 0x2, 0x2, 0xe08, 0xe06, 0x3, 0x2, 0x2, 0x2, 0xe08, 0xe09, 
       0x3, 0x2, 0x2, 0x2, 0xe09, 0x10f, 0x3, 0x2, 0x2, 0x2, 0xe0a, 0xe08, 
       0x3, 0x2, 0x2, 0x2, 0xe0b, 0xe0c, 0x7, 0x73, 0x2, 0x2, 0xe0c, 0xe0d, 
       0x9, 0x30, 0x2, 0x2, 0xe0d, 0xe0e, 0x7, 0x173, 0x2, 0x2, 0xe0e, 0xe0f, 
       0x9, 0x31, 0x2, 0x2, 0xe0f, 0xe10, 0x7, 0x3c0, 0x2, 0x2, 0xe10, 0x111, 
       0x3, 0x2, 0x2, 0x2, 0xe11, 0xe12, 0x7, 0x1d4, 0x2, 0x2, 0xe12, 0xe13, 
       0x7, 0x174, 0x2, 0x2, 0xe13, 0x113, 0x3, 0x2, 0x2, 0x2, 0xe14, 0xe15, 
       0x7, 0x1d4, 0x2, 0x2, 0xe15, 0xe17, 0x7, 0x1e6, 0x2, 0x2, 0xe16, 
       0xe18, 0x7, 0x8, 0x2, 0x2, 0xe17, 0xe16, 0x3, 0x2, 0x2, 0x2, 0xe17, 
       0xe18, 0x3, 0x2, 0x2, 0x2, 0xe18, 0xe1a, 0x3, 0x2, 0x2, 0x2, 0xe19, 
       0xe1b, 0x5, 0x126, 0x94, 0x2, 0xe1a, 0xe19, 0x3, 0x2, 0x2, 0x2, 0xe1a, 
       0xe1b, 0x3, 0x2, 0x2, 0x2, 0xe1b, 0x115, 0x3, 0x2, 0x2, 0x2, 0xe1c, 
       0xe1d, 0x7, 0x1f5, 0x2, 0x2, 0xe1d, 0xe26, 0x7, 0x1e6, 0x2, 0x2, 
       0xe1e, 0xe23, 0x5, 0x12a, 0x96, 0x2, 0xe1f, 0xe20, 0x7, 0x3b3, 0x2, 
       0x2, 0xe20, 0xe22, 0x5, 0x12a, 0x96, 0x2, 0xe21, 0xe1f, 0x3, 0x2, 
       0x2, 0x2, 0xe22, 0xe25, 0x3, 0x2, 0x2, 0x2, 0xe23, 0xe21, 0x3, 0x2, 
       0x2, 0x2, 0xe23, 0xe24, 0x3, 0x2, 0x2, 0x2, 0xe24, 0xe27, 0x3, 0x2, 
       0x2, 0x2, 0xe25, 0xe23, 0x3, 0x2, 0x2, 0x2, 0xe26, 0xe1e, 0x3, 0x2, 
       0x2, 0x2, 0xe26, 0xe27, 0x3, 0x2, 0x2, 0x2, 0xe27, 0xe28, 0x3, 0x2, 
       0x2, 0x2, 0xe28, 0xe2a, 0x7, 0x211, 0x2, 0x2, 0xe29, 0xe2b, 0x5, 
       0x12c, 0x97, 0x2, 0xe2a, 0xe29, 0x3, 0x2, 0x2, 0x2, 0xe2a, 0xe2b, 
       0x3, 0x2, 0x2, 0x2, 0xe2b, 0xe2f, 0x3, 0x2, 0x2, 0x2, 0xe2c, 0xe2e, 
       0x5, 0x12e, 0x98, 0x2, 0xe2d, 0xe2c, 0x3, 0x2, 0x2, 0x2, 0xe2e, 0xe31, 
       0x3, 0x2, 0x2, 0x2, 0xe2f, 0xe2d, 0x3, 0x2, 0x2, 0x2, 0xe2f, 0xe30, 
       0x3, 0x2, 0x2, 0x2, 0xe30, 0xe33, 0x3, 0x2, 0x2, 0x2, 0xe31, 0xe2f, 
       0x3, 0x2, 0x2, 0x2, 0xe32, 0xe34, 0x5, 0x126, 0x94, 0x2, 0xe33, 0xe32, 
       0x3, 0x2, 0x2, 0x2, 0xe33, 0xe34, 0x3, 0x2, 0x2, 0x2, 0xe34, 0x117, 
       0x3, 0x2, 0x2, 0x2, 0xe35, 0xe36, 0x7, 0x1fb, 0x2, 0x2, 0xe36, 0xe3f, 
       0x7, 0x1e6, 0x2, 0x2, 0xe37, 0xe3c, 0x5, 0x12a, 0x96, 0x2, 0xe38, 
       0xe39, 0x7, 0x3b3, 0x2, 0x2, 0xe39, 0xe3b, 0x5, 0x12a, 0x96, 0x2, 
       0xe3a, 0xe38, 0x3, 0x2, 0x2, 0x2, 0xe3b, 0xe3e, 0x3, 0x2, 0x2, 0x2, 
       0xe3c, 0xe3a, 0x3, 0x2, 0x2, 0x2, 0xe3c, 0xe3d, 0x3, 0x2, 0x2, 0x2, 
       0xe3d, 0xe40, 0x3, 0x2, 0x2, 0x2, 0xe3e, 0xe3c, 0x3, 0x2, 0x2, 0x2, 
       0xe3f, 0xe37, 0x3, 0x2, 0x2, 0x2, 0xe3f, 0xe40, 0x3, 0x2, 0x2, 0x2, 
       0xe40, 0x119, 0x3, 0x2, 0x2, 0x2, 0xe41, 0xe42, 0x7, 0x1f5, 0x2, 
       0x2, 0xe42, 0xe43, 0x7, 0x154, 0x2, 0x2, 0xe43, 0x11b, 0x3, 0x2, 
       0x2, 0x2, 0xe44, 0xe45, 0x7, 0x1f5, 0x2, 0x2, 0xe45, 0xe46, 0x7, 
       0x154, 0x2, 0x2, 0xe46, 0x11d, 0x3, 0x2, 0x2, 0x2, 0xe47, 0xe48, 
       0x5, 0x120, 0x91, 0x2, 0xe48, 0xe49, 0x7, 0x3a8, 0x2, 0x2, 0xe49, 
       0xe4a, 0x7, 0x3c0, 0x2, 0x2, 0xe4a, 0xe65, 0x3, 0x2, 0x2, 0x2, 0xe4b, 
       0xe4c, 0x5, 0x122, 0x92, 0x2, 0xe4c, 0xe4d, 0x7, 0x3a8, 0x2, 0x2, 
       0xe4d, 0xe4e, 0x5, 0x1e4, 0xf3, 0x2, 0xe4e, 0xe65, 0x3, 0x2, 0x2, 
       0x2, 0xe4f, 0xe50, 0x5, 0x124, 0x93, 0x2, 0xe50, 0xe51, 0x7, 0x3a8, 
       0x2, 0x2, 0xe51, 0xe52, 0x9, 0x16, 0x2, 0x2, 0xe52, 0xe65, 0x3, 0x2, 
       0x2, 0x2, 0xe53, 0xe54, 0x7, 0x178, 0x2, 0x2, 0xe54, 0xe55, 0x7, 
       0x3a8, 0x2, 0x2, 0xe55, 0xe65, 0x7, 0x3c3, 0x2, 0x2, 0xe56, 0xe57, 
       0x7, 0x15b, 0x2, 0x2, 0xe57, 0xe58, 0x7, 0x3a8, 0x2, 0x2, 0xe58, 
       0xe61, 0x7, 0x3b1, 0x2, 0x2, 0xe59, 0xe5e, 0x5, 0x1de, 0xf0, 0x2, 
       0xe5a, 0xe5b, 0x7, 0x3b3, 0x2, 0x2, 0xe5b, 0xe5d, 0x5, 0x1de, 0xf0, 
       0x2, 0xe5c, 0xe5a, 0x3, 0x2, 0x2, 0x2, 0xe5d, 0xe60, 0x3, 0x2, 0x2, 
       0x2, 0xe5e, 0xe5c, 0x3, 0x2, 0x2, 0x2, 0xe5e, 0xe5f, 0x3, 0x2, 0x2, 
       0x2, 0xe5f, 0xe62, 0x3, 0x2, 0x2, 0x2, 0xe60, 0xe5e, 0x3, 0x2, 0x2, 
       0x2, 0xe61, 0xe59, 0x3, 0x2, 0x2, 0x2, 0xe61, 0xe62, 0x3, 0x2, 0x2, 
       0x2, 0xe62, 0xe63, 0x3, 0x2, 0x2, 0x2, 0xe63, 0xe65, 0x7, 0x3b2, 
       0x2, 0x2, 0xe64, 0xe47, 0x3, 0x2, 0x2, 0x2, 0xe64, 0xe4b, 0x3, 0x2, 
       0x2, 0x2, 0xe64, 0xe4f, 0x3, 0x2, 0x2, 0x2, 0xe64, 0xe53, 0x3, 0x2, 
       0x2, 0x2, 0xe64, 0xe56, 0x3, 0x2, 0x2, 0x2, 0xe65, 0x11f, 0x3, 0x2, 
       0x2, 0x2, 0xe66, 0xe67, 0x9, 0x32, 0x2, 0x2, 0xe67, 0x121, 0x3, 0x2, 
       0x2, 0x2, 0xe68, 0xe69, 0x9, 0x33, 0x2, 0x2, 0xe69, 0x123, 0x3, 0x2, 
       0x2, 0x2, 0xe6a, 0xe6b, 0x9, 0x34, 0x2, 0x2, 0xe6b, 0x125, 0x3, 0x2, 
       0x2, 0x2, 0xe6c, 0xe6d, 0x7, 0x39, 0x2, 0x2, 0xe6d, 0xe6e, 0x7, 0x10c, 
       0x2, 0x2, 0xe6e, 0xe6f, 0x7, 0x3c0, 0x2, 0x2, 0xe6f, 0x127, 0x3, 
       0x2, 0x2, 0x2, 0xe70, 0xe71, 0x7, 0x1cc, 0x2, 0x2, 0xe71, 0xe72, 
       0x7, 0x3a8, 0x2, 0x2, 0xe72, 0xe73, 0x7, 0x3b1, 0x2, 0x2, 0xe73, 
       0xe74, 0x5, 0x1fe, 0x100, 0x2, 0xe74, 0xe75, 0x7, 0x3b2, 0x2, 0x2, 
       0xe75, 0xe9b, 0x3, 0x2, 0x2, 0x2, 0xe76, 0xe77, 0x7, 0x1ce, 0x2, 
       0x2, 0xe77, 0xe78, 0x7, 0x3a8, 0x2, 0x2, 0xe78, 0xe79, 0x7, 0x3b1, 
       0x2, 0x2, 0xe79, 0xe7a, 0x5, 0x1fe, 0x100, 0x2, 0xe7a, 0xe7b, 0x7, 
       0x3b2, 0x2, 0x2, 0xe7b, 0xe9b, 0x3, 0x2, 0x2, 0x2, 0xe7c, 0xe7d, 
       0x7, 0x1cd, 0x2, 0x2, 0xe7d, 0xe7e, 0x7, 0x3a8, 0x2, 0x2, 0xe7e, 
       0xe7f, 0x7, 0x3b1, 0x2, 0x2, 0xe7f, 0xe80, 0x5, 0x200, 0x101, 0x2, 
       0xe80, 0xe81, 0x7, 0x3b2, 0x2, 0x2, 0xe81, 0xe9b, 0x3, 0x2, 0x2, 
       0x2, 0xe82, 0xe83, 0x7, 0x1cf, 0x2, 0x2, 0xe83, 0xe84, 0x7, 0x3a8, 
       0x2, 0x2, 0xe84, 0xe85, 0x7, 0x3b1, 0x2, 0x2, 0xe85, 0xe86, 0x5, 
       0x200, 0x101, 0x2, 0xe86, 0xe87, 0x7, 0x3b2, 0x2, 0x2, 0xe87, 0xe9b, 
       0x3, 0x2, 0x2, 0x2, 0xe88, 0xe89, 0x7, 0x1d1, 0x2, 0x2, 0xe89, 0xe8a, 
       0x7, 0x3a8, 0x2, 0x2, 0xe8a, 0xe8b, 0x7, 0x3b1, 0x2, 0x2, 0xe8b, 
       0xe8c, 0x5, 0x20a, 0x106, 0x2, 0xe8c, 0xe8d, 0x7, 0x3b2, 0x2, 0x2, 
       0xe8d, 0xe9b, 0x3, 0x2, 0x2, 0x2, 0xe8e, 0xe8f, 0x7, 0x1d2, 0x2, 
       0x2, 0xe8f, 0xe90, 0x7, 0x3a8, 0x2, 0x2, 0xe90, 0xe91, 0x7, 0x3b1, 
       0x2, 0x2, 0xe91, 0xe92, 0x5, 0x20a, 0x106, 0x2, 0xe92, 0xe93, 0x7, 
       0x3b2, 0x2, 0x2, 0xe93, 0xe9b, 0x3, 0x2, 0x2, 0x2, 0xe94, 0xe95, 
       0x7, 0x1d0, 0x2, 0x2, 0xe95, 0xe96, 0x7, 0x3a8, 0x2, 0x2, 0xe96, 
       0xe97, 0x7, 0x3b1, 0x2, 0x2, 0xe97, 0xe98, 0x5, 0x202, 0x102, 0x2, 
       0xe98, 0xe99, 0x7, 0x3b2, 0x2, 0x2, 0xe99, 0xe9b, 0x3, 0x2, 0x2, 
       0x2, 0xe9a, 0xe70, 0x3, 0x2, 0x2, 0x2, 0xe9a, 0xe76, 0x3, 0x2, 0x2, 
       0x2, 0xe9a, 0xe7c, 0x3, 0x2, 0x2, 0x2, 0xe9a, 0xe82, 0x3, 0x2, 0x2, 
       0x2, 0xe9a, 0xe88, 0x3, 0x2, 0x2, 0x2, 0xe9a, 0xe8e, 0x3, 0x2, 0x2, 
       0x2, 0xe9a, 0xe94, 0x3, 0x2, 0x2, 0x2, 0xe9b, 0x129, 0x3, 0x2, 0x2, 
       0x2, 0xe9c, 0xe9d, 0x9, 0x35, 0x2, 0x2, 0xe9d, 0x12b, 0x3, 0x2, 0x2, 
       0x2, 0xe9e, 0xe9f, 0x9, 0x36, 0x2, 0x2, 0xe9f, 0xea0, 0x7, 0x3a8, 
       0x2, 0x2, 0xea0, 0xeb1, 0x5, 0x130, 0x99, 0x2, 0xea1, 0xea2, 0x7, 
       0x17a, 0x2, 0x2, 0xea2, 0xea3, 0x7, 0x3a8, 0x2, 0x2, 0xea3, 0xea4, 
       0x7, 0x3c0, 0x2, 0x2, 0xea4, 0xea5, 0x7, 0x3b3, 0x2, 0x2, 0xea5, 
       0xea6, 0x7, 0x17b, 0x2, 0x2, 0xea6, 0xea7, 0x7, 0x3a8, 0x2, 0x2, 
       0xea7, 0xeb1, 0x5, 0x1e4, 0xf3, 0x2, 0xea8, 0xea9, 0x7, 0x1c6, 0x2, 
       0x2, 0xea9, 0xeaa, 0x7, 0x3a8, 0x2, 0x2, 0xeaa, 0xeab, 0x7, 0x3c0, 
       0x2, 0x2, 0xeab, 0xeac, 0x7, 0x3b3, 0x2, 0x2, 0xeac, 0xead, 0x7, 
       0x1c7, 0x2, 0x2, 0xead, 0xeae, 0x7, 0x3a8, 0x2, 0x2, 0xeae, 0xeb1, 
       0x5, 0x1e4, 0xf3, 0x2, 0xeaf, 0xeb1, 0x7, 0x1ef, 0x2, 0x2, 0xeb0, 
       0xe9e, 0x3, 0x2, 0x2, 0x2, 0xeb0, 0xea1, 0x3, 0x2, 0x2, 0x2, 0xeb0, 
       0xea8, 0x3, 0x2, 0x2, 0x2, 0xeb0, 0xeaf, 0x3, 0x2, 0x2, 0x2, 0xeb1, 
       0x12d, 0x3, 0x2, 0x2, 0x2, 0xeb2, 0xeb3, 0x7, 0x213, 0x2, 0x2, 0xeb3, 
       0xeb4, 0x7, 0x3a8, 0x2, 0x2, 0xeb4, 0xebf, 0x7, 0x3c0, 0x2, 0x2, 
       0xeb5, 0xeb6, 0x7, 0x1b1, 0x2, 0x2, 0xeb6, 0xeb7, 0x7, 0x3a8, 0x2, 
       0x2, 0xeb7, 0xebf, 0x7, 0x3c0, 0x2, 0x2, 0xeb8, 0xeb9, 0x7, 0x126, 
       0x2, 0x2, 0xeb9, 0xeba, 0x7, 0x3a8, 0x2, 0x2, 0xeba, 0xebf, 0x7, 
       0x3c0, 0x2, 0x2, 0xebb, 0xebc, 0x7, 0x1b4, 0x2, 0x2, 0xebc, 0xebd, 
       0x7, 0x3a8, 0x2, 0x2, 0xebd, 0xebf, 0x7, 0x3c0, 0x2, 0x2, 0xebe, 
       0xeb2, 0x3, 0x2, 0x2, 0x2, 0xebe, 0xeb5, 0x3, 0x2, 0x2, 0x2, 0xebe, 
       0xeb8, 0x3, 0x2, 0x2, 0x2, 0xebe, 0xebb, 0x3, 0x2, 0x2, 0x2, 0xebf, 
       0x12f, 0x3, 0x2, 0x2, 0x2, 0xec0, 0xec5, 0x5, 0x1d6, 0xec, 0x2, 0xec1, 
       0xec2, 0x7, 0x3b3, 0x2, 0x2, 0xec2, 0xec4, 0x5, 0x1d6, 0xec, 0x2, 
       0xec3, 0xec1, 0x3, 0x2, 0x2, 0x2, 0xec4, 0xec7, 0x3, 0x2, 0x2, 0x2, 
       0xec5, 0xec3, 0x3, 0x2, 0x2, 0x2, 0xec5, 0xec6, 0x3, 0x2, 0x2, 0x2, 
       0xec6, 0xeca, 0x3, 0x2, 0x2, 0x2, 0xec7, 0xec5, 0x3, 0x2, 0x2, 0x2, 
       0xec8, 0xeca, 0x7, 0x3c0, 0x2, 0x2, 0xec9, 0xec0, 0x3, 0x2, 0x2, 
       0x2, 0xec9, 0xec8, 0x3, 0x2, 0x2, 0x2, 0xeca, 0x131, 0x3, 0x2, 0x2, 
       0x2, 0xecb, 0xecc, 0x7, 0x220, 0x2, 0x2, 0xecc, 0xecd, 0x9, 0x37, 
       0x2, 0x2, 0xecd, 0xecf, 0x5, 0x1d8, 0xed, 0x2, 0xece, 0xed0, 0x9, 
       0x38, 0x2, 0x2, 0xecf, 0xece, 0x3, 0x2, 0x2, 0x2, 0xecf, 0xed0, 0x3, 
       0x2, 0x2, 0x2, 0xed0, 0x133, 0x3, 0x2, 0x2, 0x2, 0xed1, 0xed2, 0x7, 
       0x220, 0x2, 0x2, 0xed2, 0xed3, 0x7, 0x134, 0x2, 0x2, 0xed3, 0xed9, 
       0x5, 0x1d8, 0xed, 0x2, 0xed4, 0xed7, 0x7, 0x201, 0x2, 0x2, 0xed5, 
       0xed6, 0x7, 0x39, 0x2, 0x2, 0xed6, 0xed8, 0x7, 0x192, 0x2, 0x2, 0xed7, 
       0xed5, 0x3, 0x2, 0x2, 0x2, 0xed7, 0xed8, 0x3, 0x2, 0x2, 0x2, 0xed8, 
       0xeda, 0x3, 0x2, 0x2, 0x2, 0xed9, 0xed4, 0x3, 0x2, 0x2, 0x2, 0xed9, 
       0xeda, 0x3, 0x2, 0x2, 0x2, 0xeda, 0x135, 0x3, 0x2, 0x2, 0x2, 0xedb, 
       0xedc, 0x7, 0x220, 0x2, 0x2, 0xedc, 0xedd, 0x7, 0x1b8, 0x2, 0x2, 
       0xedd, 0xede, 0x5, 0x1d8, 0xed, 0x2, 0xede, 0x137, 0x3, 0x2, 0x2, 
       0x2, 0xedf, 0xee0, 0x7, 0x220, 0x2, 0x2, 0xee0, 0xee1, 0x7, 0x116, 
       0x2, 0x2, 0xee1, 0xee4, 0x5, 0x1d8, 0xed, 0x2, 0xee2, 0xee3, 0x7, 
       0x1a4, 0x2, 0x2, 0xee3, 0xee5, 0x7, 0x1b2, 0x2, 0x2, 0xee4, 0xee2, 
       0x3, 0x2, 0x2, 0x2, 0xee4, 0xee5, 0x3, 0x2, 0x2, 0x2, 0xee5, 0x139, 
       0x3, 0x2, 0x2, 0x2, 0xee6, 0xee7, 0x7, 0x220, 0x2, 0x2, 0xee7, 0xee8, 
       0x7, 0x1d7, 0x2, 0x2, 0xee8, 0xee9, 0x5, 0x1d8, 0xed, 0x2, 0xee9, 
       0x13b, 0x3, 0x2, 0x2, 0x2, 0xeea, 0xeeb, 0x7, 0x220, 0x2, 0x2, 0xeeb, 
       0xeee, 0x7, 0x1c2, 0x2, 0x2, 0xeec, 0xeed, 0x7, 0x1e, 0x2, 0x2, 0xeed, 
       0xeef, 0x5, 0x1d8, 0xed, 0x2, 0xeee, 0xeec, 0x3, 0x2, 0x2, 0x2, 0xeee, 
       0xeef, 0x3, 0x2, 0x2, 0x2, 0xeef, 0x13d, 0x3, 0x2, 0x2, 0x2, 0xef0, 
       0xef1, 0x7, 0x1b8, 0x2, 0x2, 0xef1, 0xef2, 0x5, 0x1de, 0xf0, 0x2, 
       0xef2, 0xef3, 0x7, 0x3c, 0x2, 0x2, 0xef3, 0xef4, 0x9, 0x39, 0x2, 
       0x2, 0xef4, 0x13f, 0x3, 0x2, 0x2, 0x2, 0xef5, 0xef6, 0x7, 0x231, 
       0x2, 0x2, 0xef6, 0xef9, 0x5, 0x1de, 0xf0, 0x2, 0xef7, 0xef8, 0x7, 
       0xa3, 0x2, 0x2, 0xef8, 0xefa, 0x5, 0x20c, 0x107, 0x2, 0xef9, 0xef7, 
       0x3, 0x2, 0x2, 0x2, 0xef9, 0xefa, 0x3, 0x2, 0x2, 0x2, 0xefa, 0x141, 
       0x3, 0x2, 0x2, 0x2, 0xefb, 0xefc, 0x9, 0x3a, 0x2, 0x2, 0xefc, 0xefd, 
       0x7, 0x1b8, 0x2, 0x2, 0xefd, 0xefe, 0x5, 0x1de, 0xf0, 0x2, 0xefe, 
       0x143, 0x3, 0x2, 0x2, 0x2, 0xeff, 0xf02, 0x5, 0x146, 0xa4, 0x2, 0xf00, 
       0xf02, 0x5, 0x6, 0x4, 0x2, 0xf01, 0xeff, 0x3, 0x2, 0x2, 0x2, 0xf01, 
       0xf00, 0x3, 0x2, 0x2, 0x2, 0xf02, 0x145, 0x3, 0x2, 0x2, 0x2, 0xf03, 
       0xf04, 0x5, 0x1de, 0xf0, 0x2, 0xf04, 0xf05, 0x7, 0x3bc, 0x2, 0x2, 
       0xf05, 0xf07, 0x3, 0x2, 0x2, 0x2, 0xf06, 0xf03, 0x3, 0x2, 0x2, 0x2, 
       0xf06, 0xf07, 0x3, 0x2, 0x2, 0x2, 0xf07, 0xf08, 0x3, 0x2, 0x2, 0x2, 
       0xf08, 0xf2e, 0x7, 0x103, 0x2, 0x2, 0xf09, 0xf0a, 0x5, 0x15a, 0xae, 
       0x2, 0xf0a, 0xf0b, 0x7, 0x3b4, 0x2, 0x2, 0xf0b, 0xf0d, 0x3, 0x2, 
       0x2, 0x2, 0xf0c, 0xf09, 0x3, 0x2, 0x2, 0x2, 0xf0d, 0xf10, 0x3, 0x2, 
       0x2, 0x2, 0xf0e, 0xf0c, 0x3, 0x2, 0x2, 0x2, 0xf0e, 0xf0f, 0x3, 0x2, 
       0x2, 0x2, 0xf0f, 0xf16, 0x3, 0x2, 0x2, 0x2, 0xf10, 0xf0e, 0x3, 0x2, 
       0x2, 0x2, 0xf11, 0xf12, 0x5, 0x15c, 0xaf, 0x2, 0xf12, 0xf13, 0x7, 
       0x3b4, 0x2, 0x2, 0xf13, 0xf15, 0x3, 0x2, 0x2, 0x2, 0xf14, 0xf11, 
       0x3, 0x2, 0x2, 0x2, 0xf15, 0xf18, 0x3, 0x2, 0x2, 0x2, 0xf16, 0xf14, 
       0x3, 0x2, 0x2, 0x2, 0xf16, 0xf17, 0x3, 0x2, 0x2, 0x2, 0xf17, 0xf1e, 
       0x3, 0x2, 0x2, 0x2, 0xf18, 0xf16, 0x3, 0x2, 0x2, 0x2, 0xf19, 0xf1a, 
       0x5, 0x15e, 0xb0, 0x2, 0xf1a, 0xf1b, 0x7, 0x3b4, 0x2, 0x2, 0xf1b, 
       0xf1d, 0x3, 0x2, 0x2, 0x2, 0xf1c, 0xf19, 0x3, 0x2, 0x2, 0x2, 0xf1d, 
       0xf20, 0x3, 0x2, 0x2, 0x2, 0xf1e, 0xf1c, 0x3, 0x2, 0x2, 0x2, 0xf1e, 
       0xf1f, 0x3, 0x2, 0x2, 0x2, 0xf1f, 0xf26, 0x3, 0x2, 0x2, 0x2, 0xf20, 
       0xf1e, 0x3, 0x2, 0x2, 0x2, 0xf21, 0xf22, 0x5, 0x160, 0xb1, 0x2, 0xf22, 
       0xf23, 0x7, 0x3b4, 0x2, 0x2, 0xf23, 0xf25, 0x3, 0x2, 0x2, 0x2, 0xf24, 
       0xf21, 0x3, 0x2, 0x2, 0x2, 0xf25, 0xf28, 0x3, 0x2, 0x2, 0x2, 0xf26, 
       0xf24, 0x3, 0x2, 0x2, 0x2, 0xf26, 0xf27, 0x3, 0x2, 0x2, 0x2, 0xf27, 
       0xf2a, 0x3, 0x2, 0x2, 0x2, 0xf28, 0xf26, 0x3, 0x2, 0x2, 0x2, 0xf29, 
       0xf2b, 0x5, 0x164, 0xb3, 0x2, 0xf2a, 0xf29, 0x3, 0x2, 0x2, 0x2, 0xf2b, 
       0xf2c, 0x3, 0x2, 0x2, 0x2, 0xf2c, 0xf2a, 0x3, 0x2, 0x2, 0x2, 0xf2c, 
       0xf2d, 0x3, 0x2, 0x2, 0x2, 0xf2d, 0xf2f, 0x3, 0x2, 0x2, 0x2, 0xf2e, 
       0xf0e, 0x3, 0x2, 0x2, 0x2, 0xf2e, 0xf2f, 0x3, 0x2, 0x2, 0x2, 0xf2f, 
       0xf30, 0x3, 0x2, 0x2, 0x2, 0xf30, 0xf32, 0x7, 0x134, 0x2, 0x2, 0xf31, 
       0xf33, 0x5, 0x1de, 0xf0, 0x2, 0xf32, 0xf31, 0x3, 0x2, 0x2, 0x2, 0xf32, 
       0xf33, 0x3, 0x2, 0x2, 0x2, 0xf33, 0x147, 0x3, 0x2, 0x2, 0x2, 0xf34, 
       0xf37, 0x7, 0x14, 0x2, 0x2, 0xf35, 0xf38, 0x5, 0x1de, 0xf0, 0x2, 
       0xf36, 0xf38, 0x5, 0x222, 0x112, 0x2, 0xf37, 0xf35, 0x3, 0x2, 0x2, 
       0x2, 0xf37, 0xf36, 0x3, 0x2, 0x2, 0x2, 0xf37, 0xf38, 0x3, 0x2, 0x2, 
       0x2, 0xf38, 0xf44, 0x3, 0x2, 0x2, 0x2, 0xf39, 0xf3c, 0x7, 0xa5, 0x2, 
       0x2, 0xf3a, 0xf3d, 0x5, 0x1f0, 0xf9, 0x2, 0xf3b, 0xf3d, 0x5, 0x222, 
       0x112, 0x2, 0xf3c, 0xf3a, 0x3, 0x2, 0x2, 0x2, 0xf3c, 0xf3b, 0x3, 
       0x2, 0x2, 0x2, 0xf3d, 0xf3e, 0x3, 0x2, 0x2, 0x2, 0xf3e, 0xf40, 0x7, 
       0x96, 0x2, 0x2, 0xf3f, 0xf41, 0x5, 0x164, 0xb3, 0x2, 0xf40, 0xf3f, 
       0x3, 0x2, 0x2, 0x2, 0xf41, 0xf42, 0x3, 0x2, 0x2, 0x2, 0xf42, 0xf40, 
       0x3, 0x2, 0x2, 0x2, 0xf42, 0xf43, 0x3, 0x2, 0x2, 0x2, 0xf43, 0xf45, 
       0x3, 0x2, 0x2, 0x2, 0xf44, 0xf39, 0x3, 0x2, 0x2, 0x2, 0xf45, 0xf46, 
       0x3, 0x2, 0x2, 0x2, 0xf46, 0xf44, 0x3, 0x2, 0x2, 0x2, 0xf46, 0xf47, 
       0x3, 0x2, 0x2, 0x2, 0xf47, 0xf4e, 0x3, 0x2, 0x2, 0x2, 0xf48, 0xf4a, 
       0x7, 0x30, 0x2, 0x2, 0xf49, 0xf4b, 0x5, 0x164, 0xb3, 0x2, 0xf4a, 
       0xf49, 0x3, 0x2, 0x2, 0x2, 0xf4b, 0xf4c, 0x3, 0x2, 0x2, 0x2, 0xf4c, 
       0xf4a, 0x3, 0x2, 0x2, 0x2, 0xf4c, 0xf4d, 0x3, 0x2, 0x2, 0x2, 0xf4d, 
       0xf4f, 0x3, 0x2, 0x2, 0x2, 0xf4e, 0xf48, 0x3, 0x2, 0x2, 0x2, 0xf4e, 
       0xf4f, 0x3, 0x2, 0x2, 0x2, 0xf4f, 0xf50, 0x3, 0x2, 0x2, 0x2, 0xf50, 
       0xf51, 0x7, 0x134, 0x2, 0x2, 0xf51, 0xf52, 0x7, 0x14, 0x2, 0x2, 0xf52, 
       0x149, 0x3, 0x2, 0x2, 0x2, 0xf53, 0xf54, 0x7, 0x42, 0x2, 0x2, 0xf54, 
       0xf55, 0x5, 0x222, 0x112, 0x2, 0xf55, 0xf57, 0x7, 0x96, 0x2, 0x2, 
       0xf56, 0xf58, 0x5, 0x164, 0xb3, 0x2, 0xf57, 0xf56, 0x3, 0x2, 0x2, 
       0x2, 0xf58, 0xf59, 0x3, 0x2, 0x2, 0x2, 0xf59, 0xf57, 0x3, 0x2, 0x2, 
       0x2, 0xf59, 0xf5a, 0x3, 0x2, 0x2, 0x2, 0xf5a, 0xf65, 0x3, 0x2, 0x2, 
       0x2, 0xf5b, 0xf5c, 0x7, 0x31, 0x2, 0x2, 0xf5c, 0xf5d, 0x5, 0x222, 
       0x112, 0x2, 0xf5d, 0xf5f, 0x7, 0x96, 0x2, 0x2, 0xf5e, 0xf60, 0x5, 
       0x164, 0xb3, 0x2, 0xf5f, 0xf5e, 0x3, 0x2, 0x2, 0x2, 0xf60, 0xf61, 
       0x3, 0x2, 0x2, 0x2, 0xf61, 0xf5f, 0x3, 0x2, 0x2, 0x2, 0xf61, 0xf62, 
       0x3, 0x2, 0x2, 0x2, 0xf62, 0xf64, 0x3, 0x2, 0x2, 0x2, 0xf63, 0xf5b, 
       0x3, 0x2, 0x2, 0x2, 0xf64, 0xf67, 0x3, 0x2, 0x2, 0x2, 0xf65, 0xf63, 
       0x3, 0x2, 0x2, 0x2, 0xf65, 0xf66, 0x3, 0x2, 0x2, 0x2, 0xf66, 0xf6e, 
       0x3, 0x2, 0x2, 0x2, 0xf67, 0xf65, 0x3, 0x2, 0x2, 0x2, 0xf68, 0xf6a, 
       0x7, 0x30, 0x2, 0x2, 0xf69, 0xf6b, 0x5, 0x164, 0xb3, 0x2, 0xf6a, 
       0xf69, 0x3, 0x2, 0x2, 0x2, 0xf6b, 0xf6c, 0x3, 0x2, 0x2, 0x2, 0xf6c, 
       0xf6a, 0x3, 0x2, 0x2, 0x2, 0xf6c, 0xf6d, 0x3, 0x2, 0x2, 0x2, 0xf6d, 
       0xf6f, 0x3, 0x2, 0x2, 0x2, 0xf6e, 0xf68, 0x3, 0x2, 0x2, 0x2, 0xf6e, 
       0xf6f, 0x3, 0x2, 0x2, 0x2, 0xf6f, 0xf70, 0x3, 0x2, 0x2, 0x2, 0xf70, 
       0xf71, 0x7, 0x134, 0x2, 0x2, 0xf71, 0xf72, 0x7, 0x42, 0x2, 0x2, 0xf72, 
       0x14b, 0x3, 0x2, 0x2, 0x2, 0xf73, 0xf74, 0x7, 0x4d, 0x2, 0x2, 0xf74, 
       0xf75, 0x5, 0x1de, 0xf0, 0x2, 0xf75, 0x14d, 0x3, 0x2, 0x2, 0x2, 0xf76, 
       0xf77, 0x7, 0x53, 0x2, 0x2, 0xf77, 0xf78, 0x5, 0x1de, 0xf0, 0x2, 
       0xf78, 0x14f, 0x3, 0x2, 0x2, 0x2, 0xf79, 0xf7a, 0x5, 0x1de, 0xf0, 
       0x2, 0xf7a, 0xf7b, 0x7, 0x3bc, 0x2, 0x2, 0xf7b, 0xf7d, 0x3, 0x2, 
       0x2, 0x2, 0xf7c, 0xf79, 0x3, 0x2, 0x2, 0x2, 0xf7c, 0xf7d, 0x3, 0x2, 
       0x2, 0x2, 0xf7d, 0xf7e, 0x3, 0x2, 0x2, 0x2, 0xf7e, 0xf80, 0x7, 0x5b, 
       0x2, 0x2, 0xf7f, 0xf81, 0x5, 0x164, 0xb3, 0x2, 0xf80, 0xf7f, 0x3, 
       0x2, 0x2, 0x2, 0xf81, 0xf82, 0x3, 0x2, 0x2, 0x2, 0xf82, 0xf80, 0x3, 
       0x2, 0x2, 0x2, 0xf82, 0xf83, 0x3, 0x2, 0x2, 0x2, 0xf83, 0xf84, 0x3, 
       0x2, 0x2, 0x2, 0xf84, 0xf85, 0x7, 0x134, 0x2, 0x2, 0xf85, 0xf87, 
       0x7, 0x5b, 0x2, 0x2, 0xf86, 0xf88, 0x5, 0x1de, 0xf0, 0x2, 0xf87, 
       0xf86, 0x3, 0x2, 0x2, 0x2, 0xf87, 0xf88, 0x3, 0x2, 0x2, 0x2, 0xf88, 
       0x151, 0x3, 0x2, 0x2, 0x2, 0xf89, 0xf8a, 0x5, 0x1de, 0xf0, 0x2, 0xf8a, 
       0xf8b, 0x7, 0x3bc, 0x2, 0x2, 0xf8b, 0xf8d, 0x3, 0x2, 0x2, 0x2, 0xf8c, 
       0xf89, 0x3, 0x2, 0x2, 0x2, 0xf8c, 0xf8d, 0x3, 0x2, 0x2, 0x2, 0xf8d, 
       0xf8e, 0x3, 0x2, 0x2, 0x2, 0xf8e, 0xf90, 0x7, 0x7b, 0x2, 0x2, 0xf8f, 
       0xf91, 0x5, 0x164, 0xb3, 0x2, 0xf90, 0xf8f, 0x3, 0x2, 0x2, 0x2, 0xf91, 
       0xf92, 0x3, 0x2, 0x2, 0x2, 0xf92, 0xf90, 0x3, 0x2, 0x2, 0x2, 0xf92, 
       0xf93, 0x3, 0x2, 0x2, 0x2, 0xf93, 0xf94, 0x3, 0x2, 0x2, 0x2, 0xf94, 
       0xf95, 0x7, 0x211, 0x2, 0x2, 0xf95, 0xf96, 0x5, 0x222, 0x112, 0x2, 
       0xf96, 0xf97, 0x7, 0x134, 0x2, 0x2, 0xf97, 0xf99, 0x7, 0x7b, 0x2, 
       0x2, 0xf98, 0xf9a, 0x5, 0x1de, 0xf0, 0x2, 0xf99, 0xf98, 0x3, 0x2, 
       0x2, 0x2, 0xf99, 0xf9a, 0x3, 0x2, 0x2, 0x2, 0xf9a, 0x153, 0x3, 0x2, 
       0x2, 0x2, 0xf9b, 0xf9c, 0x7, 0x7f, 0x2, 0x2, 0xf9c, 0xf9d, 0x5, 0x222, 
       0x112, 0x2, 0xf9d, 0x155, 0x3, 0x2, 0x2, 0x2, 0xf9e, 0xf9f, 0x5, 
       0x1de, 0xf0, 0x2, 0xf9f, 0xfa0, 0x7, 0x3bc, 0x2, 0x2, 0xfa0, 0xfa2, 
       0x3, 0x2, 0x2, 0x2, 0xfa1, 0xf9e, 0x3, 0x2, 0x2, 0x2, 0xfa1, 0xfa2, 
       0x3, 0x2, 0x2, 0x2, 0xfa2, 0xfa3, 0x3, 0x2, 0x2, 0x2, 0xfa3, 0xfa4, 
       0x7, 0xa7, 0x2, 0x2, 0xfa4, 0xfa5, 0x5, 0x222, 0x112, 0x2, 0xfa5, 
       0xfa7, 0x7, 0x12e, 0x2, 0x2, 0xfa6, 0xfa8, 0x5, 0x164, 0xb3, 0x2, 
       0xfa7, 0xfa6, 0x3, 0x2, 0x2, 0x2, 0xfa8, 0xfa9, 0x3, 0x2, 0x2, 0x2, 
       0xfa9, 0xfa7, 0x3, 0x2, 0x2, 0x2, 0xfa9, 0xfaa, 0x3, 0x2, 0x2, 0x2, 
       0xfaa, 0xfab, 0x3, 0x2, 0x2, 0x2, 0xfab, 0xfac, 0x7, 0x134, 0x2, 
       0x2, 0xfac, 0xfae, 0x7, 0xa7, 0x2, 0x2, 0xfad, 0xfaf, 0x5, 0x1de, 
       0xf0, 0x2, 0xfae, 0xfad, 0x3, 0x2, 0x2, 0x2, 0xfae, 0xfaf, 0x3, 0x2, 
       0x2, 0x2, 0xfaf, 0x157, 0x3, 0x2, 0x2, 0x2, 0xfb0, 0xfb1, 0x7, 0x110, 
       0x2, 0x2, 0xfb1, 0xfc0, 0x5, 0x1de, 0xf0, 0x2, 0xfb2, 0xfb7, 0x7, 
       0x38, 0x2, 0x2, 0xfb3, 0xfb5, 0x7, 0x19c, 0x2, 0x2, 0xfb4, 0xfb3, 
       0x3, 0x2, 0x2, 0x2, 0xfb4, 0xfb5, 0x3, 0x2, 0x2, 0x2, 0xfb5, 0xfb6, 
       0x3, 0x2, 0x2, 0x2, 0xfb6, 0xfb8, 0x7, 0x3c, 0x2, 0x2, 0xfb7, 0xfb4, 
       0x3, 0x2, 0x2, 0x2, 0xfb7, 0xfb8, 0x3, 0x2, 0x2, 0x2, 0xfb8, 0xfb9, 
       0x3, 0x2, 0x2, 0x2, 0xfb9, 0xfba, 0x5, 0x1de, 0xf0, 0x2, 0xfba, 0xfbb, 
       0x7, 0x4b, 0x2, 0x2, 0xfbb, 0xfbc, 0x5, 0x1fe, 0x100, 0x2, 0xfbc, 
       0xfc0, 0x3, 0x2, 0x2, 0x2, 0xfbd, 0xfbe, 0x7, 0x1a7, 0x2, 0x2, 0xfbe, 
       0xfc0, 0x5, 0x1de, 0xf0, 0x2, 0xfbf, 0xfb0, 0x3, 0x2, 0x2, 0x2, 0xfbf, 
       0xfb2, 0x3, 0x2, 0x2, 0x2, 0xfbf, 0xfbd, 0x3, 0x2, 0x2, 0x2, 0xfc0, 
       0x159, 0x3, 0x2, 0x2, 0x2, 0xfc1, 0xfc2, 0x7, 0x25, 0x2, 0x2, 0xfc2, 
       0xfc3, 0x5, 0x1fe, 0x100, 0x2, 0xfc3, 0xfc6, 0x5, 0x1f2, 0xfa, 0x2, 
       0xfc4, 0xfc5, 0x7, 0x26, 0x2, 0x2, 0xfc5, 0xfc7, 0x5, 0x20e, 0x108, 
       0x2, 0xfc6, 0xfc4, 0x3, 0x2, 0x2, 0x2, 0xfc6, 0xfc7, 0x3, 0x2, 0x2, 
       0x2, 0xfc7, 0x15b, 0x3, 0x2, 0x2, 0x2, 0xfc8, 0xfc9, 0x7, 0x25, 0x2, 
       0x2, 0xfc9, 0xfca, 0x5, 0x1de, 0xf0, 0x2, 0xfca, 0xfcb, 0x7, 0x1b, 
       0x2, 0x2, 0xfcb, 0xfd2, 0x7, 0x39, 0x2, 0x2, 0xfcc, 0xfd3, 0x5, 0x1e4, 
       0xf3, 0x2, 0xfcd, 0xfcf, 0x7, 0x8c, 0x2, 0x2, 0xfce, 0xfd0, 0x7, 
       0x217, 0x2, 0x2, 0xfcf, 0xfce, 0x3, 0x2, 0x2, 0x2, 0xfcf, 0xfd0, 
       0x3, 0x2, 0x2, 0x2, 0xfd0, 0xfd1, 0x3, 0x2, 0x2, 0x2, 0xfd1, 0xfd3, 
       0x7, 0x3c0, 0x2, 0x2, 0xfd2, 0xfcc, 0x3, 0x2, 0x2, 0x2, 0xfd2, 0xfcd, 
       0x3, 0x2, 0x2, 0x2, 0xfd3, 0x15d, 0x3, 0x2, 0x2, 0x2, 0xfd4, 0xfd5, 
       0x7, 0x25, 0x2, 0x2, 0xfd5, 0xfd6, 0x5, 0x1de, 0xf0, 0x2, 0xfd6, 
       0xfd7, 0x7, 0x22, 0x2, 0x2, 0xfd7, 0xfd8, 0x7, 0x39, 0x2, 0x2, 0xfd8, 
       0xfd9, 0x5, 0xaa, 0x56, 0x2, 0xfd9, 0x15f, 0x3, 0x2, 0x2, 0x2, 0xfda, 
       0xfdb, 0x7, 0x25, 0x2, 0x2, 0xfdb, 0xfdc, 0x9, 0x3b, 0x2, 0x2, 0xfdc, 
       0xfdd, 0x7, 0x155, 0x2, 0x2, 0xfdd, 0xfde, 0x7, 0x39, 0x2, 0x2, 0xfde, 
       0xfe3, 0x5, 0x162, 0xb2, 0x2, 0xfdf, 0xfe0, 0x7, 0x3b3, 0x2, 0x2, 
       0xfe0, 0xfe2, 0x5, 0x162, 0xb2, 0x2, 0xfe1, 0xfdf, 0x3, 0x2, 0x2, 
       0x2, 0xfe2, 0xfe5, 0x3, 0x2, 0x2, 0x2, 0xfe3, 0xfe1, 0x3, 0x2, 0x2, 
       0x2, 0xfe3, 0xfe4, 0x3, 0x2, 0x2, 0x2, 0xfe4, 0xfe6, 0x3, 0x2, 0x2, 
       0x2, 0xfe5, 0xfe3, 0x3, 0x2, 0x2, 0x2, 0xfe6, 0xfe7, 0x5, 0x144, 
       0xa3, 0x2, 0xfe7, 0x161, 0x3, 0x2, 0x2, 0x2, 0xfe8, 0xff4, 0x5, 0x1e4, 
       0xf3, 0x2, 0xfe9, 0xfeb, 0x7, 0x8c, 0x2, 0x2, 0xfea, 0xfec, 0x7, 
       0x217, 0x2, 0x2, 0xfeb, 0xfea, 0x3, 0x2, 0x2, 0x2, 0xfeb, 0xfec, 
       0x3, 0x2, 0x2, 0x2, 0xfec, 0xfed, 0x3, 0x2, 0x2, 0x2, 0xfed, 0xff4, 
       0x7, 0x3c0, 0x2, 0x2, 0xfee, 0xff4, 0x5, 0x1de, 0xf0, 0x2, 0xfef, 
       0xff4, 0x7, 0x8d, 0x2, 0x2, 0xff0, 0xff1, 0x7, 0x64, 0x2, 0x2, 0xff1, 
       0xff4, 0x7, 0x14e, 0x2, 0x2, 0xff2, 0xff4, 0x7, 0x8b, 0x2, 0x2, 0xff3, 
       0xfe8, 0x3, 0x2, 0x2, 0x2, 0xff3, 0xfe9, 0x3, 0x2, 0x2, 0x2, 0xff3, 
       0xfee, 0x3, 0x2, 0x2, 0x2, 0xff3, 0xfef, 0x3, 0x2, 0x2, 0x2, 0xff3, 
       0xff0, 0x3, 0x2, 0x2, 0x2, 0xff3, 0xff2, 0x3, 0x2, 0x2, 0x2, 0xff4, 
       0x163, 0x3, 0x2, 0x2, 0x2, 0xff5, 0xff8, 0x5, 0x14, 0xb, 0x2, 0xff6, 
       0xff8, 0x5, 0x6, 0x4, 0x2, 0xff7, 0xff5, 0x3, 0x2, 0x2, 0x2, 0xff7, 
       0xff6, 0x3, 0x2, 0x2, 0x2, 0xff8, 0xff9, 0x3, 0x2, 0x2, 0x2, 0xff9, 
       0xffa, 0x7, 0x3b4, 0x2, 0x2, 0xffa, 0x165, 0x3, 0x2, 0x2, 0x2, 0xffb, 
       0xffc, 0x7, 0x9, 0x2, 0x2, 0xffc, 0xffd, 0x7, 0x213, 0x2, 0x2, 0xffd, 
       0xffe, 0x5, 0x1cc, 0xe7, 0x2, 0xffe, 0x1005, 0x5, 0x178, 0xbd, 0x2, 
       0xfff, 0x1000, 0x7, 0x3b3, 0x2, 0x2, 0x1000, 0x1001, 0x5, 0x1cc, 
       0xe7, 0x2, 0x1001, 0x1002, 0x5, 0x178, 0xbd, 0x2, 0x1002, 0x1004, 
       0x3, 0x2, 0x2, 0x2, 0x1003, 0xfff, 0x3, 0x2, 0x2, 0x2, 0x1004, 0x1007, 
       0x3, 0x2, 0x2, 0x2, 0x1005, 0x1003, 0x3, 0x2, 0x2, 0x2, 0x1005, 0x1006, 
       0x3, 0x2, 0x2, 0x2, 0x1006, 0x1035, 0x3, 0x2, 0x2, 0x2, 0x1007, 0x1005, 
       0x3, 0x2, 0x2, 0x2, 0x1008, 0x1009, 0x7, 0x9, 0x2, 0x2, 0x1009, 0x100b, 
       0x7, 0x213, 0x2, 0x2, 0x100a, 0x100c, 0x5, 0x210, 0x109, 0x2, 0x100b, 
       0x100a, 0x3, 0x2, 0x2, 0x2, 0x100b, 0x100c, 0x3, 0x2, 0x2, 0x2, 0x100c, 
       0x100d, 0x3, 0x2, 0x2, 0x2, 0x100d, 0x1012, 0x5, 0x17a, 0xbe, 0x2, 
       0x100e, 0x100f, 0x7, 0x3b3, 0x2, 0x2, 0x100f, 0x1011, 0x5, 0x17a, 
       0xbe, 0x2, 0x1010, 0x100e, 0x3, 0x2, 0x2, 0x2, 0x1011, 0x1014, 0x3, 
       0x2, 0x2, 0x2, 0x1012, 0x1010, 0x3, 0x2, 0x2, 0x2, 0x1012, 0x1013, 
       0x3, 0x2, 0x2, 0x2, 0x1013, 0x1023, 0x3, 0x2, 0x2, 0x2, 0x1014, 0x1012, 
       0x3, 0x2, 0x2, 0x2, 0x1015, 0x1021, 0x7, 0x7d, 0x2, 0x2, 0x1016, 
       0x1022, 0x7, 0x19f, 0x2, 0x2, 0x1017, 0x101e, 0x5, 0x17c, 0xbf, 0x2, 
       0x1018, 0x101a, 0x7, 0xb, 0x2, 0x2, 0x1019, 0x1018, 0x3, 0x2, 0x2, 
       0x2, 0x1019, 0x101a, 0x3, 0x2, 0x2, 0x2, 0x101a, 0x101b, 0x3, 0x2, 
       0x2, 0x2, 0x101b, 0x101d, 0x5, 0x17c, 0xbf, 0x2, 0x101c, 0x1019, 
       0x3, 0x2, 0x2, 0x2, 0x101d, 0x1020, 0x3, 0x2, 0x2, 0x2, 0x101e, 0x101c, 
       0x3, 0x2, 0x2, 0x2, 0x101e, 0x101f, 0x3, 0x2, 0x2, 0x2, 0x101f, 0x1022, 
       0x3, 0x2, 0x2, 0x2, 0x1020, 0x101e, 0x3, 0x2, 0x2, 0x2, 0x1021, 0x1016, 
       0x3, 0x2, 0x2, 0x2, 0x1021, 0x1017, 0x3, 0x2, 0x2, 0x2, 0x1022, 0x1024, 
       0x3, 0x2, 0x2, 0x2, 0x1023, 0x1015, 0x3, 0x2, 0x2, 0x2, 0x1023, 0x1024, 
       0x3, 0x2, 0x2, 0x2, 0x1024, 0x102b, 0x3, 0x2, 0x2, 0x2, 0x1025, 0x1027, 
       0x7, 0xa8, 0x2, 0x2, 0x1026, 0x1028, 0x5, 0x17e, 0xc0, 0x2, 0x1027, 
       0x1026, 0x3, 0x2, 0x2, 0x2, 0x1028, 0x1029, 0x3, 0x2, 0x2, 0x2, 0x1029, 
       0x1027, 0x3, 0x2, 0x2, 0x2, 0x1029, 0x102a, 0x3, 0x2, 0x2, 0x2, 0x102a, 
       0x102c, 0x3, 0x2, 0x2, 0x2, 0x102b, 0x1025, 0x3, 0x2, 0x2, 0x2, 0x102b, 
       0x102c, 0x3, 0x2, 0x2, 0x2, 0x102c, 0x1031, 0x3, 0x2, 0x2, 0x2, 0x102d, 
       0x1030, 0x5, 0x178, 0xbd, 0x2, 0x102e, 0x1030, 0x5, 0x180, 0xc1, 
       0x2, 0x102f, 0x102d, 0x3, 0x2, 0x2, 0x2, 0x102f, 0x102e, 0x3, 0x2, 
       0x2, 0x2, 0x1030, 0x1033, 0x3, 0x2, 0x2, 0x2, 0x1031, 0x102f, 0x3, 
       0x2, 0x2, 0x2, 0x1031, 0x1032, 0x3, 0x2, 0x2, 0x2, 0x1032, 0x1035, 
       0x3, 0x2, 0x2, 0x2, 0x1033, 0x1031, 0x3, 0x2, 0x2, 0x2, 0x1034, 0xffb, 
       0x3, 0x2, 0x2, 0x2, 0x1034, 0x1008, 0x3, 0x2, 0x2, 0x2, 0x1035, 0x167, 
       0x3, 0x2, 0x2, 0x2, 0x1036, 0x1037, 0x7, 0x1f, 0x2, 0x2, 0x1037, 
       0x1038, 0x7, 0x213, 0x2, 0x2, 0x1038, 0x103d, 0x5, 0x17a, 0xbe, 0x2, 
       0x1039, 0x103a, 0x7, 0x3b3, 0x2, 0x2, 0x103a, 0x103c, 0x5, 0x17a, 
       0xbe, 0x2, 0x103b, 0x1039, 0x3, 0x2, 0x2, 0x2, 0x103c, 0x103f, 0x3, 
       0x2, 0x2, 0x2, 0x103d, 0x103b, 0x3, 0x2, 0x2, 0x2, 0x103d, 0x103e, 
       0x3, 0x2, 0x2, 0x2, 0x103e, 0x106d, 0x3, 0x2, 0x2, 0x2, 0x103f, 0x103d, 
       0x3, 0x2, 0x2, 0x2, 0x1040, 0x1041, 0x7, 0x1f, 0x2, 0x2, 0x1041, 
       0x1043, 0x7, 0x213, 0x2, 0x2, 0x1042, 0x1044, 0x5, 0x212, 0x10a, 
       0x2, 0x1043, 0x1042, 0x3, 0x2, 0x2, 0x2, 0x1043, 0x1044, 0x3, 0x2, 
       0x2, 0x2, 0x1044, 0x1045, 0x3, 0x2, 0x2, 0x2, 0x1045, 0x104a, 0x5, 
       0x17a, 0xbe, 0x2, 0x1046, 0x1047, 0x7, 0x3b3, 0x2, 0x2, 0x1047, 0x1049, 
       0x5, 0x17a, 0xbe, 0x2, 0x1048, 0x1046, 0x3, 0x2, 0x2, 0x2, 0x1049, 
       0x104c, 0x3, 0x2, 0x2, 0x2, 0x104a, 0x1048, 0x3, 0x2, 0x2, 0x2, 0x104a, 
       0x104b, 0x3, 0x2, 0x2, 0x2, 0x104b, 0x105b, 0x3, 0x2, 0x2, 0x2, 0x104c, 
       0x104a, 0x3, 0x2, 0x2, 0x2, 0x104d, 0x1059, 0x7, 0x7d, 0x2, 0x2, 
       0x104e, 0x105a, 0x7, 0x19f, 0x2, 0x2, 0x104f, 0x1056, 0x5, 0x17c, 
       0xbf, 0x2, 0x1050, 0x1052, 0x7, 0xb, 0x2, 0x2, 0x1051, 0x1050, 0x3, 
       0x2, 0x2, 0x2, 0x1051, 0x1052, 0x3, 0x2, 0x2, 0x2, 0x1052, 0x1053, 
       0x3, 0x2, 0x2, 0x2, 0x1053, 0x1055, 0x5, 0x17c, 0xbf, 0x2, 0x1054, 
       0x1051, 0x3, 0x2, 0x2, 0x2, 0x1055, 0x1058, 0x3, 0x2, 0x2, 0x2, 0x1056, 
       0x1054, 0x3, 0x2, 0x2, 0x2, 0x1056, 0x1057, 0x3, 0x2, 0x2, 0x2, 0x1057, 
       0x105a, 0x3, 0x2, 0x2, 0x2, 0x1058, 0x1056, 0x3, 0x2, 0x2, 0x2, 0x1059, 
       0x104e, 0x3, 0x2, 0x2, 0x2, 0x1059, 0x104f, 0x3, 0x2, 0x2, 0x2, 0x105a, 
       0x105c, 0x3, 0x2, 0x2, 0x2, 0x105b, 0x104d, 0x3, 0x2, 0x2, 0x2, 0x105b, 
       0x105c, 0x3, 0x2, 0x2, 0x2, 0x105c, 0x1063, 0x3, 0x2, 0x2, 0x2, 0x105d, 
       0x105f, 0x7, 0xa8, 0x2, 0x2, 0x105e, 0x1060, 0x5, 0x17e, 0xc0, 0x2, 
       0x105f, 0x105e, 0x3, 0x2, 0x2, 0x2, 0x1060, 0x1061, 0x3, 0x2, 0x2, 
       0x2, 0x1061, 0x105f, 0x3, 0x2, 0x2, 0x2, 0x1061, 0x1062, 0x3, 0x2, 
       0x2, 0x2, 0x1062, 0x1064, 0x3, 0x2, 0x2, 0x2, 0x1063, 0x105d, 0x3, 
       0x2, 0x2, 0x2, 0x1063, 0x1064, 0x3, 0x2, 0x2, 0x2, 0x1064, 0x1069, 
       0x3, 0x2, 0x2, 0x2, 0x1065, 0x1068, 0x5, 0x178, 0xbd, 0x2, 0x1066, 
       0x1068, 0x5, 0x180, 0xc1, 0x2, 0x1067, 0x1065, 0x3, 0x2, 0x2, 0x2, 
       0x1067, 0x1066, 0x3, 0x2, 0x2, 0x2, 0x1068, 0x106b, 0x3, 0x2, 0x2, 
       0x2, 0x1069, 0x1067, 0x3, 0x2, 0x2, 0x2, 0x1069, 0x106a, 0x3, 0x2, 
       0x2, 0x2, 0x106a, 0x106d, 0x3, 0x2, 0x2, 0x2, 0x106b, 0x1069, 0x3, 
       0x2, 0x2, 0x2, 0x106c, 0x1036, 0x3, 0x2, 0x2, 0x2, 0x106c, 0x1040, 
       0x3, 0x2, 0x2, 0x2, 0x106d, 0x169, 0x3, 0x2, 0x2, 0x2, 0x106e, 0x106f, 
       0x7, 0x2e, 0x2, 0x2, 0x106f, 0x1071, 0x7, 0x213, 0x2, 0x2, 0x1070, 
       0x1072, 0x5, 0x210, 0x109, 0x2, 0x1071, 0x1070, 0x3, 0x2, 0x2, 0x2, 
       0x1071, 0x1072, 0x3, 0x2, 0x2, 0x2, 0x1072, 0x1073, 0x3, 0x2, 0x2, 
       0x2, 0x1073, 0x1078, 0x5, 0x1cc, 0xe7, 0x2, 0x1074, 0x1075, 0x7, 
       0x3b3, 0x2, 0x2, 0x1075, 0x1077, 0x5, 0x1cc, 0xe7, 0x2, 0x1076, 0x1074, 
       0x3, 0x2, 0x2, 0x2, 0x1077, 0x107a, 0x3, 0x2, 0x2, 0x2, 0x1078, 0x1076, 
       0x3, 0x2, 0x2, 0x2, 0x1078, 0x1079, 0x3, 0x2, 0x2, 0x2, 0x1079, 0x16b, 
       0x3, 0x2, 0x2, 0x2, 0x107a, 0x1078, 0x3, 0x2, 0x2, 0x2, 0x107b, 0x107c, 
       0x7, 0x3e, 0x2, 0x2, 0x107c, 0x1081, 0x5, 0x182, 0xc2, 0x2, 0x107d, 
       0x107e, 0x7, 0x3b3, 0x2, 0x2, 0x107e, 0x1080, 0x5, 0x182, 0xc2, 0x2, 
       0x107f, 0x107d, 0x3, 0x2, 0x2, 0x2, 0x1080, 0x1083, 0x3, 0x2, 0x2, 
       0x2, 0x1081, 0x107f, 0x3, 0x2, 0x2, 0x2, 0x1081, 0x1082, 0x3, 0x2, 
       0x2, 0x2, 0x1082, 0x1084, 0x3, 0x2, 0x2, 0x2, 0x1083, 0x1081, 0x3, 
       0x2, 0x2, 0x2, 0x1084, 0x1086, 0x7, 0x67, 0x2, 0x2, 0x1085, 0x1087, 
       0x9, 0x3c, 0x2, 0x2, 0x1086, 0x1085, 0x3, 0x2, 0x2, 0x2, 0x1086, 
       0x1087, 0x3, 0x2, 0x2, 0x2, 0x1087, 0x1088, 0x3, 0x2, 0x2, 0x2, 0x1088, 
       0x1089, 0x5, 0x186, 0xc4, 0x2, 0x1089, 0x108a, 0x7, 0x97, 0x2, 0x2, 
       0x108a, 0x108f, 0x5, 0x17a, 0xbe, 0x2, 0x108b, 0x108c, 0x7, 0x3b3, 
       0x2, 0x2, 0x108c, 0x108e, 0x5, 0x17a, 0xbe, 0x2, 0x108d, 0x108b, 
       0x3, 0x2, 0x2, 0x2, 0x108e, 0x1091, 0x3, 0x2, 0x2, 0x2, 0x108f, 0x108d, 
       0x3, 0x2, 0x2, 0x2, 0x108f, 0x1090, 0x3, 0x2, 0x2, 0x2, 0x1090, 0x10a0, 
       0x3, 0x2, 0x2, 0x2, 0x1091, 0x108f, 0x3, 0x2, 0x2, 0x2, 0x1092, 0x109e, 
       0x7, 0x7d, 0x2, 0x2, 0x1093, 0x109f, 0x7, 0x19f, 0x2, 0x2, 0x1094, 
       0x109b, 0x5, 0x17c, 0xbf, 0x2, 0x1095, 0x1097, 0x7, 0xb, 0x2, 0x2, 
       0x1096, 0x1095, 0x3, 0x2, 0x2, 0x2, 0x1096, 0x1097, 0x3, 0x2, 0x2, 
       0x2, 0x1097, 0x1098, 0x3, 0x2, 0x2, 0x2, 0x1098, 0x109a, 0x5, 0x17c, 
       0xbf, 0x2, 0x1099, 0x1096, 0x3, 0x2, 0x2, 0x2, 0x109a, 0x109d, 0x3, 
       0x2, 0x2, 0x2, 0x109b, 0x1099, 0x3, 0x2, 0x2, 0x2, 0x109b, 0x109c, 
       0x3, 0x2, 0x2, 0x2, 0x109c, 0x109f, 0x3, 0x2, 0x2, 0x2, 0x109d, 0x109b, 
       0x3, 0x2, 0x2, 0x2, 0x109e, 0x1093, 0x3, 0x2, 0x2, 0x2, 0x109e, 0x1094, 
       0x3, 0x2, 0x2, 0x2, 0x109f, 0x10a1, 0x3, 0x2, 0x2, 0x2, 0x10a0, 0x1092, 
       0x3, 0x2, 0x2, 0x2, 0x10a0, 0x10a1, 0x3, 0x2, 0x2, 0x2, 0x10a1, 0x10ab, 
       0x3, 0x2, 0x2, 0x2, 0x10a2, 0x10a8, 0x7, 0xa8, 0x2, 0x2, 0x10a3, 
       0x10a4, 0x7, 0x3e, 0x2, 0x2, 0x10a4, 0x10a7, 0x7, 0x69, 0x2, 0x2, 
       0x10a5, 0x10a7, 0x5, 0x17e, 0xc0, 0x2, 0x10a6, 0x10a3, 0x3, 0x2, 
       0x2, 0x2, 0x10a6, 0x10a5, 0x3, 0x2, 0x2, 0x2, 0x10a7, 0x10aa, 0x3, 
       0x2, 0x2, 0x2, 0x10a8, 0x10a6, 0x3, 0x2, 0x2, 0x2, 0x10a8, 0x10a9, 
       0x3, 0x2, 0x2, 0x2, 0x10a9, 0x10ac, 0x3, 0x2, 0x2, 0x2, 0x10aa, 0x10a8, 
       0x3, 0x2, 0x2, 0x2, 0x10ab, 0x10a2, 0x3, 0x2, 0x2, 0x2, 0x10ab, 0x10ac, 
       0x3, 0x2, 0x2, 0x2, 0x10ac, 0x16d, 0x3, 0x2, 0x2, 0x2, 0x10ad, 0x10ae, 
       0x7, 0x3e, 0x2, 0x2, 0x10ae, 0x10af, 0x7, 0x1be, 0x2, 0x2, 0x10af, 
       0x10b0, 0x7, 0x67, 0x2, 0x2, 0x10b0, 0x10b1, 0x5, 0x1cc, 0xe7, 0x2, 
       0x10b1, 0x10b2, 0x7, 0x97, 0x2, 0x2, 0x10b2, 0x10b7, 0x5, 0x1cc, 
       0xe7, 0x2, 0x10b3, 0x10b4, 0x7, 0x3b3, 0x2, 0x2, 0x10b4, 0x10b6, 
       0x5, 0x1cc, 0xe7, 0x2, 0x10b5, 0x10b3, 0x3, 0x2, 0x2, 0x2, 0x10b6, 
       0x10b9, 0x3, 0x2, 0x2, 0x2, 0x10b7, 0x10b5, 0x3, 0x2, 0x2, 0x2, 0x10b7, 
       0x10b8, 0x3, 0x2, 0x2, 0x2, 0x10b8, 0x10bd, 0x3, 0x2, 0x2, 0x2, 0x10b9, 
       0x10b7, 0x3, 0x2, 0x2, 0x2, 0x10ba, 0x10bb, 0x7, 0xa8, 0x2, 0x2, 
       0x10bb, 0x10bc, 0x7, 0x3e, 0x2, 0x2, 0x10bc, 0x10be, 0x7, 0x69, 0x2, 
       0x2, 0x10bd, 0x10ba, 0x3, 0x2, 0x2, 0x2, 0x10bd, 0x10be, 0x3, 0x2, 
       0x2, 0x2, 0x10be, 0x16f, 0x3, 0x2, 0x2, 0x2, 0x10bf, 0x10c0, 0x7, 
       0x7a, 0x2, 0x2, 0x10c0, 0x10c1, 0x7, 0x213, 0x2, 0x2, 0x10c1, 0x10c2, 
       0x5, 0x1cc, 0xe7, 0x2, 0x10c2, 0x10c3, 0x7, 0x97, 0x2, 0x2, 0x10c3, 
       0x10c4, 0x5, 0x1cc, 0xe7, 0x2, 0x10c4, 0x10c5, 0x7, 0x3b3, 0x2, 0x2, 
       0x10c5, 0x10c6, 0x5, 0x1cc, 0xe7, 0x2, 0x10c6, 0x10c7, 0x7, 0x97, 
       0x2, 0x2, 0x10c7, 0x10c8, 0x5, 0x1cc, 0xe7, 0x2, 0x10c8, 0x171, 0x3, 
       0x2, 0x2, 0x2, 0x10c9, 0x10ca, 0x7, 0x80, 0x2, 0x2, 0x10ca, 0x10cf, 
       0x5, 0x182, 0xc2, 0x2, 0x10cb, 0x10cc, 0x7, 0x3b3, 0x2, 0x2, 0x10cc, 
       0x10ce, 0x5, 0x182, 0xc2, 0x2, 0x10cd, 0x10cb, 0x3, 0x2, 0x2, 0x2, 
       0x10ce, 0x10d1, 0x3, 0x2, 0x2, 0x2, 0x10cf, 0x10cd, 0x3, 0x2, 0x2, 
       0x2, 0x10cf, 0x10d0, 0x3, 0x2, 0x2, 0x2, 0x10d0, 0x10d2, 0x3, 0x2, 
       0x2, 0x2, 0x10d1, 0x10cf, 0x3, 0x2, 0x2, 0x2, 0x10d2, 0x10d4, 0x7, 
       0x67, 0x2, 0x2, 0x10d3, 0x10d5, 0x9, 0x3c, 0x2, 0x2, 0x10d4, 0x10d3, 
       0x3, 0x2, 0x2, 0x2, 0x10d4, 0x10d5, 0x3, 0x2, 0x2, 0x2, 0x10d5, 0x10d6, 
       0x3, 0x2, 0x2, 0x2, 0x10d6, 0x10d7, 0x5, 0x186, 0xc4, 0x2, 0x10d7, 
       0x10d8, 0x7, 0x3c, 0x2, 0x2, 0x10d8, 0x10dd, 0x5, 0x1cc, 0xe7, 0x2, 
       0x10d9, 0x10da, 0x7, 0x3b3, 0x2, 0x2, 0x10da, 0x10dc, 0x5, 0x1cc, 
       0xe7, 0x2, 0x10db, 0x10d9, 0x3, 0x2, 0x2, 0x2, 0x10dc, 0x10df, 0x3, 
       0x2, 0x2, 0x2, 0x10dd, 0x10db, 0x3, 0x2, 0x2, 0x2, 0x10dd, 0x10de, 
       0x3, 0x2, 0x2, 0x2, 0x10de, 0x10f2, 0x3, 0x2, 0x2, 0x2, 0x10df, 0x10dd, 
       0x3, 0x2, 0x2, 0x2, 0x10e0, 0x10e1, 0x7, 0x80, 0x2, 0x2, 0x10e1, 
       0x10e3, 0x7, 0x8, 0x2, 0x2, 0x10e2, 0x10e4, 0x7, 0x237, 0x2, 0x2, 
       0x10e3, 0x10e2, 0x3, 0x2, 0x2, 0x2, 0x10e3, 0x10e4, 0x3, 0x2, 0x2, 
       0x2, 0x10e4, 0x10e5, 0x3, 0x2, 0x2, 0x2, 0x10e5, 0x10e6, 0x7, 0x3b3, 
       0x2, 0x2, 0x10e6, 0x10e7, 0x7, 0x3e, 0x2, 0x2, 0x10e7, 0x10e8, 0x7, 
       0x69, 0x2, 0x2, 0x10e8, 0x10e9, 0x7, 0x3c, 0x2, 0x2, 0x10e9, 0x10ee, 
       0x5, 0x1cc, 0xe7, 0x2, 0x10ea, 0x10eb, 0x7, 0x3b3, 0x2, 0x2, 0x10eb, 
       0x10ed, 0x5, 0x1cc, 0xe7, 0x2, 0x10ec, 0x10ea, 0x3, 0x2, 0x2, 0x2, 
       0x10ed, 0x10f0, 0x3, 0x2, 0x2, 0x2, 0x10ee, 0x10ec, 0x3, 0x2, 0x2, 
       0x2, 0x10ee, 0x10ef, 0x3, 0x2, 0x2, 0x2, 0x10ef, 0x10f2, 0x3, 0x2, 
       0x2, 0x2, 0x10f0, 0x10ee, 0x3, 0x2, 0x2, 0x2, 0x10f1, 0x10c9, 0x3, 
       0x2, 0x2, 0x2, 0x10f1, 0x10e0, 0x3, 0x2, 0x2, 0x2, 0x10f2, 0x173, 
       0x3, 0x2, 0x2, 0x2, 0x10f3, 0x10f4, 0x7, 0x80, 0x2, 0x2, 0x10f4, 
       0x10f5, 0x7, 0x1be, 0x2, 0x2, 0x10f5, 0x10f6, 0x7, 0x67, 0x2, 0x2, 
       0x10f6, 0x10f7, 0x5, 0x1cc, 0xe7, 0x2, 0x10f7, 0x10f8, 0x7, 0x3c, 
       0x2, 0x2, 0x10f8, 0x10fd, 0x5, 0x1cc, 0xe7, 0x2, 0x10f9, 0x10fa, 
       0x7, 0x3b3, 0x2, 0x2, 0x10fa, 0x10fc, 0x5, 0x1cc, 0xe7, 0x2, 0x10fb, 
       0x10f9, 0x3, 0x2, 0x2, 0x2, 0x10fc, 0x10ff, 0x3, 0x2, 0x2, 0x2, 0x10fd, 
       0x10fb, 0x3, 0x2, 0x2, 0x2, 0x10fd, 0x10fe, 0x3, 0x2, 0x2, 0x2, 0x10fe, 
       0x175, 0x3, 0x2, 0x2, 0x2, 0x10ff, 0x10fd, 0x3, 0x2, 0x2, 0x2, 0x1100, 
       0x1101, 0x7, 0x86, 0x2, 0x2, 0x1101, 0x1104, 0x7, 0x1b1, 0x2, 0x2, 
       0x1102, 0x1103, 0x7, 0x39, 0x2, 0x2, 0x1103, 0x1105, 0x5, 0x1cc, 
       0xe7, 0x2, 0x1104, 0x1102, 0x3, 0x2, 0x2, 0x2, 0x1104, 0x1105, 0x3, 
       0x2, 0x2, 
  };
  static uint16_t serializedATNSegment2[] = {
    0x2, 0x1105, 0x1106, 0x3, 0x2, 0x2, 0x2, 0x1106, 0x1107, 0x7, 0x3a8, 
       0x2, 0x2, 0x1107, 0x1108, 0x5, 0x188, 0xc5, 0x2, 0x1108, 0x177, 0x3, 
       0x2, 0x2, 0x2, 0x1109, 0x110a, 0x7, 0x1b1, 0x2, 0x2, 0x110a, 0x1111, 
       0x7, 0x141, 0x2, 0x2, 0x110b, 0x1112, 0x7, 0x26, 0x2, 0x2, 0x110c, 
       0x1112, 0x7, 0x19b, 0x2, 0x2, 0x110d, 0x110e, 0x7, 0x4a, 0x2, 0x2, 
       0x110e, 0x110f, 0x5, 0x1e4, 0xf3, 0x2, 0x110f, 0x1110, 0x7, 0x229, 
       0x2, 0x2, 0x1110, 0x1112, 0x3, 0x2, 0x2, 0x2, 0x1111, 0x110b, 0x3, 
       0x2, 0x2, 0x2, 0x1111, 0x110c, 0x3, 0x2, 0x2, 0x2, 0x1111, 0x110d, 
       0x3, 0x2, 0x2, 0x2, 0x1111, 0x1112, 0x3, 0x2, 0x2, 0x2, 0x1112, 0x179, 
       0x3, 0x2, 0x2, 0x2, 0x1113, 0x1114, 0x5, 0x1cc, 0xe7, 0x2, 0x1114, 
       0x1115, 0x7, 0x15a, 0x2, 0x2, 0x1115, 0x1116, 0x7, 0x11, 0x2, 0x2, 
       0x1116, 0x1117, 0x7, 0x1b1, 0x2, 0x2, 0x1117, 0x1118, 0x7, 0x3c0, 
       0x2, 0x2, 0x1118, 0x112b, 0x3, 0x2, 0x2, 0x2, 0x1119, 0x111a, 0x5, 
       0x1cc, 0xe7, 0x2, 0x111a, 0x111d, 0x7, 0x15a, 0x2, 0x2, 0x111b, 0x111c, 
       0x7, 0xa8, 0x2, 0x2, 0x111c, 0x111e, 0x5, 0x1dc, 0xef, 0x2, 0x111d, 
       0x111b, 0x3, 0x2, 0x2, 0x2, 0x111d, 0x111e, 0x3, 0x2, 0x2, 0x2, 0x111e, 
       0x111f, 0x3, 0x2, 0x2, 0x2, 0x111f, 0x1120, 0x7, 0x11, 0x2, 0x2, 
       0x1120, 0x1121, 0x7, 0x3c0, 0x2, 0x2, 0x1121, 0x112b, 0x3, 0x2, 0x2, 
       0x2, 0x1122, 0x1123, 0x5, 0x1cc, 0xe7, 0x2, 0x1123, 0x1124, 0x7, 
       0x15a, 0x2, 0x2, 0x1124, 0x1125, 0x7, 0xa8, 0x2, 0x2, 0x1125, 0x1128, 
       0x5, 0x1dc, 0xef, 0x2, 0x1126, 0x1127, 0x7, 0xc, 0x2, 0x2, 0x1127, 
       0x1129, 0x7, 0x3c0, 0x2, 0x2, 0x1128, 0x1126, 0x3, 0x2, 0x2, 0x2, 
       0x1128, 0x1129, 0x3, 0x2, 0x2, 0x2, 0x1129, 0x112b, 0x3, 0x2, 0x2, 
       0x2, 0x112a, 0x1113, 0x3, 0x2, 0x2, 0x2, 0x112a, 0x1119, 0x3, 0x2, 
       0x2, 0x2, 0x112a, 0x1122, 0x3, 0x2, 0x2, 0x2, 0x112b, 0x17b, 0x3, 
       0x2, 0x2, 0x2, 0x112c, 0x1135, 0x7, 0x91, 0x2, 0x2, 0x112d, 0x1135, 
       0x7, 0x21f, 0x2, 0x2, 0x112e, 0x112f, 0x7, 0x10e, 0x2, 0x2, 0x112f, 
       0x1135, 0x7, 0x3c0, 0x2, 0x2, 0x1130, 0x1131, 0x7, 0x168, 0x2, 0x2, 
       0x1131, 0x1135, 0x7, 0x3c0, 0x2, 0x2, 0x1132, 0x1133, 0x7, 0x1fe, 
       0x2, 0x2, 0x1133, 0x1135, 0x7, 0x3c0, 0x2, 0x2, 0x1134, 0x112c, 0x3, 
       0x2, 0x2, 0x2, 0x1134, 0x112d, 0x3, 0x2, 0x2, 0x2, 0x1134, 0x112e, 
       0x3, 0x2, 0x2, 0x2, 0x1134, 0x1130, 0x3, 0x2, 0x2, 0x2, 0x1134, 0x1132, 
       0x3, 0x2, 0x2, 0x2, 0x1135, 0x17d, 0x3, 0x2, 0x2, 0x2, 0x1136, 0x1137, 
       0x7, 0x18a, 0x2, 0x2, 0x1137, 0x113f, 0x5, 0x1e4, 0xf3, 0x2, 0x1138, 
       0x1139, 0x7, 0x18d, 0x2, 0x2, 0x1139, 0x113f, 0x5, 0x1e4, 0xf3, 0x2, 
       0x113a, 0x113b, 0x7, 0x189, 0x2, 0x2, 0x113b, 0x113f, 0x5, 0x1e4, 
       0xf3, 0x2, 0x113c, 0x113d, 0x7, 0x18e, 0x2, 0x2, 0x113d, 0x113f, 
       0x5, 0x1e4, 0xf3, 0x2, 0x113e, 0x1136, 0x3, 0x2, 0x2, 0x2, 0x113e, 
       0x1138, 0x3, 0x2, 0x2, 0x2, 0x113e, 0x113a, 0x3, 0x2, 0x2, 0x2, 0x113e, 
       0x113c, 0x3, 0x2, 0x2, 0x2, 0x113f, 0x17f, 0x3, 0x2, 0x2, 0x2, 0x1140, 
       0x1141, 0x7, 0xf7, 0x2, 0x2, 0x1141, 0x1142, 0x9, 0x3d, 0x2, 0x2, 
       0x1142, 0x181, 0x3, 0x2, 0x2, 0x2, 0x1143, 0x1148, 0x5, 0x184, 0xc3, 
       0x2, 0x1144, 0x1145, 0x7, 0x3b1, 0x2, 0x2, 0x1145, 0x1146, 0x5, 0x1fe, 
       0x100, 0x2, 0x1146, 0x1147, 0x7, 0x3b2, 0x2, 0x2, 0x1147, 0x1149, 
       0x3, 0x2, 0x2, 0x2, 0x1148, 0x1144, 0x3, 0x2, 0x2, 0x2, 0x1148, 0x1149, 
       0x3, 0x2, 0x2, 0x2, 0x1149, 0x183, 0x3, 0x2, 0x2, 0x2, 0x114a, 0x114c, 
       0x7, 0x8, 0x2, 0x2, 0x114b, 0x114d, 0x7, 0x237, 0x2, 0x2, 0x114c, 
       0x114b, 0x3, 0x2, 0x2, 0x2, 0x114c, 0x114d, 0x3, 0x2, 0x2, 0x2, 0x114d, 
       0x1175, 0x3, 0x2, 0x2, 0x2, 0x114e, 0x1150, 0x7, 0x9, 0x2, 0x2, 0x114f, 
       0x1151, 0x7, 0x230, 0x2, 0x2, 0x1150, 0x114f, 0x3, 0x2, 0x2, 0x2, 
       0x1150, 0x1151, 0x3, 0x2, 0x2, 0x2, 0x1151, 0x1175, 0x3, 0x2, 0x2, 
       0x2, 0x1152, 0x1159, 0x7, 0x1f, 0x2, 0x2, 0x1153, 0x1154, 0x7, 0x205, 
       0x2, 0x2, 0x1154, 0x115a, 0x7, 0x22f, 0x2, 0x2, 0x1155, 0x115a, 0x7, 
       0x230, 0x2, 0x2, 0x1156, 0x115a, 0x7, 0x219, 0x2, 0x2, 0x1157, 0x115a, 
       0x7, 0x213, 0x2, 0x2, 0x1158, 0x115a, 0x7, 0x204, 0x2, 0x2, 0x1159, 
       0x1153, 0x3, 0x2, 0x2, 0x2, 0x1159, 0x1155, 0x3, 0x2, 0x2, 0x2, 0x1159, 
       0x1156, 0x3, 0x2, 0x2, 0x2, 0x1159, 0x1157, 0x3, 0x2, 0x2, 0x2, 0x1159, 
       0x1158, 0x3, 0x2, 0x2, 0x2, 0x1159, 0x115a, 0x3, 0x2, 0x2, 0x2, 0x115a, 
       0x1175, 0x3, 0x2, 0x2, 0x2, 0x115b, 0x1175, 0x7, 0x28, 0x2, 0x2, 
       0x115c, 0x1175, 0x7, 0x2e, 0x2, 0x2, 0x115d, 0x1175, 0x7, 0x13c, 
       0x2, 0x2, 0x115e, 0x1175, 0x7, 0x231, 0x2, 0x2, 0x115f, 0x1175, 0x7, 
       0x232, 0x2, 0x2, 0x1160, 0x1161, 0x7, 0x3e, 0x2, 0x2, 0x1161, 0x1175, 
       0x7, 0x69, 0x2, 0x2, 0x1162, 0x1175, 0x7, 0x45, 0x2, 0x2, 0x1163, 
       0x1175, 0x7, 0x49, 0x2, 0x2, 0x1164, 0x1165, 0x7, 0x5a, 0x2, 0x2, 
       0x1165, 0x1175, 0x7, 0x22f, 0x2, 0x2, 0x1166, 0x1175, 0x7, 0x233, 
       0x2, 0x2, 0x1167, 0x1175, 0x7, 0x1be, 0x2, 0x2, 0x1168, 0x1175, 0x7, 
       0x77, 0x2, 0x2, 0x1169, 0x1175, 0x7, 0x234, 0x2, 0x2, 0x116a, 0x116b, 
       0x7, 0x1d3, 0x2, 0x2, 0x116b, 0x1175, 0x9, 0x3e, 0x2, 0x2, 0x116c, 
       0x1175, 0x7, 0x85, 0x2, 0x2, 0x116d, 0x116e, 0x7, 0x88, 0x2, 0x2, 
       0x116e, 0x1175, 0x9, 0x3f, 0x2, 0x2, 0x116f, 0x1175, 0x7, 0x235, 
       0x2, 0x2, 0x1170, 0x1175, 0x7, 0x236, 0x2, 0x2, 0x1171, 0x1175, 0x7, 
       0x99, 0x2, 0x2, 0x1172, 0x1175, 0x7, 0xa0, 0x2, 0x2, 0x1173, 0x1175, 
       0x7, 0xa1, 0x2, 0x2, 0x1174, 0x114a, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x114e, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x1152, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x115b, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x115c, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x115d, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x115e, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x115f, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x1160, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x1162, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x1163, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x1164, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x1166, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x1167, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x1168, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x1169, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x116a, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x116c, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x116d, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x116f, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x1170, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x1171, 0x3, 0x2, 0x2, 0x2, 0x1174, 0x1172, 0x3, 0x2, 0x2, 0x2, 0x1174, 
       0x1173, 0x3, 0x2, 0x2, 0x2, 0x1175, 0x185, 0x3, 0x2, 0x2, 0x2, 0x1176, 
       0x1184, 0x7, 0x3a1, 0x2, 0x2, 0x1177, 0x1178, 0x7, 0x3a1, 0x2, 0x2, 
       0x1178, 0x1179, 0x7, 0x3b0, 0x2, 0x2, 0x1179, 0x1184, 0x7, 0x3a1, 
       0x2, 0x2, 0x117a, 0x117b, 0x5, 0x1de, 0xf0, 0x2, 0x117b, 0x117c, 
       0x7, 0x3b0, 0x2, 0x2, 0x117c, 0x117d, 0x7, 0x3a1, 0x2, 0x2, 0x117d, 
       0x1184, 0x3, 0x2, 0x2, 0x2, 0x117e, 0x117f, 0x5, 0x1de, 0xf0, 0x2, 
       0x117f, 0x1180, 0x7, 0x3b0, 0x2, 0x2, 0x1180, 0x1181, 0x5, 0x1de, 
       0xf0, 0x2, 0x1181, 0x1184, 0x3, 0x2, 0x2, 0x2, 0x1182, 0x1184, 0x5, 
       0x1de, 0xf0, 0x2, 0x1183, 0x1176, 0x3, 0x2, 0x2, 0x2, 0x1183, 0x1177, 
       0x3, 0x2, 0x2, 0x2, 0x1183, 0x117a, 0x3, 0x2, 0x2, 0x2, 0x1183, 0x117e, 
       0x3, 0x2, 0x2, 0x2, 0x1183, 0x1182, 0x3, 0x2, 0x2, 0x2, 0x1184, 0x187, 
       0x3, 0x2, 0x2, 0x2, 0x1185, 0x1186, 0x9, 0x40, 0x2, 0x2, 0x1186, 
       0x1187, 0x7, 0x3b1, 0x2, 0x2, 0x1187, 0x1188, 0x7, 0x3c0, 0x2, 0x2, 
       0x1188, 0x118b, 0x7, 0x3b2, 0x2, 0x2, 0x1189, 0x118b, 0x7, 0x3c0, 
       0x2, 0x2, 0x118a, 0x1185, 0x3, 0x2, 0x2, 0x2, 0x118a, 0x1189, 0x3, 
       0x2, 0x2, 0x2, 0x118b, 0x189, 0x3, 0x2, 0x2, 0x2, 0x118c, 0x118e, 
       0x7, 0xa, 0x2, 0x2, 0x118d, 0x118f, 0x9, 0x41, 0x2, 0x2, 0x118e, 
       0x118d, 0x3, 0x2, 0x2, 0x2, 0x118e, 0x118f, 0x3, 0x2, 0x2, 0x2, 0x118f, 
       0x1190, 0x3, 0x2, 0x2, 0x2, 0x1190, 0x1191, 0x7, 0x94, 0x2, 0x2, 
       0x1191, 0x1192, 0x5, 0x200, 0x101, 0x2, 0x1192, 0x18b, 0x3, 0x2, 
       0x2, 0x2, 0x1193, 0x1194, 0x7, 0x18, 0x2, 0x2, 0x1194, 0x1195, 0x7, 
       0x94, 0x2, 0x2, 0x1195, 0x1199, 0x5, 0x200, 0x101, 0x2, 0x1196, 0x1198, 
       0x5, 0x194, 0xcb, 0x2, 0x1197, 0x1196, 0x3, 0x2, 0x2, 0x2, 0x1198, 
       0x119b, 0x3, 0x2, 0x2, 0x2, 0x1199, 0x1197, 0x3, 0x2, 0x2, 0x2, 0x1199, 
       0x119a, 0x3, 0x2, 0x2, 0x2, 0x119a, 0x18d, 0x3, 0x2, 0x2, 0x2, 0x119b, 
       0x1199, 0x3, 0x2, 0x2, 0x2, 0x119c, 0x119d, 0x7, 0x10d, 0x2, 0x2, 
       0x119d, 0x119e, 0x7, 0x94, 0x2, 0x2, 0x119e, 0x11a0, 0x5, 0x200, 
       0x101, 0x2, 0x119f, 0x11a1, 0x9, 0x42, 0x2, 0x2, 0x11a0, 0x119f, 
       0x3, 0x2, 0x2, 0x2, 0x11a0, 0x11a1, 0x3, 0x2, 0x2, 0x2, 0x11a1, 0x18f, 
       0x3, 0x2, 0x2, 0x2, 0x11a2, 0x11a4, 0x7, 0x68, 0x2, 0x2, 0x11a3, 
       0x11a5, 0x9, 0x41, 0x2, 0x2, 0x11a4, 0x11a3, 0x3, 0x2, 0x2, 0x2, 
       0x11a4, 0x11a5, 0x3, 0x2, 0x2, 0x2, 0x11a5, 0x11a6, 0x3, 0x2, 0x2, 
       0x2, 0x11a6, 0x11a7, 0x7, 0x94, 0x2, 0x2, 0x11a7, 0x11a8, 0x5, 0x200, 
       0x101, 0x2, 0x11a8, 0x191, 0x3, 0x2, 0x2, 0x2, 0x11a9, 0x11ab, 0x7, 
       0x1cb, 0x2, 0x2, 0x11aa, 0x11ac, 0x9, 0x41, 0x2, 0x2, 0x11ab, 0x11aa, 
       0x3, 0x2, 0x2, 0x2, 0x11ab, 0x11ac, 0x3, 0x2, 0x2, 0x2, 0x11ac, 0x11ad, 
       0x3, 0x2, 0x2, 0x2, 0x11ad, 0x11ae, 0x7, 0x94, 0x2, 0x2, 0x11ae, 
       0x11b0, 0x5, 0x200, 0x101, 0x2, 0x11af, 0x11b1, 0x7, 0x1c0, 0x2, 
       0x2, 0x11b0, 0x11af, 0x3, 0x2, 0x2, 0x2, 0x11b0, 0x11b1, 0x3, 0x2, 
       0x2, 0x2, 0x11b1, 0x11b3, 0x3, 0x2, 0x2, 0x2, 0x11b2, 0x11b4, 0x7, 
       0x143, 0x2, 0x2, 0x11b3, 0x11b2, 0x3, 0x2, 0x2, 0x2, 0x11b3, 0x11b4, 
       0x3, 0x2, 0x2, 0x2, 0x11b4, 0x11b6, 0x3, 0x2, 0x2, 0x2, 0x11b5, 0x11b7, 
       0x7, 0x214, 0x2, 0x2, 0x11b6, 0x11b5, 0x3, 0x2, 0x2, 0x2, 0x11b6, 
       0x11b7, 0x3, 0x2, 0x2, 0x2, 0x11b7, 0x193, 0x3, 0x2, 0x2, 0x2, 0x11b8, 
       0x11b9, 0x7, 0x39, 0x2, 0x2, 0x11b9, 0x11c0, 0x7, 0x212, 0x2, 0x2, 
       0x11ba, 0x11c0, 0x7, 0x1c0, 0x2, 0x2, 0x11bb, 0x11c0, 0x7, 0x145, 
       0x2, 0x2, 0x11bc, 0x11c0, 0x7, 0x18f, 0x2, 0x2, 0x11bd, 0x11c0, 0x7, 
       0x143, 0x2, 0x2, 0x11be, 0x11c0, 0x7, 0x10b, 0x2, 0x2, 0x11bf, 0x11b8, 
       0x3, 0x2, 0x2, 0x2, 0x11bf, 0x11ba, 0x3, 0x2, 0x2, 0x2, 0x11bf, 0x11bb, 
       0x3, 0x2, 0x2, 0x2, 0x11bf, 0x11bc, 0x3, 0x2, 0x2, 0x2, 0x11bf, 0x11bd, 
       0x3, 0x2, 0x2, 0x2, 0x11bf, 0x11be, 0x3, 0x2, 0x2, 0x2, 0x11c0, 0x195, 
       0x3, 0x2, 0x2, 0x2, 0x11c1, 0x11c3, 0x7, 0x1f, 0x2, 0x2, 0x11c2, 
       0x11c4, 0x7, 0xfa, 0x2, 0x2, 0x11c3, 0x11c2, 0x3, 0x2, 0x2, 0x2, 
       0x11c3, 0x11c4, 0x3, 0x2, 0x2, 0x2, 0x11c4, 0x11c5, 0x3, 0x2, 0x2, 
       0x2, 0x11c5, 0x11c6, 0x7, 0x150, 0x2, 0x2, 0x11c6, 0x11c7, 0x5, 0x1de, 
       0xf0, 0x2, 0x11c7, 0x11c8, 0x7, 0x1d6, 0x2, 0x2, 0x11c8, 0x11c9, 
       0x9, 0x43, 0x2, 0x2, 0x11c9, 0x11ca, 0x7, 0x1eb, 0x2, 0x2, 0x11ca, 
       0x11cb, 0x7, 0x3c0, 0x2, 0x2, 0x11cb, 0x197, 0x3, 0x2, 0x2, 0x2, 
       0x11cc, 0x11cd, 0x7, 0x161, 0x2, 0x2, 0x11cd, 0x11ce, 0x7, 0x1b3, 
       0x2, 0x2, 0x11ce, 0x11cf, 0x5, 0x1de, 0xf0, 0x2, 0x11cf, 0x11d0, 
       0x7, 0x1eb, 0x2, 0x2, 0x11d0, 0x11d1, 0x7, 0x3c0, 0x2, 0x2, 0x11d1, 
       0x199, 0x3, 0x2, 0x2, 0x2, 0x11d2, 0x11d3, 0x7, 0x20f, 0x2, 0x2, 
       0x11d3, 0x11d4, 0x7, 0x1b3, 0x2, 0x2, 0x11d4, 0x11d5, 0x5, 0x1de, 
       0xf0, 0x2, 0x11d5, 0x19b, 0x3, 0x2, 0x2, 0x2, 0x11d6, 0x11d7, 0x7, 
       0x86, 0x2, 0x2, 0x11d7, 0x11d8, 0x5, 0x1a0, 0xd1, 0x2, 0x11d8, 0x11d9, 
       0x7, 0x3a8, 0x2, 0x2, 0x11d9, 0x11e1, 0x5, 0x222, 0x112, 0x2, 0x11da, 
       0x11db, 0x7, 0x3b3, 0x2, 0x2, 0x11db, 0x11dc, 0x5, 0x1a0, 0xd1, 0x2, 
       0x11dc, 0x11dd, 0x7, 0x3a8, 0x2, 0x2, 0x11dd, 0x11de, 0x5, 0x222, 
       0x112, 0x2, 0x11de, 0x11e0, 0x3, 0x2, 0x2, 0x2, 0x11df, 0x11da, 0x3, 
       0x2, 0x2, 0x2, 0x11e0, 0x11e3, 0x3, 0x2, 0x2, 0x2, 0x11e1, 0x11df, 
       0x3, 0x2, 0x2, 0x2, 0x11e1, 0x11e2, 0x3, 0x2, 0x2, 0x2, 0x11e2, 0x11fc, 
       0x3, 0x2, 0x2, 0x2, 0x11e3, 0x11e1, 0x3, 0x2, 0x2, 0x2, 0x11e4, 0x11e8, 
       0x7, 0x86, 0x2, 0x2, 0x11e5, 0x11e6, 0x7, 0x17, 0x2, 0x2, 0x11e6, 
       0x11e9, 0x7, 0x86, 0x2, 0x2, 0x11e7, 0x11e9, 0x7, 0x292, 0x2, 0x2, 
       0x11e8, 0x11e5, 0x3, 0x2, 0x2, 0x2, 0x11e8, 0x11e7, 0x3, 0x2, 0x2, 
       0x2, 0x11e9, 0x11ec, 0x3, 0x2, 0x2, 0x2, 0x11ea, 0x11ed, 0x5, 0x1d0, 
       0xe9, 0x2, 0x11eb, 0x11ed, 0x7, 0x26, 0x2, 0x2, 0x11ec, 0x11ea, 0x3, 
       0x2, 0x2, 0x2, 0x11ec, 0x11eb, 0x3, 0x2, 0x2, 0x2, 0x11ed, 0x11fc, 
       0x3, 0x2, 0x2, 0x2, 0x11ee, 0x11ef, 0x7, 0x86, 0x2, 0x2, 0x11ef, 
       0x11f6, 0x7, 0x199, 0x2, 0x2, 0x11f0, 0x11f3, 0x5, 0x1d0, 0xe9, 0x2, 
       0x11f1, 0x11f2, 0x7, 0x19, 0x2, 0x2, 0x11f2, 0x11f4, 0x5, 0x1d2, 
       0xea, 0x2, 0x11f3, 0x11f1, 0x3, 0x2, 0x2, 0x2, 0x11f3, 0x11f4, 0x3, 
       0x2, 0x2, 0x2, 0x11f4, 0x11f7, 0x3, 0x2, 0x2, 0x2, 0x11f5, 0x11f7, 
       0x7, 0x26, 0x2, 0x2, 0x11f6, 0x11f0, 0x3, 0x2, 0x2, 0x2, 0x11f6, 
       0x11f5, 0x3, 0x2, 0x2, 0x2, 0x11f7, 0x11fc, 0x3, 0x2, 0x2, 0x2, 0x11f8, 
       0x11fc, 0x5, 0x176, 0xbc, 0x2, 0x11f9, 0x11fc, 0x5, 0x102, 0x82, 
       0x2, 0x11fa, 0x11fc, 0x5, 0x100, 0x81, 0x2, 0x11fb, 0x11d6, 0x3, 
       0x2, 0x2, 0x2, 0x11fb, 0x11e4, 0x3, 0x2, 0x2, 0x2, 0x11fb, 0x11ee, 
       0x3, 0x2, 0x2, 0x2, 0x11fb, 0x11f8, 0x3, 0x2, 0x2, 0x2, 0x11fb, 0x11f9, 
       0x3, 0x2, 0x2, 0x2, 0x11fb, 0x11fa, 0x3, 0x2, 0x2, 0x2, 0x11fc, 0x19d, 
       0x3, 0x2, 0x2, 0x2, 0x11fd, 0x11fe, 0x7, 0x88, 0x2, 0x2, 0x11fe, 
       0x11ff, 0x9, 0x30, 0x2, 0x2, 0x11ff, 0x12be, 0x7, 0x173, 0x2, 0x2, 
       0x1200, 0x1201, 0x7, 0x88, 0x2, 0x2, 0x1201, 0x1202, 0x9, 0x44, 0x2, 
       0x2, 0x1202, 0x1205, 0x7, 0x13d, 0x2, 0x2, 0x1203, 0x1204, 0x7, 0x44, 
       0x2, 0x2, 0x1204, 0x1206, 0x7, 0x3c0, 0x2, 0x2, 0x1205, 0x1203, 0x3, 
       0x2, 0x2, 0x2, 0x1205, 0x1206, 0x3, 0x2, 0x2, 0x2, 0x1206, 0x1209, 
       0x3, 0x2, 0x2, 0x2, 0x1207, 0x1208, 0x7, 0x3c, 0x2, 0x2, 0x1208, 
       0x120a, 0x5, 0x1e4, 0xf3, 0x2, 0x1209, 0x1207, 0x3, 0x2, 0x2, 0x2, 
       0x1209, 0x120a, 0x3, 0x2, 0x2, 0x2, 0x120a, 0x1212, 0x3, 0x2, 0x2, 
       0x2, 0x120b, 0x120f, 0x7, 0x56, 0x2, 0x2, 0x120c, 0x120d, 0x5, 0x1e4, 
       0xf3, 0x2, 0x120d, 0x120e, 0x7, 0x3b3, 0x2, 0x2, 0x120e, 0x1210, 
       0x3, 0x2, 0x2, 0x2, 0x120f, 0x120c, 0x3, 0x2, 0x2, 0x2, 0x120f, 0x1210, 
       0x3, 0x2, 0x2, 0x2, 0x1210, 0x1211, 0x3, 0x2, 0x2, 0x2, 0x1211, 0x1213, 
       0x5, 0x1e4, 0xf3, 0x2, 0x1212, 0x120b, 0x3, 0x2, 0x2, 0x2, 0x1212, 
       0x1213, 0x3, 0x2, 0x2, 0x2, 0x1213, 0x12be, 0x3, 0x2, 0x2, 0x2, 0x1214, 
       0x1222, 0x7, 0x88, 0x2, 0x2, 0x1215, 0x1216, 0x7, 0x17, 0x2, 0x2, 
       0x1216, 0x1223, 0x7, 0x86, 0x2, 0x2, 0x1217, 0x1223, 0x7, 0x295, 
       0x2, 0x2, 0x1218, 0x1223, 0x7, 0x24, 0x2, 0x2, 0x1219, 0x1223, 0x7, 
       0x84, 0x2, 0x2, 0x121a, 0x121b, 0x7, 0x150, 0x2, 0x2, 0x121b, 0x1223, 
       0x7, 0x1fa, 0x2, 0x2, 0x121c, 0x121d, 0x7, 0x72, 0x2, 0x2, 0x121d, 
       0x1223, 0x7, 0x1fa, 0x2, 0x2, 0x121e, 0x1220, 0x9, 0x2f, 0x2, 0x2, 
       0x121f, 0x121e, 0x3, 0x2, 0x2, 0x2, 0x121f, 0x1220, 0x3, 0x2, 0x2, 
       0x2, 0x1220, 0x1221, 0x3, 0x2, 0x2, 0x2, 0x1221, 0x1223, 0x9, 0x45, 
       0x2, 0x2, 0x1222, 0x1215, 0x3, 0x2, 0x2, 0x2, 0x1222, 0x1217, 0x3, 
       0x2, 0x2, 0x2, 0x1222, 0x1218, 0x3, 0x2, 0x2, 0x2, 0x1222, 0x1219, 
       0x3, 0x2, 0x2, 0x2, 0x1222, 0x121a, 0x3, 0x2, 0x2, 0x2, 0x1222, 0x121c, 
       0x3, 0x2, 0x2, 0x2, 0x1222, 0x121f, 0x3, 0x2, 0x2, 0x2, 0x1223, 0x1225, 
       0x3, 0x2, 0x2, 0x2, 0x1224, 0x1226, 0x5, 0x1a2, 0xd2, 0x2, 0x1225, 
       0x1224, 0x3, 0x2, 0x2, 0x2, 0x1225, 0x1226, 0x3, 0x2, 0x2, 0x2, 0x1226, 
       0x12be, 0x3, 0x2, 0x2, 0x2, 0x1227, 0x1229, 0x7, 0x88, 0x2, 0x2, 
       0x1228, 0x122a, 0x7, 0x14f, 0x2, 0x2, 0x1229, 0x1228, 0x3, 0x2, 0x2, 
       0x2, 0x1229, 0x122a, 0x3, 0x2, 0x2, 0x2, 0x122a, 0x122b, 0x3, 0x2, 
       0x2, 0x2, 0x122b, 0x122c, 0x9, 0x22, 0x2, 0x2, 0x122c, 0x122d, 0x9, 
       0x46, 0x2, 0x2, 0x122d, 0x1230, 0x5, 0x1c4, 0xe3, 0x2, 0x122e, 0x122f, 
       0x9, 0x46, 0x2, 0x2, 0x122f, 0x1231, 0x5, 0x1de, 0xf0, 0x2, 0x1230, 
       0x122e, 0x3, 0x2, 0x2, 0x2, 0x1230, 0x1231, 0x3, 0x2, 0x2, 0x2, 0x1231, 
       0x1233, 0x3, 0x2, 0x2, 0x2, 0x1232, 0x1234, 0x5, 0x1a2, 0xd2, 0x2, 
       0x1233, 0x1232, 0x3, 0x2, 0x2, 0x2, 0x1233, 0x1234, 0x3, 0x2, 0x2, 
       0x2, 0x1234, 0x12be, 0x3, 0x2, 0x2, 0x2, 0x1235, 0x1236, 0x7, 0x88, 
       0x2, 0x2, 0x1236, 0x1237, 0x7, 0x1f, 0x2, 0x2, 0x1237, 0x1239, 0x9, 
       0x2, 0x2, 0x2, 0x1238, 0x123a, 0x5, 0x212, 0x10a, 0x2, 0x1239, 0x1238, 
       0x3, 0x2, 0x2, 0x2, 0x1239, 0x123a, 0x3, 0x2, 0x2, 0x2, 0x123a, 0x123b, 
       0x3, 0x2, 0x2, 0x2, 0x123b, 0x12be, 0x5, 0x1de, 0xf0, 0x2, 0x123c, 
       0x123d, 0x7, 0x88, 0x2, 0x2, 0x123d, 0x123e, 0x7, 0x1f, 0x2, 0x2, 
       0x123e, 0x123f, 0x9, 0x47, 0x2, 0x2, 0x123f, 0x12be, 0x5, 0x1c6, 
       0xe4, 0x2, 0x1240, 0x1241, 0x7, 0x88, 0x2, 0x2, 0x1241, 0x1242, 0x7, 
       0x1f, 0x2, 0x2, 0x1242, 0x1243, 0x7, 0x213, 0x2, 0x2, 0x1243, 0x12be, 
       0x5, 0x1cc, 0xe7, 0x2, 0x1244, 0x1245, 0x7, 0x88, 0x2, 0x2, 0x1245, 
       0x1246, 0x7, 0x136, 0x2, 0x2, 0x1246, 0x1247, 0x5, 0x1d4, 0xeb, 0x2, 
       0x1247, 0x1248, 0x9, 0x48, 0x2, 0x2, 0x1248, 0x12be, 0x3, 0x2, 0x2, 
       0x2, 0x1249, 0x125b, 0x7, 0x88, 0x2, 0x2, 0x124a, 0x124c, 0x7, 0x1fc, 
       0x2, 0x2, 0x124b, 0x124a, 0x3, 0x2, 0x2, 0x2, 0x124b, 0x124c, 0x3, 
       0x2, 0x2, 0x2, 0x124c, 0x124d, 0x3, 0x2, 0x2, 0x2, 0x124d, 0x125c, 
       0x7, 0x137, 0x2, 0x2, 0x124e, 0x124f, 0x7, 0x174, 0x2, 0x2, 0x124f, 
       0x125c, 0x7, 0x1fa, 0x2, 0x2, 0x1250, 0x125c, 0x7, 0x1b5, 0x2, 0x2, 
       0x1251, 0x125c, 0x7, 0x237, 0x2, 0x2, 0x1252, 0x1254, 0x7, 0x14f, 
       0x2, 0x2, 0x1253, 0x1252, 0x3, 0x2, 0x2, 0x2, 0x1253, 0x1254, 0x3, 
       0x2, 0x2, 0x2, 0x1254, 0x1255, 0x3, 0x2, 0x2, 0x2, 0x1255, 0x125c, 
       0x7, 0x1bb, 0x2, 0x2, 0x1256, 0x125c, 0x7, 0x1bd, 0x2, 0x2, 0x1257, 
       0x1258, 0x7, 0x1e6, 0x2, 0x2, 0x1258, 0x125c, 0x7, 0x159, 0x2, 0x2, 
       0x1259, 0x125c, 0x7, 0xfe, 0x2, 0x2, 0x125a, 0x125c, 0x7, 0x120, 
       0x2, 0x2, 0x125b, 0x124b, 0x3, 0x2, 0x2, 0x2, 0x125b, 0x124e, 0x3, 
       0x2, 0x2, 0x2, 0x125b, 0x1250, 0x3, 0x2, 0x2, 0x2, 0x125b, 0x1251, 
       0x3, 0x2, 0x2, 0x2, 0x125b, 0x1253, 0x3, 0x2, 0x2, 0x2, 0x125b, 0x1256, 
       0x3, 0x2, 0x2, 0x2, 0x125b, 0x1257, 0x3, 0x2, 0x2, 0x2, 0x125b, 0x1259, 
       0x3, 0x2, 0x2, 0x2, 0x125b, 0x125a, 0x3, 0x2, 0x2, 0x2, 0x125c, 0x12be, 
       0x3, 0x2, 0x2, 0x2, 0x125d, 0x125e, 0x7, 0x88, 0x2, 0x2, 0x125e, 
       0x125f, 0x9, 0x49, 0x2, 0x2, 0x125f, 0x1263, 0x7, 0x56, 0x2, 0x2, 
       0x1260, 0x1261, 0x5, 0x1e4, 0xf3, 0x2, 0x1261, 0x1262, 0x7, 0x3b3, 
       0x2, 0x2, 0x1262, 0x1264, 0x3, 0x2, 0x2, 0x2, 0x1263, 0x1260, 0x3, 
       0x2, 0x2, 0x2, 0x1263, 0x1264, 0x3, 0x2, 0x2, 0x2, 0x1264, 0x1265, 
       0x3, 0x2, 0x2, 0x2, 0x1265, 0x12be, 0x5, 0x1e4, 0xf3, 0x2, 0x1266, 
       0x1267, 0x7, 0x88, 0x2, 0x2, 0x1267, 0x1268, 0x7, 0xd8, 0x2, 0x2, 
       0x1268, 0x1269, 0x7, 0x3b1, 0x2, 0x2, 0x1269, 0x126a, 0x7, 0x3a1, 
       0x2, 0x2, 0x126a, 0x126b, 0x7, 0x3b2, 0x2, 0x2, 0x126b, 0x12be, 0x9, 
       0x49, 0x2, 0x2, 0x126c, 0x1275, 0x7, 0x88, 0x2, 0x2, 0x126d, 0x1276, 
       0x7, 0x13d, 0x2, 0x2, 0x126e, 0x126f, 0x7, 0x94, 0x2, 0x2, 0x126f, 
       0x1276, 0x7, 0x1fa, 0x2, 0x2, 0x1270, 0x1272, 0x7, 0x14f, 0x2, 0x2, 
       0x1271, 0x1270, 0x3, 0x2, 0x2, 0x2, 0x1271, 0x1272, 0x3, 0x2, 0x2, 
       0x2, 0x1272, 0x1273, 0x3, 0x2, 0x2, 0x2, 0x1273, 0x1276, 0x7, 0x22f, 
       0x2, 0x2, 0x1274, 0x1276, 0x7, 0x20a, 0x2, 0x2, 0x1275, 0x126d, 0x3, 
       0x2, 0x2, 0x2, 0x1275, 0x126e, 0x3, 0x2, 0x2, 0x2, 0x1275, 0x1271, 
       0x3, 0x2, 0x2, 0x2, 0x1275, 0x1274, 0x3, 0x2, 0x2, 0x2, 0x1276, 0x1279, 
       0x3, 0x2, 0x2, 0x2, 0x1277, 0x1278, 0x9, 0x46, 0x2, 0x2, 0x1278, 
       0x127a, 0x5, 0x1de, 0xf0, 0x2, 0x1279, 0x1277, 0x3, 0x2, 0x2, 0x2, 
       0x1279, 0x127a, 0x3, 0x2, 0x2, 0x2, 0x127a, 0x127c, 0x3, 0x2, 0x2, 
       0x2, 0x127b, 0x127d, 0x5, 0x1a2, 0xd2, 0x2, 0x127c, 0x127b, 0x3, 
       0x2, 0x2, 0x2, 0x127c, 0x127d, 0x3, 0x2, 0x2, 0x2, 0x127d, 0x12be, 
       0x3, 0x2, 0x2, 0x2, 0x127e, 0x127f, 0x7, 0x88, 0x2, 0x2, 0x127f, 
       0x1280, 0x9, 0x4a, 0x2, 0x2, 0x1280, 0x1281, 0x7, 0x112, 0x2, 0x2, 
       0x1281, 0x12be, 0x5, 0x1c6, 0xe4, 0x2, 0x1282, 0x1283, 0x7, 0x88, 
       0x2, 0x2, 0x1283, 0x1286, 0x7, 0x153, 0x2, 0x2, 0x1284, 0x1285, 0x7, 
       0x39, 0x2, 0x2, 0x1285, 0x1287, 0x5, 0x1cc, 0xe7, 0x2, 0x1286, 0x1284, 
       0x3, 0x2, 0x2, 0x2, 0x1286, 0x1287, 0x3, 0x2, 0x2, 0x2, 0x1287, 0x12be, 
       0x3, 0x2, 0x2, 0x2, 0x1288, 0x1289, 0x7, 0x88, 0x2, 0x2, 0x1289, 
       0x128a, 0x9, 0x4b, 0x2, 0x2, 0x128a, 0x128b, 0x9, 0x46, 0x2, 0x2, 
       0x128b, 0x128e, 0x5, 0x1c4, 0xe3, 0x2, 0x128c, 0x128d, 0x9, 0x46, 
       0x2, 0x2, 0x128d, 0x128f, 0x5, 0x1de, 0xf0, 0x2, 0x128e, 0x128c, 
       0x3, 0x2, 0x2, 0x2, 0x128e, 0x128f, 0x3, 0x2, 0x2, 0x2, 0x128f, 0x1292, 
       0x3, 0x2, 0x2, 0x2, 0x1290, 0x1291, 0x7, 0xa6, 0x2, 0x2, 0x1291, 
       0x1293, 0x5, 0x222, 0x112, 0x2, 0x1292, 0x1290, 0x3, 0x2, 0x2, 0x2, 
       0x1292, 0x1293, 0x3, 0x2, 0x2, 0x2, 0x1293, 0x12be, 0x3, 0x2, 0x2, 
       0x2, 0x1294, 0x1295, 0x7, 0x88, 0x2, 0x2, 0x1295, 0x1296, 0x7, 0x1a7, 
       0x2, 0x2, 0x1296, 0x1299, 0x7, 0x22f, 0x2, 0x2, 0x1297, 0x1298, 0x9, 
       0x46, 0x2, 0x2, 0x1298, 0x129a, 0x5, 0x1de, 0xf0, 0x2, 0x1299, 0x1297, 
       0x3, 0x2, 0x2, 0x2, 0x1299, 0x129a, 0x3, 0x2, 0x2, 0x2, 0x129a, 0x129c, 
       0x3, 0x2, 0x2, 0x2, 0x129b, 0x129d, 0x5, 0x1a2, 0xd2, 0x2, 0x129c, 
       0x129b, 0x3, 0x2, 0x2, 0x2, 0x129c, 0x129d, 0x3, 0x2, 0x2, 0x2, 0x129d, 
       0x12be, 0x3, 0x2, 0x2, 0x2, 0x129e, 0x129f, 0x7, 0x88, 0x2, 0x2, 
       0x129f, 0x12a0, 0x7, 0x1bc, 0x2, 0x2, 0x12a0, 0x12a5, 0x5, 0x1a4, 
       0xd3, 0x2, 0x12a1, 0x12a2, 0x7, 0x3b3, 0x2, 0x2, 0x12a2, 0x12a4, 
       0x5, 0x1a4, 0xd3, 0x2, 0x12a3, 0x12a1, 0x3, 0x2, 0x2, 0x2, 0x12a4, 
       0x12a7, 0x3, 0x2, 0x2, 0x2, 0x12a5, 0x12a3, 0x3, 0x2, 0x2, 0x2, 0x12a5, 
       0x12a6, 0x3, 0x2, 0x2, 0x2, 0x12a6, 0x12ab, 0x3, 0x2, 0x2, 0x2, 0x12a7, 
       0x12a5, 0x3, 0x2, 0x2, 0x2, 0x12a8, 0x12a9, 0x7, 0x39, 0x2, 0x2, 
       0x12a9, 0x12aa, 0x7, 0x1bf, 0x2, 0x2, 0x12aa, 0x12ac, 0x5, 0x1e4, 
       0xf3, 0x2, 0x12ab, 0x12a8, 0x3, 0x2, 0x2, 0x2, 0x12ab, 0x12ac, 0x3, 
       0x2, 0x2, 0x2, 0x12ac, 0x12ad, 0x3, 0x2, 0x2, 0x2, 0x12ad, 0x12b1, 
       0x7, 0x56, 0x2, 0x2, 0x12ae, 0x12af, 0x5, 0x1e4, 0xf3, 0x2, 0x12af, 
       0x12b0, 0x7, 0x3b3, 0x2, 0x2, 0x12b0, 0x12b2, 0x3, 0x2, 0x2, 0x2, 
       0x12b1, 0x12ae, 0x3, 0x2, 0x2, 0x2, 0x12b1, 0x12b2, 0x3, 0x2, 0x2, 
       0x2, 0x12b2, 0x12b3, 0x3, 0x2, 0x2, 0x2, 0x12b3, 0x12b4, 0x5, 0x1e4, 
       0xf3, 0x2, 0x12b4, 0x12be, 0x3, 0x2, 0x2, 0x2, 0x12b5, 0x12b6, 0x7, 
       0x88, 0x2, 0x2, 0x12b6, 0x12b7, 0x7, 0x1e6, 0x2, 0x2, 0x12b7, 0x12bb, 
       0x7, 0x1fa, 0x2, 0x2, 0x12b8, 0x12b9, 0x7, 0x39, 0x2, 0x2, 0x12b9, 
       0x12ba, 0x7, 0x10c, 0x2, 0x2, 0x12ba, 0x12bc, 0x7, 0x3c0, 0x2, 0x2, 
       0x12bb, 0x12b8, 0x3, 0x2, 0x2, 0x2, 0x12bb, 0x12bc, 0x3, 0x2, 0x2, 
       0x2, 0x12bc, 0x12be, 0x3, 0x2, 0x2, 0x2, 0x12bd, 0x11fd, 0x3, 0x2, 
       0x2, 0x2, 0x12bd, 0x1200, 0x3, 0x2, 0x2, 0x2, 0x12bd, 0x1214, 0x3, 
       0x2, 0x2, 0x2, 0x12bd, 0x1227, 0x3, 0x2, 0x2, 0x2, 0x12bd, 0x1235, 
       0x3, 0x2, 0x2, 0x2, 0x12bd, 0x123c, 0x3, 0x2, 0x2, 0x2, 0x12bd, 0x1240, 
       0x3, 0x2, 0x2, 0x2, 0x12bd, 0x1244, 0x3, 0x2, 0x2, 0x2, 0x12bd, 0x1249, 
       0x3, 0x2, 0x2, 0x2, 0x12bd, 0x125d, 0x3, 0x2, 0x2, 0x2, 0x12bd, 0x1266, 
       0x3, 0x2, 0x2, 0x2, 0x12bd, 0x126c, 0x3, 0x2, 0x2, 0x2, 0x12bd, 0x127e, 
       0x3, 0x2, 0x2, 0x2, 0x12bd, 0x1282, 0x3, 0x2, 0x2, 0x2, 0x12bd, 0x1288, 
       0x3, 0x2, 0x2, 0x2, 0x12bd, 0x1294, 0x3, 0x2, 0x2, 0x2, 0x12bd, 0x129e, 
       0x3, 0x2, 0x2, 0x2, 0x12bd, 0x12b5, 0x3, 0x2, 0x2, 0x2, 0x12be, 0x19f, 
       0x3, 0x2, 0x2, 0x2, 0x12bf, 0x12ca, 0x7, 0x3cb, 0x2, 0x2, 0x12c0, 
       0x12ca, 0x7, 0x3cc, 0x2, 0x2, 0x12c1, 0x12c2, 0x7, 0x3b5, 0x2, 0x2, 
       0x12c2, 0x12c4, 0x7, 0x3b5, 0x2, 0x2, 0x12c3, 0x12c1, 0x3, 0x2, 0x2, 
       0x2, 0x12c3, 0x12c4, 0x3, 0x2, 0x2, 0x2, 0x12c4, 0x12c5, 0x3, 0x2, 
       0x2, 0x2, 0x12c5, 0x12c7, 0x9, 0x2f, 0x2, 0x2, 0x12c6, 0x12c3, 0x3, 
       0x2, 0x2, 0x2, 0x12c6, 0x12c7, 0x3, 0x2, 0x2, 0x2, 0x12c7, 0x12c8, 
       0x3, 0x2, 0x2, 0x2, 0x12c8, 0x12ca, 0x5, 0x1de, 0xf0, 0x2, 0x12c9, 
       0x12bf, 0x3, 0x2, 0x2, 0x2, 0x12c9, 0x12c0, 0x3, 0x2, 0x2, 0x2, 0x12c9, 
       0x12c6, 0x3, 0x2, 0x2, 0x2, 0x12ca, 0x1a1, 0x3, 0x2, 0x2, 0x2, 0x12cb, 
       0x12cc, 0x7, 0x55, 0x2, 0x2, 0x12cc, 0x12d0, 0x7, 0x3c0, 0x2, 0x2, 
       0x12cd, 0x12ce, 0x7, 0xa6, 0x2, 0x2, 0x12ce, 0x12d0, 0x5, 0x222, 
       0x112, 0x2, 0x12cf, 0x12cb, 0x3, 0x2, 0x2, 0x2, 0x12cf, 0x12cd, 0x3, 
       0x2, 0x2, 0x2, 0x12d0, 0x1a3, 0x3, 0x2, 0x2, 0x2, 0x12d1, 0x12de, 
       0x7, 0x8, 0x2, 0x2, 0x12d2, 0x12d3, 0x7, 0x106, 0x2, 0x2, 0x12d3, 
       0x12de, 0x7, 0x164, 0x2, 0x2, 0x12d4, 0x12d5, 0x7, 0x11f, 0x2, 0x2, 
       0x12d5, 0x12de, 0x7, 0x203, 0x2, 0x2, 0x12d6, 0x12de, 0x7, 0x122, 
       0x2, 0x2, 0x12d7, 0x12de, 0x7, 0x166, 0x2, 0x2, 0x12d8, 0x12de, 0x7, 
       0x265, 0x2, 0x2, 0x12d9, 0x12da, 0x7, 0x1ac, 0x2, 0x2, 0x12da, 0x12de, 
       0x7, 0x146, 0x2, 0x2, 0x12db, 0x12de, 0x7, 0x1ed, 0x2, 0x2, 0x12dc, 
       0x12de, 0x7, 0x202, 0x2, 0x2, 0x12dd, 0x12d1, 0x3, 0x2, 0x2, 0x2, 
       0x12dd, 0x12d2, 0x3, 0x2, 0x2, 0x2, 0x12dd, 0x12d4, 0x3, 0x2, 0x2, 
       0x2, 0x12dd, 0x12d6, 0x3, 0x2, 0x2, 0x2, 0x12dd, 0x12d7, 0x3, 0x2, 
       0x2, 0x2, 0x12dd, 0x12d8, 0x3, 0x2, 0x2, 0x2, 0x12dd, 0x12d9, 0x3, 
       0x2, 0x2, 0x2, 0x12dd, 0x12db, 0x3, 0x2, 0x2, 0x2, 0x12dd, 0x12dc, 
       0x3, 0x2, 0x2, 0x2, 0x12de, 0x1a5, 0x3, 0x2, 0x2, 0x2, 0x12df, 0x12e0, 
       0x7, 0x104, 0x2, 0x2, 0x12e0, 0x12e1, 0x7, 0x3c0, 0x2, 0x2, 0x12e1, 
       0x1a7, 0x3, 0x2, 0x2, 0x2, 0x12e2, 0x12e3, 0x7, 0x108, 0x2, 0x2, 
       0x12e3, 0x12e4, 0x7, 0x45, 0x2, 0x2, 0x12e4, 0x12e9, 0x5, 0x1b4, 
       0xdb, 0x2, 0x12e5, 0x12e6, 0x7, 0x3b3, 0x2, 0x2, 0x12e6, 0x12e8, 
       0x5, 0x1b4, 0xdb, 0x2, 0x12e7, 0x12e5, 0x3, 0x2, 0x2, 0x2, 0x12e8, 
       0x12eb, 0x3, 0x2, 0x2, 0x2, 0x12e9, 0x12e7, 0x3, 0x2, 0x2, 0x2, 0x12e9, 
       0x12ea, 0x3, 0x2, 0x2, 0x2, 0x12ea, 0x12f3, 0x3, 0x2, 0x2, 0x2, 0x12eb, 
       0x12e9, 0x3, 0x2, 0x2, 0x2, 0x12ec, 0x12ed, 0x7, 0x70, 0x2, 0x2, 
       0x12ed, 0x12f0, 0x7, 0x3b1, 0x2, 0x2, 0x12ee, 0x12f1, 0x5, 0x1fe, 
       0x100, 0x2, 0x12ef, 0x12f1, 0x7, 0x8, 0x2, 0x2, 0x12f0, 0x12ee, 0x3, 
       0x2, 0x2, 0x2, 0x12f0, 0x12ef, 0x3, 0x2, 0x2, 0x2, 0x12f1, 0x12f2, 
       0x3, 0x2, 0x2, 0x2, 0x12f2, 0x12f4, 0x7, 0x3b2, 0x2, 0x2, 0x12f3, 
       0x12ec, 0x3, 0x2, 0x2, 0x2, 0x12f3, 0x12f4, 0x3, 0x2, 0x2, 0x2, 0x12f4, 
       0x12f5, 0x3, 0x2, 0x2, 0x2, 0x12f5, 0x12f6, 0x7, 0x44, 0x2, 0x2, 
       0x12f6, 0x12f7, 0x5, 0x1de, 0xf0, 0x2, 0x12f7, 0x1a9, 0x3, 0x2, 0x2, 
       0x2, 0x12f8, 0x12fa, 0x7, 0x14c, 0x2, 0x2, 0x12f9, 0x12fb, 0x9, 0x41, 
       0x2, 0x2, 0x12fa, 0x12f9, 0x3, 0x2, 0x2, 0x2, 0x12fa, 0x12fb, 0x3, 
       0x2, 0x2, 0x2, 0x12fb, 0x12fc, 0x3, 0x2, 0x2, 0x2, 0x12fc, 0x1301, 
       0x5, 0x1b6, 0xdc, 0x2, 0x12fd, 0x12fe, 0x7, 0x3b3, 0x2, 0x2, 0x12fe, 
       0x1300, 0x5, 0x1b6, 0xdc, 0x2, 0x12ff, 0x12fd, 0x3, 0x2, 0x2, 0x2, 
       0x1300, 0x1303, 0x3, 0x2, 0x2, 0x2, 0x1301, 0x12ff, 0x3, 0x2, 0x2, 
       0x2, 0x1301, 0x1302, 0x3, 0x2, 0x2, 0x2, 0x1302, 0x1ab, 0x3, 0x2, 
       0x2, 0x2, 0x1303, 0x1301, 0x3, 0x2, 0x2, 0x2, 0x1304, 0x1306, 0x7, 
       0x51, 0x2, 0x2, 0x1305, 0x1307, 0x9, 0x4c, 0x2, 0x2, 0x1306, 0x1305, 
       0x3, 0x2, 0x2, 0x2, 0x1306, 0x1307, 0x3, 0x2, 0x2, 0x2, 0x1307, 0x1309, 
       0x3, 0x2, 0x2, 0x2, 0x1308, 0x130a, 0x5, 0x1e4, 0xf3, 0x2, 0x1309, 
       0x1308, 0x3, 0x2, 0x2, 0x2, 0x130a, 0x130b, 0x3, 0x2, 0x2, 0x2, 0x130b, 
       0x1309, 0x3, 0x2, 0x2, 0x2, 0x130b, 0x130c, 0x3, 0x2, 0x2, 0x2, 0x130c, 
       0x1ad, 0x3, 0x2, 0x2, 0x2, 0x130d, 0x130e, 0x7, 0x59, 0x2, 0x2, 0x130e, 
       0x130f, 0x7, 0x45, 0x2, 0x2, 0x130f, 0x1310, 0x7, 0x4b, 0x2, 0x2, 
       0x1310, 0x1311, 0x7, 0x108, 0x2, 0x2, 0x1311, 0x1316, 0x5, 0x1b8, 
       0xdd, 0x2, 0x1312, 0x1313, 0x7, 0x3b3, 0x2, 0x2, 0x1313, 0x1315, 
       0x5, 0x1b8, 0xdd, 0x2, 0x1314, 0x1312, 0x3, 0x2, 0x2, 0x2, 0x1315, 
       0x1318, 0x3, 0x2, 0x2, 0x2, 0x1316, 0x1314, 0x3, 0x2, 0x2, 0x2, 0x1316, 
       0x1317, 0x3, 0x2, 0x2, 0x2, 0x1317, 0x1af, 0x3, 0x2, 0x2, 0x2, 0x1318, 
       0x1316, 0x3, 0x2, 0x2, 0x2, 0x1319, 0x131a, 0x7, 0x1d4, 0x2, 0x2, 
       0x131a, 0x131b, 0x7, 0x1bf, 0x2, 0x2, 0x131b, 0x131c, 0x7, 0x108, 
       0x2, 0x2, 0x131c, 0x1b1, 0x3, 0x2, 0x2, 0x2, 0x131d, 0x131e, 0x7, 
       0x235, 0x2, 0x2, 0x131e, 0x1b3, 0x3, 0x2, 0x2, 0x2, 0x131f, 0x1327, 
       0x5, 0x1c4, 0xe3, 0x2, 0x1320, 0x1322, 0x9, 0x13, 0x2, 0x2, 0x1321, 
       0x1320, 0x3, 0x2, 0x2, 0x2, 0x1321, 0x1322, 0x3, 0x2, 0x2, 0x2, 0x1322, 
       0x1323, 0x3, 0x2, 0x2, 0x2, 0x1323, 0x1324, 0x7, 0x3b1, 0x2, 0x2, 
       0x1324, 0x1325, 0x5, 0x1fe, 0x100, 0x2, 0x1325, 0x1326, 0x7, 0x3b2, 
       0x2, 0x2, 0x1326, 0x1328, 0x3, 0x2, 0x2, 0x2, 0x1327, 0x1321, 0x3, 
       0x2, 0x2, 0x2, 0x1327, 0x1328, 0x3, 0x2, 0x2, 0x2, 0x1328, 0x1b5, 
       0x3, 0x2, 0x2, 0x2, 0x1329, 0x134a, 0x7, 0x129, 0x2, 0x2, 0x132a, 
       0x134a, 0x7, 0x159, 0x2, 0x2, 0x132b, 0x132d, 0x9, 0x4d, 0x2, 0x2, 
       0x132c, 0x132b, 0x3, 0x2, 0x2, 0x2, 0x132c, 0x132d, 0x3, 0x2, 0x2, 
       0x2, 0x132d, 0x132e, 0x3, 0x2, 0x2, 0x2, 0x132e, 0x134a, 0x7, 0x173, 
       0x2, 0x2, 0x132f, 0x1330, 0x7, 0x1c5, 0x2, 0x2, 0x1330, 0x1332, 0x7, 
       0x173, 0x2, 0x2, 0x1331, 0x1333, 0x5, 0x126, 0x94, 0x2, 0x1332, 0x1331, 
       0x3, 0x2, 0x2, 0x2, 0x1332, 0x1333, 0x3, 0x2, 0x2, 0x2, 0x1333, 0x134a, 
       0x3, 0x2, 0x2, 0x2, 0x1334, 0x134a, 0x7, 0x1a8, 0x2, 0x2, 0x1335, 
       0x134a, 0x7, 0x237, 0x2, 0x2, 0x1336, 0x1337, 0x7, 0x1bf, 0x2, 0x2, 
       0x1337, 0x134a, 0x7, 0x108, 0x2, 0x2, 0x1338, 0x134a, 0x7, 0x1fa, 
       0x2, 0x2, 0x1339, 0x134a, 0x7, 0x215, 0x2, 0x2, 0x133a, 0x133e, 0x7, 
       0x22f, 0x2, 0x2, 0x133b, 0x133c, 0x7, 0xa8, 0x2, 0x2, 0x133c, 0x133d, 
       0x7, 0x75, 0x2, 0x2, 0x133d, 0x133f, 0x7, 0x5a, 0x2, 0x2, 0x133e, 
       0x133b, 0x3, 0x2, 0x2, 0x2, 0x133e, 0x133f, 0x3, 0x2, 0x2, 0x2, 0x133f, 
       0x134a, 0x3, 0x2, 0x2, 0x2, 0x1340, 0x1341, 0x7, 0x22f, 0x2, 0x2, 
       0x1341, 0x1347, 0x5, 0x200, 0x101, 0x2, 0x1342, 0x1343, 0x7, 0xa8, 
       0x2, 0x2, 0x1343, 0x1344, 0x7, 0x75, 0x2, 0x2, 0x1344, 0x1348, 0x7, 
       0x5a, 0x2, 0x2, 0x1345, 0x1346, 0x7, 0x39, 0x2, 0x2, 0x1346, 0x1348, 
       0x7, 0x142, 0x2, 0x2, 0x1347, 0x1342, 0x3, 0x2, 0x2, 0x2, 0x1347, 
       0x1345, 0x3, 0x2, 0x2, 0x2, 0x1347, 0x1348, 0x3, 0x2, 0x2, 0x2, 0x1348, 
       0x134a, 0x3, 0x2, 0x2, 0x2, 0x1349, 0x1329, 0x3, 0x2, 0x2, 0x2, 0x1349, 
       0x132a, 0x3, 0x2, 0x2, 0x2, 0x1349, 0x132c, 0x3, 0x2, 0x2, 0x2, 0x1349, 
       0x132f, 0x3, 0x2, 0x2, 0x2, 0x1349, 0x1334, 0x3, 0x2, 0x2, 0x2, 0x1349, 
       0x1335, 0x3, 0x2, 0x2, 0x2, 0x1349, 0x1336, 0x3, 0x2, 0x2, 0x2, 0x1349, 
       0x1338, 0x3, 0x2, 0x2, 0x2, 0x1349, 0x1339, 0x3, 0x2, 0x2, 0x2, 0x1349, 
       0x133a, 0x3, 0x2, 0x2, 0x2, 0x1349, 0x1340, 0x3, 0x2, 0x2, 0x2, 0x134a, 
       0x1b7, 0x3, 0x2, 0x2, 0x2, 0x134b, 0x1353, 0x5, 0x1c4, 0xe3, 0x2, 
       0x134c, 0x134d, 0x7, 0x70, 0x2, 0x2, 0x134d, 0x1350, 0x7, 0x3b1, 
       0x2, 0x2, 0x134e, 0x1351, 0x5, 0x1fe, 0x100, 0x2, 0x134f, 0x1351, 
       0x7, 0x8, 0x2, 0x2, 0x1350, 0x134e, 0x3, 0x2, 0x2, 0x2, 0x1350, 0x134f, 
       0x3, 0x2, 0x2, 0x2, 0x1351, 0x1352, 0x3, 0x2, 0x2, 0x2, 0x1352, 0x1354, 
       0x7, 0x3b2, 0x2, 0x2, 0x1353, 0x134c, 0x3, 0x2, 0x2, 0x2, 0x1353, 
       0x1354, 0x3, 0x2, 0x2, 0x2, 0x1354, 0x135c, 0x3, 0x2, 0x2, 0x2, 0x1355, 
       0x1357, 0x9, 0x13, 0x2, 0x2, 0x1356, 0x1355, 0x3, 0x2, 0x2, 0x2, 
       0x1356, 0x1357, 0x3, 0x2, 0x2, 0x2, 0x1357, 0x1358, 0x3, 0x2, 0x2, 
       0x2, 0x1358, 0x1359, 0x7, 0x3b1, 0x2, 0x2, 0x1359, 0x135a, 0x5, 0x1fe, 
       0x100, 0x2, 0x135a, 0x135b, 0x7, 0x3b2, 0x2, 0x2, 0x135b, 0x135d, 
       0x3, 0x2, 0x2, 0x2, 0x135c, 0x1356, 0x3, 0x2, 0x2, 0x2, 0x135c, 0x135d, 
       0x3, 0x2, 0x2, 0x2, 0x135d, 0x1360, 0x3, 0x2, 0x2, 0x2, 0x135e, 0x135f, 
       0x7, 0x43, 0x2, 0x2, 0x135f, 0x1361, 0x7, 0x16d, 0x2, 0x2, 0x1360, 
       0x135e, 0x3, 0x2, 0x2, 0x2, 0x1360, 0x1361, 0x3, 0x2, 0x2, 0x2, 0x1361, 
       0x1b9, 0x3, 0x2, 0x2, 0x2, 0x1362, 0x1363, 0x9, 0x4e, 0x2, 0x2, 0x1363, 
       0x1366, 0x5, 0x1c4, 0xe3, 0x2, 0x1364, 0x1367, 0x5, 0x1de, 0xf0, 
       0x2, 0x1365, 0x1367, 0x7, 0x3c0, 0x2, 0x2, 0x1366, 0x1364, 0x3, 0x2, 
       0x2, 0x2, 0x1366, 0x1365, 0x3, 0x2, 0x2, 0x2, 0x1366, 0x1367, 0x3, 
       0x2, 0x2, 0x2, 0x1367, 0x1bb, 0x3, 0x2, 0x2, 0x2, 0x1368, 0x136e, 
       0x9, 0x4e, 0x2, 0x2, 0x1369, 0x136f, 0x7, 0x143, 0x2, 0x2, 0x136a, 
       0x136f, 0x7, 0x1b0, 0x2, 0x2, 0x136b, 0x136c, 0x7, 0x2bd, 0x2, 0x2, 
       0x136c, 0x136d, 0x7, 0x3a8, 0x2, 0x2, 0x136d, 0x136f, 0x9, 0x4f, 
       0x2, 0x2, 0x136e, 0x1369, 0x3, 0x2, 0x2, 0x2, 0x136e, 0x136a, 0x3, 
       0x2, 0x2, 0x2, 0x136e, 0x136b, 0x3, 0x2, 0x2, 0x2, 0x136e, 0x136f, 
       0x3, 0x2, 0x2, 0x2, 0x136f, 0x1370, 0x3, 0x2, 0x2, 0x2, 0x1370, 0x1371, 
       0x5, 0x1c2, 0xe2, 0x2, 0x1371, 0x1bd, 0x3, 0x2, 0x2, 0x2, 0x1372, 
       0x1373, 0x7, 0x157, 0x2, 0x2, 0x1373, 0x1374, 0x7, 0x3c0, 0x2, 0x2, 
       0x1374, 0x1bf, 0x3, 0x2, 0x2, 0x2, 0x1375, 0x1376, 0x7, 0xa2, 0x2, 
       0x2, 0x1376, 0x1377, 0x5, 0x1de, 0xf0, 0x2, 0x1377, 0x1c1, 0x3, 0x2, 
       0x2, 0x2, 0x1378, 0x137e, 0x5, 0xaa, 0x56, 0x2, 0x1379, 0x137e, 0x5, 
       0x9c, 0x4f, 0x2, 0x137a, 0x137e, 0x5, 0xa2, 0x52, 0x2, 0x137b, 0x137e, 
       0x5, 0xa8, 0x55, 0x2, 0x137c, 0x137e, 0x5, 0xac, 0x57, 0x2, 0x137d, 
       0x1378, 0x3, 0x2, 0x2, 0x2, 0x137d, 0x1379, 0x3, 0x2, 0x2, 0x2, 0x137d, 
       0x137a, 0x3, 0x2, 0x2, 0x2, 0x137d, 0x137b, 0x3, 0x2, 0x2, 0x2, 0x137d, 
       0x137c, 0x3, 0x2, 0x2, 0x2, 0x137e, 0x1383, 0x3, 0x2, 0x2, 0x2, 0x137f, 
       0x1380, 0x7, 0x39, 0x2, 0x2, 0x1380, 0x1381, 0x7, 0x11c, 0x2, 0x2, 
       0x1381, 0x1383, 0x5, 0x1de, 0xf0, 0x2, 0x1382, 0x137d, 0x3, 0x2, 
       0x2, 0x2, 0x1382, 0x137f, 0x3, 0x2, 0x2, 0x2, 0x1383, 0x1c3, 0x3, 
       0x2, 0x2, 0x2, 0x1384, 0x1388, 0x5, 0x1de, 0xf0, 0x2, 0x1385, 0x1389, 
       0x7, 0x3c7, 0x2, 0x2, 0x1386, 0x1387, 0x7, 0x3b0, 0x2, 0x2, 0x1387, 
       0x1389, 0x5, 0x1de, 0xf0, 0x2, 0x1388, 0x1385, 0x3, 0x2, 0x2, 0x2, 
       0x1388, 0x1386, 0x3, 0x2, 0x2, 0x2, 0x1388, 0x1389, 0x3, 0x2, 0x2, 
       0x2, 0x1389, 0x1c5, 0x3, 0x2, 0x2, 0x2, 0x138a, 0x138e, 0x5, 0x1de, 
       0xf0, 0x2, 0x138b, 0x138f, 0x7, 0x3c7, 0x2, 0x2, 0x138c, 0x138d, 
       0x7, 0x3b0, 0x2, 0x2, 0x138d, 0x138f, 0x5, 0x1de, 0xf0, 0x2, 0x138e, 
       0x138b, 0x3, 0x2, 0x2, 0x2, 0x138e, 0x138c, 0x3, 0x2, 0x2, 0x2, 0x138e, 
       0x138f, 0x3, 0x2, 0x2, 0x2, 0x138f, 0x1c7, 0x3, 0x2, 0x2, 0x2, 0x1390, 
       0x1395, 0x5, 0x1de, 0xf0, 0x2, 0x1391, 0x1393, 0x5, 0x1e2, 0xf2, 
       0x2, 0x1392, 0x1394, 0x5, 0x1e2, 0xf2, 0x2, 0x1393, 0x1392, 0x3, 
       0x2, 0x2, 0x2, 0x1393, 0x1394, 0x3, 0x2, 0x2, 0x2, 0x1394, 0x1396, 
       0x3, 0x2, 0x2, 0x2, 0x1395, 0x1391, 0x3, 0x2, 0x2, 0x2, 0x1395, 0x1396, 
       0x3, 0x2, 0x2, 0x2, 0x1396, 0x1c9, 0x3, 0x2, 0x2, 0x2, 0x1397, 0x139c, 
       0x5, 0x1de, 0xf0, 0x2, 0x1398, 0x1399, 0x7, 0x3b1, 0x2, 0x2, 0x1399, 
       0x139a, 0x5, 0x1e4, 0xf3, 0x2, 0x139a, 0x139b, 0x7, 0x3b2, 0x2, 0x2, 
       0x139b, 0x139d, 0x3, 0x2, 0x2, 0x2, 0x139c, 0x1398, 0x3, 0x2, 0x2, 
       0x2, 0x139c, 0x139d, 0x3, 0x2, 0x2, 0x2, 0x139d, 0x139f, 0x3, 0x2, 
       0x2, 0x2, 0x139e, 0x13a0, 0x9, 0x29, 0x2, 0x2, 0x139f, 0x139e, 0x3, 
       0x2, 0x2, 0x2, 0x139f, 0x13a0, 0x3, 0x2, 0x2, 0x2, 0x13a0, 0x1cb, 
       0x3, 0x2, 0x2, 0x2, 0x13a1, 0x13a2, 0x7, 0x3ca, 0x2, 0x2, 0x13a2, 
       0x1cd, 0x3, 0x2, 0x2, 0x2, 0x13a3, 0x13a4, 0x9, 0x50, 0x2, 0x2, 0x13a4, 
       0x1cf, 0x3, 0x2, 0x2, 0x2, 0x13a5, 0x13aa, 0x7, 0xbe, 0x2, 0x2, 0x13a6, 
       0x13aa, 0x5, 0x232, 0x11a, 0x2, 0x13a7, 0x13aa, 0x7, 0x3c0, 0x2, 
       0x2, 0x13a8, 0x13aa, 0x7, 0x3bd, 0x2, 0x2, 0x13a9, 0x13a5, 0x3, 0x2, 
       0x2, 0x2, 0x13a9, 0x13a6, 0x3, 0x2, 0x2, 0x2, 0x13a9, 0x13a7, 0x3, 
       0x2, 0x2, 0x2, 0x13a9, 0x13a8, 0x3, 0x2, 0x2, 0x2, 0x13aa, 0x1d1, 
       0x3, 0x2, 0x2, 0x2, 0x13ab, 0x13ae, 0x5, 0x1de, 0xf0, 0x2, 0x13ac, 
       0x13ae, 0x7, 0x3c0, 0x2, 0x2, 0x13ad, 0x13ab, 0x3, 0x2, 0x2, 0x2, 
       0x13ad, 0x13ac, 0x3, 0x2, 0x2, 0x2, 0x13ae, 0x1d3, 0x3, 0x2, 0x2, 
       0x2, 0x13af, 0x13b0, 0x9, 0x51, 0x2, 0x2, 0x13b0, 0x1d5, 0x3, 0x2, 
       0x2, 0x2, 0x13b1, 0x13b2, 0x5, 0x1e4, 0xf3, 0x2, 0x13b2, 0x13b3, 
       0x7, 0x3a5, 0x2, 0x2, 0x13b3, 0x13b4, 0x5, 0x1e4, 0xf3, 0x2, 0x13b4, 
       0x13b5, 0x7, 0x3a5, 0x2, 0x2, 0x13b5, 0x13b6, 0x5, 0x1e4, 0xf3, 0x2, 
       0x13b6, 0x13b7, 0x7, 0x3a5, 0x2, 0x2, 0x13b7, 0x13b8, 0x5, 0x1e4, 
       0xf3, 0x2, 0x13b8, 0x13b9, 0x7, 0x3a5, 0x2, 0x2, 0x13b9, 0x13bf, 
       0x5, 0x1e4, 0xf3, 0x2, 0x13ba, 0x13bb, 0x7, 0x3bc, 0x2, 0x2, 0x13bb, 
       0x13bc, 0x5, 0x1e4, 0xf3, 0x2, 0x13bc, 0x13bd, 0x7, 0x3a5, 0x2, 0x2, 
       0x13bd, 0x13be, 0x5, 0x1e4, 0xf3, 0x2, 0x13be, 0x13c0, 0x3, 0x2, 
       0x2, 0x2, 0x13bf, 0x13ba, 0x3, 0x2, 0x2, 0x2, 0x13c0, 0x13c1, 0x3, 
       0x2, 0x2, 0x2, 0x13c1, 0x13bf, 0x3, 0x2, 0x2, 0x2, 0x13c1, 0x13c2, 
       0x3, 0x2, 0x2, 0x2, 0x13c2, 0x1d7, 0x3, 0x2, 0x2, 0x2, 0x13c3, 0x13ca, 
       0x5, 0x1da, 0xee, 0x2, 0x13c4, 0x13c5, 0x7, 0x3b3, 0x2, 0x2, 0x13c5, 
       0x13c8, 0x5, 0x1da, 0xee, 0x2, 0x13c6, 0x13c7, 0x7, 0x3b3, 0x2, 0x2, 
       0x13c7, 0x13c9, 0x5, 0x1e4, 0xf3, 0x2, 0x13c8, 0x13c6, 0x3, 0x2, 
       0x2, 0x2, 0x13c8, 0x13c9, 0x3, 0x2, 0x2, 0x2, 0x13c9, 0x13cb, 0x3, 
       0x2, 0x2, 0x2, 0x13ca, 0x13c4, 0x3, 0x2, 0x2, 0x2, 0x13ca, 0x13cb, 
       0x3, 0x2, 0x2, 0x2, 0x13cb, 0x1d9, 0x3, 0x2, 0x2, 0x2, 0x13cc, 0x13d4, 
       0x7, 0x3c0, 0x2, 0x2, 0x13cd, 0x13d4, 0x7, 0x3c5, 0x2, 0x2, 0x13ce, 
       0x13d0, 0x7, 0x3c2, 0x2, 0x2, 0x13cf, 0x13ce, 0x3, 0x2, 0x2, 0x2, 
       0x13d0, 0x13d1, 0x3, 0x2, 0x2, 0x2, 0x13d1, 0x13cf, 0x3, 0x2, 0x2, 
       0x2, 0x13d1, 0x13d2, 0x3, 0x2, 0x2, 0x2, 0x13d2, 0x13d4, 0x3, 0x2, 
       0x2, 0x2, 0x13d3, 0x13cc, 0x3, 0x2, 0x2, 0x2, 0x13d3, 0x13cd, 0x3, 
       0x2, 0x2, 0x2, 0x13d3, 0x13cf, 0x3, 0x2, 0x2, 0x2, 0x13d4, 0x1db, 
       0x3, 0x2, 0x2, 0x2, 0x13d5, 0x13d8, 0x5, 0x1de, 0xf0, 0x2, 0x13d6, 
       0x13d8, 0x7, 0x3c0, 0x2, 0x2, 0x13d7, 0x13d5, 0x3, 0x2, 0x2, 0x2, 
       0x13d7, 0x13d6, 0x3, 0x2, 0x2, 0x2, 0x13d8, 0x1dd, 0x3, 0x2, 0x2, 
       0x2, 0x13d9, 0x13dd, 0x5, 0x1e0, 0xf1, 0x2, 0x13da, 0x13dd, 0x7, 
       0x3c9, 0x2, 0x2, 0x13db, 0x13dd, 0x7, 0x3bd, 0x2, 0x2, 0x13dc, 0x13d9, 
       0x3, 0x2, 0x2, 0x2, 0x13dc, 0x13da, 0x3, 0x2, 0x2, 0x2, 0x13dc, 0x13db, 
       0x3, 0x2, 0x2, 0x2, 0x13dd, 0x1df, 0x3, 0x2, 0x2, 0x2, 0x13de, 0x13e9, 
       0x7, 0x3c8, 0x2, 0x2, 0x13df, 0x13e9, 0x5, 0x232, 0x11a, 0x2, 0x13e0, 
       0x13e9, 0x5, 0x234, 0x11b, 0x2, 0x13e1, 0x13e9, 0x5, 0x1d4, 0xeb, 
       0x2, 0x13e2, 0x13e9, 0x5, 0x236, 0x11c, 0x2, 0x13e3, 0x13e9, 0x5, 
       0x238, 0x11d, 0x2, 0x13e4, 0x13e9, 0x5, 0x23a, 0x11e, 0x2, 0x13e5, 
       0x13e9, 0x5, 0x23c, 0x11f, 0x2, 0x13e6, 0x13e9, 0x5, 0x23e, 0x120, 
       0x2, 0x13e7, 0x13e9, 0x5, 0x1f6, 0xfc, 0x2, 0x13e8, 0x13de, 0x3, 
       0x2, 0x2, 0x2, 0x13e8, 0x13df, 0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e0, 
       0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e1, 0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e2, 
       0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e3, 0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e4, 
       0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e5, 0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e6, 
       0x3, 0x2, 0x2, 0x2, 0x13e8, 0x13e7, 0x3, 0x2, 0x2, 0x2, 0x13e9, 0x1e1, 
       0x3, 0x2, 0x2, 0x2, 0x13ea, 0x13ee, 0x7, 0x3c7, 0x2, 0x2, 0x13eb, 
       0x13ec, 0x7, 0x3b0, 0x2, 0x2, 0x13ec, 0x13ee, 0x5, 0x1de, 0xf0, 0x2, 
       0x13ed, 0x13ea, 0x3, 0x2, 0x2, 0x2, 0x13ed, 0x13eb, 0x3, 0x2, 0x2, 
       0x2, 0x13ee, 0x1e3, 0x3, 0x2, 0x2, 0x2, 0x13ef, 0x13f0, 0x9, 0x52, 
       0x2, 0x2, 0x13f0, 0x1e5, 0x3, 0x2, 0x2, 0x2, 0x13f1, 0x13f4, 0x7, 
       0x3be, 0x2, 0x2, 0x13f2, 0x13f4, 0x5, 0x1e4, 0xf3, 0x2, 0x13f3, 0x13f1, 
       0x3, 0x2, 0x2, 0x2, 0x13f3, 0x13f2, 0x3, 0x2, 0x2, 0x2, 0x13f4, 0x1e7, 
       0x3, 0x2, 0x2, 0x2, 0x13f5, 0x13f7, 0x7, 0x3c6, 0x2, 0x2, 0x13f6, 
       0x13f5, 0x3, 0x2, 0x2, 0x2, 0x13f6, 0x13f7, 0x3, 0x2, 0x2, 0x2, 0x13f7, 
       0x13f8, 0x3, 0x2, 0x2, 0x2, 0x13f8, 0x13fb, 0x7, 0x3c0, 0x2, 0x2, 
       0x13f9, 0x13fb, 0x7, 0x3bf, 0x2, 0x2, 0x13fa, 0x13f6, 0x3, 0x2, 0x2, 
       0x2, 0x13fa, 0x13f9, 0x3, 0x2, 0x2, 0x2, 0x13fb, 0x13fd, 0x3, 0x2, 
       0x2, 0x2, 0x13fc, 0x13fe, 0x7, 0x3c0, 0x2, 0x2, 0x13fd, 0x13fc, 0x3, 
       0x2, 0x2, 0x2, 0x13fe, 0x13ff, 0x3, 0x2, 0x2, 0x2, 0x13ff, 0x13fd, 
       0x3, 0x2, 0x2, 0x2, 0x13ff, 0x1400, 0x3, 0x2, 0x2, 0x2, 0x1400, 0x140d, 
       0x3, 0x2, 0x2, 0x2, 0x1401, 0x1403, 0x7, 0x3c6, 0x2, 0x2, 0x1402, 
       0x1401, 0x3, 0x2, 0x2, 0x2, 0x1402, 0x1403, 0x3, 0x2, 0x2, 0x2, 0x1403, 
       0x1404, 0x3, 0x2, 0x2, 0x2, 0x1404, 0x1407, 0x7, 0x3c0, 0x2, 0x2, 
       0x1405, 0x1407, 0x7, 0x3bf, 0x2, 0x2, 0x1406, 0x1402, 0x3, 0x2, 0x2, 
       0x2, 0x1406, 0x1405, 0x3, 0x2, 0x2, 0x2, 0x1407, 0x140a, 0x3, 0x2, 
       0x2, 0x2, 0x1408, 0x1409, 0x7, 0x19, 0x2, 0x2, 0x1409, 0x140b, 0x5, 
       0x1d2, 0xea, 0x2, 0x140a, 0x1408, 0x3, 0x2, 0x2, 0x2, 0x140a, 0x140b, 
       0x3, 0x2, 0x2, 0x2, 0x140b, 0x140d, 0x3, 0x2, 0x2, 0x2, 0x140c, 0x13fa, 
       0x3, 0x2, 0x2, 0x2, 0x140c, 0x1406, 0x3, 0x2, 0x2, 0x2, 0x140d, 0x1e9, 
       0x3, 0x2, 0x2, 0x2, 0x140e, 0x140f, 0x9, 0x53, 0x2, 0x2, 0x140f, 
       0x1eb, 0x3, 0x2, 0x2, 0x2, 0x1410, 0x1412, 0x7, 0x3c6, 0x2, 0x2, 
       0x1411, 0x1410, 0x3, 0x2, 0x2, 0x2, 0x1411, 0x1412, 0x3, 0x2, 0x2, 
       0x2, 0x1412, 0x1413, 0x3, 0x2, 0x2, 0x2, 0x1413, 0x1414, 0x7, 0x3c2, 
       0x2, 0x2, 0x1414, 0x1ed, 0x3, 0x2, 0x2, 0x2, 0x1415, 0x1418, 0x7, 
       0x63, 0x2, 0x2, 0x1416, 0x1418, 0x9, 0x54, 0x2, 0x2, 0x1417, 0x1415, 
       0x3, 0x2, 0x2, 0x2, 0x1417, 0x1416, 0x3, 0x2, 0x2, 0x2, 0x1418, 0x1ef, 
       0x3, 0x2, 0x2, 0x2, 0x1419, 0x1422, 0x5, 0x1e8, 0xf5, 0x2, 0x141a, 
       0x1422, 0x5, 0x1e4, 0xf3, 0x2, 0x141b, 0x1422, 0x5, 0x1ec, 0xf7, 
       0x2, 0x141c, 0x1422, 0x5, 0x1ea, 0xf6, 0x2, 0x141d, 0x1422, 0x7, 
       0x3c3, 0x2, 0x2, 0x141e, 0x1422, 0x7, 0x3c5, 0x2, 0x2, 0x141f, 0x1422, 
       0x7, 0x63, 0x2, 0x2, 0x1420, 0x1422, 0x9, 0x54, 0x2, 0x2, 0x1421, 
       0x1419, 0x3, 0x2, 0x2, 0x2, 0x1421, 0x141a, 0x3, 0x2, 0x2, 0x2, 0x1421, 
       0x141b, 0x3, 0x2, 0x2, 0x2, 0x1421, 0x141c, 0x3, 0x2, 0x2, 0x2, 0x1421, 
       0x141d, 0x3, 0x2, 0x2, 0x2, 0x1421, 0x141e, 0x3, 0x2, 0x2, 0x2, 0x1421, 
       0x141f, 0x3, 0x2, 0x2, 0x2, 0x1421, 0x1420, 0x3, 0x2, 0x2, 0x2, 0x1422, 
       0x1f1, 0x3, 0x2, 0x2, 0x2, 0x1423, 0x1425, 0x9, 0x55, 0x2, 0x2, 0x1424, 
       0x1426, 0x5, 0x1f8, 0xfd, 0x2, 0x1425, 0x1424, 0x3, 0x2, 0x2, 0x2, 
       0x1425, 0x1426, 0x3, 0x2, 0x2, 0x2, 0x1426, 0x1428, 0x3, 0x2, 0x2, 
       0x2, 0x1427, 0x1429, 0x7, 0xbe, 0x2, 0x2, 0x1428, 0x1427, 0x3, 0x2, 
       0x2, 0x2, 0x1428, 0x1429, 0x3, 0x2, 0x2, 0x2, 0x1429, 0x142d, 0x3, 
       0x2, 0x2, 0x2, 0x142a, 0x142b, 0x7, 0x17, 0x2, 0x2, 0x142b, 0x142c, 
       0x7, 0x86, 0x2, 0x2, 0x142c, 0x142e, 0x5, 0x1d0, 0xe9, 0x2, 0x142d, 
       0x142a, 0x3, 0x2, 0x2, 0x2, 0x142d, 0x142e, 0x3, 0x2, 0x2, 0x2, 0x142e, 
       0x1431, 0x3, 0x2, 0x2, 0x2, 0x142f, 0x1430, 0x7, 0x19, 0x2, 0x2, 
       0x1430, 0x1432, 0x5, 0x1d2, 0xea, 0x2, 0x1431, 0x142f, 0x3, 0x2, 
       0x2, 0x2, 0x1431, 0x1432, 0x3, 0x2, 0x2, 0x2, 0x1432, 0x146f, 0x3, 
       0x2, 0x2, 0x2, 0x1433, 0x1435, 0x9, 0x56, 0x2, 0x2, 0x1434, 0x1436, 
       0x5, 0x1f8, 0xfd, 0x2, 0x1435, 0x1434, 0x3, 0x2, 0x2, 0x2, 0x1435, 
       0x1436, 0x3, 0x2, 0x2, 0x2, 0x1436, 0x1438, 0x3, 0x2, 0x2, 0x2, 0x1437, 
       0x1439, 0x7, 0x9f, 0x2, 0x2, 0x1438, 0x1437, 0x3, 0x2, 0x2, 0x2, 
       0x1438, 0x1439, 0x3, 0x2, 0x2, 0x2, 0x1439, 0x143b, 0x3, 0x2, 0x2, 
       0x2, 0x143a, 0x143c, 0x7, 0xab, 0x2, 0x2, 0x143b, 0x143a, 0x3, 0x2, 
       0x2, 0x2, 0x143b, 0x143c, 0x3, 0x2, 0x2, 0x2, 0x143c, 0x146f, 0x3, 
       0x2, 0x2, 0x2, 0x143d, 0x143f, 0x9, 0x57, 0x2, 0x2, 0x143e, 0x1440, 
       0x5, 0x1fa, 0xfe, 0x2, 0x143f, 0x143e, 0x3, 0x2, 0x2, 0x2, 0x143f, 
       0x1440, 0x3, 0x2, 0x2, 0x2, 0x1440, 0x1442, 0x3, 0x2, 0x2, 0x2, 0x1441, 
       0x1443, 0x7, 0x9f, 0x2, 0x2, 0x1442, 0x1441, 0x3, 0x2, 0x2, 0x2, 
       0x1442, 0x1443, 0x3, 0x2, 0x2, 0x2, 0x1443, 0x1445, 0x3, 0x2, 0x2, 
       0x2, 0x1444, 0x1446, 0x7, 0xab, 0x2, 0x2, 0x1445, 0x1444, 0x3, 0x2, 
       0x2, 0x2, 0x1445, 0x1446, 0x3, 0x2, 0x2, 0x2, 0x1446, 0x146f, 0x3, 
       0x2, 0x2, 0x2, 0x1447, 0x1449, 0x9, 0x58, 0x2, 0x2, 0x1448, 0x144a, 
       0x5, 0x1fc, 0xff, 0x2, 0x1449, 0x1448, 0x3, 0x2, 0x2, 0x2, 0x1449, 
       0x144a, 0x3, 0x2, 0x2, 0x2, 0x144a, 0x144c, 0x3, 0x2, 0x2, 0x2, 0x144b, 
       0x144d, 0x7, 0x9f, 0x2, 0x2, 0x144c, 0x144b, 0x3, 0x2, 0x2, 0x2, 
       0x144c, 0x144d, 0x3, 0x2, 0x2, 0x2, 0x144d, 0x144f, 0x3, 0x2, 0x2, 
       0x2, 0x144e, 0x1450, 0x7, 0xab, 0x2, 0x2, 0x144f, 0x144e, 0x3, 0x2, 
       0x2, 0x2, 0x144f, 0x1450, 0x3, 0x2, 0x2, 0x2, 0x1450, 0x146f, 0x3, 
       0x2, 0x2, 0x2, 0x1451, 0x146f, 0x9, 0x59, 0x2, 0x2, 0x1452, 0x1454, 
       0x9, 0x5a, 0x2, 0x2, 0x1453, 0x1455, 0x5, 0x1f8, 0xfd, 0x2, 0x1454, 
       0x1453, 0x3, 0x2, 0x2, 0x2, 0x1454, 0x1455, 0x3, 0x2, 0x2, 0x2, 0x1455, 
       0x146f, 0x3, 0x2, 0x2, 0x2, 0x1456, 0x1457, 0x9, 0x5b, 0x2, 0x2, 
       0x1457, 0x1458, 0x7, 0x3b1, 0x2, 0x2, 0x1458, 0x145d, 0x7, 0x3c0, 
       0x2, 0x2, 0x1459, 0x145a, 0x7, 0x3b3, 0x2, 0x2, 0x145a, 0x145c, 0x7, 
       0x3c0, 0x2, 0x2, 0x145b, 0x1459, 0x3, 0x2, 0x2, 0x2, 0x145c, 0x145f, 
       0x3, 0x2, 0x2, 0x2, 0x145d, 0x145b, 0x3, 0x2, 0x2, 0x2, 0x145d, 0x145e, 
       0x3, 0x2, 0x2, 0x2, 0x145e, 0x1460, 0x3, 0x2, 0x2, 0x2, 0x145f, 0x145d, 
       0x3, 0x2, 0x2, 0x2, 0x1460, 0x1462, 0x7, 0x3b2, 0x2, 0x2, 0x1461, 
       0x1463, 0x7, 0xbe, 0x2, 0x2, 0x1462, 0x1461, 0x3, 0x2, 0x2, 0x2, 
       0x1462, 0x1463, 0x3, 0x2, 0x2, 0x2, 0x1463, 0x1467, 0x3, 0x2, 0x2, 
       0x2, 0x1464, 0x1465, 0x7, 0x17, 0x2, 0x2, 0x1465, 0x1466, 0x7, 0x86, 
       0x2, 0x2, 0x1466, 0x1468, 0x5, 0x1d0, 0xe9, 0x2, 0x1467, 0x1464, 
       0x3, 0x2, 0x2, 0x2, 0x1467, 0x1468, 0x3, 0x2, 0x2, 0x2, 0x1468, 0x146b, 
       0x3, 0x2, 0x2, 0x2, 0x1469, 0x146a, 0x7, 0x19, 0x2, 0x2, 0x146a, 
       0x146c, 0x5, 0x1d2, 0xea, 0x2, 0x146b, 0x1469, 0x3, 0x2, 0x2, 0x2, 
       0x146b, 0x146c, 0x3, 0x2, 0x2, 0x2, 0x146c, 0x146f, 0x3, 0x2, 0x2, 
       0x2, 0x146d, 0x146f, 0x5, 0x1f6, 0xfc, 0x2, 0x146e, 0x1423, 0x3, 
       0x2, 0x2, 0x2, 0x146e, 0x1433, 0x3, 0x2, 0x2, 0x2, 0x146e, 0x143d, 
       0x3, 0x2, 0x2, 0x2, 0x146e, 0x1447, 0x3, 0x2, 0x2, 0x2, 0x146e, 0x1451, 
       0x3, 0x2, 0x2, 0x2, 0x146e, 0x1452, 0x3, 0x2, 0x2, 0x2, 0x146e, 0x1456, 
       0x3, 0x2, 0x2, 0x2, 0x146e, 0x146d, 0x3, 0x2, 0x2, 0x2, 0x146f, 0x1f3, 
       0x3, 0x2, 0x2, 0x2, 0x1470, 0x1472, 0x9, 0x5c, 0x2, 0x2, 0x1471, 
       0x1473, 0x5, 0x1f8, 0xfd, 0x2, 0x1472, 0x1471, 0x3, 0x2, 0x2, 0x2, 
       0x1472, 0x1473, 0x3, 0x2, 0x2, 0x2, 0x1473, 0x1489, 0x3, 0x2, 0x2, 
       0x2, 0x1474, 0x1476, 0x7, 0xbc, 0x2, 0x2, 0x1475, 0x1477, 0x5, 0x1f8, 
       0xfd, 0x2, 0x1476, 0x1475, 0x3, 0x2, 0x2, 0x2, 0x1476, 0x1477, 0x3, 
       0x2, 0x2, 0x2, 0x1477, 0x147b, 0x3, 0x2, 0x2, 0x2, 0x1478, 0x1479, 
       0x7, 0x17, 0x2, 0x2, 0x1479, 0x147a, 0x7, 0x86, 0x2, 0x2, 0x147a, 
       0x147c, 0x5, 0x1d0, 0xe9, 0x2, 0x147b, 0x1478, 0x3, 0x2, 0x2, 0x2, 
       0x147b, 0x147c, 0x3, 0x2, 0x2, 0x2, 0x147c, 0x1489, 0x3, 0x2, 0x2, 
       0x2, 0x147d, 0x1489, 0x7, 0xb7, 0x2, 0x2, 0x147e, 0x1489, 0x7, 0xba, 
       0x2, 0x2, 0x147f, 0x1489, 0x7, 0xb8, 0x2, 0x2, 0x1480, 0x1482, 0x7, 
       0xb5, 0x2, 0x2, 0x1481, 0x1483, 0x5, 0x1fa, 0xfe, 0x2, 0x1482, 0x1481, 
       0x3, 0x2, 0x2, 0x2, 0x1482, 0x1483, 0x3, 0x2, 0x2, 0x2, 0x1483, 0x1489, 
       0x3, 0x2, 0x2, 0x2, 0x1484, 0x1486, 0x9, 0x5d, 0x2, 0x2, 0x1485, 
       0x1487, 0x7, 0xb0, 0x2, 0x2, 0x1486, 0x1485, 0x3, 0x2, 0x2, 0x2, 
       0x1486, 0x1487, 0x3, 0x2, 0x2, 0x2, 0x1487, 0x1489, 0x3, 0x2, 0x2, 
       0x2, 0x1488, 0x1470, 0x3, 0x2, 0x2, 0x2, 0x1488, 0x1474, 0x3, 0x2, 
       0x2, 0x2, 0x1488, 0x147d, 0x3, 0x2, 0x2, 0x2, 0x1488, 0x147e, 0x3, 
       0x2, 0x2, 0x2, 0x1488, 0x147f, 0x3, 0x2, 0x2, 0x2, 0x1488, 0x1480, 
       0x3, 0x2, 0x2, 0x2, 0x1488, 0x1484, 0x3, 0x2, 0x2, 0x2, 0x1489, 0x1f5, 
       0x3, 0x2, 0x2, 0x2, 0x148a, 0x148b, 0x9, 0x5e, 0x2, 0x2, 0x148b, 
       0x1f7, 0x3, 0x2, 0x2, 0x2, 0x148c, 0x148d, 0x7, 0x3b1, 0x2, 0x2, 
       0x148d, 0x148e, 0x5, 0x1e4, 0xf3, 0x2, 0x148e, 0x148f, 0x7, 0x3b2, 
       0x2, 0x2, 0x148f, 0x1f9, 0x3, 0x2, 0x2, 0x2, 0x1490, 0x1491, 0x7, 
       0x3b1, 0x2, 0x2, 0x1491, 0x1492, 0x5, 0x1e4, 0xf3, 0x2, 0x1492, 0x1493, 
       0x7, 0x3b3, 0x2, 0x2, 0x1493, 0x1494, 0x5, 0x1e4, 0xf3, 0x2, 0x1494, 
       0x1495, 0x7, 0x3b2, 0x2, 0x2, 0x1495, 0x1fb, 0x3, 0x2, 0x2, 0x2, 
       0x1496, 0x1497, 0x7, 0x3b1, 0x2, 0x2, 0x1497, 0x149a, 0x5, 0x1e4, 
       0xf3, 0x2, 0x1498, 0x1499, 0x7, 0x3b3, 0x2, 0x2, 0x1499, 0x149b, 
       0x5, 0x1e4, 0xf3, 0x2, 0x149a, 0x1498, 0x3, 0x2, 0x2, 0x2, 0x149a, 
       0x149b, 0x3, 0x2, 0x2, 0x2, 0x149b, 0x149c, 0x3, 0x2, 0x2, 0x2, 0x149c, 
       0x149d, 0x7, 0x3b2, 0x2, 0x2, 0x149d, 0x1fd, 0x3, 0x2, 0x2, 0x2, 
       0x149e, 0x14a3, 0x5, 0x1de, 0xf0, 0x2, 0x149f, 0x14a0, 0x7, 0x3b3, 
       0x2, 0x2, 0x14a0, 0x14a2, 0x5, 0x1de, 0xf0, 0x2, 0x14a1, 0x149f, 
       0x3, 0x2, 0x2, 0x2, 0x14a2, 0x14a5, 0x3, 0x2, 0x2, 0x2, 0x14a3, 0x14a1, 
       0x3, 0x2, 0x2, 0x2, 0x14a3, 0x14a4, 0x3, 0x2, 0x2, 0x2, 0x14a4, 0x1ff, 
       0x3, 0x2, 0x2, 0x2, 0x14a5, 0x14a3, 0x3, 0x2, 0x2, 0x2, 0x14a6, 0x14ab, 
       0x5, 0x1c4, 0xe3, 0x2, 0x14a7, 0x14a8, 0x7, 0x3b3, 0x2, 0x2, 0x14a8, 
       0x14aa, 0x5, 0x1c4, 0xe3, 0x2, 0x14a9, 0x14a7, 0x3, 0x2, 0x2, 0x2, 
       0x14aa, 0x14ad, 0x3, 0x2, 0x2, 0x2, 0x14ab, 0x14a9, 0x3, 0x2, 0x2, 
       0x2, 0x14ab, 0x14ac, 0x3, 0x2, 0x2, 0x2, 0x14ac, 0x201, 0x3, 0x2, 
       0x2, 0x2, 0x14ad, 0x14ab, 0x3, 0x2, 0x2, 0x2, 0x14ae, 0x14af, 0x7, 
       0x3b1, 0x2, 0x2, 0x14af, 0x14b0, 0x5, 0x1c4, 0xe3, 0x2, 0x14b0, 0x14b1, 
       0x7, 0x3b3, 0x2, 0x2, 0x14b1, 0x14b2, 0x5, 0x1c4, 0xe3, 0x2, 0x14b2, 
       0x14bc, 0x7, 0x3b2, 0x2, 0x2, 0x14b3, 0x14b4, 0x7, 0x3b3, 0x2, 0x2, 
       0x14b4, 0x14b5, 0x7, 0x3b1, 0x2, 0x2, 0x14b5, 0x14b6, 0x5, 0x1c4, 
       0xe3, 0x2, 0x14b6, 0x14b7, 0x7, 0x3b3, 0x2, 0x2, 0x14b7, 0x14b8, 
       0x5, 0x1c4, 0xe3, 0x2, 0x14b8, 0x14b9, 0x7, 0x3b2, 0x2, 0x2, 0x14b9, 
       0x14bb, 0x3, 0x2, 0x2, 0x2, 0x14ba, 0x14b3, 0x3, 0x2, 0x2, 0x2, 0x14bb, 
       0x14be, 0x3, 0x2, 0x2, 0x2, 0x14bc, 0x14ba, 0x3, 0x2, 0x2, 0x2, 0x14bc, 
       0x14bd, 0x3, 0x2, 0x2, 0x2, 0x14bd, 0x203, 0x3, 0x2, 0x2, 0x2, 0x14be, 
       0x14bc, 0x3, 0x2, 0x2, 0x2, 0x14bf, 0x14c0, 0x7, 0x3b1, 0x2, 0x2, 
       0x14c0, 0x14c5, 0x5, 0x1ca, 0xe6, 0x2, 0x14c1, 0x14c2, 0x7, 0x3b3, 
       0x2, 0x2, 0x14c2, 0x14c4, 0x5, 0x1ca, 0xe6, 0x2, 0x14c3, 0x14c1, 
       0x3, 0x2, 0x2, 0x2, 0x14c4, 0x14c7, 0x3, 0x2, 0x2, 0x2, 0x14c5, 0x14c3, 
       0x3, 0x2, 0x2, 0x2, 0x14c5, 0x14c6, 0x3, 0x2, 0x2, 0x2, 0x14c6, 0x14c8, 
       0x3, 0x2, 0x2, 0x2, 0x14c7, 0x14c5, 0x3, 0x2, 0x2, 0x2, 0x14c8, 0x14c9, 
       0x7, 0x3b2, 0x2, 0x2, 0x14c9, 0x205, 0x3, 0x2, 0x2, 0x2, 0x14ca, 
       0x14cf, 0x5, 0x222, 0x112, 0x2, 0x14cb, 0x14cc, 0x7, 0x3b3, 0x2, 
       0x2, 0x14cc, 0x14ce, 0x5, 0x222, 0x112, 0x2, 0x14cd, 0x14cb, 0x3, 
       0x2, 0x2, 0x2, 0x14ce, 0x14d1, 0x3, 0x2, 0x2, 0x2, 0x14cf, 0x14cd, 
       0x3, 0x2, 0x2, 0x2, 0x14cf, 0x14d0, 0x3, 0x2, 0x2, 0x2, 0x14d0, 0x207, 
       0x3, 0x2, 0x2, 0x2, 0x14d1, 0x14cf, 0x3, 0x2, 0x2, 0x2, 0x14d2, 0x14d7, 
       0x5, 0x1f0, 0xf9, 0x2, 0x14d3, 0x14d4, 0x7, 0x3b3, 0x2, 0x2, 0x14d4, 
       0x14d6, 0x5, 0x1f0, 0xf9, 0x2, 0x14d5, 0x14d3, 0x3, 0x2, 0x2, 0x2, 
       0x14d6, 0x14d9, 0x3, 0x2, 0x2, 0x2, 0x14d7, 0x14d5, 0x3, 0x2, 0x2, 
       0x2, 0x14d7, 0x14d8, 0x3, 0x2, 0x2, 0x2, 0x14d8, 0x209, 0x3, 0x2, 
       0x2, 0x2, 0x14d9, 0x14d7, 0x3, 0x2, 0x2, 0x2, 0x14da, 0x14df, 0x7, 
       0x3c0, 0x2, 0x2, 0x14db, 0x14dc, 0x7, 0x3b3, 0x2, 0x2, 0x14dc, 0x14de, 
       0x7, 0x3c0, 0x2, 0x2, 0x14dd, 0x14db, 0x3, 0x2, 0x2, 0x2, 0x14de, 
       0x14e1, 0x3, 0x2, 0x2, 0x2, 0x14df, 0x14dd, 0x3, 0x2, 0x2, 0x2, 0x14df, 
       0x14e0, 0x3, 0x2, 0x2, 0x2, 0x14e0, 0x20b, 0x3, 0x2, 0x2, 0x2, 0x14e1, 
       0x14df, 0x3, 0x2, 0x2, 0x2, 0x14e2, 0x14e7, 0x7, 0x3cb, 0x2, 0x2, 
       0x14e3, 0x14e4, 0x7, 0x3b3, 0x2, 0x2, 0x14e4, 0x14e6, 0x7, 0x3cb, 
       0x2, 0x2, 0x14e5, 0x14e3, 0x3, 0x2, 0x2, 0x2, 0x14e6, 0x14e9, 0x3, 
       0x2, 0x2, 0x2, 0x14e7, 0x14e5, 0x3, 0x2, 0x2, 0x2, 0x14e7, 0x14e8, 
       0x3, 0x2, 0x2, 0x2, 0x14e8, 0x20d, 0x3, 0x2, 0x2, 0x2, 0x14e9, 0x14e7, 
       0x3, 0x2, 0x2, 0x2, 0x14ea, 0x14ed, 0x7, 0x66, 0x2, 0x2, 0x14eb, 
       0x14ed, 0x5, 0x1f0, 0xf9, 0x2, 0x14ec, 0x14ea, 0x3, 0x2, 0x2, 0x2, 
       0x14ec, 0x14eb, 0x3, 0x2, 0x2, 0x2, 0x14ed, 0x20f, 0x3, 0x2, 0x2, 
       0x2, 0x14ee, 0x14ef, 0x7, 0x42, 0x2, 0x2, 0x14ef, 0x14f0, 0x7, 0x34, 
       0x2, 0x2, 0x14f0, 0x211, 0x3, 0x2, 0x2, 0x2, 0x14f1, 0x14f2, 0x7, 
       0x42, 0x2, 0x2, 0x14f2, 0x14f3, 0x7, 0x64, 0x2, 0x2, 0x14f3, 0x14f4, 
       0x7, 0x34, 0x2, 0x2, 0x14f4, 0x213, 0x3, 0x2, 0x2, 0x2, 0x14f5, 0x1509, 
       0x5, 0x216, 0x10c, 0x2, 0x14f6, 0x1509, 0x5, 0x21a, 0x10e, 0x2, 0x14f7, 
       0x14f8, 0x5, 0x21c, 0x10f, 0x2, 0x14f8, 0x14fa, 0x7, 0x3b1, 0x2, 
       0x2, 0x14f9, 0x14fb, 0x5, 0x21e, 0x110, 0x2, 0x14fa, 0x14f9, 0x3, 
       0x2, 0x2, 0x2, 0x14fa, 0x14fb, 0x3, 0x2, 0x2, 0x2, 0x14fb, 0x14fc, 
       0x3, 0x2, 0x2, 0x2, 0x14fc, 0x14fd, 0x7, 0x3b2, 0x2, 0x2, 0x14fd, 
       0x1509, 0x3, 0x2, 0x2, 0x2, 0x14fe, 0x1500, 0x5, 0x1de, 0xf0, 0x2, 
       0x14ff, 0x1501, 0x5, 0x1e2, 0xf2, 0x2, 0x1500, 0x14ff, 0x3, 0x2, 
       0x2, 0x2, 0x1500, 0x1501, 0x3, 0x2, 0x2, 0x2, 0x1501, 0x1502, 0x3, 
       0x2, 0x2, 0x2, 0x1502, 0x1504, 0x7, 0x3b1, 0x2, 0x2, 0x1503, 0x1505, 
       0x5, 0x21e, 0x110, 0x2, 0x1504, 0x1503, 0x3, 0x2, 0x2, 0x2, 0x1504, 
       0x1505, 0x3, 0x2, 0x2, 0x2, 0x1505, 0x1506, 0x3, 0x2, 0x2, 0x2, 0x1506, 
       0x1507, 0x7, 0x3b2, 0x2, 0x2, 0x1507, 0x1509, 0x3, 0x2, 0x2, 0x2, 
       0x1508, 0x14f5, 0x3, 0x2, 0x2, 0x2, 0x1508, 0x14f6, 0x3, 0x2, 0x2, 
       0x2, 0x1508, 0x14f7, 0x3, 0x2, 0x2, 0x2, 0x1508, 0x14fe, 0x3, 0x2, 
       0x2, 0x2, 0x1509, 0x215, 0x3, 0x2, 0x2, 0x2, 0x150a, 0x15b0, 0x9, 
       0x5f, 0x2, 0x2, 0x150b, 0x150c, 0x7, 0x1e, 0x2, 0x2, 0x150c, 0x150d, 
       0x7, 0x3b1, 0x2, 0x2, 0x150d, 0x150e, 0x5, 0x222, 0x112, 0x2, 0x150e, 
       0x150f, 0x7, 0x3b3, 0x2, 0x2, 0x150f, 0x1510, 0x5, 0x1f4, 0xfb, 0x2, 
       0x1510, 0x1511, 0x7, 0x3b2, 0x2, 0x2, 0x1511, 0x15b0, 0x3, 0x2, 0x2, 
       0x2, 0x1512, 0x1513, 0x7, 0x1e, 0x2, 0x2, 0x1513, 0x1514, 0x7, 0x3b1, 
       0x2, 0x2, 0x1514, 0x1515, 0x5, 0x222, 0x112, 0x2, 0x1515, 0x1516, 
       0x7, 0xa3, 0x2, 0x2, 0x1516, 0x1517, 0x5, 0x1d0, 0xe9, 0x2, 0x1517, 
       0x1518, 0x7, 0x3b2, 0x2, 0x2, 0x1518, 0x15b0, 0x3, 0x2, 0x2, 0x2, 
       0x1519, 0x151a, 0x7, 0x15, 0x2, 0x2, 0x151a, 0x151b, 0x7, 0x3b1, 
       0x2, 0x2, 0x151b, 0x151c, 0x5, 0x222, 0x112, 0x2, 0x151c, 0x151d, 
       0x7, 0xc, 0x2, 0x2, 0x151d, 0x151e, 0x5, 0x1f4, 0xfb, 0x2, 0x151e, 
       0x151f, 0x7, 0x3b2, 0x2, 0x2, 0x151f, 0x15b0, 0x3, 0x2, 0x2, 0x2, 
       0x1520, 0x1521, 0x7, 0xa4, 0x2, 0x2, 0x1521, 0x1522, 0x7, 0x3b1, 
       0x2, 0x2, 0x1522, 0x1523, 0x5, 0x1c8, 0xe5, 0x2, 0x1523, 0x1524, 
       0x7, 0x3b2, 0x2, 0x2, 0x1524, 0x15b0, 0x3, 0x2, 0x2, 0x2, 0x1525, 
       0x1526, 0x7, 0x14, 0x2, 0x2, 0x1526, 0x152c, 0x5, 0x222, 0x112, 0x2, 
       0x1527, 0x1528, 0x7, 0xa5, 0x2, 0x2, 0x1528, 0x1529, 0x5, 0x220, 
       0x111, 0x2, 0x1529, 0x152a, 0x7, 0x96, 0x2, 0x2, 0x152a, 0x152b, 
       0x5, 0x220, 0x111, 0x2, 0x152b, 0x152d, 0x3, 0x2, 0x2, 0x2, 0x152c, 
       0x1527, 0x3, 0x2, 0x2, 0x2, 0x152d, 0x152e, 0x3, 0x2, 0x2, 0x2, 0x152e, 
       0x152c, 0x3, 0x2, 0x2, 0x2, 0x152e, 0x152f, 0x3, 0x2, 0x2, 0x2, 0x152f, 
       0x1532, 0x3, 0x2, 0x2, 0x2, 0x1530, 0x1531, 0x7, 0x30, 0x2, 0x2, 
       0x1531, 0x1533, 0x5, 0x220, 0x111, 0x2, 0x1532, 0x1530, 0x3, 0x2, 
       0x2, 0x2, 0x1532, 0x1533, 0x3, 0x2, 0x2, 0x2, 0x1533, 0x1534, 0x3, 
       0x2, 0x2, 0x2, 0x1534, 0x1535, 0x7, 0x134, 0x2, 0x2, 0x1535, 0x15b0, 
       0x3, 0x2, 0x2, 0x2, 0x1536, 0x153c, 0x7, 0x14, 0x2, 0x2, 0x1537, 
       0x1538, 0x7, 0xa5, 0x2, 0x2, 0x1538, 0x1539, 0x5, 0x220, 0x111, 0x2, 
       0x1539, 0x153a, 0x7, 0x96, 0x2, 0x2, 0x153a, 0x153b, 0x5, 0x220, 
       0x111, 0x2, 0x153b, 0x153d, 0x3, 0x2, 0x2, 0x2, 0x153c, 0x1537, 0x3, 
       0x2, 0x2, 0x2, 0x153d, 0x153e, 0x3, 0x2, 0x2, 0x2, 0x153e, 0x153c, 
       0x3, 0x2, 0x2, 0x2, 0x153e, 0x153f, 0x3, 0x2, 0x2, 0x2, 0x153f, 0x1542, 
       0x3, 0x2, 0x2, 0x2, 0x1540, 0x1541, 0x7, 0x30, 0x2, 0x2, 0x1541, 
       0x1543, 0x5, 0x220, 0x111, 0x2, 0x1542, 0x1540, 0x3, 0x2, 0x2, 0x2, 
       0x1542, 0x1543, 0x3, 0x2, 0x2, 0x2, 0x1543, 0x1544, 0x3, 0x2, 0x2, 
       0x2, 0x1544, 0x1545, 0x7, 0x134, 0x2, 0x2, 0x1545, 0x15b0, 0x3, 0x2, 
       0x2, 0x2, 0x1546, 0x1547, 0x7, 0xbc, 0x2, 0x2, 0x1547, 0x1548, 0x7, 
       0x3b1, 0x2, 0x2, 0x1548, 0x154b, 0x5, 0x21e, 0x110, 0x2, 0x1549, 
       0x154a, 0x7, 0xa3, 0x2, 0x2, 0x154a, 0x154c, 0x5, 0x1d0, 0xe9, 0x2, 
       0x154b, 0x1549, 0x3, 0x2, 0x2, 0x2, 0x154b, 0x154c, 0x3, 0x2, 0x2, 
       0x2, 0x154c, 0x154d, 0x3, 0x2, 0x2, 0x2, 0x154d, 0x154e, 0x7, 0x3b2, 
       0x2, 0x2, 0x154e, 0x15b0, 0x3, 0x2, 0x2, 0x2, 0x154f, 0x1550, 0x7, 
       0xef, 0x2, 0x2, 0x1550, 0x1553, 0x7, 0x3b1, 0x2, 0x2, 0x1551, 0x1554, 
       0x5, 0x1e8, 0xf5, 0x2, 0x1552, 0x1554, 0x5, 0x222, 0x112, 0x2, 0x1553, 
       0x1551, 0x3, 0x2, 0x2, 0x2, 0x1553, 0x1552, 0x3, 0x2, 0x2, 0x2, 0x1554, 
       0x1555, 0x3, 0x2, 0x2, 0x2, 0x1555, 0x1558, 0x7, 0x44, 0x2, 0x2, 
       0x1556, 0x1559, 0x5, 0x1e8, 0xf5, 0x2, 0x1557, 0x1559, 0x5, 0x222, 
       0x112, 0x2, 0x1558, 0x1556, 0x3, 0x2, 0x2, 0x2, 0x1558, 0x1557, 0x3, 
       0x2, 0x2, 0x2, 0x1559, 0x155a, 0x3, 0x2, 0x2, 0x2, 0x155a, 0x155b, 
       0x7, 0x3b2, 0x2, 0x2, 0x155b, 0x15b0, 0x3, 0x2, 0x2, 0x2, 0x155c, 
       0x155d, 0x9, 0x60, 0x2, 0x2, 0x155d, 0x1560, 0x7, 0x3b1, 0x2, 0x2, 
       0x155e, 0x1561, 0x5, 0x1e8, 0xf5, 0x2, 0x155f, 0x1561, 0x5, 0x222, 
       0x112, 0x2, 0x1560, 0x155e, 0x3, 0x2, 0x2, 0x2, 0x1560, 0x155f, 0x3, 
       0x2, 0x2, 0x2, 0x1561, 0x1562, 0x3, 0x2, 0x2, 0x2, 0x1562, 0x1565, 
       0x7, 0x3c, 0x2, 0x2, 0x1563, 0x1566, 0x5, 0x1e4, 0xf3, 0x2, 0x1564, 
       0x1566, 0x5, 0x222, 0x112, 0x2, 0x1565, 0x1563, 0x3, 0x2, 0x2, 0x2, 
       0x1565, 0x1564, 0x3, 0x2, 0x2, 0x2, 0x1566, 0x156c, 0x3, 0x2, 0x2, 
       0x2, 0x1567, 0x156a, 0x7, 0x39, 0x2, 0x2, 0x1568, 0x156b, 0x5, 0x1e4, 
       0xf3, 0x2, 0x1569, 0x156b, 0x5, 0x222, 0x112, 0x2, 0x156a, 0x1568, 
       0x3, 0x2, 0x2, 0x2, 0x156a, 0x1569, 0x3, 0x2, 0x2, 0x2, 0x156b, 0x156d, 
       0x3, 0x2, 0x2, 0x2, 0x156c, 0x1567, 0x3, 0x2, 0x2, 0x2, 0x156c, 0x156d, 
       0x3, 0x2, 0x2, 0x2, 0x156d, 0x156e, 0x3, 0x2, 0x2, 0x2, 0x156e, 0x156f, 
       0x7, 0x3b2, 0x2, 0x2, 0x156f, 0x15b0, 0x3, 0x2, 0x2, 0x2, 0x1570, 
       0x1571, 0x7, 0xf3, 0x2, 0x2, 0x1571, 0x1572, 0x7, 0x3b1, 0x2, 0x2, 
       0x1572, 0x1575, 0x9, 0x61, 0x2, 0x2, 0x1573, 0x1576, 0x5, 0x1e8, 
       0xf5, 0x2, 0x1574, 0x1576, 0x5, 0x222, 0x112, 0x2, 0x1575, 0x1573, 
       0x3, 0x2, 0x2, 0x2, 0x1575, 0x1574, 0x3, 0x2, 0x2, 0x2, 0x1575, 0x1576, 
       0x3, 0x2, 0x2, 0x2, 0x1576, 0x1577, 0x3, 0x2, 0x2, 0x2, 0x1577, 0x157a, 
       0x7, 0x3c, 0x2, 0x2, 0x1578, 0x157b, 0x5, 0x1e8, 0xf5, 0x2, 0x1579, 
       0x157b, 0x5, 0x222, 0x112, 0x2, 0x157a, 0x1578, 0x3, 0x2, 0x2, 0x2, 
       0x157a, 0x1579, 0x3, 0x2, 0x2, 0x2, 0x157b, 0x157c, 0x3, 0x2, 0x2, 
       0x2, 0x157c, 0x157d, 0x7, 0x3b2, 0x2, 0x2, 0x157d, 0x15b0, 0x3, 0x2, 
       0x2, 0x2, 0x157e, 0x157f, 0x7, 0xf3, 0x2, 0x2, 0x157f, 0x1582, 0x7, 
       0x3b1, 0x2, 0x2, 0x1580, 0x1583, 0x5, 0x1e8, 0xf5, 0x2, 0x1581, 0x1583, 
       0x5, 0x222, 0x112, 0x2, 0x1582, 0x1580, 0x3, 0x2, 0x2, 0x2, 0x1582, 
       0x1581, 0x3, 0x2, 0x2, 0x2, 0x1583, 0x1584, 0x3, 0x2, 0x2, 0x2, 0x1584, 
       0x1587, 0x7, 0x3c, 0x2, 0x2, 0x1585, 0x1588, 0x5, 0x1e8, 0xf5, 0x2, 
       0x1586, 0x1588, 0x5, 0x222, 0x112, 0x2, 0x1587, 0x1585, 0x3, 0x2, 
       0x2, 0x2, 0x1587, 0x1586, 0x3, 0x2, 0x2, 0x2, 0x1588, 0x1589, 0x3, 
       0x2, 0x2, 0x2, 0x1589, 0x158a, 0x7, 0x3b2, 0x2, 0x2, 0x158a, 0x15b0, 
       0x3, 0x2, 0x2, 0x2, 0x158b, 0x158c, 0x7, 0x393, 0x2, 0x2, 0x158c, 
       0x158f, 0x7, 0x3b1, 0x2, 0x2, 0x158d, 0x1590, 0x5, 0x1e8, 0xf5, 0x2, 
       0x158e, 0x1590, 0x5, 0x222, 0x112, 0x2, 0x158f, 0x158d, 0x3, 0x2, 
       0x2, 0x2, 0x158f, 0x158e, 0x3, 0x2, 0x2, 0x2, 0x1590, 0x1597, 0x3, 
       0x2, 0x2, 0x2, 0x1591, 0x1592, 0x7, 0xc, 0x2, 0x2, 0x1592, 0x1593, 
       0x9, 0x62, 0x2, 0x2, 0x1593, 0x1594, 0x7, 0x3b1, 0x2, 0x2, 0x1594, 
       0x1595, 0x5, 0x1e4, 0xf3, 0x2, 0x1595, 0x1596, 0x7, 0x3b2, 0x2, 0x2, 
       0x1596, 0x1598, 0x3, 0x2, 0x2, 0x2, 0x1597, 0x1591, 0x3, 0x2, 0x2, 
       0x2, 0x1597, 0x1598, 0x3, 0x2, 0x2, 0x2, 0x1598, 0x159a, 0x3, 0x2, 
       0x2, 0x2, 0x1599, 0x159b, 0x5, 0x218, 0x10d, 0x2, 0x159a, 0x1599, 
       0x3, 0x2, 0x2, 0x2, 0x159a, 0x159b, 0x3, 0x2, 0x2, 0x2, 0x159b, 0x159c, 
       0x3, 0x2, 0x2, 0x2, 0x159c, 0x159d, 0x7, 0x3b2, 0x2, 0x2, 0x159d, 
       0x15b0, 0x3, 0x2, 0x2, 0x2, 0x159e, 0x159f, 0x7, 0xec, 0x2, 0x2, 
       0x159f, 0x15a0, 0x7, 0x3b1, 0x2, 0x2, 0x15a0, 0x15a1, 0x5, 0x3c, 
       0x1f, 0x2, 0x15a1, 0x15a4, 0x7, 0x3c, 0x2, 0x2, 0x15a2, 0x15a5, 0x5, 
       0x1e8, 0xf5, 0x2, 0x15a3, 0x15a5, 0x5, 0x222, 0x112, 0x2, 0x15a4, 
       0x15a2, 0x3, 0x2, 0x2, 0x2, 0x15a4, 0x15a3, 0x3, 0x2, 0x2, 0x2, 0x15a5, 
       0x15a6, 0x3, 0x2, 0x2, 0x2, 0x15a6, 0x15a7, 0x7, 0x3b2, 0x2, 0x2, 
       0x15a7, 0x15b0, 0x3, 0x2, 0x2, 0x2, 0x15a8, 0x15a9, 0x7, 0x2cc, 0x2, 
       0x2, 0x15a9, 0x15aa, 0x7, 0x3b1, 0x2, 0x2, 0x15aa, 0x15ab, 0x9, 0x63, 
       0x2, 0x2, 0x15ab, 0x15ac, 0x7, 0x3b3, 0x2, 0x2, 0x15ac, 0x15ad, 0x5, 
       0x1e8, 0xf5, 0x2, 0x15ad, 0x15ae, 0x7, 0x3b2, 0x2, 0x2, 0x15ae, 0x15b0, 
       0x3, 0x2, 0x2, 0x2, 0x15af, 0x150a, 0x3, 0x2, 0x2, 0x2, 0x15af, 0x150b, 
       0x3, 0x2, 0x2, 0x2, 0x15af, 0x1512, 0x3, 0x2, 0x2, 0x2, 0x15af, 0x1519, 
       0x3, 0x2, 0x2, 0x2, 0x15af, 0x1520, 0x3, 0x2, 0x2, 0x2, 0x15af, 0x1525, 
       0x3, 0x2, 0x2, 0x2, 0x15af, 0x1536, 0x3, 0x2, 0x2, 0x2, 0x15af, 0x1546, 
       0x3, 0x2, 0x2, 0x2, 0x15af, 0x154f, 0x3, 0x2, 0x2, 0x2, 0x15af, 0x155c, 
       0x3, 0x2, 0x2, 0x2, 0x15af, 0x1570, 0x3, 0x2, 0x2, 0x2, 0x15af, 0x157e, 
       0x3, 0x2, 0x2, 0x2, 0x15af, 0x158b, 0x3, 0x2, 0x2, 0x2, 0x15af, 0x159e, 
       0x3, 0x2, 0x2, 0x2, 0x15af, 0x15a8, 0x3, 0x2, 0x2, 0x2, 0x15b0, 0x217, 
       0x3, 0x2, 0x2, 0x2, 0x15b1, 0x15b2, 0x7, 0x16f, 0x2, 0x2, 0x15b2, 
       0x15b4, 0x5, 0x1e4, 0xf3, 0x2, 0x15b3, 0x15b5, 0x9, 0x64, 0x2, 0x2, 
       0x15b4, 0x15b3, 0x3, 0x2, 0x2, 0x2, 0x15b4, 0x15b5, 0x3, 0x2, 0x2, 
       0x2, 0x15b5, 0x15bd, 0x3, 0x2, 0x2, 0x2, 0x15b6, 0x15b7, 0x7, 0x3b3, 
       0x2, 0x2, 0x15b7, 0x15b9, 0x5, 0x1e4, 0xf3, 0x2, 0x15b8, 0x15ba, 
       0x9, 0x64, 0x2, 0x2, 0x15b9, 0x15b8, 0x3, 0x2, 0x2, 0x2, 0x15b9, 
       0x15ba, 0x3, 0x2, 0x2, 0x2, 0x15ba, 0x15bc, 0x3, 0x2, 0x2, 0x2, 0x15bb, 
       0x15b6, 0x3, 0x2, 0x2, 0x2, 0x15bc, 0x15bf, 0x3, 0x2, 0x2, 0x2, 0x15bd, 
       0x15bb, 0x3, 0x2, 0x2, 0x2, 0x15bd, 0x15be, 0x3, 0x2, 0x2, 0x2, 0x15be, 
       0x15c6, 0x3, 0x2, 0x2, 0x2, 0x15bf, 0x15bd, 0x3, 0x2, 0x2, 0x2, 0x15c0, 
       0x15c1, 0x7, 0x16f, 0x2, 0x2, 0x15c1, 0x15c2, 0x5, 0x1e4, 0xf3, 0x2, 
       0x15c2, 0x15c3, 0x7, 0x3a5, 0x2, 0x2, 0x15c3, 0x15c4, 0x5, 0x1e4, 
       0xf3, 0x2, 0x15c4, 0x15c6, 0x3, 0x2, 0x2, 0x2, 0x15c5, 0x15b1, 0x3, 
       0x2, 0x2, 0x2, 0x15c5, 0x15c0, 0x3, 0x2, 0x2, 0x2, 0x15c6, 0x219, 
       0x3, 0x2, 0x2, 0x2, 0x15c7, 0x15c8, 0x9, 0x65, 0x2, 0x2, 0x15c8, 
       0x15ca, 0x7, 0x3b1, 0x2, 0x2, 0x15c9, 0x15cb, 0x9, 0x25, 0x2, 0x2, 
       0x15ca, 0x15c9, 0x3, 0x2, 0x2, 0x2, 0x15ca, 0x15cb, 0x3, 0x2, 0x2, 
       0x2, 0x15cb, 0x15cc, 0x3, 0x2, 0x2, 0x2, 0x15cc, 0x15cd, 0x5, 0x220, 
       0x111, 0x2, 0x15cd, 0x15ce, 0x7, 0x3b2, 0x2, 0x2, 0x15ce, 0x1600, 
       0x3, 0x2, 0x2, 0x2, 0x15cf, 0x15d0, 0x7, 0xd8, 0x2, 0x2, 0x15d0, 
       0x15d6, 0x7, 0x3b1, 0x2, 0x2, 0x15d1, 0x15d7, 0x7, 0x3a1, 0x2, 0x2, 
       0x15d2, 0x15d4, 0x7, 0x8, 0x2, 0x2, 0x15d3, 0x15d2, 0x3, 0x2, 0x2, 
       0x2, 0x15d3, 0x15d4, 0x3, 0x2, 0x2, 0x2, 0x15d4, 0x15d5, 0x3, 0x2, 
       0x2, 0x2, 0x15d5, 0x15d7, 0x5, 0x220, 0x111, 0x2, 0x15d6, 0x15d1, 
       0x3, 0x2, 0x2, 0x2, 0x15d6, 0x15d3, 0x3, 0x2, 0x2, 0x2, 0x15d7, 0x15d8, 
       0x3, 0x2, 0x2, 0x2, 0x15d8, 0x1600, 0x7, 0x3b2, 0x2, 0x2, 0x15d9, 
       0x15da, 0x7, 0xd8, 0x2, 0x2, 0x15da, 0x15db, 0x7, 0x3b1, 0x2, 0x2, 
       0x15db, 0x15dc, 0x7, 0x2c, 0x2, 0x2, 0x15dc, 0x15dd, 0x5, 0x21e, 
       0x110, 0x2, 0x15dd, 0x15de, 0x7, 0x3b2, 0x2, 0x2, 0x15de, 0x1600, 
       0x3, 0x2, 0x2, 0x2, 0x15df, 0x15e0, 0x9, 0x66, 0x2, 0x2, 0x15e0, 
       0x15e2, 0x7, 0x3b1, 0x2, 0x2, 0x15e1, 0x15e3, 0x7, 0x8, 0x2, 0x2, 
       0x15e2, 0x15e1, 0x3, 0x2, 0x2, 0x2, 0x15e2, 0x15e3, 0x3, 0x2, 0x2, 
       0x2, 0x15e3, 0x15e4, 0x3, 0x2, 0x2, 0x2, 0x15e4, 0x15e5, 0x5, 0x220, 
       0x111, 0x2, 0x15e5, 0x15e6, 0x7, 0x3b2, 0x2, 0x2, 0x15e6, 0x1600, 
       0x3, 0x2, 0x2, 0x2, 0x15e7, 0x15e8, 0x7, 0xd9, 0x2, 0x2, 0x15e8, 
       0x15ea, 0x7, 0x3b1, 0x2, 0x2, 0x15e9, 0x15eb, 0x7, 0x2c, 0x2, 0x2, 
       0x15ea, 0x15e9, 0x3, 0x2, 0x2, 0x2, 0x15ea, 0x15eb, 0x3, 0x2, 0x2, 
       0x2, 0x15eb, 0x15ec, 0x3, 0x2, 0x2, 0x2, 0x15ec, 0x15f7, 0x5, 0x21e, 
       0x110, 0x2, 0x15ed, 0x15ee, 0x7, 0x6c, 0x2, 0x2, 0x15ee, 0x15ef, 
       0x7, 0x11, 0x2, 0x2, 0x15ef, 0x15f4, 0x5, 0xc6, 0x64, 0x2, 0x15f0, 
       0x15f1, 0x7, 0x3b3, 0x2, 0x2, 0x15f1, 0x15f3, 0x5, 0xc6, 0x64, 0x2, 
       0x15f2, 0x15f0, 0x3, 0x2, 0x2, 0x2, 0x15f3, 0x15f6, 0x3, 0x2, 0x2, 
       0x2, 0x15f4, 0x15f2, 0x3, 0x2, 0x2, 0x2, 0x15f4, 0x15f5, 0x3, 0x2, 
       0x2, 0x2, 0x15f5, 0x15f8, 0x3, 0x2, 0x2, 0x2, 0x15f6, 0x15f4, 0x3, 
       0x2, 0x2, 0x2, 0x15f7, 0x15ed, 0x3, 0x2, 0x2, 0x2, 0x15f7, 0x15f8, 
       0x3, 0x2, 0x2, 0x2, 0x15f8, 0x15fb, 0x3, 0x2, 0x2, 0x2, 0x15f9, 0x15fa, 
       0x7, 0x87, 0x2, 0x2, 0x15fa, 0x15fc, 0x7, 0x3c0, 0x2, 0x2, 0x15fb, 
       0x15f9, 0x3, 0x2, 0x2, 0x2, 0x15fb, 0x15fc, 0x3, 0x2, 0x2, 0x2, 0x15fc, 
       0x15fd, 0x3, 0x2, 0x2, 0x2, 0x15fd, 0x15fe, 0x7, 0x3b2, 0x2, 0x2, 
       0x15fe, 0x1600, 0x3, 0x2, 0x2, 0x2, 0x15ff, 0x15c7, 0x3, 0x2, 0x2, 
       0x2, 0x15ff, 0x15cf, 0x3, 0x2, 0x2, 0x2, 0x15ff, 0x15d9, 0x3, 0x2, 
       0x2, 0x2, 0x15ff, 0x15df, 0x3, 0x2, 0x2, 0x2, 0x15ff, 0x15e7, 0x3, 
       0x2, 0x2, 0x2, 0x1600, 0x21b, 0x3, 0x2, 0x2, 0x2, 0x1601, 0x1618, 
       0x5, 0x23e, 0x120, 0x2, 0x1602, 0x1618, 0x7, 0x239, 0x2, 0x2, 0x1603, 
       0x1618, 0x7, 0xe8, 0x2, 0x2, 0x1604, 0x1618, 0x7, 0xe4, 0x2, 0x2, 
       0x1605, 0x1618, 0x7, 0xe5, 0x2, 0x2, 0x1606, 0x1618, 0x7, 0xe6, 0x2, 
       0x2, 0x1607, 0x1618, 0x7, 0xe9, 0x2, 0x2, 0x1608, 0x1618, 0x7, 0xea, 
       0x2, 0x2, 0x1609, 0x1618, 0x7, 0xeb, 0x2, 0x2, 0x160a, 0x1618, 0x7, 
       0x42, 0x2, 0x2, 0x160b, 0x1618, 0x7, 0xe7, 0x2, 0x2, 0x160c, 0x1618, 
       0x7, 0xed, 0x2, 0x2, 0x160d, 0x1618, 0x7, 0x191, 0x2, 0x2, 0x160e, 
       0x1618, 0x7, 0xee, 0x2, 0x2, 0x160f, 0x1618, 0x7, 0x7c, 0x2, 0x2, 
       0x1610, 0x1618, 0x7, 0xf0, 0x2, 0x2, 0x1611, 0x1618, 0x7, 0xf1, 0x2, 
       0x2, 0x1612, 0x1618, 0x7, 0xf2, 0x2, 0x2, 0x1613, 0x1618, 0x7, 0xf3, 
       0x2, 0x2, 0x1614, 0x1618, 0x7, 0xf4, 0x2, 0x2, 0x1615, 0x1618, 0x7, 
       0xf5, 0x2, 0x2, 0x1616, 0x1618, 0x7, 0xf6, 0x2, 0x2, 0x1617, 0x1601, 
       0x3, 0x2, 0x2, 0x2, 0x1617, 0x1602, 0x3, 0x2, 0x2, 0x2, 0x1617, 0x1603, 
       0x3, 0x2, 0x2, 0x2, 0x1617, 0x1604, 0x3, 0x2, 0x2, 0x2, 0x1617, 0x1605, 
       0x3, 0x2, 0x2, 0x2, 0x1617, 0x1606, 0x3, 0x2, 0x2, 0x2, 0x1617, 0x1607, 
       0x3, 0x2, 0x2, 0x2, 0x1617, 0x1608, 0x3, 0x2, 0x2, 0x2, 0x1617, 0x1609, 
       0x3, 0x2, 0x2, 0x2, 0x1617, 0x160a, 0x3, 0x2, 0x2, 0x2, 0x1617, 0x160b, 
       0x3, 0x2, 0x2, 0x2, 0x1617, 0x160c, 0x3, 0x2, 0x2, 0x2, 0x1617, 0x160d, 
       0x3, 0x2, 0x2, 0x2, 0x1617, 0x160e, 0x3, 0x2, 0x2, 0x2, 0x1617, 0x160f, 
       0x3, 0x2, 0x2, 0x2, 0x1617, 0x1610, 0x3, 0x2, 0x2, 0x2, 0x1617, 0x1611, 
       0x3, 0x2, 0x2, 0x2, 0x1617, 0x1612, 0x3, 0x2, 0x2, 0x2, 0x1617, 0x1613, 
       0x3, 0x2, 0x2, 0x2, 0x1617, 0x1614, 0x3, 0x2, 0x2, 0x2, 0x1617, 0x1615, 
       0x3, 0x2, 0x2, 0x2, 0x1617, 0x1616, 0x3, 0x2, 0x2, 0x2, 0x1618, 0x21d, 
       0x3, 0x2, 0x2, 0x2, 0x1619, 0x161e, 0x5, 0x1f0, 0xf9, 0x2, 0x161a, 
       0x161e, 0x5, 0x1c8, 0xe5, 0x2, 0x161b, 0x161e, 0x5, 0x214, 0x10b, 
       0x2, 0x161c, 0x161e, 0x5, 0x222, 0x112, 0x2, 0x161d, 0x1619, 0x3, 
       0x2, 0x2, 0x2, 0x161d, 0x161a, 0x3, 0x2, 0x2, 0x2, 0x161d, 0x161b, 
       0x3, 0x2, 0x2, 0x2, 0x161d, 0x161c, 0x3, 0x2, 0x2, 0x2, 0x161e, 0x1628, 
       0x3, 0x2, 0x2, 0x2, 0x161f, 0x1624, 0x7, 0x3b3, 0x2, 0x2, 0x1620, 
       0x1625, 0x5, 0x1f0, 0xf9, 0x2, 0x1621, 0x1625, 0x5, 0x1c8, 0xe5, 
       0x2, 0x1622, 0x1625, 0x5, 0x214, 0x10b, 0x2, 0x1623, 0x1625, 0x5, 
       0x222, 0x112, 0x2, 0x1624, 0x1620, 0x3, 0x2, 0x2, 0x2, 0x1624, 0x1621, 
       0x3, 0x2, 0x2, 0x2, 0x1624, 0x1622, 0x3, 0x2, 0x2, 0x2, 0x1624, 0x1623, 
       0x3, 0x2, 0x2, 0x2, 0x1625, 0x1627, 0x3, 0x2, 0x2, 0x2, 0x1626, 0x161f, 
       0x3, 0x2, 0x2, 0x2, 0x1627, 0x162a, 0x3, 0x2, 0x2, 0x2, 0x1628, 0x1626, 
       0x3, 0x2, 0x2, 0x2, 0x1628, 0x1629, 0x3, 0x2, 0x2, 0x2, 0x1629, 0x21f, 
       0x3, 0x2, 0x2, 0x2, 0x162a, 0x1628, 0x3, 0x2, 0x2, 0x2, 0x162b, 0x1630, 
       0x5, 0x1f0, 0xf9, 0x2, 0x162c, 0x1630, 0x5, 0x1c8, 0xe5, 0x2, 0x162d, 
       0x1630, 0x5, 0x214, 0x10b, 0x2, 0x162e, 0x1630, 0x5, 0x222, 0x112, 
       0x2, 0x162f, 0x162b, 0x3, 0x2, 0x2, 0x2, 0x162f, 0x162c, 0x3, 0x2, 
       0x2, 0x2, 0x162f, 0x162d, 0x3, 0x2, 0x2, 0x2, 0x162f, 0x162e, 0x3, 
       0x2, 0x2, 0x2, 0x1630, 0x221, 0x3, 0x2, 0x2, 0x2, 0x1631, 0x1632, 
       0x8, 0x112, 0x1, 0x2, 0x1632, 0x1633, 0x9, 0x67, 0x2, 0x2, 0x1633, 
       0x163d, 0x5, 0x222, 0x112, 0x6, 0x1634, 0x1635, 0x5, 0x224, 0x113, 
       0x2, 0x1635, 0x1637, 0x7, 0x4c, 0x2, 0x2, 0x1636, 0x1638, 0x7, 0x64, 
       0x2, 0x2, 0x1637, 0x1636, 0x3, 0x2, 0x2, 0x2, 0x1637, 0x1638, 0x3, 
       0x2, 0x2, 0x2, 0x1638, 0x1639, 0x3, 0x2, 0x2, 0x2, 0x1639, 0x163a, 
       0x9, 0x68, 0x2, 0x2, 0x163a, 0x163d, 0x3, 0x2, 0x2, 0x2, 0x163b, 
       0x163d, 0x5, 0x224, 0x113, 0x2, 0x163c, 0x1631, 0x3, 0x2, 0x2, 0x2, 
       0x163c, 0x1634, 0x3, 0x2, 0x2, 0x2, 0x163c, 0x163b, 0x3, 0x2, 0x2, 
       0x2, 0x163d, 0x1644, 0x3, 0x2, 0x2, 0x2, 0x163e, 0x163f, 0xc, 0x5, 
       0x2, 0x2, 0x163f, 0x1640, 0x5, 0x22c, 0x117, 0x2, 0x1640, 0x1641, 
       0x5, 0x222, 0x112, 0x6, 0x1641, 0x1643, 0x3, 0x2, 0x2, 0x2, 0x1642, 
       0x163e, 0x3, 0x2, 0x2, 0x2, 0x1643, 0x1646, 0x3, 0x2, 0x2, 0x2, 0x1644, 
       0x1642, 0x3, 0x2, 0x2, 0x2, 0x1644, 0x1645, 0x3, 0x2, 0x2, 0x2, 0x1645, 
       0x223, 0x3, 0x2, 0x2, 0x2, 0x1646, 0x1644, 0x3, 0x2, 0x2, 0x2, 0x1647, 
       0x164a, 0x8, 0x113, 0x1, 0x2, 0x1648, 0x1649, 0x7, 0x3cb, 0x2, 0x2, 
       0x1649, 0x164b, 0x7, 0x398, 0x2, 0x2, 0x164a, 0x1648, 0x3, 0x2, 0x2, 
       0x2, 0x164a, 0x164b, 0x3, 0x2, 0x2, 0x2, 0x164b, 0x164c, 0x3, 0x2, 
       0x2, 0x2, 0x164c, 0x164d, 0x5, 0x226, 0x114, 0x2, 0x164d, 0x1687, 
       0x3, 0x2, 0x2, 0x2, 0x164e, 0x164f, 0xc, 0x9, 0x2, 0x2, 0x164f, 0x1650, 
       0x5, 0x22a, 0x116, 0x2, 0x1650, 0x1651, 0x5, 0x224, 0x113, 0xa, 0x1651, 
       0x1686, 0x3, 0x2, 0x2, 0x2, 0x1652, 0x1654, 0xc, 0x7, 0x2, 0x2, 0x1653, 
       0x1655, 0x7, 0x64, 0x2, 0x2, 0x1654, 0x1653, 0x3, 0x2, 0x2, 0x2, 
       0x1654, 0x1655, 0x3, 0x2, 0x2, 0x2, 0x1655, 0x1656, 0x3, 0x2, 0x2, 
       0x2, 0x1656, 0x1657, 0x7, 0xf, 0x2, 0x2, 0x1657, 0x1658, 0x5, 0x224, 
       0x113, 0x2, 0x1658, 0x1659, 0x7, 0xb, 0x2, 0x2, 0x1659, 0x165a, 0x5, 
       0x224, 0x113, 0x8, 0x165a, 0x1686, 0x3, 0x2, 0x2, 0x2, 0x165b, 0x165c, 
       0xc, 0x6, 0x2, 0x2, 0x165c, 0x165d, 0x7, 0x1ec, 0x2, 0x2, 0x165d, 
       0x165e, 0x7, 0x55, 0x2, 0x2, 0x165e, 0x1686, 0x5, 0x224, 0x113, 0x7, 
       0x165f, 0x1661, 0xc, 0x4, 0x2, 0x2, 0x1660, 0x1662, 0x7, 0x64, 0x2, 
       0x2, 0x1661, 0x1660, 0x3, 0x2, 0x2, 0x2, 0x1661, 0x1662, 0x3, 0x2, 
       0x2, 0x2, 0x1662, 0x1663, 0x3, 0x2, 0x2, 0x2, 0x1663, 0x1664, 0x9, 
       0x69, 0x2, 0x2, 0x1664, 0x1686, 0x5, 0x224, 0x113, 0x5, 0x1665, 0x1667, 
       0xc, 0xb, 0x2, 0x2, 0x1666, 0x1668, 0x7, 0x64, 0x2, 0x2, 0x1667, 
       0x1666, 0x3, 0x2, 0x2, 0x2, 0x1667, 0x1668, 0x3, 0x2, 0x2, 0x2, 0x1668, 
       0x1669, 0x3, 0x2, 0x2, 0x2, 0x1669, 0x166a, 0x7, 0x44, 0x2, 0x2, 
       0x166a, 0x166d, 0x7, 0x3b1, 0x2, 0x2, 0x166b, 0x166e, 0x5, 0xd2, 
       0x6a, 0x2, 0x166c, 0x166e, 0x5, 0x206, 0x104, 0x2, 0x166d, 0x166b, 
       0x3, 0x2, 0x2, 0x2, 0x166d, 0x166c, 0x3, 0x2, 0x2, 0x2, 0x166e, 0x166f, 
       0x3, 0x2, 0x2, 0x2, 0x166f, 0x1670, 0x7, 0x3b2, 0x2, 0x2, 0x1670, 
       0x1686, 0x3, 0x2, 0x2, 0x2, 0x1671, 0x1672, 0xc, 0xa, 0x2, 0x2, 0x1672, 
       0x1673, 0x7, 0x4c, 0x2, 0x2, 0x1673, 0x1686, 0x5, 0x1ee, 0xf8, 0x2, 
       0x1674, 0x1675, 0xc, 0x8, 0x2, 0x2, 0x1675, 0x1676, 0x5, 0x22a, 0x116, 
       0x2, 0x1676, 0x1677, 0x9, 0x6a, 0x2, 0x2, 0x1677, 0x1678, 0x7, 0x3b1, 
       0x2, 0x2, 0x1678, 0x1679, 0x5, 0xd2, 0x6a, 0x2, 0x1679, 0x167a, 0x7, 
       0x3b2, 0x2, 0x2, 0x167a, 0x1686, 0x3, 0x2, 0x2, 0x2, 0x167b, 0x167d, 
       0xc, 0x5, 0x2, 0x2, 0x167c, 0x167e, 0x7, 0x64, 0x2, 0x2, 0x167d, 
       0x167c, 0x3, 0x2, 0x2, 0x2, 0x167d, 0x167e, 0x3, 0x2, 0x2, 0x2, 0x167e, 
       0x167f, 0x3, 0x2, 0x2, 0x2, 0x167f, 0x1680, 0x7, 0x55, 0x2, 0x2, 
       0x1680, 0x1683, 0x5, 0x224, 0x113, 0x2, 0x1681, 0x1682, 0x7, 0x13a, 
       0x2, 0x2, 0x1682, 0x1684, 0x5, 0x1e8, 0xf5, 0x2, 0x1683, 0x1681, 
       0x3, 0x2, 0x2, 0x2, 0x1683, 0x1684, 0x3, 0x2, 0x2, 0x2, 0x1684, 0x1686, 
       0x3, 0x2, 0x2, 0x2, 0x1685, 0x164e, 0x3, 0x2, 0x2, 0x2, 0x1685, 0x1652, 
       0x3, 0x2, 0x2, 0x2, 0x1685, 0x165b, 0x3, 0x2, 0x2, 0x2, 0x1685, 0x165f, 
       0x3, 0x2, 0x2, 0x2, 0x1685, 0x1665, 0x3, 0x2, 0x2, 0x2, 0x1685, 0x1671, 
       0x3, 0x2, 0x2, 0x2, 0x1685, 0x1674, 0x3, 0x2, 0x2, 0x2, 0x1685, 0x167b, 
       0x3, 0x2, 0x2, 0x2, 0x1686, 0x1689, 0x3, 0x2, 0x2, 0x2, 0x1687, 0x1685, 
       0x3, 0x2, 0x2, 0x2, 0x1687, 0x1688, 0x3, 0x2, 0x2, 0x2, 0x1688, 0x225, 
       0x3, 0x2, 0x2, 0x2, 0x1689, 0x1687, 0x3, 0x2, 0x2, 0x2, 0x168a, 0x168b, 
       0x8, 0x114, 0x1, 0x2, 0x168b, 0x16a5, 0x7, 0x26, 0x2, 0x2, 0x168c, 
       0x16a5, 0x5, 0x1f0, 0xf9, 0x2, 0x168d, 0x16a5, 0x5, 0x1c8, 0xe5, 
       0x2, 0x168e, 0x16a5, 0x5, 0x214, 0x10b, 0x2, 0x168f, 0x16a5, 0x5, 
       0x1ce, 0xe8, 0x2, 0x1690, 0x1691, 0x5, 0x228, 0x115, 0x2, 0x1691, 
       0x1692, 0x5, 0x226, 0x114, 0x9, 0x1692, 0x16a5, 0x3, 0x2, 0x2, 0x2, 
       0x1693, 0x1694, 0x7, 0xbe, 0x2, 0x2, 0x1694, 0x16a5, 0x5, 0x226, 
       0x114, 0x8, 0x1695, 0x1696, 0x7, 0x3b1, 0x2, 0x2, 0x1696, 0x1697, 
       0x5, 0x222, 0x112, 0x2, 0x1697, 0x1698, 0x7, 0x3b2, 0x2, 0x2, 0x1698, 
       0x16a5, 0x3, 0x2, 0x2, 0x2, 0x1699, 0x169b, 0x7, 0x34, 0x2, 0x2, 
       0x169a, 0x1699, 0x3, 0x2, 0x2, 0x2, 0x169a, 0x169b, 0x3, 0x2, 0x2, 
       0x2, 0x169b, 0x169c, 0x3, 0x2, 0x2, 0x2, 0x169c, 0x169d, 0x7, 0x3b1, 
       0x2, 0x2, 0x169d, 0x169e, 0x5, 0xd2, 0x6a, 0x2, 0x169e, 0x169f, 0x7, 
       0x3b2, 0x2, 0x2, 0x169f, 0x16a5, 0x3, 0x2, 0x2, 0x2, 0x16a0, 0x16a1, 
       0x7, 0x4a, 0x2, 0x2, 0x16a1, 0x16a2, 0x5, 0x222, 0x112, 0x2, 0x16a2, 
       0x16a3, 0x5, 0x3c, 0x1f, 0x2, 0x16a3, 0x16a5, 0x3, 0x2, 0x2, 0x2, 
       0x16a4, 0x168a, 0x3, 0x2, 0x2, 0x2, 0x16a4, 0x168c, 0x3, 0x2, 0x2, 
       0x2, 0x16a4, 0x168d, 0x3, 0x2, 0x2, 0x2, 0x16a4, 0x168e, 0x3, 0x2, 
       0x2, 0x2, 0x16a4, 0x168f, 0x3, 0x2, 0x2, 0x2, 0x16a4, 0x1690, 0x3, 
       0x2, 0x2, 0x2, 0x16a4, 0x1693, 0x3, 0x2, 0x2, 0x2, 0x16a4, 0x1695, 
       0x3, 0x2, 0x2, 0x2, 0x16a4, 0x169a, 0x3, 0x2, 0x2, 0x2, 0x16a4, 0x16a0, 
       0x3, 0x2, 0x2, 0x2, 0x16a5, 0x16b0, 0x3, 0x2, 0x2, 0x2, 0x16a6, 0x16a7, 
       0xc, 0x4, 0x2, 0x2, 0x16a7, 0x16a8, 0x5, 0x22e, 0x118, 0x2, 0x16a8, 
       0x16a9, 0x5, 0x226, 0x114, 0x5, 0x16a9, 0x16af, 0x3, 0x2, 0x2, 0x2, 
       0x16aa, 0x16ab, 0xc, 0x3, 0x2, 0x2, 0x16ab, 0x16ac, 0x5, 0x230, 0x119, 
       0x2, 0x16ac, 0x16ad, 0x5, 0x226, 0x114, 0x4, 0x16ad, 0x16af, 0x3, 
       0x2, 0x2, 0x2, 0x16ae, 0x16a6, 0x3, 0x2, 0x2, 0x2, 0x16ae, 0x16aa, 
       0x3, 0x2, 0x2, 0x2, 0x16af, 0x16b2, 0x3, 0x2, 0x2, 0x2, 0x16b0, 0x16ae, 
       0x3, 0x2, 0x2, 0x2, 0x16b0, 0x16b1, 0x3, 0x2, 0x2, 0x2, 0x16b1, 0x227, 
       0x3, 0x2, 0x2, 0x2, 0x16b2, 0x16b0, 0x3, 0x2, 0x2, 0x2, 0x16b3, 0x16b4, 
       0x9, 0x6b, 0x2, 0x2, 0x16b4, 0x229, 0x3, 0x2, 0x2, 0x2, 0x16b5, 0x16c4, 
       0x7, 0x3a8, 0x2, 0x2, 0x16b6, 0x16c4, 0x7, 0x3a9, 0x2, 0x2, 0x16b7, 
       0x16c4, 0x7, 0x3aa, 0x2, 0x2, 0x16b8, 0x16b9, 0x7, 0x3aa, 0x2, 0x2, 
       0x16b9, 0x16c4, 0x7, 0x3a8, 0x2, 0x2, 0x16ba, 0x16bb, 0x7, 0x3a9, 
       0x2, 0x2, 0x16bb, 0x16c4, 0x7, 0x3a8, 0x2, 0x2, 0x16bc, 0x16bd, 0x7, 
       0x3aa, 0x2, 0x2, 0x16bd, 0x16c4, 0x7, 0x3a9, 0x2, 0x2, 0x16be, 0x16bf, 
       0x7, 0x3ab, 0x2, 0x2, 0x16bf, 0x16c4, 0x7, 0x3a8, 0x2, 0x2, 0x16c0, 
       0x16c1, 0x7, 0x3aa, 0x2, 0x2, 0x16c1, 0x16c2, 0x7, 0x3a8, 0x2, 0x2, 
       0x16c2, 0x16c4, 0x7, 0x3a9, 0x2, 0x2, 0x16c3, 0x16b5, 0x3, 0x2, 0x2, 
       0x2, 0x16c3, 0x16b6, 0x3, 0x2, 0x2, 0x2, 0x16c3, 0x16b7, 0x3, 0x2, 
       0x2, 0x2, 0x16c3, 0x16b8, 0x3, 0x2, 0x2, 0x2, 0x16c3, 0x16ba, 0x3, 
       0x2, 0x2, 0x2, 0x16c3, 0x16bc, 0x3, 0x2, 0x2, 0x2, 0x16c3, 0x16be, 
       0x3, 0x2, 0x2, 0x2, 0x16c3, 0x16c0, 0x3, 0x2, 0x2, 0x2, 0x16c4, 0x22b, 
       0x3, 0x2, 0x2, 0x2, 0x16c5, 0x16cd, 0x7, 0xb, 0x2, 0x2, 0x16c6, 0x16c7, 
       0x7, 0x3ae, 0x2, 0x2, 0x16c7, 0x16cd, 0x7, 0x3ae, 0x2, 0x2, 0x16c8, 
       0x16cd, 0x7, 0xaa, 0x2, 0x2, 0x16c9, 0x16cd, 0x7, 0x6b, 0x2, 0x2, 
       0x16ca, 0x16cb, 0x7, 0x3ad, 0x2, 0x2, 0x16cb, 0x16cd, 0x7, 0x3ad, 
       0x2, 0x2, 0x16cc, 0x16c5, 0x3, 0x2, 0x2, 0x2, 0x16cc, 0x16c6, 0x3, 
       0x2, 0x2, 0x2, 0x16cc, 0x16c8, 0x3, 0x2, 0x2, 0x2, 0x16cc, 0x16c9, 
       0x3, 0x2, 0x2, 0x2, 0x16cc, 0x16ca, 0x3, 0x2, 0x2, 0x2, 0x16cd, 0x22d, 
       0x3, 0x2, 0x2, 0x2, 0x16ce, 0x16cf, 0x7, 0x3aa, 0x2, 0x2, 0x16cf, 
       0x16d6, 0x7, 0x3aa, 0x2, 0x2, 0x16d0, 0x16d1, 0x7, 0x3a9, 0x2, 0x2, 
       0x16d1, 0x16d6, 0x7, 0x3a9, 0x2, 0x2, 0x16d2, 0x16d6, 0x7, 0x3ae, 
       0x2, 0x2, 0x16d3, 0x16d6, 0x7, 0x3af, 0x2, 0x2, 0x16d4, 0x16d6, 0x7, 
       0x3ad, 0x2, 0x2, 0x16d5, 0x16ce, 0x3, 0x2, 0x2, 0x2, 0x16d5, 0x16d0, 
       0x3, 0x2, 0x2, 0x2, 0x16d5, 0x16d2, 0x3, 0x2, 0x2, 0x2, 0x16d5, 0x16d3, 
       0x3, 0x2, 0x2, 0x2, 0x16d5, 0x16d4, 0x3, 0x2, 0x2, 0x2, 0x16d6, 0x22f, 
       0x3, 0x2, 0x2, 0x2, 0x16d7, 0x16d8, 0x9, 0x6c, 0x2, 0x2, 0x16d8, 
       0x231, 0x3, 0x2, 0x2, 0x2, 0x16d9, 0x16da, 0x9, 0x6d, 0x2, 0x2, 0x16da, 
       0x233, 0x3, 0x2, 0x2, 0x2, 0x16db, 0x16dc, 0x9, 0x6e, 0x2, 0x2, 0x16dc, 
       0x235, 0x3, 0x2, 0x2, 0x2, 0x16dd, 0x16de, 0x9, 0x6f, 0x2, 0x2, 0x16de, 
       0x237, 0x3, 0x2, 0x2, 0x2, 0x16df, 0x16e0, 0x9, 0x70, 0x2, 0x2, 0x16e0, 
       0x239, 0x3, 0x2, 0x2, 0x2, 0x16e1, 0x16e2, 0x9, 0x71, 0x2, 0x2, 0x16e2, 
       0x23b, 0x3, 0x2, 0x2, 0x2, 0x16e3, 0x16e4, 0x9, 0x72, 0x2, 0x2, 0x16e4, 
       0x23d, 0x3, 0x2, 0x2, 0x2, 0x16e5, 0x16e6, 0x9, 0x73, 0x2, 0x2, 0x16e6, 
       0x23f, 0x3, 0x2, 0x2, 0x2, 0x359, 0x241, 0x245, 0x24c, 0x251, 0x253, 
       0x259, 0x25c, 0x25f, 0x268, 0x28f, 0x29b, 0x2a6, 0x2b7, 0x2bc, 0x2c8, 
       0x2e3, 0x2e9, 0x2ee, 0x2f4, 0x2f9, 0x2fd, 0x306, 0x309, 0x310, 0x314, 
       0x31b, 0x31e, 0x323, 0x32b, 0x330, 0x335, 0x338, 0x343, 0x346, 0x34a, 
       0x34d, 0x351, 0x354, 0x358, 0x35b, 0x35e, 0x362, 0x365, 0x369, 0x36f, 
       0x375, 0x37b, 0x382, 0x389, 0x38f, 0x395, 0x39e, 0x3b1, 0x3b8, 0x3bc, 
       0x3c6, 0x3ca, 0x3ce, 0x3d2, 0x3d6, 0x3db, 0x3de, 0x3e1, 0x3e4, 0x3e7, 
       0x3ed, 0x3f1, 0x3f7, 0x3fc, 0x3ff, 0x402, 0x404, 0x40f, 0x413, 0x416, 
       0x424, 0x427, 0x42b, 0x42e, 0x432, 0x435, 0x439, 0x43c, 0x440, 0x443, 
       0x446, 0x44a, 0x44d, 0x451, 0x457, 0x464, 0x46b, 0x470, 0x473, 0x478, 
       0x480, 0x486, 0x48a, 0x48d, 0x492, 0x496, 0x49a, 0x49d, 0x4a5, 0x4a7, 
       0x4ae, 0x4b4, 0x4bc, 0x4bf, 0x4c6, 0x4c9, 0x4cb, 0x4d1, 0x4d7, 0x4e8, 
       0x4ef, 0x4f8, 0x506, 0x513, 0x518, 0x528, 0x530, 0x53a, 0x540, 0x548, 
       0x54d, 0x556, 0x55a, 0x55c, 0x561, 0x567, 0x56c, 0x56e, 0x572, 0x575, 
       0x578, 0x57e, 0x583, 0x585, 0x58a, 0x594, 0x59b, 0x59f, 0x5a7, 0x5af, 
       0x5b7, 0x5bb, 0x5be, 0x5c4, 0x5c9, 0x5cc, 0x5d2, 0x5d5, 0x5d9, 0x5de, 
       0x5e3, 0x5e7, 0x5ec, 0x5ef, 0x5f4, 0x5f8, 0x5fc, 0x601, 0x606, 0x60b, 
       0x611, 0x616, 0x61b, 0x621, 0x626, 0x62b, 0x630, 0x635, 0x63a, 0x63f, 
       0x644, 0x649, 0x64e, 0x653, 0x65a, 0x65e, 0x666, 0x66b, 0x672, 0x679, 
       0x67b, 0x683, 0x688, 0x695, 0x697, 0x69a, 0x6a2, 0x6a8, 0x6ae, 0x6b8, 
       0x6bd, 0x6c4, 0x6c6, 0x6c9, 0x6cd, 0x6d0, 0x6d4, 0x6d7, 0x6dc, 0x6df, 
       0x6e4, 0x6e7, 0x6eb, 0x6ee, 0x6f2, 0x6f5, 0x6f9, 0x6fc, 0x700, 0x703, 
       0x70a, 0x70d, 0x712, 0x716, 0x719, 0x71d, 0x720, 0x725, 0x728, 0x72d, 
       0x730, 0x734, 0x737, 0x73b, 0x73e, 0x742, 0x745, 0x749, 0x74c, 0x751, 
       0x756, 0x760, 0x764, 0x76b, 0x770, 0x773, 0x778, 0x77f, 0x783, 0x787, 
       0x78f, 0x7a2, 0x7a5, 0x7a8, 0x7ac, 0x7b6, 0x7c3, 0x7ca, 0x7cd, 0x7d6, 
       0x7dc, 0x7e8, 0x7eb, 0x7ef, 0x7f7, 0x7fa, 0x7ff, 0x807, 0x80d, 0x811, 
       0x816, 0x81d, 0x821, 0x82c, 0x834, 0x837, 0x83d, 0x843, 0x845, 0x84a, 
       0x850, 0x856, 0x858, 0x85c, 0x85f, 0x862, 0x868, 0x86e, 0x871, 0x877, 
       0x87d, 0x87f, 0x884, 0x88b, 0x890, 0x898, 0x89c, 0x8a4, 0x8a8, 0x8ad, 
       0x8b4, 0x8b8, 0x8cb, 0x8d8, 0x8db, 0x8e4, 0x8f7, 0x8fe, 0x905, 0x914, 
       0x921, 0x927, 0x92d, 0x933, 0x939, 0x93f, 0x945, 0x94a, 0x951, 0x958, 
       0x95f, 0x962, 0x966, 0x969, 0x976, 0x97d, 0x984, 0x98a, 0x98e, 0x992, 
       0x999, 0x99c, 0x9a1, 0x9a8, 0x9af, 0x9b3, 0x9c1, 0x9c6, 0x9cf, 0x9d2, 
       0x9d6, 0x9df, 0x9e3, 0x9e6, 0x9e9, 0x9f1, 0x9f7, 0xa00, 0xa03, 0xa0e, 
       0xa11, 0xa16, 0xa19, 0xa1e, 0xa28, 0xa2d, 0xa33, 0xa36, 0xa3b, 0xa40, 
       0xa42, 0xa48, 0xa4d, 0xa4f, 0xa55, 0xa5d, 0xa62, 0xa6a, 0xa6d, 0xa72, 
       0xa75, 0xa7a, 0xa82, 0xa8a, 0xa90, 0xa98, 0xa9d, 0xaa5, 0xaa8, 0xaac, 
       0xaaf, 0xab7, 0xabd, 0xac6, 0xac9, 0xad2, 0xadb, 0xae1, 0xae5, 0xae9, 
       0xaeb, 0xaee, 0xaf1, 0xaf9, 0xaff, 0xb03, 0xb06, 0xb09, 0xb0c, 0xb14, 
       0xb16, 0xb1a, 0xb28, 0xb2b, 0xb33, 0xb37, 0xb3a, 0xb3d, 0xb46, 0xb4a, 
       0xb4d, 0xb51, 0xb55, 0xb58, 0xb5b, 0xb60, 0xb66, 0xb6a, 0xb74, 0xb7a, 
       0xb7e, 0xb84, 0xb88, 0xb8e, 0xb91, 0xb9d, 0xba1, 0xba5, 0xbad, 0xbb1, 
       0xbb9, 0xbbc, 0xbc0, 0xbc3, 0xbcb, 0xbd0, 0xbd3, 0xbd6, 0xbda, 0xbdd, 
       0xbe6, 0xbeb, 0xbf4, 0xbf9, 0xc00, 0xc07, 0xc0f, 0xc14, 0xc1c, 0xc1f, 
       0xc22, 0xc29, 0xc2c, 0xc33, 0xc36, 0xc3e, 0xc48, 0xc4a, 0xc51, 0xc5c, 
       0xc62, 0xc66, 0xc71, 0xc76, 0xc78, 0xc7c, 0xc88, 0xc92, 0xc98, 0xc9d, 
       0xca0, 0xca3, 0xca6, 0xcac, 0xcb1, 0xcb4, 0xcb7, 0xcbb, 0xcc1, 0xcc5, 
       0xccf, 0xcd3, 0xcd9, 0xce2, 0xce5, 0xce9, 0xcec, 0xcf0, 0xcf4, 0xcf7, 
       0xcf9, 0xcfe, 0xd03, 0xd07, 0xd13, 0xd19, 0xd1c, 0xd21, 0xd26, 0xd28, 
       0xd2e, 0xd33, 0xd35, 0xd37, 0xd3d, 0xd46, 0xd4b, 0xd4d, 0xd51, 0xd55, 
       0xd5b, 0xd62, 0xd6b, 0xd6e, 0xd72, 0xd76, 0xd7a, 0xd7d, 0xd80, 0xd83, 
       0xd87, 0xd8b, 0xd8e, 0xd91, 0xd94, 0xd9b, 0xd9f, 0xdae, 0xdbb, 0xdc3, 
       0xdcd, 0xdd1, 0xdd4, 0xdd8, 0xddb, 0xdde, 0xde7, 0xdf0, 0xdfa, 0xdfe, 
       0xe08, 0xe17, 0xe1a, 0xe23, 0xe26, 0xe2a, 0xe2f, 0xe33, 0xe3c, 0xe3f, 
       0xe5e, 0xe61, 0xe64, 0xe9a, 0xeb0, 0xebe, 0xec5, 0xec9, 0xecf, 0xed7, 
       0xed9, 0xee4, 0xeee, 0xef9, 0xf01, 0xf06, 0xf0e, 0xf16, 0xf1e, 0xf26, 
       0xf2c, 0xf2e, 0xf32, 0xf37, 0xf3c, 0xf42, 0xf46, 0xf4c, 0xf4e, 0xf59, 
       0xf61, 0xf65, 0xf6c, 0xf6e, 0xf7c, 0xf82, 0xf87, 0xf8c, 0xf92, 0xf99, 
       0xfa1, 0xfa9, 0xfae, 0xfb4, 0xfb7, 0xfbf, 0xfc6, 0xfcf, 0xfd2, 0xfe3, 
       0xfeb, 0xff3, 0xff7, 0x1005, 0x100b, 0x1012, 0x1019, 0x101e, 0x1021, 
       0x1023, 0x1029, 0x102b, 0x102f, 0x1031, 0x1034, 0x103d, 0x1043, 0x104a, 
       0x1051, 0x1056, 0x1059, 0x105b, 0x1061, 0x1063, 0x1067, 0x1069, 0x106c, 
       0x1071, 0x1078, 0x1081, 0x1086, 0x108f, 0x1096, 0x109b, 0x109e, 0x10a0, 
       0x10a6, 0x10a8, 0x10ab, 0x10b7, 0x10bd, 0x10cf, 0x10d4, 0x10dd, 0x10e3, 
       0x10ee, 0x10f1, 0x10fd, 0x1104, 0x1111, 0x111d, 0x1128, 0x112a, 0x1134, 
       0x113e, 0x1148, 0x114c, 0x1150, 0x1159, 0x1174, 0x1183, 0x118a, 0x118e, 
       0x1199, 0x11a0, 0x11a4, 0x11ab, 0x11b0, 0x11b3, 0x11b6, 0x11bf, 0x11c3, 
       0x11e1, 0x11e8, 0x11ec, 0x11f3, 0x11f6, 0x11fb, 0x1205, 0x1209, 0x120f, 
       0x1212, 0x121f, 0x1222, 0x1225, 0x1229, 0x1230, 0x1233, 0x1239, 0x124b, 
       0x1253, 0x125b, 0x1263, 0x1271, 0x1275, 0x1279, 0x127c, 0x1286, 0x128e, 
       0x1292, 0x1299, 0x129c, 0x12a5, 0x12ab, 0x12b1, 0x12bb, 0x12bd, 0x12c3, 
       0x12c6, 0x12c9, 0x12cf, 0x12dd, 0x12e9, 0x12f0, 0x12f3, 0x12fa, 0x1301, 
       0x1306, 0x130b, 0x1316, 0x1321, 0x1327, 0x132c, 0x1332, 0x133e, 0x1347, 
       0x1349, 0x1350, 0x1353, 0x1356, 0x135c, 0x1360, 0x1366, 0x136e, 0x137d, 
       0x1382, 0x1388, 0x138e, 0x1393, 0x1395, 0x139c, 0x139f, 0x13a9, 0x13ad, 
       0x13c1, 0x13c8, 0x13ca, 0x13d1, 0x13d3, 0x13d7, 0x13dc, 0x13e8, 0x13ed, 
       0x13f3, 0x13f6, 0x13fa, 0x13ff, 0x1402, 0x1406, 0x140a, 0x140c, 0x1411, 
       0x1417, 0x1421, 0x1425, 0x1428, 0x142d, 0x1431, 0x1435, 0x1438, 0x143b, 
       0x143f, 0x1442, 0x1445, 0x1449, 0x144c, 0x144f, 0x1454, 0x145d, 0x1462, 
       0x1467, 0x146b, 0x146e, 0x1472, 0x1476, 0x147b, 0x1482, 0x1486, 0x1488, 
       0x149a, 0x14a3, 0x14ab, 0x14bc, 0x14c5, 0x14cf, 0x14d7, 0x14df, 0x14e7, 
       0x14ec, 0x14fa, 0x1500, 0x1504, 0x1508, 0x152e, 0x1532, 0x153e, 0x1542, 
       0x154b, 0x1553, 0x1558, 0x1560, 0x1565, 0x156a, 0x156c, 0x1575, 0x157a, 
       0x1582, 0x1587, 0x158f, 0x1597, 0x159a, 0x15a4, 0x15af, 0x15b4, 0x15b9, 
       0x15bd, 0x15c5, 0x15ca, 0x15d3, 0x15d6, 0x15e2, 0x15ea, 0x15f4, 0x15f7, 
       0x15fb, 0x15ff, 0x1617, 0x161d, 0x1624, 0x1628, 0x162f, 0x1637, 0x163c, 
       0x1644, 0x164a, 0x1654, 0x1661, 0x1667, 0x166d, 0x167d, 0x1683, 0x1685, 
       0x1687, 0x169a, 0x16a4, 0x16ae, 0x16b0, 0x16c3, 0x16cc, 0x16d5, 
  };

  _serializedATN.insert(_serializedATN.end(), serializedATNSegment0,
    serializedATNSegment0 + sizeof(serializedATNSegment0) / sizeof(serializedATNSegment0[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment1,
    serializedATNSegment1 + sizeof(serializedATNSegment1) / sizeof(serializedATNSegment1[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment2,
    serializedATNSegment2 + sizeof(serializedATNSegment2) / sizeof(serializedATNSegment2[0]));


  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

MySqlParser::Initializer MySqlParser::_init;
